(function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object')
        module.exports = factory(require("echarts"));
    else if (typeof define === 'function' && define.amd)
        define(["echarts"], factory);
    else if (typeof exports === 'object')
        exports["echarts-gl"] = factory(require("echarts"));
    else
        root["echarts-gl"] = factory(root["echarts"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {
        return /******/ (function(modules) { // webpackBootstrap
                /******/ // The module cache
                /******/
                var installedModules = {};
                /******/
                /******/ // The require function
                /******/
                function __webpack_require__(moduleId) {
                    /******/
                    /******/ // Check if module is in cache
                    /******/
                    if (installedModules[moduleId]) {
                        /******/
                        return installedModules[moduleId].exports;
                        /******/
                    }
                    /******/ // Create a new module (and put it into the cache)
                    /******/
                    var module = installedModules[moduleId] = {
                        /******/
                        i: moduleId,
                        /******/
                        l: false,
                        /******/
                        exports: {}
                        /******/
                    };
                    /******/
                    /******/ // Execute the module function
                    /******/
                    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
                    /******/
                    /******/ // Flag the module as loaded
                    /******/
                    module.l = true;
                    /******/
                    /******/ // Return the exports of the module
                    /******/
                    return module.exports;
                    /******/
                }
                /******/
                /******/
                /******/ // expose the modules object (__webpack_modules__)
                /******/
                __webpack_require__.m = modules;
                /******/
                /******/ // expose the module cache
                /******/
                __webpack_require__.c = installedModules;
                /******/
                /******/ // define getter function for harmony exports
                /******/
                __webpack_require__.d = function(exports, name, getter) {
                    /******/
                    if (!__webpack_require__.o(exports, name)) {
                        /******/
                        Object.defineProperty(exports, name, {
                            /******/
                            configurable: false,
                            /******/
                            enumerable: true,
                            /******/
                            get: getter
                                /******/
                        });
                        /******/
                    }
                    /******/
                };
                /******/
                /******/ // getDefaultExport function for compatibility with non-harmony modules
                /******/
                __webpack_require__.n = function(module) {
                    /******/
                    var getter = module && module.__esModule ?
                        /******/
                        function getDefault() { return module['default']; } :
                        /******/
                        function getModuleExports() { return module; };
                    /******/
                    __webpack_require__.d(getter, 'a', getter);
                    /******/
                    return getter;
                    /******/
                };
                /******/
                /******/ // Object.prototype.hasOwnProperty.call
                /******/
                __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
                /******/
                /******/ // __webpack_public_path__
                /******/
                __webpack_require__.p = "";
                /******/
                /******/ // Load entry module and return exports
                /******/
                return __webpack_require__(__webpack_require__.s = 9);
                /******/
            })
            /************************************************************************/
            /******/
            ([
                    /* 0 */
                    /***/
                    (function(module, exports) {

                        module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

                        /***/
                    }),
                    /* 1 */
                    /***/
                    (function(module, exports, __webpack_require__) {

                        /**
                         * @fileoverview gl-matrix - High performance matrix and vector operations
                         * @author Brandon Jones
                         * @author Colin MacKenzie IV
                         * @version 2.2.2
                         */

                        /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

                        Redistribution and use in source and binary forms, with or without modification,
                        are permitted provided that the following conditions are met:

                          * Redistributions of source code must retain the above copyright notice, this
                            list of conditions and the following disclaimer.
                          * Redistributions in binary form must reproduce the above copyright notice,
                            this list of conditions and the following disclaimer in the documentation
                            and/or other materials provided with the distribution.

                        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
                        ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
                        ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                        (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
                        LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
                        ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                        (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                        SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */


                        (function(_global) {
                            "use strict";

                            var shim = {};
                            if (false) {
                                if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
                                    shim.exports = {};
                                    define(function() {
                                        return shim.exports;
                                    });
                                } else {
                                    // gl-matrix lives in a browser, define its namespaces in global
                                    shim.exports = typeof(window) !== 'undefined' ? window : _global;
                                }
                            } else {
                                // gl-matrix lives in commonjs, define its namespaces in exports
                                shim.exports = exports;
                            }

                            (function(exports) {
                                /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */


                                if (!GLMAT_EPSILON) {
                                    var GLMAT_EPSILON = 0.000001;
                                }

                                if (!GLMAT_ARRAY_TYPE) {
                                    var GLMAT_ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
                                }

                                if (!GLMAT_RANDOM) {
                                    var GLMAT_RANDOM = Math.random;
                                }

                                /**
                                 * @class Common utilities
                                 * @name glMatrix
                                 */
                                var glMatrix = {};

                                /**
                                 * Sets the type of array used when creating new vectors and matrices
                                 *
                                 * @param {Type} type Array type, such as Float32Array or Array
                                 */
                                glMatrix.setMatrixArrayType = function(type) {
                                    GLMAT_ARRAY_TYPE = type;
                                }

                                if (typeof(exports) !== 'undefined') {
                                    exports.glMatrix = glMatrix;
                                }

                                var degree = Math.PI / 180;

                                /**
                                 * Convert Degree To Radian
                                 *
                                 * @param {Number} Angle in Degrees
                                 */
                                glMatrix.toRadian = function(a) {
                                    return a * degree;
                                };
                                /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

                                Redistribution and use in source and binary forms, with or without modification,
                                are permitted provided that the following conditions are met:

                                  * Redistributions of source code must retain the above copyright notice, this
                                    list of conditions and the following disclaimer.
                                  * Redistributions in binary form must reproduce the above copyright notice,
                                    this list of conditions and the following disclaimer in the documentation
                                    and/or other materials provided with the distribution.

                                THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
                                ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                                DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
                                ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                                (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
                                LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
                                ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                                (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                                SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

                                /**
                                 * @class 2 Dimensional Vector
                                 * @name vec2
                                 */

                                var vec2 = {};

                                /**
                                 * Creates a new, empty vec2
                                 *
                                 * @returns {vec2} a new 2D vector
                                 */
                                vec2.create = function() {
                                    var out = new GLMAT_ARRAY_TYPE(2);
                                    out[0] = 0;
                                    out[1] = 0;
                                    return out;
                                };

                                /**
                                 * Creates a new vec2 initialized with values from an existing vector
                                 *
                                 * @param {vec2} a vector to clone
                                 * @returns {vec2} a new 2D vector
                                 */
                                vec2.clone = function(a) {
                                    var out = new GLMAT_ARRAY_TYPE(2);
                                    out[0] = a[0];
                                    out[1] = a[1];
                                    return out;
                                };

                                /**
                                 * Creates a new vec2 initialized with the given values
                                 *
                                 * @param {Number} x X component
                                 * @param {Number} y Y component
                                 * @returns {vec2} a new 2D vector
                                 */
                                vec2.fromValues = function(x, y) {
                                    var out = new GLMAT_ARRAY_TYPE(2);
                                    out[0] = x;
                                    out[1] = y;
                                    return out;
                                };

                                /**
                                 * Copy the values from one vec2 to another
                                 *
                                 * @param {vec2} out the receiving vector
                                 * @param {vec2} a the source vector
                                 * @returns {vec2} out
                                 */
                                vec2.copy = function(out, a) {
                                    out[0] = a[0];
                                    out[1] = a[1];
                                    return out;
                                };

                                /**
                                 * Set the components of a vec2 to the given values
                                 *
                                 * @param {vec2} out the receiving vector
                                 * @param {Number} x X component
                                 * @param {Number} y Y component
                                 * @returns {vec2} out
                                 */
                                vec2.set = function(out, x, y) {
                                    out[0] = x;
                                    out[1] = y;
                                    return out;
                                };

                                /**
                                 * Adds two vec2's
                                 *
                                 * @param {vec2} out the receiving vector
                                 * @param {vec2} a the first operand
                                 * @param {vec2} b the second operand
                                 * @returns {vec2} out
                                 */
                                vec2.add = function(out, a, b) {
                                    out[0] = a[0] + b[0];
                                    out[1] = a[1] + b[1];
                                    return out;
                                };

                                /**
                                 * Subtracts vector b from vector a
                                 *
                                 * @param {vec2} out the receiving vector
                                 * @param {vec2} a the first operand
                                 * @param {vec2} b the second operand
                                 * @returns {vec2} out
                                 */
                                vec2.subtract = function(out, a, b) {
                                    out[0] = a[0] - b[0];
                                    out[1] = a[1] - b[1];
                                    return out;
                                };

                                /**
                                 * Alias for {@link vec2.subtract}
                                 * @function
                                 */
                                vec2.sub = vec2.subtract;

                                /**
                                 * Multiplies two vec2's
                                 *
                                 * @param {vec2} out the receiving vector
                                 * @param {vec2} a the first operand
                                 * @param {vec2} b the second operand
                                 * @returns {vec2} out
                                 */
                                vec2.multiply = function(out, a, b) {
                                    out[0] = a[0] * b[0];
                                    out[1] = a[1] * b[1];
                                    return out;
                                };

                                /**
                                 * Alias for {@link vec2.multiply}
                                 * @function
                                 */
                                vec2.mul = vec2.multiply;

                                /**
                                 * Divides two vec2's
                                 *
                                 * @param {vec2} out the receiving vector
                                 * @param {vec2} a the first operand
                                 * @param {vec2} b the second operand
                                 * @returns {vec2} out
                                 */
                                vec2.divide = function(out, a, b) {
                                    out[0] = a[0] / b[0];
                                    out[1] = a[1] / b[1];
                                    return out;
                                };

                                /**
                                 * Alias for {@link vec2.divide}
                                 * @function
                                 */
                                vec2.div = vec2.divide;

                                /**
                                 * Returns the minimum of two vec2's
                                 *
                                 * @param {vec2} out the receiving vector
                                 * @param {vec2} a the first operand
                                 * @param {vec2} b the second operand
                                 * @returns {vec2} out
                                 */
                                vec2.min = function(out, a, b) {
                                    out[0] = Math.min(a[0], b[0]);
                                    out[1] = Math.min(a[1], b[1]);
                                    return out;
                                };

                                /**
                                 * Returns the maximum of two vec2's
                                 *
                                 * @param {vec2} out the receiving vector
                                 * @param {vec2} a the first operand
                                 * @param {vec2} b the second operand
                                 * @returns {vec2} out
                                 */
                                vec2.max = function(out, a, b) {
                                    out[0] = Math.max(a[0], b[0]);
                                    out[1] = Math.max(a[1], b[1]);
                                    return out;
                                };

                                /**
                                 * Scales a vec2 by a scalar number
                                 *
                                 * @param {vec2} out the receiving vector
                                 * @param {vec2} a the vector to scale
                                 * @param {Number} b amount to scale the vector by
                                 * @returns {vec2} out
                                 */
                                vec2.scale = function(out, a, b) {
                                    out[0] = a[0] * b;
                                    out[1] = a[1] * b;
                                    return out;
                                };

                                /**
                                 * Adds two vec2's after scaling the second operand by a scalar value
                                 *
                                 * @param {vec2} out the receiving vector
                                 * @param {vec2} a the first operand
                                 * @param {vec2} b the second operand
                                 * @param {Number} scale the amount to scale b by before adding
                                 * @returns {vec2} out
                                 */
                                vec2.scaleAndAdd = function(out, a, b, scale) {
                                    out[0] = a[0] + (b[0] * scale);
                                    out[1] = a[1] + (b[1] * scale);
                                    return out;
                                };

                                /**
                                 * Calculates the euclidian distance between two vec2's
                                 *
                                 * @param {vec2} a the first operand
                                 * @param {vec2} b the second operand
                                 * @returns {Number} distance between a and b
                                 */
                                vec2.distance = function(a, b) {
                                    var x = b[0] - a[0],
                                        y = b[1] - a[1];
                                    return Math.sqrt(x * x + y * y);
                                };

                                /**
                                 * Alias for {@link vec2.distance}
                                 * @function
                                 */
                                vec2.dist = vec2.distance;

                                /**
                                 * Calculates the squared euclidian distance between two vec2's
                                 *
                                 * @param {vec2} a the first operand
                                 * @param {vec2} b the second operand
                                 * @returns {Number} squared distance between a and b
                                 */
                                vec2.squaredDistance = function(a, b) {
                                    var x = b[0] - a[0],
                                        y = b[1] - a[1];
                                    return x * x + y * y;
                                };

                                /**
                                 * Alias for {@link vec2.squaredDistance}
                                 * @function
                                 */
                                vec2.sqrDist = vec2.squaredDistance;

                                /**
                                 * Calculates the length of a vec2
                                 *
                                 * @param {vec2} a vector to calculate length of
                                 * @returns {Number} length of a
                                 */
                                vec2.length = function(a) {
                                    var x = a[0],
                                        y = a[1];
                                    return Math.sqrt(x * x + y * y);
                                };

                                /**
                                 * Alias for {@link vec2.length}
                                 * @function
                                 */
                                vec2.len = vec2.length;

                                /**
                                 * Calculates the squared length of a vec2
                                 *
                                 * @param {vec2} a vector to calculate squared length of
                                 * @returns {Number} squared length of a
                                 */
                                vec2.squaredLength = function(a) {
                                    var x = a[0],
                                        y = a[1];
                                    return x * x + y * y;
                                };

                                /**
                                 * Alias for {@link vec2.squaredLength}
                                 * @function
                                 */
                                vec2.sqrLen = vec2.squaredLength;

                                /**
                                 * Negates the components of a vec2
                                 *
                                 * @param {vec2} out the receiving vector
                                 * @param {vec2} a vector to negate
                                 * @returns {vec2} out
                                 */
                                vec2.negate = function(out, a) {
                                    out[0] = -a[0];
                                    out[1] = -a[1];
                                    return out;
                                };

                                /**
                                 * Returns the inverse of the components of a vec2
                                 *
                                 * @param {vec2} out the receiving vector
                                 * @param {vec2} a vector to invert
                                 * @returns {vec2} out
                                 */
                                vec2.inverse = function(out, a) {
                                    out[0] = 1.0 / a[0];
                                    out[1] = 1.0 / a[1];
                                    return out;
                                };

                                /**
                                 * Normalize a vec2
                                 *
                                 * @param {vec2} out the receiving vector
                                 * @param {vec2} a vector to normalize
                                 * @returns {vec2} out
                                 */
                                vec2.normalize = function(out, a) {
                                    var x = a[0],
                                        y = a[1];
                                    var len = x * x + y * y;
                                    if (len > 0) {
                                        //TODO: evaluate use of glm_invsqrt here?
                                        len = 1 / Math.sqrt(len);
                                        out[0] = a[0] * len;
                                        out[1] = a[1] * len;
                                    }
                                    return out;
                                };

                                /**
                                 * Calculates the dot product of two vec2's
                                 *
                                 * @param {vec2} a the first operand
                                 * @param {vec2} b the second operand
                                 * @returns {Number} dot product of a and b
                                 */
                                vec2.dot = function(a, b) {
                                    return a[0] * b[0] + a[1] * b[1];
                                };

                                /**
                                 * Computes the cross product of two vec2's
                                 * Note that the cross product must by definition produce a 3D vector
                                 *
                                 * @param {vec3} out the receiving vector
                                 * @param {vec2} a the first operand
                                 * @param {vec2} b the second operand
                                 * @returns {vec3} out
                                 */
                                vec2.cross = function(out, a, b) {
                                    var z = a[0] * b[1] - a[1] * b[0];
                                    out[0] = out[1] = 0;
                                    out[2] = z;
                                    return out;
                                };

                                /**
                                 * Performs a linear interpolation between two vec2's
                                 *
                                 * @param {vec2} out the receiving vector
                                 * @param {vec2} a the first operand
                                 * @param {vec2} b the second operand
                                 * @param {Number} t interpolation amount between the two inputs
                                 * @returns {vec2} out
                                 */
                                vec2.lerp = function(out, a, b, t) {
                                    var ax = a[0],
                                        ay = a[1];
                                    out[0] = ax + t * (b[0] - ax);
                                    out[1] = ay + t * (b[1] - ay);
                                    return out;
                                };

                                /**
                                 * Generates a random vector with the given scale
                                 *
                                 * @param {vec2} out the receiving vector
                                 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
                                 * @returns {vec2} out
                                 */
                                vec2.random = function(out, scale) {
                                    scale = scale || 1.0;
                                    var r = GLMAT_RANDOM() * 2.0 * Math.PI;
                                    out[0] = Math.cos(r) * scale;
                                    out[1] = Math.sin(r) * scale;
                                    return out;
                                };

                                /**
                                 * Transforms the vec2 with a mat2
                                 *
                                 * @param {vec2} out the receiving vector
                                 * @param {vec2} a the vector to transform
                                 * @param {mat2} m matrix to transform with
                                 * @returns {vec2} out
                                 */
                                vec2.transformMat2 = function(out, a, m) {
                                    var x = a[0],
                                        y = a[1];
                                    out[0] = m[0] * x + m[2] * y;
                                    out[1] = m[1] * x + m[3] * y;
                                    return out;
                                };

                                /**
                                 * Transforms the vec2 with a mat2d
                                 *
                                 * @param {vec2} out the receiving vector
                                 * @param {vec2} a the vector to transform
                                 * @param {mat2d} m matrix to transform with
                                 * @returns {vec2} out
                                 */
                                vec2.transformMat2d = function(out, a, m) {
                                    var x = a[0],
                                        y = a[1];
                                    out[0] = m[0] * x + m[2] * y + m[4];
                                    out[1] = m[1] * x + m[3] * y + m[5];
                                    return out;
                                };

                                /**
                                 * Transforms the vec2 with a mat3
                                 * 3rd vector component is implicitly '1'
                                 *
                                 * @param {vec2} out the receiving vector
                                 * @param {vec2} a the vector to transform
                                 * @param {mat3} m matrix to transform with
                                 * @returns {vec2} out
                                 */
                                vec2.transformMat3 = function(out, a, m) {
                                    var x = a[0],
                                        y = a[1];
                                    out[0] = m[0] * x + m[3] * y + m[6];
                                    out[1] = m[1] * x + m[4] * y + m[7];
                                    return out;
                                };

                                /**
                                 * Transforms the vec2 with a mat4
                                 * 3rd vector component is implicitly '0'
                                 * 4th vector component is implicitly '1'
                                 *
                                 * @param {vec2} out the receiving vector
                                 * @param {vec2} a the vector to transform
                                 * @param {mat4} m matrix to transform with
                                 * @returns {vec2} out
                                 */
                                vec2.transformMat4 = function(out, a, m) {
                                    var x = a[0],
                                        y = a[1];
                                    out[0] = m[0] * x + m[4] * y + m[12];
                                    out[1] = m[1] * x + m[5] * y + m[13];
                                    return out;
                                };

                                /**
                                 * Perform some operation over an array of vec2s.
                                 *
                                 * @param {Array} a the array of vectors to iterate over
                                 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
                                 * @param {Number} offset Number of elements to skip at the beginning of the array
                                 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
                                 * @param {Function} fn Function to call for each vector in the array
                                 * @param {Object} [arg] additional argument to pass to fn
                                 * @returns {Array} a
                                 * @function
                                 */
                                vec2.forEach = (function() {
                                    var vec = vec2.create();

                                    return function(a, stride, offset, count, fn, arg) {
                                        var i, l;
                                        if (!stride) {
                                            stride = 2;
                                        }

                                        if (!offset) {
                                            offset = 0;
                                        }

                                        if (count) {
                                            l = Math.min((count * stride) + offset, a.length);
                                        } else {
                                            l = a.length;
                                        }

                                        for (i = offset; i < l; i += stride) {
                                            vec[0] = a[i];
                                            vec[1] = a[i + 1];
                                            fn(vec, vec, arg);
                                            a[i] = vec[0];
                                            a[i + 1] = vec[1];
                                        }

                                        return a;
                                    };
                                })();

                                /**
                                 * Returns a string representation of a vector
                                 *
                                 * @param {vec2} vec vector to represent as a string
                                 * @returns {String} string representation of the vector
                                 */
                                vec2.str = function(a) {
                                    return 'vec2(' + a[0] + ', ' + a[1] + ')';
                                };

                                if (typeof(exports) !== 'undefined') {
                                    exports.vec2 = vec2;
                                };
                                /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

                                Redistribution and use in source and binary forms, with or without modification,
                                are permitted provided that the following conditions are met:

                                  * Redistributions of source code must retain the above copyright notice, this
                                    list of conditions and the following disclaimer.
                                  * Redistributions in binary form must reproduce the above copyright notice,
                                    this list of conditions and the following disclaimer in the documentation
                                    and/or other materials provided with the distribution.

                                THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
                                ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                                DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
                                ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                                (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
                                LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
                                ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                                (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                                SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

                                /**
                                 * @class 3 Dimensional Vector
                                 * @name vec3
                                 */

                                var vec3 = {};

                                /**
                                 * Creates a new, empty vec3
                                 *
                                 * @returns {vec3} a new 3D vector
                                 */
                                vec3.create = function() {
                                    var out = new GLMAT_ARRAY_TYPE(3);
                                    out[0] = 0;
                                    out[1] = 0;
                                    out[2] = 0;
                                    return out;
                                };

                                /**
                                 * Creates a new vec3 initialized with values from an existing vector
                                 *
                                 * @param {vec3} a vector to clone
                                 * @returns {vec3} a new 3D vector
                                 */
                                vec3.clone = function(a) {
                                    var out = new GLMAT_ARRAY_TYPE(3);
                                    out[0] = a[0];
                                    out[1] = a[1];
                                    out[2] = a[2];
                                    return out;
                                };

                                /**
                                 * Creates a new vec3 initialized with the given values
                                 *
                                 * @param {Number} x X component
                                 * @param {Number} y Y component
                                 * @param {Number} z Z component
                                 * @returns {vec3} a new 3D vector
                                 */
                                vec3.fromValues = function(x, y, z) {
                                    var out = new GLMAT_ARRAY_TYPE(3);
                                    out[0] = x;
                                    out[1] = y;
                                    out[2] = z;
                                    return out;
                                };

                                /**
                                 * Copy the values from one vec3 to another
                                 *
                                 * @param {vec3} out the receiving vector
                                 * @param {vec3} a the source vector
                                 * @returns {vec3} out
                                 */
                                vec3.copy = function(out, a) {
                                    out[0] = a[0];
                                    out[1] = a[1];
                                    out[2] = a[2];
                                    return out;
                                };

                                /**
                                 * Set the components of a vec3 to the given values
                                 *
                                 * @param {vec3} out the receiving vector
                                 * @param {Number} x X component
                                 * @param {Number} y Y component
                                 * @param {Number} z Z component
                                 * @returns {vec3} out
                                 */
                                vec3.set = function(out, x, y, z) {
                                    out[0] = x;
                                    out[1] = y;
                                    out[2] = z;
                                    return out;
                                };

                                /**
                                 * Adds two vec3's
                                 *
                                 * @param {vec3} out the receiving vector
                                 * @param {vec3} a the first operand
                                 * @param {vec3} b the second operand
                                 * @returns {vec3} out
                                 */
                                vec3.add = function(out, a, b) {
                                    out[0] = a[0] + b[0];
                                    out[1] = a[1] + b[1];
                                    out[2] = a[2] + b[2];
                                    return out;
                                };

                                /**
                                 * Subtracts vector b from vector a
                                 *
                                 * @param {vec3} out the receiving vector
                                 * @param {vec3} a the first operand
                                 * @param {vec3} b the second operand
                                 * @returns {vec3} out
                                 */
                                vec3.subtract = function(out, a, b) {
                                    out[0] = a[0] - b[0];
                                    out[1] = a[1] - b[1];
                                    out[2] = a[2] - b[2];
                                    return out;
                                };

                                /**
                                 * Alias for {@link vec3.subtract}
                                 * @function
                                 */
                                vec3.sub = vec3.subtract;

                                /**
                                 * Multiplies two vec3's
                                 *
                                 * @param {vec3} out the receiving vector
                                 * @param {vec3} a the first operand
                                 * @param {vec3} b the second operand
                                 * @returns {vec3} out
                                 */
                                vec3.multiply = function(out, a, b) {
                                    out[0] = a[0] * b[0];
                                    out[1] = a[1] * b[1];
                                    out[2] = a[2] * b[2];
                                    return out;
                                };

                                /**
                                 * Alias for {@link vec3.multiply}
                                 * @function
                                 */
                                vec3.mul = vec3.multiply;

                                /**
                                 * Divides two vec3's
                                 *
                                 * @param {vec3} out the receiving vector
                                 * @param {vec3} a the first operand
                                 * @param {vec3} b the second operand
                                 * @returns {vec3} out
                                 */
                                vec3.divide = function(out, a, b) {
                                    out[0] = a[0] / b[0];
                                    out[1] = a[1] / b[1];
                                    out[2] = a[2] / b[2];
                                    return out;
                                };

                                /**
                                 * Alias for {@link vec3.divide}
                                 * @function
                                 */
                                vec3.div = vec3.divide;

                                /**
                                 * Returns the minimum of two vec3's
                                 *
                                 * @param {vec3} out the receiving vector
                                 * @param {vec3} a the first operand
                                 * @param {vec3} b the second operand
                                 * @returns {vec3} out
                                 */
                                vec3.min = function(out, a, b) {
                                    out[0] = Math.min(a[0], b[0]);
                                    out[1] = Math.min(a[1], b[1]);
                                    out[2] = Math.min(a[2], b[2]);
                                    return out;
                                };

                                /**
                                 * Returns the maximum of two vec3's
                                 *
                                 * @param {vec3} out the receiving vector
                                 * @param {vec3} a the first operand
                                 * @param {vec3} b the second operand
                                 * @returns {vec3} out
                                 */
                                vec3.max = function(out, a, b) {
                                    out[0] = Math.max(a[0], b[0]);
                                    out[1] = Math.max(a[1], b[1]);
                                    out[2] = Math.max(a[2], b[2]);
                                    return out;
                                };

                                /**
                                 * Scales a vec3 by a scalar number
                                 *
                                 * @param {vec3} out the receiving vector
                                 * @param {vec3} a the vector to scale
                                 * @param {Number} b amount to scale the vector by
                                 * @returns {vec3} out
                                 */
                                vec3.scale = function(out, a, b) {
                                    out[0] = a[0] * b;
                                    out[1] = a[1] * b;
                                    out[2] = a[2] * b;
                                    return out;
                                };

                                /**
                                 * Adds two vec3's after scaling the second operand by a scalar value
                                 *
                                 * @param {vec3} out the receiving vector
                                 * @param {vec3} a the first operand
                                 * @param {vec3} b the second operand
                                 * @param {Number} scale the amount to scale b by before adding
                                 * @returns {vec3} out
                                 */
                                vec3.scaleAndAdd = function(out, a, b, scale) {
                                    out[0] = a[0] + (b[0] * scale);
                                    out[1] = a[1] + (b[1] * scale);
                                    out[2] = a[2] + (b[2] * scale);
                                    return out;
                                };

                                /**
                                 * Calculates the euclidian distance between two vec3's
                                 *
                                 * @param {vec3} a the first operand
                                 * @param {vec3} b the second operand
                                 * @returns {Number} distance between a and b
                                 */
                                vec3.distance = function(a, b) {
                                    var x = b[0] - a[0],
                                        y = b[1] - a[1],
                                        z = b[2] - a[2];
                                    return Math.sqrt(x * x + y * y + z * z);
                                };

                                /**
                                 * Alias for {@link vec3.distance}
                                 * @function
                                 */
                                vec3.dist = vec3.distance;

                                /**
                                 * Calculates the squared euclidian distance between two vec3's
                                 *
                                 * @param {vec3} a the first operand
                                 * @param {vec3} b the second operand
                                 * @returns {Number} squared distance between a and b
                                 */
                                vec3.squaredDistance = function(a, b) {
                                    var x = b[0] - a[0],
                                        y = b[1] - a[1],
                                        z = b[2] - a[2];
                                    return x * x + y * y + z * z;
                                };

                                /**
                                 * Alias for {@link vec3.squaredDistance}
                                 * @function
                                 */
                                vec3.sqrDist = vec3.squaredDistance;

                                /**
                                 * Calculates the length of a vec3
                                 *
                                 * @param {vec3} a vector to calculate length of
                                 * @returns {Number} length of a
                                 */
                                vec3.length = function(a) {
                                    var x = a[0],
                                        y = a[1],
                                        z = a[2];
                                    return Math.sqrt(x * x + y * y + z * z);
                                };

                                /**
                                 * Alias for {@link vec3.length}
                                 * @function
                                 */
                                vec3.len = vec3.length;

                                /**
                                 * Calculates the squared length of a vec3
                                 *
                                 * @param {vec3} a vector to calculate squared length of
                                 * @returns {Number} squared length of a
                                 */
                                vec3.squaredLength = function(a) {
                                    var x = a[0],
                                        y = a[1],
                                        z = a[2];
                                    return x * x + y * y + z * z;
                                };

                                /**
                                 * Alias for {@link vec3.squaredLength}
                                 * @function
                                 */
                                vec3.sqrLen = vec3.squaredLength;

                                /**
                                 * Negates the components of a vec3
                                 *
                                 * @param {vec3} out the receiving vector
                                 * @param {vec3} a vector to negate
                                 * @returns {vec3} out
                                 */
                                vec3.negate = function(out, a) {
                                    out[0] = -a[0];
                                    out[1] = -a[1];
                                    out[2] = -a[2];
                                    return out;
                                };

                                /**
                                 * Returns the inverse of the components of a vec3
                                 *
                                 * @param {vec3} out the receiving vector
                                 * @param {vec3} a vector to invert
                                 * @returns {vec3} out
                                 */
                                vec3.inverse = function(out, a) {
                                    out[0] = 1.0 / a[0];
                                    out[1] = 1.0 / a[1];
                                    out[2] = 1.0 / a[2];
                                    return out;
                                };

                                /**
                                 * Normalize a vec3
                                 *
                                 * @param {vec3} out the receiving vector
                                 * @param {vec3} a vector to normalize
                                 * @returns {vec3} out
                                 */
                                vec3.normalize = function(out, a) {
                                    var x = a[0],
                                        y = a[1],
                                        z = a[2];
                                    var len = x * x + y * y + z * z;
                                    if (len > 0) {
                                        //TODO: evaluate use of glm_invsqrt here?
                                        len = 1 / Math.sqrt(len);
                                        out[0] = a[0] * len;
                                        out[1] = a[1] * len;
                                        out[2] = a[2] * len;
                                    }
                                    return out;
                                };

                                /**
                                 * Calculates the dot product of two vec3's
                                 *
                                 * @param {vec3} a the first operand
                                 * @param {vec3} b the second operand
                                 * @returns {Number} dot product of a and b
                                 */
                                vec3.dot = function(a, b) {
                                    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
                                };

                                /**
                                 * Computes the cross product of two vec3's
                                 *
                                 * @param {vec3} out the receiving vector
                                 * @param {vec3} a the first operand
                                 * @param {vec3} b the second operand
                                 * @returns {vec3} out
                                 */
                                vec3.cross = function(out, a, b) {
                                    var ax = a[0],
                                        ay = a[1],
                                        az = a[2],
                                        bx = b[0],
                                        by = b[1],
                                        bz = b[2];

                                    out[0] = ay * bz - az * by;
                                    out[1] = az * bx - ax * bz;
                                    out[2] = ax * by - ay * bx;
                                    return out;
                                };

                                /**
                                 * Performs a linear interpolation between two vec3's
                                 *
                                 * @param {vec3} out the receiving vector
                                 * @param {vec3} a the first operand
                                 * @param {vec3} b the second operand
                                 * @param {Number} t interpolation amount between the two inputs
                                 * @returns {vec3} out
                                 */
                                vec3.lerp = function(out, a, b, t) {
                                    var ax = a[0],
                                        ay = a[1],
                                        az = a[2];
                                    out[0] = ax + t * (b[0] - ax);
                                    out[1] = ay + t * (b[1] - ay);
                                    out[2] = az + t * (b[2] - az);
                                    return out;
                                };

                                /**
                                 * Generates a random vector with the given scale
                                 *
                                 * @param {vec3} out the receiving vector
                                 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
                                 * @returns {vec3} out
                                 */
                                vec3.random = function(out, scale) {
                                    scale = scale || 1.0;

                                    var r = GLMAT_RANDOM() * 2.0 * Math.PI;
                                    var z = (GLMAT_RANDOM() * 2.0) - 1.0;
                                    var zScale = Math.sqrt(1.0 - z * z) * scale;

                                    out[0] = Math.cos(r) * zScale;
                                    out[1] = Math.sin(r) * zScale;
                                    out[2] = z * scale;
                                    return out;
                                };

                                /**
                                 * Transforms the vec3 with a mat4.
                                 * 4th vector component is implicitly '1'
                                 *
                                 * @param {vec3} out the receiving vector
                                 * @param {vec3} a the vector to transform
                                 * @param {mat4} m matrix to transform with
                                 * @returns {vec3} out
                                 */
                                vec3.transformMat4 = function(out, a, m) {
                                    var x = a[0],
                                        y = a[1],
                                        z = a[2],
                                        w = m[3] * x + m[7] * y + m[11] * z + m[15];
                                    w = w || 1.0;
                                    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
                                    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
                                    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
                                    return out;
                                };

                                /**
                                 * Transforms the vec3 with a mat3.
                                 *
                                 * @param {vec3} out the receiving vector
                                 * @param {vec3} a the vector to transform
                                 * @param {mat4} m the 3x3 matrix to transform with
                                 * @returns {vec3} out
                                 */
                                vec3.transformMat3 = function(out, a, m) {
                                    var x = a[0],
                                        y = a[1],
                                        z = a[2];
                                    out[0] = x * m[0] + y * m[3] + z * m[6];
                                    out[1] = x * m[1] + y * m[4] + z * m[7];
                                    out[2] = x * m[2] + y * m[5] + z * m[8];
                                    return out;
                                };

                                /**
                                 * Transforms the vec3 with a quat
                                 *
                                 * @param {vec3} out the receiving vector
                                 * @param {vec3} a the vector to transform
                                 * @param {quat} q quaternion to transform with
                                 * @returns {vec3} out
                                 */
                                vec3.transformQuat = function(out, a, q) {
                                    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations

                                    var x = a[0],
                                        y = a[1],
                                        z = a[2],
                                        qx = q[0],
                                        qy = q[1],
                                        qz = q[2],
                                        qw = q[3],

                                        // calculate quat * vec
                                        ix = qw * x + qy * z - qz * y,
                                        iy = qw * y + qz * x - qx * z,
                                        iz = qw * z + qx * y - qy * x,
                                        iw = -qx * x - qy * y - qz * z;

                                    // calculate result * inverse quat
                                    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
                                    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
                                    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
                                    return out;
                                };

                                /**
                                 * Rotate a 3D vector around the x-axis
                                 * @param {vec3} out The receiving vec3
                                 * @param {vec3} a The vec3 point to rotate
                                 * @param {vec3} b The origin of the rotation
                                 * @param {Number} c The angle of rotation
                                 * @returns {vec3} out
                                 */
                                vec3.rotateX = function(out, a, b, c) {
                                    var p = [],
                                        r = [];
                                    //Translate point to the origin
                                    p[0] = a[0] - b[0];
                                    p[1] = a[1] - b[1];
                                    p[2] = a[2] - b[2];

                                    //perform rotation
                                    r[0] = p[0];
                                    r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);
                                    r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);

                                    //translate to correct position
                                    out[0] = r[0] + b[0];
                                    out[1] = r[1] + b[1];
                                    out[2] = r[2] + b[2];

                                    return out;
                                };

                                /**
                                 * Rotate a 3D vector around the y-axis
                                 * @param {vec3} out The receiving vec3
                                 * @param {vec3} a The vec3 point to rotate
                                 * @param {vec3} b The origin of the rotation
                                 * @param {Number} c The angle of rotation
                                 * @returns {vec3} out
                                 */
                                vec3.rotateY = function(out, a, b, c) {
                                    var p = [],
                                        r = [];
                                    //Translate point to the origin
                                    p[0] = a[0] - b[0];
                                    p[1] = a[1] - b[1];
                                    p[2] = a[2] - b[2];

                                    //perform rotation
                                    r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);
                                    r[1] = p[1];
                                    r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);

                                    //translate to correct position
                                    out[0] = r[0] + b[0];
                                    out[1] = r[1] + b[1];
                                    out[2] = r[2] + b[2];

                                    return out;
                                };

                                /**
                                 * Rotate a 3D vector around the z-axis
                                 * @param {vec3} out The receiving vec3
                                 * @param {vec3} a The vec3 point to rotate
                                 * @param {vec3} b The origin of the rotation
                                 * @param {Number} c The angle of rotation
                                 * @returns {vec3} out
                                 */
                                vec3.rotateZ = function(out, a, b, c) {
                                    var p = [],
                                        r = [];
                                    //Translate point to the origin
                                    p[0] = a[0] - b[0];
                                    p[1] = a[1] - b[1];
                                    p[2] = a[2] - b[2];

                                    //perform rotation
                                    r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);
                                    r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);
                                    r[2] = p[2];

                                    //translate to correct position
                                    out[0] = r[0] + b[0];
                                    out[1] = r[1] + b[1];
                                    out[2] = r[2] + b[2];

                                    return out;
                                };

                                /**
                                 * Perform some operation over an array of vec3s.
                                 *
                                 * @param {Array} a the array of vectors to iterate over
                                 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
                                 * @param {Number} offset Number of elements to skip at the beginning of the array
                                 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
                                 * @param {Function} fn Function to call for each vector in the array
                                 * @param {Object} [arg] additional argument to pass to fn
                                 * @returns {Array} a
                                 * @function
                                 */
                                vec3.forEach = (function() {
                                    var vec = vec3.create();

                                    return function(a, stride, offset, count, fn, arg) {
                                        var i, l;
                                        if (!stride) {
                                            stride = 3;
                                        }

                                        if (!offset) {
                                            offset = 0;
                                        }

                                        if (count) {
                                            l = Math.min((count * stride) + offset, a.length);
                                        } else {
                                            l = a.length;
                                        }

                                        for (i = offset; i < l; i += stride) {
                                            vec[0] = a[i];
                                            vec[1] = a[i + 1];
                                            vec[2] = a[i + 2];
                                            fn(vec, vec, arg);
                                            a[i] = vec[0];
                                            a[i + 1] = vec[1];
                                            a[i + 2] = vec[2];
                                        }

                                        return a;
                                    };
                                })();

                                /**
                                 * Get the angle between two 3D vectors
                                 * @param {vec3} a The first operand
                                 * @param {vec3} b The second operand
                                 * @returns {Number} The angle in radians
                                 */
                                vec3.angle = function(a, b) {

                                    var tempA = vec3.fromValues(a[0], a[1], a[2]);
                                    var tempB = vec3.fromValues(b[0], b[1], b[2]);

                                    vec3.normalize(tempA, tempA);
                                    vec3.normalize(tempB, tempB);

                                    var cosine = vec3.dot(tempA, tempB);

                                    if (cosine > 1.0) {
                                        return 0;
                                    } else {
                                        return Math.acos(cosine);
                                    }
                                };

                                /**
                                 * Returns a string representation of a vector
                                 *
                                 * @param {vec3} vec vector to represent as a string
                                 * @returns {String} string representation of the vector
                                 */
                                vec3.str = function(a) {
                                    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
                                };

                                if (typeof(exports) !== 'undefined') {
                                    exports.vec3 = vec3;
                                };
                                /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

                                Redistribution and use in source and binary forms, with or without modification,
                                are permitted provided that the following conditions are met:

                                  * Redistributions of source code must retain the above copyright notice, this
                                    list of conditions and the following disclaimer.
                                  * Redistributions in binary form must reproduce the above copyright notice,
                                    this list of conditions and the following disclaimer in the documentation
                                    and/or other materials provided with the distribution.

                                THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
                                ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                                DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
                                ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                                (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
                                LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
                                ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                                (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                                SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

                                /**
                                 * @class 4 Dimensional Vector
                                 * @name vec4
                                 */

                                var vec4 = {};

                                /**
                                 * Creates a new, empty vec4
                                 *
                                 * @returns {vec4} a new 4D vector
                                 */
                                vec4.create = function() {
                                    var out = new GLMAT_ARRAY_TYPE(4);
                                    out[0] = 0;
                                    out[1] = 0;
                                    out[2] = 0;
                                    out[3] = 0;
                                    return out;
                                };

                                /**
                                 * Creates a new vec4 initialized with values from an existing vector
                                 *
                                 * @param {vec4} a vector to clone
                                 * @returns {vec4} a new 4D vector
                                 */
                                vec4.clone = function(a) {
                                    var out = new GLMAT_ARRAY_TYPE(4);
                                    out[0] = a[0];
                                    out[1] = a[1];
                                    out[2] = a[2];
                                    out[3] = a[3];
                                    return out;
                                };

                                /**
                                 * Creates a new vec4 initialized with the given values
                                 *
                                 * @param {Number} x X component
                                 * @param {Number} y Y component
                                 * @param {Number} z Z component
                                 * @param {Number} w W component
                                 * @returns {vec4} a new 4D vector
                                 */
                                vec4.fromValues = function(x, y, z, w) {
                                    var out = new GLMAT_ARRAY_TYPE(4);
                                    out[0] = x;
                                    out[1] = y;
                                    out[2] = z;
                                    out[3] = w;
                                    return out;
                                };

                                /**
                                 * Copy the values from one vec4 to another
                                 *
                                 * @param {vec4} out the receiving vector
                                 * @param {vec4} a the source vector
                                 * @returns {vec4} out
                                 */
                                vec4.copy = function(out, a) {
                                    out[0] = a[0];
                                    out[1] = a[1];
                                    out[2] = a[2];
                                    out[3] = a[3];
                                    return out;
                                };

                                /**
                                 * Set the components of a vec4 to the given values
                                 *
                                 * @param {vec4} out the receiving vector
                                 * @param {Number} x X component
                                 * @param {Number} y Y component
                                 * @param {Number} z Z component
                                 * @param {Number} w W component
                                 * @returns {vec4} out
                                 */
                                vec4.set = function(out, x, y, z, w) {
                                    out[0] = x;
                                    out[1] = y;
                                    out[2] = z;
                                    out[3] = w;
                                    return out;
                                };

                                /**
                                 * Adds two vec4's
                                 *
                                 * @param {vec4} out the receiving vector
                                 * @param {vec4} a the first operand
                                 * @param {vec4} b the second operand
                                 * @returns {vec4} out
                                 */
                                vec4.add = function(out, a, b) {
                                    out[0] = a[0] + b[0];
                                    out[1] = a[1] + b[1];
                                    out[2] = a[2] + b[2];
                                    out[3] = a[3] + b[3];
                                    return out;
                                };

                                /**
                                 * Subtracts vector b from vector a
                                 *
                                 * @param {vec4} out the receiving vector
                                 * @param {vec4} a the first operand
                                 * @param {vec4} b the second operand
                                 * @returns {vec4} out
                                 */
                                vec4.subtract = function(out, a, b) {
                                    out[0] = a[0] - b[0];
                                    out[1] = a[1] - b[1];
                                    out[2] = a[2] - b[2];
                                    out[3] = a[3] - b[3];
                                    return out;
                                };

                                /**
                                 * Alias for {@link vec4.subtract}
                                 * @function
                                 */
                                vec4.sub = vec4.subtract;

                                /**
                                 * Multiplies two vec4's
                                 *
                                 * @param {vec4} out the receiving vector
                                 * @param {vec4} a the first operand
                                 * @param {vec4} b the second operand
                                 * @returns {vec4} out
                                 */
                                vec4.multiply = function(out, a, b) {
                                    out[0] = a[0] * b[0];
                                    out[1] = a[1] * b[1];
                                    out[2] = a[2] * b[2];
                                    out[3] = a[3] * b[3];
                                    return out;
                                };

                                /**
                                 * Alias for {@link vec4.multiply}
                                 * @function
                                 */
                                vec4.mul = vec4.multiply;

                                /**
                                 * Divides two vec4's
                                 *
                                 * @param {vec4} out the receiving vector
                                 * @param {vec4} a the first operand
                                 * @param {vec4} b the second operand
                                 * @returns {vec4} out
                                 */
                                vec4.divide = function(out, a, b) {
                                    out[0] = a[0] / b[0];
                                    out[1] = a[1] / b[1];
                                    out[2] = a[2] / b[2];
                                    out[3] = a[3] / b[3];
                                    return out;
                                };

                                /**
                                 * Alias for {@link vec4.divide}
                                 * @function
                                 */
                                vec4.div = vec4.divide;

                                /**
                                 * Returns the minimum of two vec4's
                                 *
                                 * @param {vec4} out the receiving vector
                                 * @param {vec4} a the first operand
                                 * @param {vec4} b the second operand
                                 * @returns {vec4} out
                                 */
                                vec4.min = function(out, a, b) {
                                    out[0] = Math.min(a[0], b[0]);
                                    out[1] = Math.min(a[1], b[1]);
                                    out[2] = Math.min(a[2], b[2]);
                                    out[3] = Math.min(a[3], b[3]);
                                    return out;
                                };

                                /**
                                 * Returns the maximum of two vec4's
                                 *
                                 * @param {vec4} out the receiving vector
                                 * @param {vec4} a the first operand
                                 * @param {vec4} b the second operand
                                 * @returns {vec4} out
                                 */
                                vec4.max = function(out, a, b) {
                                    out[0] = Math.max(a[0], b[0]);
                                    out[1] = Math.max(a[1], b[1]);
                                    out[2] = Math.max(a[2], b[2]);
                                    out[3] = Math.max(a[3], b[3]);
                                    return out;
                                };

                                /**
                                 * Scales a vec4 by a scalar number
                                 *
                                 * @param {vec4} out the receiving vector
                                 * @param {vec4} a the vector to scale
                                 * @param {Number} b amount to scale the vector by
                                 * @returns {vec4} out
                                 */
                                vec4.scale = function(out, a, b) {
                                    out[0] = a[0] * b;
                                    out[1] = a[1] * b;
                                    out[2] = a[2] * b;
                                    out[3] = a[3] * b;
                                    return out;
                                };

                                /**
                                 * Adds two vec4's after scaling the second operand by a scalar value
                                 *
                                 * @param {vec4} out the receiving vector
                                 * @param {vec4} a the first operand
                                 * @param {vec4} b the second operand
                                 * @param {Number} scale the amount to scale b by before adding
                                 * @returns {vec4} out
                                 */
                                vec4.scaleAndAdd = function(out, a, b, scale) {
                                    out[0] = a[0] + (b[0] * scale);
                                    out[1] = a[1] + (b[1] * scale);
                                    out[2] = a[2] + (b[2] * scale);
                                    out[3] = a[3] + (b[3] * scale);
                                    return out;
                                };

                                /**
                                 * Calculates the euclidian distance between two vec4's
                                 *
                                 * @param {vec4} a the first operand
                                 * @param {vec4} b the second operand
                                 * @returns {Number} distance between a and b
                                 */
                                vec4.distance = function(a, b) {
                                    var x = b[0] - a[0],
                                        y = b[1] - a[1],
                                        z = b[2] - a[2],
                                        w = b[3] - a[3];
                                    return Math.sqrt(x * x + y * y + z * z + w * w);
                                };

                                /**
                                 * Alias for {@link vec4.distance}
                                 * @function
                                 */
                                vec4.dist = vec4.distance;

                                /**
                                 * Calculates the squared euclidian distance between two vec4's
                                 *
                                 * @param {vec4} a the first operand
                                 * @param {vec4} b the second operand
                                 * @returns {Number} squared distance between a and b
                                 */
                                vec4.squaredDistance = function(a, b) {
                                    var x = b[0] - a[0],
                                        y = b[1] - a[1],
                                        z = b[2] - a[2],
                                        w = b[3] - a[3];
                                    return x * x + y * y + z * z + w * w;
                                };

                                /**
                                 * Alias for {@link vec4.squaredDistance}
                                 * @function
                                 */
                                vec4.sqrDist = vec4.squaredDistance;

                                /**
                                 * Calculates the length of a vec4
                                 *
                                 * @param {vec4} a vector to calculate length of
                                 * @returns {Number} length of a
                                 */
                                vec4.length = function(a) {
                                    var x = a[0],
                                        y = a[1],
                                        z = a[2],
                                        w = a[3];
                                    return Math.sqrt(x * x + y * y + z * z + w * w);
                                };

                                /**
                                 * Alias for {@link vec4.length}
                                 * @function
                                 */
                                vec4.len = vec4.length;

                                /**
                                 * Calculates the squared length of a vec4
                                 *
                                 * @param {vec4} a vector to calculate squared length of
                                 * @returns {Number} squared length of a
                                 */
                                vec4.squaredLength = function(a) {
                                    var x = a[0],
                                        y = a[1],
                                        z = a[2],
                                        w = a[3];
                                    return x * x + y * y + z * z + w * w;
                                };

                                /**
                                 * Alias for {@link vec4.squaredLength}
                                 * @function
                                 */
                                vec4.sqrLen = vec4.squaredLength;

                                /**
                                 * Negates the components of a vec4
                                 *
                                 * @param {vec4} out the receiving vector
                                 * @param {vec4} a vector to negate
                                 * @returns {vec4} out
                                 */
                                vec4.negate = function(out, a) {
                                    out[0] = -a[0];
                                    out[1] = -a[1];
                                    out[2] = -a[2];
                                    out[3] = -a[3];
                                    return out;
                                };

                                /**
                                 * Returns the inverse of the components of a vec4
                                 *
                                 * @param {vec4} out the receiving vector
                                 * @param {vec4} a vector to invert
                                 * @returns {vec4} out
                                 */
                                vec4.inverse = function(out, a) {
                                    out[0] = 1.0 / a[0];
                                    out[1] = 1.0 / a[1];
                                    out[2] = 1.0 / a[2];
                                    out[3] = 1.0 / a[3];
                                    return out;
                                };

                                /**
                                 * Normalize a vec4
                                 *
                                 * @param {vec4} out the receiving vector
                                 * @param {vec4} a vector to normalize
                                 * @returns {vec4} out
                                 */
                                vec4.normalize = function(out, a) {
                                    var x = a[0],
                                        y = a[1],
                                        z = a[2],
                                        w = a[3];
                                    var len = x * x + y * y + z * z + w * w;
                                    if (len > 0) {
                                        len = 1 / Math.sqrt(len);
                                        out[0] = a[0] * len;
                                        out[1] = a[1] * len;
                                        out[2] = a[2] * len;
                                        out[3] = a[3] * len;
                                    }
                                    return out;
                                };

                                /**
                                 * Calculates the dot product of two vec4's
                                 *
                                 * @param {vec4} a the first operand
                                 * @param {vec4} b the second operand
                                 * @returns {Number} dot product of a and b
                                 */
                                vec4.dot = function(a, b) {
                                    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
                                };

                                /**
                                 * Performs a linear interpolation between two vec4's
                                 *
                                 * @param {vec4} out the receiving vector
                                 * @param {vec4} a the first operand
                                 * @param {vec4} b the second operand
                                 * @param {Number} t interpolation amount between the two inputs
                                 * @returns {vec4} out
                                 */
                                vec4.lerp = function(out, a, b, t) {
                                    var ax = a[0],
                                        ay = a[1],
                                        az = a[2],
                                        aw = a[3];
                                    out[0] = ax + t * (b[0] - ax);
                                    out[1] = ay + t * (b[1] - ay);
                                    out[2] = az + t * (b[2] - az);
                                    out[3] = aw + t * (b[3] - aw);
                                    return out;
                                };

                                /**
                                 * Generates a random vector with the given scale
                                 *
                                 * @param {vec4} out the receiving vector
                                 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
                                 * @returns {vec4} out
                                 */
                                vec4.random = function(out, scale) {
                                    scale = scale || 1.0;

                                    //TODO: This is a pretty awful way of doing this. Find something better.
                                    out[0] = GLMAT_RANDOM();
                                    out[1] = GLMAT_RANDOM();
                                    out[2] = GLMAT_RANDOM();
                                    out[3] = GLMAT_RANDOM();
                                    vec4.normalize(out, out);
                                    vec4.scale(out, out, scale);
                                    return out;
                                };

                                /**
                                 * Transforms the vec4 with a mat4.
                                 *
                                 * @param {vec4} out the receiving vector
                                 * @param {vec4} a the vector to transform
                                 * @param {mat4} m matrix to transform with
                                 * @returns {vec4} out
                                 */
                                vec4.transformMat4 = function(out, a, m) {
                                    var x = a[0],
                                        y = a[1],
                                        z = a[2],
                                        w = a[3];
                                    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
                                    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
                                    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
                                    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
                                    return out;
                                };

                                /**
                                 * Transforms the vec4 with a quat
                                 *
                                 * @param {vec4} out the receiving vector
                                 * @param {vec4} a the vector to transform
                                 * @param {quat} q quaternion to transform with
                                 * @returns {vec4} out
                                 */
                                vec4.transformQuat = function(out, a, q) {
                                    var x = a[0],
                                        y = a[1],
                                        z = a[2],
                                        qx = q[0],
                                        qy = q[1],
                                        qz = q[2],
                                        qw = q[3],

                                        // calculate quat * vec
                                        ix = qw * x + qy * z - qz * y,
                                        iy = qw * y + qz * x - qx * z,
                                        iz = qw * z + qx * y - qy * x,
                                        iw = -qx * x - qy * y - qz * z;

                                    // calculate result * inverse quat
                                    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
                                    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
                                    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
                                    return out;
                                };

                                /**
                                 * Perform some operation over an array of vec4s.
                                 *
                                 * @param {Array} a the array of vectors to iterate over
                                 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
                                 * @param {Number} offset Number of elements to skip at the beginning of the array
                                 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
                                 * @param {Function} fn Function to call for each vector in the array
                                 * @param {Object} [arg] additional argument to pass to fn
                                 * @returns {Array} a
                                 * @function
                                 */
                                vec4.forEach = (function() {
                                    var vec = vec4.create();

                                    return function(a, stride, offset, count, fn, arg) {
                                        var i, l;
                                        if (!stride) {
                                            stride = 4;
                                        }

                                        if (!offset) {
                                            offset = 0;
                                        }

                                        if (count) {
                                            l = Math.min((count * stride) + offset, a.length);
                                        } else {
                                            l = a.length;
                                        }

                                        for (i = offset; i < l; i += stride) {
                                            vec[0] = a[i];
                                            vec[1] = a[i + 1];
                                            vec[2] = a[i + 2];
                                            vec[3] = a[i + 3];
                                            fn(vec, vec, arg);
                                            a[i] = vec[0];
                                            a[i + 1] = vec[1];
                                            a[i + 2] = vec[2];
                                            a[i + 3] = vec[3];
                                        }

                                        return a;
                                    };
                                })();

                                /**
                                 * Returns a string representation of a vector
                                 *
                                 * @param {vec4} vec vector to represent as a string
                                 * @returns {String} string representation of the vector
                                 */
                                vec4.str = function(a) {
                                    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
                                };

                                if (typeof(exports) !== 'undefined') {
                                    exports.vec4 = vec4;
                                };
                                /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

                                Redistribution and use in source and binary forms, with or without modification,
                                are permitted provided that the following conditions are met:

                                  * Redistributions of source code must retain the above copyright notice, this
                                    list of conditions and the following disclaimer.
                                  * Redistributions in binary form must reproduce the above copyright notice,
                                    this list of conditions and the following disclaimer in the documentation
                                    and/or other materials provided with the distribution.

                                THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
                                ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                                DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
                                ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                                (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
                                LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
                                ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                                (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                                SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

                                /**
                                 * @class 2x2 Matrix
                                 * @name mat2
                                 */

                                var mat2 = {};

                                /**
                                 * Creates a new identity mat2
                                 *
                                 * @returns {mat2} a new 2x2 matrix
                                 */
                                mat2.create = function() {
                                    var out = new GLMAT_ARRAY_TYPE(4);
                                    out[0] = 1;
                                    out[1] = 0;
                                    out[2] = 0;
                                    out[3] = 1;
                                    return out;
                                };

                                /**
                                 * Creates a new mat2 initialized with values from an existing matrix
                                 *
                                 * @param {mat2} a matrix to clone
                                 * @returns {mat2} a new 2x2 matrix
                                 */
                                mat2.clone = function(a) {
                                    var out = new GLMAT_ARRAY_TYPE(4);
                                    out[0] = a[0];
                                    out[1] = a[1];
                                    out[2] = a[2];
                                    out[3] = a[3];
                                    return out;
                                };

                                /**
                                 * Copy the values from one mat2 to another
                                 *
                                 * @param {mat2} out the receiving matrix
                                 * @param {mat2} a the source matrix
                                 * @returns {mat2} out
                                 */
                                mat2.copy = function(out, a) {
                                    out[0] = a[0];
                                    out[1] = a[1];
                                    out[2] = a[2];
                                    out[3] = a[3];
                                    return out;
                                };

                                /**
                                 * Set a mat2 to the identity matrix
                                 *
                                 * @param {mat2} out the receiving matrix
                                 * @returns {mat2} out
                                 */
                                mat2.identity = function(out) {
                                    out[0] = 1;
                                    out[1] = 0;
                                    out[2] = 0;
                                    out[3] = 1;
                                    return out;
                                };

                                /**
                                 * Transpose the values of a mat2
                                 *
                                 * @param {mat2} out the receiving matrix
                                 * @param {mat2} a the source matrix
                                 * @returns {mat2} out
                                 */
                                mat2.transpose = function(out, a) {
                                    // If we are transposing ourselves we can skip a few steps but have to cache some values
                                    if (out === a) {
                                        var a1 = a[1];
                                        out[1] = a[2];
                                        out[2] = a1;
                                    } else {
                                        out[0] = a[0];
                                        out[1] = a[2];
                                        out[2] = a[1];
                                        out[3] = a[3];
                                    }

                                    return out;
                                };

                                /**
                                 * Inverts a mat2
                                 *
                                 * @param {mat2} out the receiving matrix
                                 * @param {mat2} a the source matrix
                                 * @returns {mat2} out
                                 */
                                mat2.invert = function(out, a) {
                                    var a0 = a[0],
                                        a1 = a[1],
                                        a2 = a[2],
                                        a3 = a[3],

                                        // Calculate the determinant
                                        det = a0 * a3 - a2 * a1;

                                    if (!det) {
                                        return null;
                                    }
                                    det = 1.0 / det;

                                    out[0] = a3 * det;
                                    out[1] = -a1 * det;
                                    out[2] = -a2 * det;
                                    out[3] = a0 * det;

                                    return out;
                                };

                                /**
                                 * Calculates the adjugate of a mat2
                                 *
                                 * @param {mat2} out the receiving matrix
                                 * @param {mat2} a the source matrix
                                 * @returns {mat2} out
                                 */
                                mat2.adjoint = function(out, a) {
                                    // Caching this value is nessecary if out == a
                                    var a0 = a[0];
                                    out[0] = a[3];
                                    out[1] = -a[1];
                                    out[2] = -a[2];
                                    out[3] = a0;

                                    return out;
                                };

                                /**
                                 * Calculates the determinant of a mat2
                                 *
                                 * @param {mat2} a the source matrix
                                 * @returns {Number} determinant of a
                                 */
                                mat2.determinant = function(a) {
                                    return a[0] * a[3] - a[2] * a[1];
                                };

                                /**
                                 * Multiplies two mat2's
                                 *
                                 * @param {mat2} out the receiving matrix
                                 * @param {mat2} a the first operand
                                 * @param {mat2} b the second operand
                                 * @returns {mat2} out
                                 */
                                mat2.multiply = function(out, a, b) {
                                    var a0 = a[0],
                                        a1 = a[1],
                                        a2 = a[2],
                                        a3 = a[3];
                                    var b0 = b[0],
                                        b1 = b[1],
                                        b2 = b[2],
                                        b3 = b[3];
                                    out[0] = a0 * b0 + a2 * b1;
                                    out[1] = a1 * b0 + a3 * b1;
                                    out[2] = a0 * b2 + a2 * b3;
                                    out[3] = a1 * b2 + a3 * b3;
                                    return out;
                                };

                                /**
                                 * Alias for {@link mat2.multiply}
                                 * @function
                                 */
                                mat2.mul = mat2.multiply;

                                /**
                                 * Rotates a mat2 by the given angle
                                 *
                                 * @param {mat2} out the receiving matrix
                                 * @param {mat2} a the matrix to rotate
                                 * @param {Number} rad the angle to rotate the matrix by
                                 * @returns {mat2} out
                                 */
                                mat2.rotate = function(out, a, rad) {
                                    var a0 = a[0],
                                        a1 = a[1],
                                        a2 = a[2],
                                        a3 = a[3],
                                        s = Math.sin(rad),
                                        c = Math.cos(rad);
                                    out[0] = a0 * c + a2 * s;
                                    out[1] = a1 * c + a3 * s;
                                    out[2] = a0 * -s + a2 * c;
                                    out[3] = a1 * -s + a3 * c;
                                    return out;
                                };

                                /**
                                 * Scales the mat2 by the dimensions in the given vec2
                                 *
                                 * @param {mat2} out the receiving matrix
                                 * @param {mat2} a the matrix to rotate
                                 * @param {vec2} v the vec2 to scale the matrix by
                                 * @returns {mat2} out
                                 **/
                                mat2.scale = function(out, a, v) {
                                    var a0 = a[0],
                                        a1 = a[1],
                                        a2 = a[2],
                                        a3 = a[3],
                                        v0 = v[0],
                                        v1 = v[1];
                                    out[0] = a0 * v0;
                                    out[1] = a1 * v0;
                                    out[2] = a2 * v1;
                                    out[3] = a3 * v1;
                                    return out;
                                };

                                /**
                                 * Returns a string representation of a mat2
                                 *
                                 * @param {mat2} mat matrix to represent as a string
                                 * @returns {String} string representation of the matrix
                                 */
                                mat2.str = function(a) {
                                    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
                                };

                                /**
                                 * Returns Frobenius norm of a mat2
                                 *
                                 * @param {mat2} a the matrix to calculate Frobenius norm of
                                 * @returns {Number} Frobenius norm
                                 */
                                mat2.frob = function(a) {
                                    return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))
                                };

                                /**
                                 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
                                 * @param {mat2} L the lower triangular matrix
                                 * @param {mat2} D the diagonal matrix
                                 * @param {mat2} U the upper triangular matrix
                                 * @param {mat2} a the input matrix to factorize
                                 */

                                mat2.LDU = function(L, D, U, a) {
                                    L[2] = a[2] / a[0];
                                    U[0] = a[0];
                                    U[1] = a[1];
                                    U[3] = a[3] - L[2] * U[1];
                                    return [L, D, U];
                                };

                                if (typeof(exports) !== 'undefined') {
                                    exports.mat2 = mat2;
                                };
                                /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

                                Redistribution and use in source and binary forms, with or without modification,
                                are permitted provided that the following conditions are met:

                                  * Redistributions of source code must retain the above copyright notice, this
                                    list of conditions and the following disclaimer.
                                  * Redistributions in binary form must reproduce the above copyright notice,
                                    this list of conditions and the following disclaimer in the documentation
                                    and/or other materials provided with the distribution.

                                THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
                                ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                                DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
                                ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                                (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
                                LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
                                ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                                (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                                SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

                                /**
                                 * @class 2x3 Matrix
                                 * @name mat2d
                                 *
                                 * @description
                                 * A mat2d contains six elements defined as:
                                 * <pre>
                                 * [a, c, tx,
                                 *  b, d, ty]
                                 * </pre>
                                 * This is a short form for the 3x3 matrix:
                                 * <pre>
                                 * [a, c, tx,
                                 *  b, d, ty,
                                 *  0, 0, 1]
                                 * </pre>
                                 * The last row is ignored so the array is shorter and operations are faster.
                                 */

                                var mat2d = {};

                                /**
                                 * Creates a new identity mat2d
                                 *
                                 * @returns {mat2d} a new 2x3 matrix
                                 */
                                mat2d.create = function() {
                                    var out = new GLMAT_ARRAY_TYPE(6);
                                    out[0] = 1;
                                    out[1] = 0;
                                    out[2] = 0;
                                    out[3] = 1;
                                    out[4] = 0;
                                    out[5] = 0;
                                    return out;
                                };

                                /**
                                 * Creates a new mat2d initialized with values from an existing matrix
                                 *
                                 * @param {mat2d} a matrix to clone
                                 * @returns {mat2d} a new 2x3 matrix
                                 */
                                mat2d.clone = function(a) {
                                    var out = new GLMAT_ARRAY_TYPE(6);
                                    out[0] = a[0];
                                    out[1] = a[1];
                                    out[2] = a[2];
                                    out[3] = a[3];
                                    out[4] = a[4];
                                    out[5] = a[5];
                                    return out;
                                };

                                /**
                                 * Copy the values from one mat2d to another
                                 *
                                 * @param {mat2d} out the receiving matrix
                                 * @param {mat2d} a the source matrix
                                 * @returns {mat2d} out
                                 */
                                mat2d.copy = function(out, a) {
                                    out[0] = a[0];
                                    out[1] = a[1];
                                    out[2] = a[2];
                                    out[3] = a[3];
                                    out[4] = a[4];
                                    out[5] = a[5];
                                    return out;
                                };

                                /**
                                 * Set a mat2d to the identity matrix
                                 *
                                 * @param {mat2d} out the receiving matrix
                                 * @returns {mat2d} out
                                 */
                                mat2d.identity = function(out) {
                                    out[0] = 1;
                                    out[1] = 0;
                                    out[2] = 0;
                                    out[3] = 1;
                                    out[4] = 0;
                                    out[5] = 0;
                                    return out;
                                };

                                /**
                                 * Inverts a mat2d
                                 *
                                 * @param {mat2d} out the receiving matrix
                                 * @param {mat2d} a the source matrix
                                 * @returns {mat2d} out
                                 */
                                mat2d.invert = function(out, a) {
                                    var aa = a[0],
                                        ab = a[1],
                                        ac = a[2],
                                        ad = a[3],
                                        atx = a[4],
                                        aty = a[5];

                                    var det = aa * ad - ab * ac;
                                    if (!det) {
                                        return null;
                                    }
                                    det = 1.0 / det;

                                    out[0] = ad * det;
                                    out[1] = -ab * det;
                                    out[2] = -ac * det;
                                    out[3] = aa * det;
                                    out[4] = (ac * aty - ad * atx) * det;
                                    out[5] = (ab * atx - aa * aty) * det;
                                    return out;
                                };

                                /**
                                 * Calculates the determinant of a mat2d
                                 *
                                 * @param {mat2d} a the source matrix
                                 * @returns {Number} determinant of a
                                 */
                                mat2d.determinant = function(a) {
                                    return a[0] * a[3] - a[1] * a[2];
                                };

                                /**
                                 * Multiplies two mat2d's
                                 *
                                 * @param {mat2d} out the receiving matrix
                                 * @param {mat2d} a the first operand
                                 * @param {mat2d} b the second operand
                                 * @returns {mat2d} out
                                 */
                                mat2d.multiply = function(out, a, b) {
                                    var a0 = a[0],
                                        a1 = a[1],
                                        a2 = a[2],
                                        a3 = a[3],
                                        a4 = a[4],
                                        a5 = a[5],
                                        b0 = b[0],
                                        b1 = b[1],
                                        b2 = b[2],
                                        b3 = b[3],
                                        b4 = b[4],
                                        b5 = b[5];
                                    out[0] = a0 * b0 + a2 * b1;
                                    out[1] = a1 * b0 + a3 * b1;
                                    out[2] = a0 * b2 + a2 * b3;
                                    out[3] = a1 * b2 + a3 * b3;
                                    out[4] = a0 * b4 + a2 * b5 + a4;
                                    out[5] = a1 * b4 + a3 * b5 + a5;
                                    return out;
                                };

                                /**
                                 * Alias for {@link mat2d.multiply}
                                 * @function
                                 */
                                mat2d.mul = mat2d.multiply;


                                /**
                                 * Rotates a mat2d by the given angle
                                 *
                                 * @param {mat2d} out the receiving matrix
                                 * @param {mat2d} a the matrix to rotate
                                 * @param {Number} rad the angle to rotate the matrix by
                                 * @returns {mat2d} out
                                 */
                                mat2d.rotate = function(out, a, rad) {
                                    var a0 = a[0],
                                        a1 = a[1],
                                        a2 = a[2],
                                        a3 = a[3],
                                        a4 = a[4],
                                        a5 = a[5],
                                        s = Math.sin(rad),
                                        c = Math.cos(rad);
                                    out[0] = a0 * c + a2 * s;
                                    out[1] = a1 * c + a3 * s;
                                    out[2] = a0 * -s + a2 * c;
                                    out[3] = a1 * -s + a3 * c;
                                    out[4] = a4;
                                    out[5] = a5;
                                    return out;
                                };

                                /**
                                 * Scales the mat2d by the dimensions in the given vec2
                                 *
                                 * @param {mat2d} out the receiving matrix
                                 * @param {mat2d} a the matrix to translate
                                 * @param {vec2} v the vec2 to scale the matrix by
                                 * @returns {mat2d} out
                                 **/
                                mat2d.scale = function(out, a, v) {
                                    var a0 = a[0],
                                        a1 = a[1],
                                        a2 = a[2],
                                        a3 = a[3],
                                        a4 = a[4],
                                        a5 = a[5],
                                        v0 = v[0],
                                        v1 = v[1];
                                    out[0] = a0 * v0;
                                    out[1] = a1 * v0;
                                    out[2] = a2 * v1;
                                    out[3] = a3 * v1;
                                    out[4] = a4;
                                    out[5] = a5;
                                    return out;
                                };

                                /**
                                 * Translates the mat2d by the dimensions in the given vec2
                                 *
                                 * @param {mat2d} out the receiving matrix
                                 * @param {mat2d} a the matrix to translate
                                 * @param {vec2} v the vec2 to translate the matrix by
                                 * @returns {mat2d} out
                                 **/
                                mat2d.translate = function(out, a, v) {
                                    var a0 = a[0],
                                        a1 = a[1],
                                        a2 = a[2],
                                        a3 = a[3],
                                        a4 = a[4],
                                        a5 = a[5],
                                        v0 = v[0],
                                        v1 = v[1];
                                    out[0] = a0;
                                    out[1] = a1;
                                    out[2] = a2;
                                    out[3] = a3;
                                    out[4] = a0 * v0 + a2 * v1 + a4;
                                    out[5] = a1 * v0 + a3 * v1 + a5;
                                    return out;
                                };

                                /**
                                 * Returns a string representation of a mat2d
                                 *
                                 * @param {mat2d} a matrix to represent as a string
                                 * @returns {String} string representation of the matrix
                                 */
                                mat2d.str = function(a) {
                                    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +
                                        a[3] + ', ' + a[4] + ', ' + a[5] + ')';
                                };

                                /**
                                 * Returns Frobenius norm of a mat2d
                                 *
                                 * @param {mat2d} a the matrix to calculate Frobenius norm of
                                 * @returns {Number} Frobenius norm
                                 */
                                mat2d.frob = function(a) {
                                    return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))
                                };

                                if (typeof(exports) !== 'undefined') {
                                    exports.mat2d = mat2d;
                                };
                                /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

                                Redistribution and use in source and binary forms, with or without modification,
                                are permitted provided that the following conditions are met:

                                  * Redistributions of source code must retain the above copyright notice, this
                                    list of conditions and the following disclaimer.
                                  * Redistributions in binary form must reproduce the above copyright notice,
                                    this list of conditions and the following disclaimer in the documentation
                                    and/or other materials provided with the distribution.

                                THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
                                ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                                DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
                                ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                                (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
                                LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
                                ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                                (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                                SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

                                /**
                                 * @class 3x3 Matrix
                                 * @name mat3
                                 */

                                var mat3 = {};

                                /**
                                 * Creates a new identity mat3
                                 *
                                 * @returns {mat3} a new 3x3 matrix
                                 */
                                mat3.create = function() {
                                    var out = new GLMAT_ARRAY_TYPE(9);
                                    out[0] = 1;
                                    out[1] = 0;
                                    out[2] = 0;
                                    out[3] = 0;
                                    out[4] = 1;
                                    out[5] = 0;
                                    out[6] = 0;
                                    out[7] = 0;
                                    out[8] = 1;
                                    return out;
                                };

                                /**
                                 * Copies the upper-left 3x3 values into the given mat3.
                                 *
                                 * @param {mat3} out the receiving 3x3 matrix
                                 * @param {mat4} a   the source 4x4 matrix
                                 * @returns {mat3} out
                                 */
                                mat3.fromMat4 = function(out, a) {
                                    out[0] = a[0];
                                    out[1] = a[1];
                                    out[2] = a[2];
                                    out[3] = a[4];
                                    out[4] = a[5];
                                    out[5] = a[6];
                                    out[6] = a[8];
                                    out[7] = a[9];
                                    out[8] = a[10];
                                    return out;
                                };

                                /**
                                 * Creates a new mat3 initialized with values from an existing matrix
                                 *
                                 * @param {mat3} a matrix to clone
                                 * @returns {mat3} a new 3x3 matrix
                                 */
                                mat3.clone = function(a) {
                                    var out = new GLMAT_ARRAY_TYPE(9);
                                    out[0] = a[0];
                                    out[1] = a[1];
                                    out[2] = a[2];
                                    out[3] = a[3];
                                    out[4] = a[4];
                                    out[5] = a[5];
                                    out[6] = a[6];
                                    out[7] = a[7];
                                    out[8] = a[8];
                                    return out;
                                };

                                /**
                                 * Copy the values from one mat3 to another
                                 *
                                 * @param {mat3} out the receiving matrix
                                 * @param {mat3} a the source matrix
                                 * @returns {mat3} out
                                 */
                                mat3.copy = function(out, a) {
                                    out[0] = a[0];
                                    out[1] = a[1];
                                    out[2] = a[2];
                                    out[3] = a[3];
                                    out[4] = a[4];
                                    out[5] = a[5];
                                    out[6] = a[6];
                                    out[7] = a[7];
                                    out[8] = a[8];
                                    return out;
                                };

                                /**
                                 * Set a mat3 to the identity matrix
                                 *
                                 * @param {mat3} out the receiving matrix
                                 * @returns {mat3} out
                                 */
                                mat3.identity = function(out) {
                                    out[0] = 1;
                                    out[1] = 0;
                                    out[2] = 0;
                                    out[3] = 0;
                                    out[4] = 1;
                                    out[5] = 0;
                                    out[6] = 0;
                                    out[7] = 0;
                                    out[8] = 1;
                                    return out;
                                };

                                /**
                                 * Transpose the values of a mat3
                                 *
                                 * @param {mat3} out the receiving matrix
                                 * @param {mat3} a the source matrix
                                 * @returns {mat3} out
                                 */
                                mat3.transpose = function(out, a) {
                                    // If we are transposing ourselves we can skip a few steps but have to cache some values
                                    if (out === a) {
                                        var a01 = a[1],
                                            a02 = a[2],
                                            a12 = a[5];
                                        out[1] = a[3];
                                        out[2] = a[6];
                                        out[3] = a01;
                                        out[5] = a[7];
                                        out[6] = a02;
                                        out[7] = a12;
                                    } else {
                                        out[0] = a[0];
                                        out[1] = a[3];
                                        out[2] = a[6];
                                        out[3] = a[1];
                                        out[4] = a[4];
                                        out[5] = a[7];
                                        out[6] = a[2];
                                        out[7] = a[5];
                                        out[8] = a[8];
                                    }

                                    return out;
                                };

                                /**
                                 * Inverts a mat3
                                 *
                                 * @param {mat3} out the receiving matrix
                                 * @param {mat3} a the source matrix
                                 * @returns {mat3} out
                                 */
                                mat3.invert = function(out, a) {
                                    var a00 = a[0],
                                        a01 = a[1],
                                        a02 = a[2],
                                        a10 = a[3],
                                        a11 = a[4],
                                        a12 = a[5],
                                        a20 = a[6],
                                        a21 = a[7],
                                        a22 = a[8],

                                        b01 = a22 * a11 - a12 * a21,
                                        b11 = -a22 * a10 + a12 * a20,
                                        b21 = a21 * a10 - a11 * a20,

                                        // Calculate the determinant
                                        det = a00 * b01 + a01 * b11 + a02 * b21;

                                    if (!det) {
                                        return null;
                                    }
                                    det = 1.0 / det;

                                    out[0] = b01 * det;
                                    out[1] = (-a22 * a01 + a02 * a21) * det;
                                    out[2] = (a12 * a01 - a02 * a11) * det;
                                    out[3] = b11 * det;
                                    out[4] = (a22 * a00 - a02 * a20) * det;
                                    out[5] = (-a12 * a00 + a02 * a10) * det;
                                    out[6] = b21 * det;
                                    out[7] = (-a21 * a00 + a01 * a20) * det;
                                    out[8] = (a11 * a00 - a01 * a10) * det;
                                    return out;
                                };

                                /**
                                 * Calculates the adjugate of a mat3
                                 *
                                 * @param {mat3} out the receiving matrix
                                 * @param {mat3} a the source matrix
                                 * @returns {mat3} out
                                 */
                                mat3.adjoint = function(out, a) {
                                    var a00 = a[0],
                                        a01 = a[1],
                                        a02 = a[2],
                                        a10 = a[3],
                                        a11 = a[4],
                                        a12 = a[5],
                                        a20 = a[6],
                                        a21 = a[7],
                                        a22 = a[8];

                                    out[0] = (a11 * a22 - a12 * a21);
                                    out[1] = (a02 * a21 - a01 * a22);
                                    out[2] = (a01 * a12 - a02 * a11);
                                    out[3] = (a12 * a20 - a10 * a22);
                                    out[4] = (a00 * a22 - a02 * a20);
                                    out[5] = (a02 * a10 - a00 * a12);
                                    out[6] = (a10 * a21 - a11 * a20);
                                    out[7] = (a01 * a20 - a00 * a21);
                                    out[8] = (a00 * a11 - a01 * a10);
                                    return out;
                                };

                                /**
                                 * Calculates the determinant of a mat3
                                 *
                                 * @param {mat3} a the source matrix
                                 * @returns {Number} determinant of a
                                 */
                                mat3.determinant = function(a) {
                                    var a00 = a[0],
                                        a01 = a[1],
                                        a02 = a[2],
                                        a10 = a[3],
                                        a11 = a[4],
                                        a12 = a[5],
                                        a20 = a[6],
                                        a21 = a[7],
                                        a22 = a[8];

                                    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
                                };

                                /**
                                 * Multiplies two mat3's
                                 *
                                 * @param {mat3} out the receiving matrix
                                 * @param {mat3} a the first operand
                                 * @param {mat3} b the second operand
                                 * @returns {mat3} out
                                 */
                                mat3.multiply = function(out, a, b) {
                                    var a00 = a[0],
                                        a01 = a[1],
                                        a02 = a[2],
                                        a10 = a[3],
                                        a11 = a[4],
                                        a12 = a[5],
                                        a20 = a[6],
                                        a21 = a[7],
                                        a22 = a[8],

                                        b00 = b[0],
                                        b01 = b[1],
                                        b02 = b[2],
                                        b10 = b[3],
                                        b11 = b[4],
                                        b12 = b[5],
                                        b20 = b[6],
                                        b21 = b[7],
                                        b22 = b[8];

                                    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
                                    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
                                    out[2] = b00 * a02 + b01 * a12 + b02 * a22;

                                    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
                                    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
                                    out[5] = b10 * a02 + b11 * a12 + b12 * a22;

                                    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
                                    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
                                    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
                                    return out;
                                };

                                /**
                                 * Alias for {@link mat3.multiply}
                                 * @function
                                 */
                                mat3.mul = mat3.multiply;

                                /**
                                 * Translate a mat3 by the given vector
                                 *
                                 * @param {mat3} out the receiving matrix
                                 * @param {mat3} a the matrix to translate
                                 * @param {vec2} v vector to translate by
                                 * @returns {mat3} out
                                 */
                                mat3.translate = function(out, a, v) {
                                    var a00 = a[0],
                                        a01 = a[1],
                                        a02 = a[2],
                                        a10 = a[3],
                                        a11 = a[4],
                                        a12 = a[5],
                                        a20 = a[6],
                                        a21 = a[7],
                                        a22 = a[8],
                                        x = v[0],
                                        y = v[1];

                                    out[0] = a00;
                                    out[1] = a01;
                                    out[2] = a02;

                                    out[3] = a10;
                                    out[4] = a11;
                                    out[5] = a12;

                                    out[6] = x * a00 + y * a10 + a20;
                                    out[7] = x * a01 + y * a11 + a21;
                                    out[8] = x * a02 + y * a12 + a22;
                                    return out;
                                };

                                /**
                                 * Rotates a mat3 by the given angle
                                 *
                                 * @param {mat3} out the receiving matrix
                                 * @param {mat3} a the matrix to rotate
                                 * @param {Number} rad the angle to rotate the matrix by
                                 * @returns {mat3} out
                                 */
                                mat3.rotate = function(out, a, rad) {
                                    var a00 = a[0],
                                        a01 = a[1],
                                        a02 = a[2],
                                        a10 = a[3],
                                        a11 = a[4],
                                        a12 = a[5],
                                        a20 = a[6],
                                        a21 = a[7],
                                        a22 = a[8],

                                        s = Math.sin(rad),
                                        c = Math.cos(rad);

                                    out[0] = c * a00 + s * a10;
                                    out[1] = c * a01 + s * a11;
                                    out[2] = c * a02 + s * a12;

                                    out[3] = c * a10 - s * a00;
                                    out[4] = c * a11 - s * a01;
                                    out[5] = c * a12 - s * a02;

                                    out[6] = a20;
                                    out[7] = a21;
                                    out[8] = a22;
                                    return out;
                                };

                                /**
                                 * Scales the mat3 by the dimensions in the given vec2
                                 *
                                 * @param {mat3} out the receiving matrix
                                 * @param {mat3} a the matrix to rotate
                                 * @param {vec2} v the vec2 to scale the matrix by
                                 * @returns {mat3} out
                                 **/
                                mat3.scale = function(out, a, v) {
                                    var x = v[0],
                                        y = v[1];

                                    out[0] = x * a[0];
                                    out[1] = x * a[1];
                                    out[2] = x * a[2];

                                    out[3] = y * a[3];
                                    out[4] = y * a[4];
                                    out[5] = y * a[5];

                                    out[6] = a[6];
                                    out[7] = a[7];
                                    out[8] = a[8];
                                    return out;
                                };

                                /**
                                 * Copies the values from a mat2d into a mat3
                                 *
                                 * @param {mat3} out the receiving matrix
                                 * @param {mat2d} a the matrix to copy
                                 * @returns {mat3} out
                                 **/
                                mat3.fromMat2d = function(out, a) {
                                    out[0] = a[0];
                                    out[1] = a[1];
                                    out[2] = 0;

                                    out[3] = a[2];
                                    out[4] = a[3];
                                    out[5] = 0;

                                    out[6] = a[4];
                                    out[7] = a[5];
                                    out[8] = 1;
                                    return out;
                                };

                                /**
                                 * Calculates a 3x3 matrix from the given quaternion
                                 *
                                 * @param {mat3} out mat3 receiving operation result
                                 * @param {quat} q Quaternion to create matrix from
                                 *
                                 * @returns {mat3} out
                                 */
                                mat3.fromQuat = function(out, q) {
                                    var x = q[0],
                                        y = q[1],
                                        z = q[2],
                                        w = q[3],
                                        x2 = x + x,
                                        y2 = y + y,
                                        z2 = z + z,

                                        xx = x * x2,
                                        yx = y * x2,
                                        yy = y * y2,
                                        zx = z * x2,
                                        zy = z * y2,
                                        zz = z * z2,
                                        wx = w * x2,
                                        wy = w * y2,
                                        wz = w * z2;

                                    out[0] = 1 - yy - zz;
                                    out[3] = yx - wz;
                                    out[6] = zx + wy;

                                    out[1] = yx + wz;
                                    out[4] = 1 - xx - zz;
                                    out[7] = zy - wx;

                                    out[2] = zx - wy;
                                    out[5] = zy + wx;
                                    out[8] = 1 - xx - yy;

                                    return out;
                                };

                                /**
                                 * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
                                 *
                                 * @param {mat3} out mat3 receiving operation result
                                 * @param {mat4} a Mat4 to derive the normal matrix from
                                 *
                                 * @returns {mat3} out
                                 */
                                mat3.normalFromMat4 = function(out, a) {
                                    var a00 = a[0],
                                        a01 = a[1],
                                        a02 = a[2],
                                        a03 = a[3],
                                        a10 = a[4],
                                        a11 = a[5],
                                        a12 = a[6],
                                        a13 = a[7],
                                        a20 = a[8],
                                        a21 = a[9],
                                        a22 = a[10],
                                        a23 = a[11],
                                        a30 = a[12],
                                        a31 = a[13],
                                        a32 = a[14],
                                        a33 = a[15],

                                        b00 = a00 * a11 - a01 * a10,
                                        b01 = a00 * a12 - a02 * a10,
                                        b02 = a00 * a13 - a03 * a10,
                                        b03 = a01 * a12 - a02 * a11,
                                        b04 = a01 * a13 - a03 * a11,
                                        b05 = a02 * a13 - a03 * a12,
                                        b06 = a20 * a31 - a21 * a30,
                                        b07 = a20 * a32 - a22 * a30,
                                        b08 = a20 * a33 - a23 * a30,
                                        b09 = a21 * a32 - a22 * a31,
                                        b10 = a21 * a33 - a23 * a31,
                                        b11 = a22 * a33 - a23 * a32,

                                        // Calculate the determinant
                                        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

                                    if (!det) {
                                        return null;
                                    }
                                    det = 1.0 / det;

                                    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                                    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                                    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;

                                    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                                    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                                    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;

                                    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                                    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                                    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;

                                    return out;
                                };

                                /**
                                 * Returns a string representation of a mat3
                                 *
                                 * @param {mat3} mat matrix to represent as a string
                                 * @returns {String} string representation of the matrix
                                 */
                                mat3.str = function(a) {
                                    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +
                                        a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +
                                        a[6] + ', ' + a[7] + ', ' + a[8] + ')';
                                };

                                /**
                                 * Returns Frobenius norm of a mat3
                                 *
                                 * @param {mat3} a the matrix to calculate Frobenius norm of
                                 * @returns {Number} Frobenius norm
                                 */
                                mat3.frob = function(a) {
                                    return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))
                                };


                                if (typeof(exports) !== 'undefined') {
                                    exports.mat3 = mat3;
                                };
                                /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

                                Redistribution and use in source and binary forms, with or without modification,
                                are permitted provided that the following conditions are met:

                                  * Redistributions of source code must retain the above copyright notice, this
                                    list of conditions and the following disclaimer.
                                  * Redistributions in binary form must reproduce the above copyright notice,
                                    this list of conditions and the following disclaimer in the documentation
                                    and/or other materials provided with the distribution.

                                THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
                                ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                                DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
                                ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                                (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
                                LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
                                ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                                (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                                SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

                                /**
                                 * @class 4x4 Matrix
                                 * @name mat4
                                 */

                                var mat4 = {};

                                /**
                                 * Creates a new identity mat4
                                 *
                                 * @returns {mat4} a new 4x4 matrix
                                 */
                                mat4.create = function() {
                                    var out = new GLMAT_ARRAY_TYPE(16);
                                    out[0] = 1;
                                    out[1] = 0;
                                    out[2] = 0;
                                    out[3] = 0;
                                    out[4] = 0;
                                    out[5] = 1;
                                    out[6] = 0;
                                    out[7] = 0;
                                    out[8] = 0;
                                    out[9] = 0;
                                    out[10] = 1;
                                    out[11] = 0;
                                    out[12] = 0;
                                    out[13] = 0;
                                    out[14] = 0;
                                    out[15] = 1;
                                    return out;
                                };

                                /**
                                 * Creates a new mat4 initialized with values from an existing matrix
                                 *
                                 * @param {mat4} a matrix to clone
                                 * @returns {mat4} a new 4x4 matrix
                                 */
                                mat4.clone = function(a) {
                                    var out = new GLMAT_ARRAY_TYPE(16);
                                    out[0] = a[0];
                                    out[1] = a[1];
                                    out[2] = a[2];
                                    out[3] = a[3];
                                    out[4] = a[4];
                                    out[5] = a[5];
                                    out[6] = a[6];
                                    out[7] = a[7];
                                    out[8] = a[8];
                                    out[9] = a[9];
                                    out[10] = a[10];
                                    out[11] = a[11];
                                    out[12] = a[12];
                                    out[13] = a[13];
                                    out[14] = a[14];
                                    out[15] = a[15];
                                    return out;
                                };

                                /**
                                 * Copy the values from one mat4 to another
                                 *
                                 * @param {mat4} out the receiving matrix
                                 * @param {mat4} a the source matrix
                                 * @returns {mat4} out
                                 */
                                mat4.copy = function(out, a) {
                                    out[0] = a[0];
                                    out[1] = a[1];
                                    out[2] = a[2];
                                    out[3] = a[3];
                                    out[4] = a[4];
                                    out[5] = a[5];
                                    out[6] = a[6];
                                    out[7] = a[7];
                                    out[8] = a[8];
                                    out[9] = a[9];
                                    out[10] = a[10];
                                    out[11] = a[11];
                                    out[12] = a[12];
                                    out[13] = a[13];
                                    out[14] = a[14];
                                    out[15] = a[15];
                                    return out;
                                };

                                /**
                                 * Set a mat4 to the identity matrix
                                 *
                                 * @param {mat4} out the receiving matrix
                                 * @returns {mat4} out
                                 */
                                mat4.identity = function(out) {
                                    out[0] = 1;
                                    out[1] = 0;
                                    out[2] = 0;
                                    out[3] = 0;
                                    out[4] = 0;
                                    out[5] = 1;
                                    out[6] = 0;
                                    out[7] = 0;
                                    out[8] = 0;
                                    out[9] = 0;
                                    out[10] = 1;
                                    out[11] = 0;
                                    out[12] = 0;
                                    out[13] = 0;
                                    out[14] = 0;
                                    out[15] = 1;
                                    return out;
                                };

                                /**
                                 * Transpose the values of a mat4
                                 *
                                 * @param {mat4} out the receiving matrix
                                 * @param {mat4} a the source matrix
                                 * @returns {mat4} out
                                 */
                                mat4.transpose = function(out, a) {
                                    // If we are transposing ourselves we can skip a few steps but have to cache some values
                                    if (out === a) {
                                        var a01 = a[1],
                                            a02 = a[2],
                                            a03 = a[3],
                                            a12 = a[6],
                                            a13 = a[7],
                                            a23 = a[11];

                                        out[1] = a[4];
                                        out[2] = a[8];
                                        out[3] = a[12];
                                        out[4] = a01;
                                        out[6] = a[9];
                                        out[7] = a[13];
                                        out[8] = a02;
                                        out[9] = a12;
                                        out[11] = a[14];
                                        out[12] = a03;
                                        out[13] = a13;
                                        out[14] = a23;
                                    } else {
                                        out[0] = a[0];
                                        out[1] = a[4];
                                        out[2] = a[8];
                                        out[3] = a[12];
                                        out[4] = a[1];
                                        out[5] = a[5];
                                        out[6] = a[9];
                                        out[7] = a[13];
                                        out[8] = a[2];
                                        out[9] = a[6];
                                        out[10] = a[10];
                                        out[11] = a[14];
                                        out[12] = a[3];
                                        out[13] = a[7];
                                        out[14] = a[11];
                                        out[15] = a[15];
                                    }

                                    return out;
                                };

                                /**
                                 * Inverts a mat4
                                 *
                                 * @param {mat4} out the receiving matrix
                                 * @param {mat4} a the source matrix
                                 * @returns {mat4} out
                                 */
                                mat4.invert = function(out, a) {
                                    var a00 = a[0],
                                        a01 = a[1],
                                        a02 = a[2],
                                        a03 = a[3],
                                        a10 = a[4],
                                        a11 = a[5],
                                        a12 = a[6],
                                        a13 = a[7],
                                        a20 = a[8],
                                        a21 = a[9],
                                        a22 = a[10],
                                        a23 = a[11],
                                        a30 = a[12],
                                        a31 = a[13],
                                        a32 = a[14],
                                        a33 = a[15],

                                        b00 = a00 * a11 - a01 * a10,
                                        b01 = a00 * a12 - a02 * a10,
                                        b02 = a00 * a13 - a03 * a10,
                                        b03 = a01 * a12 - a02 * a11,
                                        b04 = a01 * a13 - a03 * a11,
                                        b05 = a02 * a13 - a03 * a12,
                                        b06 = a20 * a31 - a21 * a30,
                                        b07 = a20 * a32 - a22 * a30,
                                        b08 = a20 * a33 - a23 * a30,
                                        b09 = a21 * a32 - a22 * a31,
                                        b10 = a21 * a33 - a23 * a31,
                                        b11 = a22 * a33 - a23 * a32,

                                        // Calculate the determinant
                                        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

                                    if (!det) {
                                        return null;
                                    }
                                    det = 1.0 / det;

                                    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                                    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                                    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                                    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
                                    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                                    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                                    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                                    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
                                    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                                    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                                    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                                    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
                                    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
                                    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
                                    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
                                    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

                                    return out;
                                };

                                /**
                                 * Calculates the adjugate of a mat4
                                 *
                                 * @param {mat4} out the receiving matrix
                                 * @param {mat4} a the source matrix
                                 * @returns {mat4} out
                                 */
                                mat4.adjoint = function(out, a) {
                                    var a00 = a[0],
                                        a01 = a[1],
                                        a02 = a[2],
                                        a03 = a[3],
                                        a10 = a[4],
                                        a11 = a[5],
                                        a12 = a[6],
                                        a13 = a[7],
                                        a20 = a[8],
                                        a21 = a[9],
                                        a22 = a[10],
                                        a23 = a[11],
                                        a30 = a[12],
                                        a31 = a[13],
                                        a32 = a[14],
                                        a33 = a[15];

                                    out[0] = (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
                                    out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
                                    out[2] = (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
                                    out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
                                    out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
                                    out[5] = (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
                                    out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
                                    out[7] = (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
                                    out[8] = (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
                                    out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
                                    out[10] = (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
                                    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
                                    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
                                    out[13] = (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
                                    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
                                    out[15] = (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
                                    return out;
                                };

                                /**
                                 * Calculates the determinant of a mat4
                                 *
                                 * @param {mat4} a the source matrix
                                 * @returns {Number} determinant of a
                                 */
                                mat4.determinant = function(a) {
                                    var a00 = a[0],
                                        a01 = a[1],
                                        a02 = a[2],
                                        a03 = a[3],
                                        a10 = a[4],
                                        a11 = a[5],
                                        a12 = a[6],
                                        a13 = a[7],
                                        a20 = a[8],
                                        a21 = a[9],
                                        a22 = a[10],
                                        a23 = a[11],
                                        a30 = a[12],
                                        a31 = a[13],
                                        a32 = a[14],
                                        a33 = a[15],

                                        b00 = a00 * a11 - a01 * a10,
                                        b01 = a00 * a12 - a02 * a10,
                                        b02 = a00 * a13 - a03 * a10,
                                        b03 = a01 * a12 - a02 * a11,
                                        b04 = a01 * a13 - a03 * a11,
                                        b05 = a02 * a13 - a03 * a12,
                                        b06 = a20 * a31 - a21 * a30,
                                        b07 = a20 * a32 - a22 * a30,
                                        b08 = a20 * a33 - a23 * a30,
                                        b09 = a21 * a32 - a22 * a31,
                                        b10 = a21 * a33 - a23 * a31,
                                        b11 = a22 * a33 - a23 * a32;

                                    // Calculate the determinant
                                    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
                                };

                                /**
                                 * Multiplies two mat4's
                                 *
                                 * @param {mat4} out the receiving matrix
                                 * @param {mat4} a the first operand
                                 * @param {mat4} b the second operand
                                 * @returns {mat4} out
                                 */
                                mat4.multiply = function(out, a, b) {
                                    var a00 = a[0],
                                        a01 = a[1],
                                        a02 = a[2],
                                        a03 = a[3],
                                        a10 = a[4],
                                        a11 = a[5],
                                        a12 = a[6],
                                        a13 = a[7],
                                        a20 = a[8],
                                        a21 = a[9],
                                        a22 = a[10],
                                        a23 = a[11],
                                        a30 = a[12],
                                        a31 = a[13],
                                        a32 = a[14],
                                        a33 = a[15];

                                    // Cache only the current line of the second matrix
                                    var b0 = b[0],
                                        b1 = b[1],
                                        b2 = b[2],
                                        b3 = b[3];
                                    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                                    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                                    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                                    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

                                    b0 = b[4];
                                    b1 = b[5];
                                    b2 = b[6];
                                    b3 = b[7];
                                    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                                    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                                    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                                    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

                                    b0 = b[8];
                                    b1 = b[9];
                                    b2 = b[10];
                                    b3 = b[11];
                                    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                                    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                                    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                                    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

                                    b0 = b[12];
                                    b1 = b[13];
                                    b2 = b[14];
                                    b3 = b[15];
                                    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                                    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                                    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                                    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                                    return out;
                                };

                                /**
                                 * Multiplies two affine mat4's
                                 * Add by https://github.com/pissang
                                 * @param {mat4} out the receiving matrix
                                 * @param {mat4} a the first operand
                                 * @param {mat4} b the second operand
                                 * @returns {mat4} out
                                 */
                                mat4.multiplyAffine = function(out, a, b) {
                                    var a00 = a[0],
                                        a01 = a[1],
                                        a02 = a[2],
                                        a10 = a[4],
                                        a11 = a[5],
                                        a12 = a[6],
                                        a20 = a[8],
                                        a21 = a[9],
                                        a22 = a[10],
                                        a30 = a[12],
                                        a31 = a[13],
                                        a32 = a[14];

                                    // Cache only the current line of the second matrix
                                    var b0 = b[0],
                                        b1 = b[1],
                                        b2 = b[2];
                                    out[0] = b0 * a00 + b1 * a10 + b2 * a20;
                                    out[1] = b0 * a01 + b1 * a11 + b2 * a21;
                                    out[2] = b0 * a02 + b1 * a12 + b2 * a22;
                                    // out[3] = 0;

                                    b0 = b[4];
                                    b1 = b[5];
                                    b2 = b[6];
                                    out[4] = b0 * a00 + b1 * a10 + b2 * a20;
                                    out[5] = b0 * a01 + b1 * a11 + b2 * a21;
                                    out[6] = b0 * a02 + b1 * a12 + b2 * a22;
                                    // out[7] = 0;

                                    b0 = b[8];
                                    b1 = b[9];
                                    b2 = b[10];
                                    out[8] = b0 * a00 + b1 * a10 + b2 * a20;
                                    out[9] = b0 * a01 + b1 * a11 + b2 * a21;
                                    out[10] = b0 * a02 + b1 * a12 + b2 * a22;
                                    // out[11] = 0;

                                    b0 = b[12];
                                    b1 = b[13];
                                    b2 = b[14];
                                    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + a30;
                                    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + a31;
                                    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + a32;
                                    // out[15] = 1;
                                    return out;
                                };

                                /**
                                 * Alias for {@link mat4.multiply}
                                 * @function
                                 */
                                mat4.mul = mat4.multiply;

                                /**
                                 * Alias for {@link mat4.multiplyAffine}
                                 * @function
                                 */
                                mat4.mulAffine = mat4.multiplyAffine;
                                /**
                                 * Translate a mat4 by the given vector
                                 *
                                 * @param {mat4} out the receiving matrix
                                 * @param {mat4} a the matrix to translate
                                 * @param {vec3} v vector to translate by
                                 * @returns {mat4} out
                                 */
                                mat4.translate = function(out, a, v) {
                                    var x = v[0],
                                        y = v[1],
                                        z = v[2],
                                        a00, a01, a02, a03,
                                        a10, a11, a12, a13,
                                        a20, a21, a22, a23;

                                    if (a === out) {
                                        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
                                        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
                                        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
                                        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
                                    } else {
                                        a00 = a[0];
                                        a01 = a[1];
                                        a02 = a[2];
                                        a03 = a[3];
                                        a10 = a[4];
                                        a11 = a[5];
                                        a12 = a[6];
                                        a13 = a[7];
                                        a20 = a[8];
                                        a21 = a[9];
                                        a22 = a[10];
                                        a23 = a[11];

                                        out[0] = a00;
                                        out[1] = a01;
                                        out[2] = a02;
                                        out[3] = a03;
                                        out[4] = a10;
                                        out[5] = a11;
                                        out[6] = a12;
                                        out[7] = a13;
                                        out[8] = a20;
                                        out[9] = a21;
                                        out[10] = a22;
                                        out[11] = a23;

                                        out[12] = a00 * x + a10 * y + a20 * z + a[12];
                                        out[13] = a01 * x + a11 * y + a21 * z + a[13];
                                        out[14] = a02 * x + a12 * y + a22 * z + a[14];
                                        out[15] = a03 * x + a13 * y + a23 * z + a[15];
                                    }

                                    return out;
                                };

                                /**
                                 * Scales the mat4 by the dimensions in the given vec3
                                 *
                                 * @param {mat4} out the receiving matrix
                                 * @param {mat4} a the matrix to scale
                                 * @param {vec3} v the vec3 to scale the matrix by
                                 * @returns {mat4} out
                                 **/
                                mat4.scale = function(out, a, v) {
                                    var x = v[0],
                                        y = v[1],
                                        z = v[2];

                                    out[0] = a[0] * x;
                                    out[1] = a[1] * x;
                                    out[2] = a[2] * x;
                                    out[3] = a[3] * x;
                                    out[4] = a[4] * y;
                                    out[5] = a[5] * y;
                                    out[6] = a[6] * y;
                                    out[7] = a[7] * y;
                                    out[8] = a[8] * z;
                                    out[9] = a[9] * z;
                                    out[10] = a[10] * z;
                                    out[11] = a[11] * z;
                                    out[12] = a[12];
                                    out[13] = a[13];
                                    out[14] = a[14];
                                    out[15] = a[15];
                                    return out;
                                };

                                /**
                                 * Rotates a mat4 by the given angle
                                 *
                                 * @param {mat4} out the receiving matrix
                                 * @param {mat4} a the matrix to rotate
                                 * @param {Number} rad the angle to rotate the matrix by
                                 * @param {vec3} axis the axis to rotate around
                                 * @returns {mat4} out
                                 */
                                mat4.rotate = function(out, a, rad, axis) {
                                    var x = axis[0],
                                        y = axis[1],
                                        z = axis[2],
                                        len = Math.sqrt(x * x + y * y + z * z),
                                        s, c, t,
                                        a00, a01, a02, a03,
                                        a10, a11, a12, a13,
                                        a20, a21, a22, a23,
                                        b00, b01, b02,
                                        b10, b11, b12,
                                        b20, b21, b22;

                                    if (Math.abs(len) < GLMAT_EPSILON) { return null; }

                                    len = 1 / len;
                                    x *= len;
                                    y *= len;
                                    z *= len;

                                    s = Math.sin(rad);
                                    c = Math.cos(rad);
                                    t = 1 - c;

                                    a00 = a[0];
                                    a01 = a[1];
                                    a02 = a[2];
                                    a03 = a[3];
                                    a10 = a[4];
                                    a11 = a[5];
                                    a12 = a[6];
                                    a13 = a[7];
                                    a20 = a[8];
                                    a21 = a[9];
                                    a22 = a[10];
                                    a23 = a[11];

                                    // Construct the elements of the rotation matrix
                                    b00 = x * x * t + c;
                                    b01 = y * x * t + z * s;
                                    b02 = z * x * t - y * s;
                                    b10 = x * y * t - z * s;
                                    b11 = y * y * t + c;
                                    b12 = z * y * t + x * s;
                                    b20 = x * z * t + y * s;
                                    b21 = y * z * t - x * s;
                                    b22 = z * z * t + c;

                                    // Perform rotation-specific matrix multiplication
                                    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
                                    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
                                    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
                                    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
                                    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
                                    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
                                    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
                                    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
                                    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
                                    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
                                    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
                                    out[11] = a03 * b20 + a13 * b21 + a23 * b22;

                                    if (a !== out) { // If the source and destination differ, copy the unchanged last row
                                        out[12] = a[12];
                                        out[13] = a[13];
                                        out[14] = a[14];
                                        out[15] = a[15];
                                    }
                                    return out;
                                };

                                /**
                                 * Rotates a matrix by the given angle around the X axis
                                 *
                                 * @param {mat4} out the receiving matrix
                                 * @param {mat4} a the matrix to rotate
                                 * @param {Number} rad the angle to rotate the matrix by
                                 * @returns {mat4} out
                                 */
                                mat4.rotateX = function(out, a, rad) {
                                    var s = Math.sin(rad),
                                        c = Math.cos(rad),
                                        a10 = a[4],
                                        a11 = a[5],
                                        a12 = a[6],
                                        a13 = a[7],
                                        a20 = a[8],
                                        a21 = a[9],
                                        a22 = a[10],
                                        a23 = a[11];

                                    if (a !== out) { // If the source and destination differ, copy the unchanged rows
                                        out[0] = a[0];
                                        out[1] = a[1];
                                        out[2] = a[2];
                                        out[3] = a[3];
                                        out[12] = a[12];
                                        out[13] = a[13];
                                        out[14] = a[14];
                                        out[15] = a[15];
                                    }

                                    // Perform axis-specific matrix multiplication
                                    out[4] = a10 * c + a20 * s;
                                    out[5] = a11 * c + a21 * s;
                                    out[6] = a12 * c + a22 * s;
                                    out[7] = a13 * c + a23 * s;
                                    out[8] = a20 * c - a10 * s;
                                    out[9] = a21 * c - a11 * s;
                                    out[10] = a22 * c - a12 * s;
                                    out[11] = a23 * c - a13 * s;
                                    return out;
                                };

                                /**
                                 * Rotates a matrix by the given angle around the Y axis
                                 *
                                 * @param {mat4} out the receiving matrix
                                 * @param {mat4} a the matrix to rotate
                                 * @param {Number} rad the angle to rotate the matrix by
                                 * @returns {mat4} out
                                 */
                                mat4.rotateY = function(out, a, rad) {
                                    var s = Math.sin(rad),
                                        c = Math.cos(rad),
                                        a00 = a[0],
                                        a01 = a[1],
                                        a02 = a[2],
                                        a03 = a[3],
                                        a20 = a[8],
                                        a21 = a[9],
                                        a22 = a[10],
                                        a23 = a[11];

                                    if (a !== out) { // If the source and destination differ, copy the unchanged rows
                                        out[4] = a[4];
                                        out[5] = a[5];
                                        out[6] = a[6];
                                        out[7] = a[7];
                                        out[12] = a[12];
                                        out[13] = a[13];
                                        out[14] = a[14];
                                        out[15] = a[15];
                                    }

                                    // Perform axis-specific matrix multiplication
                                    out[0] = a00 * c - a20 * s;
                                    out[1] = a01 * c - a21 * s;
                                    out[2] = a02 * c - a22 * s;
                                    out[3] = a03 * c - a23 * s;
                                    out[8] = a00 * s + a20 * c;
                                    out[9] = a01 * s + a21 * c;
                                    out[10] = a02 * s + a22 * c;
                                    out[11] = a03 * s + a23 * c;
                                    return out;
                                };

                                /**
                                 * Rotates a matrix by the given angle around the Z axis
                                 *
                                 * @param {mat4} out the receiving matrix
                                 * @param {mat4} a the matrix to rotate
                                 * @param {Number} rad the angle to rotate the matrix by
                                 * @returns {mat4} out
                                 */
                                mat4.rotateZ = function(out, a, rad) {
                                    var s = Math.sin(rad),
                                        c = Math.cos(rad),
                                        a00 = a[0],
                                        a01 = a[1],
                                        a02 = a[2],
                                        a03 = a[3],
                                        a10 = a[4],
                                        a11 = a[5],
                                        a12 = a[6],
                                        a13 = a[7];

                                    if (a !== out) { // If the source and destination differ, copy the unchanged last row
                                        out[8] = a[8];
                                        out[9] = a[9];
                                        out[10] = a[10];
                                        out[11] = a[11];
                                        out[12] = a[12];
                                        out[13] = a[13];
                                        out[14] = a[14];
                                        out[15] = a[15];
                                    }

                                    // Perform axis-specific matrix multiplication
                                    out[0] = a00 * c + a10 * s;
                                    out[1] = a01 * c + a11 * s;
                                    out[2] = a02 * c + a12 * s;
                                    out[3] = a03 * c + a13 * s;
                                    out[4] = a10 * c - a00 * s;
                                    out[5] = a11 * c - a01 * s;
                                    out[6] = a12 * c - a02 * s;
                                    out[7] = a13 * c - a03 * s;
                                    return out;
                                };

                                /**
                                 * Creates a matrix from a quaternion rotation and vector translation
                                 * This is equivalent to (but much faster than):
                                 *
                                 *     mat4.identity(dest);
                                 *     mat4.translate(dest, vec);
                                 *     var quatMat = mat4.create();
                                 *     quat4.toMat4(quat, quatMat);
                                 *     mat4.multiply(dest, quatMat);
                                 *
                                 * @param {mat4} out mat4 receiving operation result
                                 * @param {quat4} q Rotation quaternion
                                 * @param {vec3} v Translation vector
                                 * @returns {mat4} out
                                 */
                                mat4.fromRotationTranslation = function(out, q, v) {
                                    // Quaternion math
                                    var x = q[0],
                                        y = q[1],
                                        z = q[2],
                                        w = q[3],
                                        x2 = x + x,
                                        y2 = y + y,
                                        z2 = z + z,

                                        xx = x * x2,
                                        xy = x * y2,
                                        xz = x * z2,
                                        yy = y * y2,
                                        yz = y * z2,
                                        zz = z * z2,
                                        wx = w * x2,
                                        wy = w * y2,
                                        wz = w * z2;

                                    out[0] = 1 - (yy + zz);
                                    out[1] = xy + wz;
                                    out[2] = xz - wy;
                                    out[3] = 0;
                                    out[4] = xy - wz;
                                    out[5] = 1 - (xx + zz);
                                    out[6] = yz + wx;
                                    out[7] = 0;
                                    out[8] = xz + wy;
                                    out[9] = yz - wx;
                                    out[10] = 1 - (xx + yy);
                                    out[11] = 0;
                                    out[12] = v[0];
                                    out[13] = v[1];
                                    out[14] = v[2];
                                    out[15] = 1;

                                    return out;
                                };

                                mat4.fromQuat = function(out, q) {
                                    var x = q[0],
                                        y = q[1],
                                        z = q[2],
                                        w = q[3],
                                        x2 = x + x,
                                        y2 = y + y,
                                        z2 = z + z,

                                        xx = x * x2,
                                        yx = y * x2,
                                        yy = y * y2,
                                        zx = z * x2,
                                        zy = z * y2,
                                        zz = z * z2,
                                        wx = w * x2,
                                        wy = w * y2,
                                        wz = w * z2;

                                    out[0] = 1 - yy - zz;
                                    out[1] = yx + wz;
                                    out[2] = zx - wy;
                                    out[3] = 0;

                                    out[4] = yx - wz;
                                    out[5] = 1 - xx - zz;
                                    out[6] = zy + wx;
                                    out[7] = 0;

                                    out[8] = zx + wy;
                                    out[9] = zy - wx;
                                    out[10] = 1 - xx - yy;
                                    out[11] = 0;

                                    out[12] = 0;
                                    out[13] = 0;
                                    out[14] = 0;
                                    out[15] = 1;

                                    return out;
                                };

                                /**
                                 * Generates a frustum matrix with the given bounds
                                 *
                                 * @param {mat4} out mat4 frustum matrix will be written into
                                 * @param {Number} left Left bound of the frustum
                                 * @param {Number} right Right bound of the frustum
                                 * @param {Number} bottom Bottom bound of the frustum
                                 * @param {Number} top Top bound of the frustum
                                 * @param {Number} near Near bound of the frustum
                                 * @param {Number} far Far bound of the frustum
                                 * @returns {mat4} out
                                 */
                                mat4.frustum = function(out, left, right, bottom, top, near, far) {
                                    var rl = 1 / (right - left),
                                        tb = 1 / (top - bottom),
                                        nf = 1 / (near - far);
                                    out[0] = (near * 2) * rl;
                                    out[1] = 0;
                                    out[2] = 0;
                                    out[3] = 0;
                                    out[4] = 0;
                                    out[5] = (near * 2) * tb;
                                    out[6] = 0;
                                    out[7] = 0;
                                    out[8] = (right + left) * rl;
                                    out[9] = (top + bottom) * tb;
                                    out[10] = (far + near) * nf;
                                    out[11] = -1;
                                    out[12] = 0;
                                    out[13] = 0;
                                    out[14] = (far * near * 2) * nf;
                                    out[15] = 0;
                                    return out;
                                };

                                /**
                                 * Generates a perspective projection matrix with the given bounds
                                 *
                                 * @param {mat4} out mat4 frustum matrix will be written into
                                 * @param {number} fovy Vertical field of view in radians
                                 * @param {number} aspect Aspect ratio. typically viewport width/height
                                 * @param {number} near Near bound of the frustum
                                 * @param {number} far Far bound of the frustum
                                 * @returns {mat4} out
                                 */
                                mat4.perspective = function(out, fovy, aspect, near, far) {
                                    var f = 1.0 / Math.tan(fovy / 2),
                                        nf = 1 / (near - far);
                                    out[0] = f / aspect;
                                    out[1] = 0;
                                    out[2] = 0;
                                    out[3] = 0;
                                    out[4] = 0;
                                    out[5] = f;
                                    out[6] = 0;
                                    out[7] = 0;
                                    out[8] = 0;
                                    out[9] = 0;
                                    out[10] = (far + near) * nf;
                                    out[11] = -1;
                                    out[12] = 0;
                                    out[13] = 0;
                                    out[14] = (2 * far * near) * nf;
                                    out[15] = 0;
                                    return out;
                                };

                                /**
                                 * Generates a orthogonal projection matrix with the given bounds
                                 *
                                 * @param {mat4} out mat4 frustum matrix will be written into
                                 * @param {number} left Left bound of the frustum
                                 * @param {number} right Right bound of the frustum
                                 * @param {number} bottom Bottom bound of the frustum
                                 * @param {number} top Top bound of the frustum
                                 * @param {number} near Near bound of the frustum
                                 * @param {number} far Far bound of the frustum
                                 * @returns {mat4} out
                                 */
                                mat4.ortho = function(out, left, right, bottom, top, near, far) {
                                    var lr = 1 / (left - right),
                                        bt = 1 / (bottom - top),
                                        nf = 1 / (near - far);
                                    out[0] = -2 * lr;
                                    out[1] = 0;
                                    out[2] = 0;
                                    out[3] = 0;
                                    out[4] = 0;
                                    out[5] = -2 * bt;
                                    out[6] = 0;
                                    out[7] = 0;
                                    out[8] = 0;
                                    out[9] = 0;
                                    out[10] = 2 * nf;
                                    out[11] = 0;
                                    out[12] = (left + right) * lr;
                                    out[13] = (top + bottom) * bt;
                                    out[14] = (far + near) * nf;
                                    out[15] = 1;
                                    return out;
                                };

                                /**
                                 * Generates a look-at matrix with the given eye position, focal point, and up axis
                                 *
                                 * @param {mat4} out mat4 frustum matrix will be written into
                                 * @param {vec3} eye Position of the viewer
                                 * @param {vec3} center Point the viewer is looking at
                                 * @param {vec3} up vec3 pointing up
                                 * @returns {mat4} out
                                 */
                                mat4.lookAt = function(out, eye, center, up) {
                                    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
                                        eyex = eye[0],
                                        eyey = eye[1],
                                        eyez = eye[2],
                                        upx = up[0],
                                        upy = up[1],
                                        upz = up[2],
                                        centerx = center[0],
                                        centery = center[1],
                                        centerz = center[2];

                                    if (Math.abs(eyex - centerx) < GLMAT_EPSILON &&
                                        Math.abs(eyey - centery) < GLMAT_EPSILON &&
                                        Math.abs(eyez - centerz) < GLMAT_EPSILON) {
                                        return mat4.identity(out);
                                    }

                                    z0 = eyex - centerx;
                                    z1 = eyey - centery;
                                    z2 = eyez - centerz;

                                    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
                                    z0 *= len;
                                    z1 *= len;
                                    z2 *= len;

                                    x0 = upy * z2 - upz * z1;
                                    x1 = upz * z0 - upx * z2;
                                    x2 = upx * z1 - upy * z0;
                                    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
                                    if (!len) {
                                        x0 = 0;
                                        x1 = 0;
                                        x2 = 0;
                                    } else {
                                        len = 1 / len;
                                        x0 *= len;
                                        x1 *= len;
                                        x2 *= len;
                                    }

                                    y0 = z1 * x2 - z2 * x1;
                                    y1 = z2 * x0 - z0 * x2;
                                    y2 = z0 * x1 - z1 * x0;

                                    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
                                    if (!len) {
                                        y0 = 0;
                                        y1 = 0;
                                        y2 = 0;
                                    } else {
                                        len = 1 / len;
                                        y0 *= len;
                                        y1 *= len;
                                        y2 *= len;
                                    }

                                    out[0] = x0;
                                    out[1] = y0;
                                    out[2] = z0;
                                    out[3] = 0;
                                    out[4] = x1;
                                    out[5] = y1;
                                    out[6] = z1;
                                    out[7] = 0;
                                    out[8] = x2;
                                    out[9] = y2;
                                    out[10] = z2;
                                    out[11] = 0;
                                    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
                                    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
                                    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
                                    out[15] = 1;

                                    return out;
                                };

                                /**
                                 * Returns a string representation of a mat4
                                 *
                                 * @param {mat4} mat matrix to represent as a string
                                 * @returns {String} string representation of the matrix
                                 */
                                mat4.str = function(a) {
                                    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
                                        a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
                                        a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +
                                        a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
                                };

                                /**
                                 * Returns Frobenius norm of a mat4
                                 *
                                 * @param {mat4} a the matrix to calculate Frobenius norm of
                                 * @returns {Number} Frobenius norm
                                 */
                                mat4.frob = function(a) {
                                    return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2)))
                                };


                                if (typeof(exports) !== 'undefined') {
                                    exports.mat4 = mat4;
                                };
                                /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

                                Redistribution and use in source and binary forms, with or without modification,
                                are permitted provided that the following conditions are met:

                                  * Redistributions of source code must retain the above copyright notice, this
                                    list of conditions and the following disclaimer.
                                  * Redistributions in binary form must reproduce the above copyright notice,
                                    this list of conditions and the following disclaimer in the documentation
                                    and/or other materials provided with the distribution.

                                THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
                                ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                                DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
                                ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                                (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
                                LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
                                ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                                (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                                SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

                                /**
                                 * @class Quaternion
                                 * @name quat
                                 */

                                var quat = {};

                                /**
                                 * Creates a new identity quat
                                 *
                                 * @returns {quat} a new quaternion
                                 */
                                quat.create = function() {
                                    var out = new GLMAT_ARRAY_TYPE(4);
                                    out[0] = 0;
                                    out[1] = 0;
                                    out[2] = 0;
                                    out[3] = 1;
                                    return out;
                                };

                                /**
                                 * Sets a quaternion to represent the shortest rotation from one
                                 * vector to another.
                                 *
                                 * Both vectors are assumed to be unit length.
                                 *
                                 * @param {quat} out the receiving quaternion.
                                 * @param {vec3} a the initial vector
                                 * @param {vec3} b the destination vector
                                 * @returns {quat} out
                                 */
                                quat.rotationTo = (function() {
                                    var tmpvec3 = vec3.create();
                                    var xUnitVec3 = vec3.fromValues(1, 0, 0);
                                    var yUnitVec3 = vec3.fromValues(0, 1, 0);

                                    return function(out, a, b) {
                                        var dot = vec3.dot(a, b);
                                        if (dot < -0.999999) {
                                            vec3.cross(tmpvec3, xUnitVec3, a);
                                            if (vec3.length(tmpvec3) < 0.000001)
                                                vec3.cross(tmpvec3, yUnitVec3, a);
                                            vec3.normalize(tmpvec3, tmpvec3);
                                            quat.setAxisAngle(out, tmpvec3, Math.PI);
                                            return out;
                                        } else if (dot > 0.999999) {
                                            out[0] = 0;
                                            out[1] = 0;
                                            out[2] = 0;
                                            out[3] = 1;
                                            return out;
                                        } else {
                                            vec3.cross(tmpvec3, a, b);
                                            out[0] = tmpvec3[0];
                                            out[1] = tmpvec3[1];
                                            out[2] = tmpvec3[2];
                                            out[3] = 1 + dot;
                                            return quat.normalize(out, out);
                                        }
                                    };
                                })();

                                /**
                                 * Sets the specified quaternion with values corresponding to the given
                                 * axes. Each axis is a vec3 and is expected to be unit length and
                                 * perpendicular to all other specified axes.
                                 *
                                 * @param {vec3} view  the vector representing the viewing direction
                                 * @param {vec3} right the vector representing the local "right" direction
                                 * @param {vec3} up    the vector representing the local "up" direction
                                 * @returns {quat} out
                                 */
                                quat.setAxes = (function() {
                                    var matr = mat3.create();

                                    return function(out, view, right, up) {
                                        matr[0] = right[0];
                                        matr[3] = right[1];
                                        matr[6] = right[2];

                                        matr[1] = up[0];
                                        matr[4] = up[1];
                                        matr[7] = up[2];

                                        matr[2] = -view[0];
                                        matr[5] = -view[1];
                                        matr[8] = -view[2];

                                        return quat.normalize(out, quat.fromMat3(out, matr));
                                    };
                                })();

                                /**
                                 * Creates a new quat initialized with values from an existing quaternion
                                 *
                                 * @param {quat} a quaternion to clone
                                 * @returns {quat} a new quaternion
                                 * @function
                                 */
                                quat.clone = vec4.clone;

                                /**
                                 * Creates a new quat initialized with the given values
                                 *
                                 * @param {Number} x X component
                                 * @param {Number} y Y component
                                 * @param {Number} z Z component
                                 * @param {Number} w W component
                                 * @returns {quat} a new quaternion
                                 * @function
                                 */
                                quat.fromValues = vec4.fromValues;

                                /**
                                 * Copy the values from one quat to another
                                 *
                                 * @param {quat} out the receiving quaternion
                                 * @param {quat} a the source quaternion
                                 * @returns {quat} out
                                 * @function
                                 */
                                quat.copy = vec4.copy;

                                /**
                                 * Set the components of a quat to the given values
                                 *
                                 * @param {quat} out the receiving quaternion
                                 * @param {Number} x X component
                                 * @param {Number} y Y component
                                 * @param {Number} z Z component
                                 * @param {Number} w W component
                                 * @returns {quat} out
                                 * @function
                                 */
                                quat.set = vec4.set;

                                /**
                                 * Set a quat to the identity quaternion
                                 *
                                 * @param {quat} out the receiving quaternion
                                 * @returns {quat} out
                                 */
                                quat.identity = function(out) {
                                    out[0] = 0;
                                    out[1] = 0;
                                    out[2] = 0;
                                    out[3] = 1;
                                    return out;
                                };

                                /**
                                 * Sets a quat from the given angle and rotation axis,
                                 * then returns it.
                                 *
                                 * @param {quat} out the receiving quaternion
                                 * @param {vec3} axis the axis around which to rotate
                                 * @param {Number} rad the angle in radians
                                 * @returns {quat} out
                                 **/
                                quat.setAxisAngle = function(out, axis, rad) {
                                    rad = rad * 0.5;
                                    var s = Math.sin(rad);
                                    out[0] = s * axis[0];
                                    out[1] = s * axis[1];
                                    out[2] = s * axis[2];
                                    out[3] = Math.cos(rad);
                                    return out;
                                };

                                /**
                                 * Adds two quat's
                                 *
                                 * @param {quat} out the receiving quaternion
                                 * @param {quat} a the first operand
                                 * @param {quat} b the second operand
                                 * @returns {quat} out
                                 * @function
                                 */
                                quat.add = vec4.add;

                                /**
                                 * Multiplies two quat's
                                 *
                                 * @param {quat} out the receiving quaternion
                                 * @param {quat} a the first operand
                                 * @param {quat} b the second operand
                                 * @returns {quat} out
                                 */
                                quat.multiply = function(out, a, b) {
                                    var ax = a[0],
                                        ay = a[1],
                                        az = a[2],
                                        aw = a[3],
                                        bx = b[0],
                                        by = b[1],
                                        bz = b[2],
                                        bw = b[3];

                                    out[0] = ax * bw + aw * bx + ay * bz - az * by;
                                    out[1] = ay * bw + aw * by + az * bx - ax * bz;
                                    out[2] = az * bw + aw * bz + ax * by - ay * bx;
                                    out[3] = aw * bw - ax * bx - ay * by - az * bz;
                                    return out;
                                };

                                /**
                                 * Alias for {@link quat.multiply}
                                 * @function
                                 */
                                quat.mul = quat.multiply;

                                /**
                                 * Scales a quat by a scalar number
                                 *
                                 * @param {quat} out the receiving vector
                                 * @param {quat} a the vector to scale
                                 * @param {Number} b amount to scale the vector by
                                 * @returns {quat} out
                                 * @function
                                 */
                                quat.scale = vec4.scale;

                                /**
                                 * Rotates a quaternion by the given angle about the X axis
                                 *
                                 * @param {quat} out quat receiving operation result
                                 * @param {quat} a quat to rotate
                                 * @param {number} rad angle (in radians) to rotate
                                 * @returns {quat} out
                                 */
                                quat.rotateX = function(out, a, rad) {
                                    rad *= 0.5;

                                    var ax = a[0],
                                        ay = a[1],
                                        az = a[2],
                                        aw = a[3],
                                        bx = Math.sin(rad),
                                        bw = Math.cos(rad);

                                    out[0] = ax * bw + aw * bx;
                                    out[1] = ay * bw + az * bx;
                                    out[2] = az * bw - ay * bx;
                                    out[3] = aw * bw - ax * bx;
                                    return out;
                                };

                                /**
                                 * Rotates a quaternion by the given angle about the Y axis
                                 *
                                 * @param {quat} out quat receiving operation result
                                 * @param {quat} a quat to rotate
                                 * @param {number} rad angle (in radians) to rotate
                                 * @returns {quat} out
                                 */
                                quat.rotateY = function(out, a, rad) {
                                    rad *= 0.5;

                                    var ax = a[0],
                                        ay = a[1],
                                        az = a[2],
                                        aw = a[3],
                                        by = Math.sin(rad),
                                        bw = Math.cos(rad);

                                    out[0] = ax * bw - az * by;
                                    out[1] = ay * bw + aw * by;
                                    out[2] = az * bw + ax * by;
                                    out[3] = aw * bw - ay * by;
                                    return out;
                                };

                                /**
                                 * Rotates a quaternion by the given angle about the Z axis
                                 *
                                 * @param {quat} out quat receiving operation result
                                 * @param {quat} a quat to rotate
                                 * @param {number} rad angle (in radians) to rotate
                                 * @returns {quat} out
                                 */
                                quat.rotateZ = function(out, a, rad) {
                                    rad *= 0.5;

                                    var ax = a[0],
                                        ay = a[1],
                                        az = a[2],
                                        aw = a[3],
                                        bz = Math.sin(rad),
                                        bw = Math.cos(rad);

                                    out[0] = ax * bw + ay * bz;
                                    out[1] = ay * bw - ax * bz;
                                    out[2] = az * bw + aw * bz;
                                    out[3] = aw * bw - az * bz;
                                    return out;
                                };

                                /**
                                 * Calculates the W component of a quat from the X, Y, and Z components.
                                 * Assumes that quaternion is 1 unit in length.
                                 * Any existing W component will be ignored.
                                 *
                                 * @param {quat} out the receiving quaternion
                                 * @param {quat} a quat to calculate W component of
                                 * @returns {quat} out
                                 */
                                quat.calculateW = function(out, a) {
                                    var x = a[0],
                                        y = a[1],
                                        z = a[2];

                                    out[0] = x;
                                    out[1] = y;
                                    out[2] = z;
                                    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
                                    return out;
                                };

                                /**
                                 * Calculates the dot product of two quat's
                                 *
                                 * @param {quat} a the first operand
                                 * @param {quat} b the second operand
                                 * @returns {Number} dot product of a and b
                                 * @function
                                 */
                                quat.dot = vec4.dot;

                                /**
                                 * Performs a linear interpolation between two quat's
                                 *
                                 * @param {quat} out the receiving quaternion
                                 * @param {quat} a the first operand
                                 * @param {quat} b the second operand
                                 * @param {Number} t interpolation amount between the two inputs
                                 * @returns {quat} out
                                 * @function
                                 */
                                quat.lerp = vec4.lerp;

                                /**
                                 * Performs a spherical linear interpolation between two quat
                                 *
                                 * @param {quat} out the receiving quaternion
                                 * @param {quat} a the first operand
                                 * @param {quat} b the second operand
                                 * @param {Number} t interpolation amount between the two inputs
                                 * @returns {quat} out
                                 */
                                quat.slerp = function(out, a, b, t) {
                                    // benchmarks:
                                    //    http://jsperf.com/quaternion-slerp-implementations

                                    var ax = a[0],
                                        ay = a[1],
                                        az = a[2],
                                        aw = a[3],
                                        bx = b[0],
                                        by = b[1],
                                        bz = b[2],
                                        bw = b[3];

                                    var omega, cosom, sinom, scale0, scale1;

                                    // calc cosine
                                    cosom = ax * bx + ay * by + az * bz + aw * bw;
                                    // adjust signs (if necessary)
                                    if (cosom < 0.0) {
                                        cosom = -cosom;
                                        bx = -bx;
                                        by = -by;
                                        bz = -bz;
                                        bw = -bw;
                                    }
                                    // calculate coefficients
                                    if ((1.0 - cosom) > 0.000001) {
                                        // standard case (slerp)
                                        omega = Math.acos(cosom);
                                        sinom = Math.sin(omega);
                                        scale0 = Math.sin((1.0 - t) * omega) / sinom;
                                        scale1 = Math.sin(t * omega) / sinom;
                                    } else {
                                        // "from" and "to" quaternions are very close
                                        //  ... so we can do a linear interpolation
                                        scale0 = 1.0 - t;
                                        scale1 = t;
                                    }
                                    // calculate final values
                                    out[0] = scale0 * ax + scale1 * bx;
                                    out[1] = scale0 * ay + scale1 * by;
                                    out[2] = scale0 * az + scale1 * bz;
                                    out[3] = scale0 * aw + scale1 * bw;

                                    return out;
                                };

                                /**
                                 * Calculates the inverse of a quat
                                 *
                                 * @param {quat} out the receiving quaternion
                                 * @param {quat} a quat to calculate inverse of
                                 * @returns {quat} out
                                 */
                                quat.invert = function(out, a) {
                                    var a0 = a[0],
                                        a1 = a[1],
                                        a2 = a[2],
                                        a3 = a[3],
                                        dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3,
                                        invDot = dot ? 1.0 / dot : 0;

                                    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

                                    out[0] = -a0 * invDot;
                                    out[1] = -a1 * invDot;
                                    out[2] = -a2 * invDot;
                                    out[3] = a3 * invDot;
                                    return out;
                                };

                                /**
                                 * Calculates the conjugate of a quat
                                 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
                                 *
                                 * @param {quat} out the receiving quaternion
                                 * @param {quat} a quat to calculate conjugate of
                                 * @returns {quat} out
                                 */
                                quat.conjugate = function(out, a) {
                                    out[0] = -a[0];
                                    out[1] = -a[1];
                                    out[2] = -a[2];
                                    out[3] = a[3];
                                    return out;
                                };

                                /**
                                 * Calculates the length of a quat
                                 *
                                 * @param {quat} a vector to calculate length of
                                 * @returns {Number} length of a
                                 * @function
                                 */
                                quat.length = vec4.length;

                                /**
                                 * Alias for {@link quat.length}
                                 * @function
                                 */
                                quat.len = quat.length;

                                /**
                                 * Calculates the squared length of a quat
                                 *
                                 * @param {quat} a vector to calculate squared length of
                                 * @returns {Number} squared length of a
                                 * @function
                                 */
                                quat.squaredLength = vec4.squaredLength;

                                /**
                                 * Alias for {@link quat.squaredLength}
                                 * @function
                                 */
                                quat.sqrLen = quat.squaredLength;

                                /**
                                 * Normalize a quat
                                 *
                                 * @param {quat} out the receiving quaternion
                                 * @param {quat} a quaternion to normalize
                                 * @returns {quat} out
                                 * @function
                                 */
                                quat.normalize = vec4.normalize;

                                /**
                                 * Creates a quaternion from the given 3x3 rotation matrix.
                                 *
                                 * NOTE: The resultant quaternion is not normalized, so you should be sure
                                 * to renormalize the quaternion yourself where necessary.
                                 *
                                 * @param {quat} out the receiving quaternion
                                 * @param {mat3} m rotation matrix
                                 * @returns {quat} out
                                 * @function
                                 */
                                quat.fromMat3 = function(out, m) {
                                    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
                                    // article "Quaternion Calculus and Fast Animation".
                                    var fTrace = m[0] + m[4] + m[8];
                                    var fRoot;

                                    if (fTrace > 0.0) {
                                        // |w| > 1/2, may as well choose w > 1/2
                                        fRoot = Math.sqrt(fTrace + 1.0); // 2w
                                        out[3] = 0.5 * fRoot;
                                        fRoot = 0.5 / fRoot; // 1/(4w)
                                        out[0] = (m[5] - m[7]) * fRoot;
                                        out[1] = (m[6] - m[2]) * fRoot;
                                        out[2] = (m[1] - m[3]) * fRoot;
                                    } else {
                                        // |w| <= 1/2
                                        var i = 0;
                                        if (m[4] > m[0])
                                            i = 1;
                                        if (m[8] > m[i * 3 + i])
                                            i = 2;
                                        var j = (i + 1) % 3;
                                        var k = (i + 2) % 3;

                                        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
                                        out[i] = 0.5 * fRoot;
                                        fRoot = 0.5 / fRoot;
                                        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
                                        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
                                        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
                                    }

                                    return out;
                                };

                                /**
                                 * Returns a string representation of a quatenion
                                 *
                                 * @param {quat} vec vector to represent as a string
                                 * @returns {String} string representation of the vector
                                 */
                                quat.str = function(a) {
                                    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
                                };

                                if (typeof(exports) !== 'undefined') {
                                    exports.quat = quat;
                                };













                            })(shim.exports);
                        })(this);

                        /***/
                    }),
                    /* 2 */
                    /***/
                    (function(module, exports) {

                        /**
                         * @module zrender/core/util
                         */
                        // 用于处理merge时无法遍历Date等对象的问题
                        var BUILTIN_OBJECT = {
                            '[object Function]': 1,
                            '[object RegExp]': 1,
                            '[object Date]': 1,
                            '[object Error]': 1,
                            '[object CanvasGradient]': 1,
                            '[object CanvasPattern]': 1,
                            // For node-canvas
                            '[object Image]': 1,
                            '[object Canvas]': 1
                        };
                        var TYPED_ARRAY = {
                            '[object Int8Array]': 1,
                            '[object Uint8Array]': 1,
                            '[object Uint8ClampedArray]': 1,
                            '[object Int16Array]': 1,
                            '[object Uint16Array]': 1,
                            '[object Int32Array]': 1,
                            '[object Uint32Array]': 1,
                            '[object Float32Array]': 1,
                            '[object Float64Array]': 1
                        };
                        var objToString = Object.prototype.toString;
                        var arrayProto = Array.prototype;
                        var nativeForEach = arrayProto.forEach;
                        var nativeFilter = arrayProto.filter;
                        var nativeSlice = arrayProto.slice;
                        var nativeMap = arrayProto.map;
                        var nativeReduce = arrayProto.reduce; // Avoid assign to an exported variable, for transforming to cjs.

                        var methods = {};

                        function $override(name, fn) {
                            methods[name] = fn;
                        }
                        /**
                         * Those data types can be cloned:
                         *     Plain object, Array, TypedArray, number, string, null, undefined.
                         * Those data types will be assgined using the orginal data:
                         *     BUILTIN_OBJECT
                         * Instance of user defined class will be cloned to a plain object, without
                         * properties in prototype.
                         * Other data types is not supported (not sure what will happen).
                         *
                         * Caution: do not support clone Date, for performance consideration.
                         * (There might be a large number of date in `series.data`).
                         * So date should not be modified in and out of echarts.
                         *
                         * @param {*} source
                         * @return {*} new
                         */


                        function clone(source) {
                            if (source == null || typeof source != 'object') {
                                return source;
                            }

                            var result = source;
                            var typeStr = objToString.call(source);

                            if (typeStr === '[object Array]') {
                                result = [];

                                for (var i = 0, len = source.length; i < len; i++) {
                                    result[i] = clone(source[i]);
                                }
                            } else if (TYPED_ARRAY[typeStr]) {
                                var Ctor = source.constructor;

                                if (source.constructor.from) {
                                    result = Ctor.from(source);
                                } else {
                                    result = new Ctor(source.length);

                                    for (var i = 0, len = source.length; i < len; i++) {
                                        result[i] = clone(source[i]);
                                    }
                                }
                            } else if (!BUILTIN_OBJECT[typeStr] && !isPrimitive(source) && !isDom(source)) {
                                result = {};

                                for (var key in source) {
                                    if (source.hasOwnProperty(key)) {
                                        result[key] = clone(source[key]);
                                    }
                                }
                            }

                            return result;
                        }
                        /**
                         * @memberOf module:zrender/core/util
                         * @param {*} target
                         * @param {*} source
                         * @param {boolean} [overwrite=false]
                         */


                        function merge(target, source, overwrite) {
                            // We should escapse that source is string
                            // and enter for ... in ...
                            if (!isObject(source) || !isObject(target)) {
                                return overwrite ? clone(source) : target;
                            }

                            for (var key in source) {
                                if (source.hasOwnProperty(key)) {
                                    var targetProp = target[key];
                                    var sourceProp = source[key];

                                    if (isObject(sourceProp) && isObject(targetProp) && !isArray(sourceProp) && !isArray(targetProp) && !isDom(sourceProp) && !isDom(targetProp) && !isBuiltInObject(sourceProp) && !isBuiltInObject(targetProp) && !isPrimitive(sourceProp) && !isPrimitive(targetProp)) {
                                        // 如果需要递归覆盖，就递归调用merge
                                        merge(targetProp, sourceProp, overwrite);
                                    } else if (overwrite || !(key in target)) {
                                        // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况
                                        // NOTE，在 target[key] 不存在的时候也是直接覆盖
                                        target[key] = clone(source[key], true);
                                    }
                                }
                            }

                            return target;
                        }
                        /**
                         * @param {Array} targetAndSources The first item is target, and the rests are source.
                         * @param {boolean} [overwrite=false]
                         * @return {*} target
                         */


                        function mergeAll(targetAndSources, overwrite) {
                            var result = targetAndSources[0];

                            for (var i = 1, len = targetAndSources.length; i < len; i++) {
                                result = merge(result, targetAndSources[i], overwrite);
                            }

                            return result;
                        }
                        /**
                         * @param {*} target
                         * @param {*} source
                         * @memberOf module:zrender/core/util
                         */


                        function extend(target, source) {
                            for (var key in source) {
                                if (source.hasOwnProperty(key)) {
                                    target[key] = source[key];
                                }
                            }

                            return target;
                        }
                        /**
                         * @param {*} target
                         * @param {*} source
                         * @param {boolean} [overlay=false]
                         * @memberOf module:zrender/core/util
                         */


                        function defaults(target, source, overlay) {
                            for (var key in source) {
                                if (source.hasOwnProperty(key) && (overlay ? source[key] != null : target[key] == null)) {
                                    target[key] = source[key];
                                }
                            }

                            return target;
                        }

                        var createCanvas = function() {
                            return methods.createCanvas();
                        };

                        methods.createCanvas = function() {
                            return document.createElement('canvas');
                        }; // FIXME


                        var _ctx;

                        function getContext() {
                            if (!_ctx) {
                                // Use util.createCanvas instead of createCanvas
                                // because createCanvas may be overwritten in different environment
                                _ctx = createCanvas().getContext('2d');
                            }

                            return _ctx;
                        }
                        /**
                         * 查询数组中元素的index
                         * @memberOf module:zrender/core/util
                         */


                        function indexOf(array, value) {
                            if (array) {
                                if (array.indexOf) {
                                    return array.indexOf(value);
                                }

                                for (var i = 0, len = array.length; i < len; i++) {
                                    if (array[i] === value) {
                                        return i;
                                    }
                                }
                            }

                            return -1;
                        }
                        /**
                         * 构造类继承关系
                         *
                         * @memberOf module:zrender/core/util
                         * @param {Function} clazz 源类
                         * @param {Function} baseClazz 基类
                         */


                        function inherits(clazz, baseClazz) {
                            var clazzPrototype = clazz.prototype;

                            function F() {}

                            F.prototype = baseClazz.prototype;
                            clazz.prototype = new F();

                            for (var prop in clazzPrototype) {
                                clazz.prototype[prop] = clazzPrototype[prop];
                            }

                            clazz.prototype.constructor = clazz;
                            clazz.superClass = baseClazz;
                        }
                        /**
                         * @memberOf module:zrender/core/util
                         * @param {Object|Function} target
                         * @param {Object|Function} sorce
                         * @param {boolean} overlay
                         */


                        function mixin(target, source, overlay) {
                            target = 'prototype' in target ? target.prototype : target;
                            source = 'prototype' in source ? source.prototype : source;
                            defaults(target, source, overlay);
                        }
                        /**
                         * Consider typed array.
                         * @param {Array|TypedArray} data
                         */


                        function isArrayLike(data) {
                            if (!data) {
                                return;
                            }

                            if (typeof data == 'string') {
                                return false;
                            }

                            return typeof data.length == 'number';
                        }
                        /**
                         * 数组或对象遍历
                         * @memberOf module:zrender/core/util
                         * @param {Object|Array} obj
                         * @param {Function} cb
                         * @param {*} [context]
                         */


                        function each(obj, cb, context) {
                            if (!(obj && cb)) {
                                return;
                            }

                            if (obj.forEach && obj.forEach === nativeForEach) {
                                obj.forEach(cb, context);
                            } else if (obj.length === +obj.length) {
                                for (var i = 0, len = obj.length; i < len; i++) {
                                    cb.call(context, obj[i], i, obj);
                                }
                            } else {
                                for (var key in obj) {
                                    if (obj.hasOwnProperty(key)) {
                                        cb.call(context, obj[key], key, obj);
                                    }
                                }
                            }
                        }
                        /**
                         * 数组映射
                         * @memberOf module:zrender/core/util
                         * @param {Array} obj
                         * @param {Function} cb
                         * @param {*} [context]
                         * @return {Array}
                         */


                        function map(obj, cb, context) {
                            if (!(obj && cb)) {
                                return;
                            }

                            if (obj.map && obj.map === nativeMap) {
                                return obj.map(cb, context);
                            } else {
                                var result = [];

                                for (var i = 0, len = obj.length; i < len; i++) {
                                    result.push(cb.call(context, obj[i], i, obj));
                                }

                                return result;
                            }
                        }
                        /**
                         * @memberOf module:zrender/core/util
                         * @param {Array} obj
                         * @param {Function} cb
                         * @param {Object} [memo]
                         * @param {*} [context]
                         * @return {Array}
                         */


                        function reduce(obj, cb, memo, context) {
                            if (!(obj && cb)) {
                                return;
                            }

                            if (obj.reduce && obj.reduce === nativeReduce) {
                                return obj.reduce(cb, memo, context);
                            } else {
                                for (var i = 0, len = obj.length; i < len; i++) {
                                    memo = cb.call(context, memo, obj[i], i, obj);
                                }

                                return memo;
                            }
                        }
                        /**
                         * 数组过滤
                         * @memberOf module:zrender/core/util
                         * @param {Array} obj
                         * @param {Function} cb
                         * @param {*} [context]
                         * @return {Array}
                         */


                        function filter(obj, cb, context) {
                            if (!(obj && cb)) {
                                return;
                            }

                            if (obj.filter && obj.filter === nativeFilter) {
                                return obj.filter(cb, context);
                            } else {
                                var result = [];

                                for (var i = 0, len = obj.length; i < len; i++) {
                                    if (cb.call(context, obj[i], i, obj)) {
                                        result.push(obj[i]);
                                    }
                                }

                                return result;
                            }
                        }
                        /**
                         * 数组项查找
                         * @memberOf module:zrender/core/util
                         * @param {Array} obj
                         * @param {Function} cb
                         * @param {*} [context]
                         * @return {*}
                         */


                        function find(obj, cb, context) {
                            if (!(obj && cb)) {
                                return;
                            }

                            for (var i = 0, len = obj.length; i < len; i++) {
                                if (cb.call(context, obj[i], i, obj)) {
                                    return obj[i];
                                }
                            }
                        }
                        /**
                         * @memberOf module:zrender/core/util
                         * @param {Function} func
                         * @param {*} context
                         * @return {Function}
                         */


                        function bind(func, context) {
                            var args = nativeSlice.call(arguments, 2);
                            return function() {
                                return func.apply(context, args.concat(nativeSlice.call(arguments)));
                            };
                        }
                        /**
                         * @memberOf module:zrender/core/util
                         * @param {Function} func
                         * @return {Function}
                         */


                        function curry(func) {
                            var args = nativeSlice.call(arguments, 1);
                            return function() {
                                return func.apply(this, args.concat(nativeSlice.call(arguments)));
                            };
                        }
                        /**
                         * @memberOf module:zrender/core/util
                         * @param {*} value
                         * @return {boolean}
                         */


                        function isArray(value) {
                            return objToString.call(value) === '[object Array]';
                        }
                        /**
                         * @memberOf module:zrender/core/util
                         * @param {*} value
                         * @return {boolean}
                         */


                        function isFunction(value) {
                            return typeof value === 'function';
                        }
                        /**
                         * @memberOf module:zrender/core/util
                         * @param {*} value
                         * @return {boolean}
                         */


                        function isString(value) {
                            return objToString.call(value) === '[object String]';
                        }
                        /**
                         * @memberOf module:zrender/core/util
                         * @param {*} value
                         * @return {boolean}
                         */


                        function isObject(value) {
                            // Avoid a V8 JIT bug in Chrome 19-20.
                            // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
                            var type = typeof value;
                            return type === 'function' || !!value && type == 'object';
                        }
                        /**
                         * @memberOf module:zrender/core/util
                         * @param {*} value
                         * @return {boolean}
                         */


                        function isBuiltInObject(value) {
                            return !!BUILTIN_OBJECT[objToString.call(value)];
                        }
                        /**
                         * @memberOf module:zrender/core/util
                         * @param {*} value
                         * @return {boolean}
                         */


                        function isDom(value) {
                            return typeof value === 'object' && typeof value.nodeType === 'number' && typeof value.ownerDocument === 'object';
                        }
                        /**
                         * Whether is exactly NaN. Notice isNaN('a') returns true.
                         * @param {*} value
                         * @return {boolean}
                         */


                        function eqNaN(value) {
                            return value !== value;
                        }
                        /**
                         * If value1 is not null, then return value1, otherwise judget rest of values.
                         * Low performance.
                         * @memberOf module:zrender/core/util
                         * @return {*} Final value
                         */


                        function retrieve(values) {
                            for (var i = 0, len = arguments.length; i < len; i++) {
                                if (arguments[i] != null) {
                                    return arguments[i];
                                }
                            }
                        }

                        function retrieve2(value0, value1) {
                            return value0 != null ? value0 : value1;
                        }

                        function retrieve3(value0, value1, value2) {
                            return value0 != null ? value0 : value1 != null ? value1 : value2;
                        }
                        /**
                         * @memberOf module:zrender/core/util
                         * @param {Array} arr
                         * @param {number} startIndex
                         * @param {number} endIndex
                         * @return {Array}
                         */


                        function slice() {
                            return Function.call.apply(nativeSlice, arguments);
                        }
                        /**
                         * Normalize css liked array configuration
                         * e.g.
                         *  3 => [3, 3, 3, 3]
                         *  [4, 2] => [4, 2, 4, 2]
                         *  [4, 3, 2] => [4, 3, 2, 3]
                         * @param {number|Array.<number>} val
                         * @return {Array.<number>}
                         */


                        function normalizeCssArray(val) {
                            if (typeof val === 'number') {
                                return [val, val, val, val];
                            }

                            var len = val.length;

                            if (len === 2) {
                                // vertical | horizontal
                                return [val[0], val[1], val[0], val[1]];
                            } else if (len === 3) {
                                // top | horizontal | bottom
                                return [val[0], val[1], val[2], val[1]];
                            }

                            return val;
                        }
                        /**
                         * @memberOf module:zrender/core/util
                         * @param {boolean} condition
                         * @param {string} message
                         */


                        function assert(condition, message) {
                            if (!condition) {
                                throw new Error(message);
                            }
                        }

                        var primitiveKey = '__ec_primitive__';
                        /**
                         * Set an object as primitive to be ignored traversing children in clone or merge
                         */

                        function setAsPrimitive(obj) {
                            obj[primitiveKey] = true;
                        }

                        function isPrimitive(obj) {
                            return obj[primitiveKey];
                        }
                        /**
                         * @constructor
                         * @param {Object} obj Only apply `ownProperty`.
                         */


                        function HashMap(obj) {
                            obj && each(obj, function(value, key) {
                                this.set(key, value);
                            }, this);
                        } // Add prefix to avoid conflict with Object.prototype.


                        var HASH_MAP_PREFIX = '_ec_';
                        var HASH_MAP_PREFIX_LENGTH = 4;
                        HashMap.prototype = {
                            constructor: HashMap,
                            // Do not provide `has` method to avoid defining what is `has`.
                            // (We usually treat `null` and `undefined` as the same, different
                            // from ES6 Map).
                            get: function(key) {
                                return this[HASH_MAP_PREFIX + key];
                            },
                            set: function(key, value) {
                                this[HASH_MAP_PREFIX + key] = value; // Comparing with invocation chaining, `return value` is more commonly
                                // used in this case: `var someVal = map.set('a', genVal());`

                                return value;
                            },
                            // Although util.each can be performed on this hashMap directly, user
                            // should not use the exposed keys, who are prefixed.
                            each: function(cb, context) {
                                context !== void 0 && (cb = bind(cb, context));

                                for (var prefixedKey in this) {
                                    this.hasOwnProperty(prefixedKey) && cb(this[prefixedKey], prefixedKey.slice(HASH_MAP_PREFIX_LENGTH));
                                }
                            },
                            // Do not use this method if performance sensitive.
                            removeKey: function(key) {
                                delete this[HASH_MAP_PREFIX + key];
                            }
                        };

                        function createHashMap(obj) {
                            return new HashMap(obj);
                        }

                        function noop() {}

                        exports.$override = $override;
                        exports.clone = clone;
                        exports.merge = merge;
                        exports.mergeAll = mergeAll;
                        exports.extend = extend;
                        exports.defaults = defaults;
                        exports.createCanvas = createCanvas;
                        exports.getContext = getContext;
                        exports.indexOf = indexOf;
                        exports.inherits = inherits;
                        exports.mixin = mixin;
                        exports.isArrayLike = isArrayLike;
                        exports.each = each;
                        exports.map = map;
                        exports.reduce = reduce;
                        exports.filter = filter;
                        exports.find = find;
                        exports.bind = bind;
                        exports.curry = curry;
                        exports.isArray = isArray;
                        exports.isFunction = isFunction;
                        exports.isString = isString;
                        exports.isObject = isObject;
                        exports.isBuiltInObject = isBuiltInObject;
                        exports.isDom = isDom;
                        exports.eqNaN = eqNaN;
                        exports.retrieve = retrieve;
                        exports.retrieve2 = retrieve2;
                        exports.retrieve3 = retrieve3;
                        exports.slice = slice;
                        exports.normalizeCssArray = normalizeCssArray;
                        exports.assert = assert;
                        exports.setAsPrimitive = setAsPrimitive;
                        exports.isPrimitive = isPrimitive;
                        exports.createHashMap = createHashMap;
                        exports.noop = noop;

                        /***/
                    }),
                    /* 3 */
                    /***/
                    (function(module, exports, __webpack_require__) {

                        var zrUtil = __webpack_require__(2);

                        var BoundingRect = __webpack_require__(7);

                        var _number = __webpack_require__(8);

                        var parsePercent = _number.parsePercent;

                        var formatUtil = __webpack_require__(18);

                        // Layout helpers for each component positioning
                        var each = zrUtil.each;
                        /**
                         * @public
                         */

                        var LOCATION_PARAMS = ['left', 'right', 'top', 'bottom', 'width', 'height'];
                        /**
                         * @public
                         */

                        var HV_NAMES = [
                            ['width', 'left', 'right'],
                            ['height', 'top', 'bottom']
                        ];

                        function boxLayout(orient, group, gap, maxWidth, maxHeight) {
                            var x = 0;
                            var y = 0;

                            if (maxWidth == null) {
                                maxWidth = Infinity;
                            }

                            if (maxHeight == null) {
                                maxHeight = Infinity;
                            }

                            var currentLineMaxSize = 0;
                            group.eachChild(function(child, idx) {
                                var position = child.position;
                                var rect = child.getBoundingRect();
                                var nextChild = group.childAt(idx + 1);
                                var nextChildRect = nextChild && nextChild.getBoundingRect();
                                var nextX;
                                var nextY;

                                if (orient === 'horizontal') {
                                    var moveX = rect.width + (nextChildRect ? -nextChildRect.x + rect.x : 0);
                                    nextX = x + moveX; // Wrap when width exceeds maxWidth or meet a `newline` group
                                    // FIXME compare before adding gap?

                                    if (nextX > maxWidth || child.newline) {
                                        x = 0;
                                        nextX = moveX;
                                        y += currentLineMaxSize + gap;
                                        currentLineMaxSize = rect.height;
                                    } else {
                                        // FIXME: consider rect.y is not `0`?
                                        currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);
                                    }
                                } else {
                                    var moveY = rect.height + (nextChildRect ? -nextChildRect.y + rect.y : 0);
                                    nextY = y + moveY; // Wrap when width exceeds maxHeight or meet a `newline` group

                                    if (nextY > maxHeight || child.newline) {
                                        x += currentLineMaxSize + gap;
                                        y = 0;
                                        nextY = moveY;
                                        currentLineMaxSize = rect.width;
                                    } else {
                                        currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);
                                    }
                                }

                                if (child.newline) {
                                    return;
                                }

                                position[0] = x;
                                position[1] = y;
                                orient === 'horizontal' ? x = nextX + gap : y = nextY + gap;
                            });
                        }
                        /**
                         * VBox or HBox layouting
                         * @param {string} orient
                         * @param {module:zrender/container/Group} group
                         * @param {number} gap
                         * @param {number} [width=Infinity]
                         * @param {number} [height=Infinity]
                         */


                        var box = boxLayout;
                        /**
                         * VBox layouting
                         * @param {module:zrender/container/Group} group
                         * @param {number} gap
                         * @param {number} [width=Infinity]
                         * @param {number} [height=Infinity]
                         */

                        var vbox = zrUtil.curry(boxLayout, 'vertical');
                        /**
                         * HBox layouting
                         * @param {module:zrender/container/Group} group
                         * @param {number} gap
                         * @param {number} [width=Infinity]
                         * @param {number} [height=Infinity]
                         */

                        var hbox = zrUtil.curry(boxLayout, 'horizontal');
                        /**
                         * If x or x2 is not specified or 'center' 'left' 'right',
                         * the width would be as long as possible.
                         * If y or y2 is not specified or 'middle' 'top' 'bottom',
                         * the height would be as long as possible.
                         *
                         * @param {Object} positionInfo
                         * @param {number|string} [positionInfo.x]
                         * @param {number|string} [positionInfo.y]
                         * @param {number|string} [positionInfo.x2]
                         * @param {number|string} [positionInfo.y2]
                         * @param {Object} containerRect {width, height}
                         * @param {string|number} margin
                         * @return {Object} {width, height}
                         */

                        function getAvailableSize(positionInfo, containerRect, margin) {
                            var containerWidth = containerRect.width;
                            var containerHeight = containerRect.height;
                            var x = parsePercent(positionInfo.x, containerWidth);
                            var y = parsePercent(positionInfo.y, containerHeight);
                            var x2 = parsePercent(positionInfo.x2, containerWidth);
                            var y2 = parsePercent(positionInfo.y2, containerHeight);
                            (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);
                            (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);
                            (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);
                            (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);
                            margin = formatUtil.normalizeCssArray(margin || 0);
                            return {
                                width: Math.max(x2 - x - margin[1] - margin[3], 0),
                                height: Math.max(y2 - y - margin[0] - margin[2], 0)
                            };
                        }
                        /**
                         * Parse position info.
                         *
                         * @param {Object} positionInfo
                         * @param {number|string} [positionInfo.left]
                         * @param {number|string} [positionInfo.top]
                         * @param {number|string} [positionInfo.right]
                         * @param {number|string} [positionInfo.bottom]
                         * @param {number|string} [positionInfo.width]
                         * @param {number|string} [positionInfo.height]
                         * @param {number|string} [positionInfo.aspect] Aspect is width / height
                         * @param {Object} containerRect
                         * @param {string|number} [margin]
                         *
                         * @return {module:zrender/core/BoundingRect}
                         */


                        function getLayoutRect(positionInfo, containerRect, margin) {
                            margin = formatUtil.normalizeCssArray(margin || 0);
                            var containerWidth = containerRect.width;
                            var containerHeight = containerRect.height;
                            var left = parsePercent(positionInfo.left, containerWidth);
                            var top = parsePercent(positionInfo.top, containerHeight);
                            var right = parsePercent(positionInfo.right, containerWidth);
                            var bottom = parsePercent(positionInfo.bottom, containerHeight);
                            var width = parsePercent(positionInfo.width, containerWidth);
                            var height = parsePercent(positionInfo.height, containerHeight);
                            var verticalMargin = margin[2] + margin[0];
                            var horizontalMargin = margin[1] + margin[3];
                            var aspect = positionInfo.aspect; // If width is not specified, calculate width from left and right

                            if (isNaN(width)) {
                                width = containerWidth - right - horizontalMargin - left;
                            }

                            if (isNaN(height)) {
                                height = containerHeight - bottom - verticalMargin - top;
                            }

                            if (aspect != null) {
                                // If width and height are not given
                                // 1. Graph should not exceeds the container
                                // 2. Aspect must be keeped
                                // 3. Graph should take the space as more as possible
                                // FIXME
                                // Margin is not considered, because there is no case that both
                                // using margin and aspect so far.
                                if (isNaN(width) && isNaN(height)) {
                                    if (aspect > containerWidth / containerHeight) {
                                        width = containerWidth * 0.8;
                                    } else {
                                        height = containerHeight * 0.8;
                                    }
                                } // Calculate width or height with given aspect


                                if (isNaN(width)) {
                                    width = aspect * height;
                                }

                                if (isNaN(height)) {
                                    height = width / aspect;
                                }
                            } // If left is not specified, calculate left from right and width


                            if (isNaN(left)) {
                                left = containerWidth - right - width - horizontalMargin;
                            }

                            if (isNaN(top)) {
                                top = containerHeight - bottom - height - verticalMargin;
                            } // Align left and top


                            switch (positionInfo.left || positionInfo.right) {
                                case 'center':
                                    left = containerWidth / 2 - width / 2 - margin[3];
                                    break;

                                case 'right':
                                    left = containerWidth - width - horizontalMargin;
                                    break;
                            }

                            switch (positionInfo.top || positionInfo.bottom) {
                                case 'middle':
                                case 'center':
                                    top = containerHeight / 2 - height / 2 - margin[0];
                                    break;

                                case 'bottom':
                                    top = containerHeight - height - verticalMargin;
                                    break;
                            } // If something is wrong and left, top, width, height are calculated as NaN


                            left = left || 0;
                            top = top || 0;

                            if (isNaN(width)) {
                                // Width may be NaN if only one value is given except width
                                width = containerWidth - horizontalMargin - left - (right || 0);
                            }

                            if (isNaN(height)) {
                                // Height may be NaN if only one value is given except height
                                height = containerHeight - verticalMargin - top - (bottom || 0);
                            }

                            var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);
                            rect.margin = margin;
                            return rect;
                        }
                        /**
                         * Position a zr element in viewport
                         *  Group position is specified by either
                         *  {left, top}, {right, bottom}
                         *  If all properties exists, right and bottom will be igonred.
                         *
                         * Logic:
                         *     1. Scale (against origin point in parent coord)
                         *     2. Rotate (against origin point in parent coord)
                         *     3. Traslate (with el.position by this method)
                         * So this method only fixes the last step 'Traslate', which does not affect
                         * scaling and rotating.
                         *
                         * If be called repeatly with the same input el, the same result will be gotten.
                         *
                         * @param {module:zrender/Element} el Should have `getBoundingRect` method.
                         * @param {Object} positionInfo
                         * @param {number|string} [positionInfo.left]
                         * @param {number|string} [positionInfo.top]
                         * @param {number|string} [positionInfo.right]
                         * @param {number|string} [positionInfo.bottom]
                         * @param {number|string} [positionInfo.width] Only for opt.boundingModel: 'raw'
                         * @param {number|string} [positionInfo.height] Only for opt.boundingModel: 'raw'
                         * @param {Object} containerRect
                         * @param {string|number} margin
                         * @param {Object} [opt]
                         * @param {Array.<number>} [opt.hv=[1,1]] Only horizontal or only vertical.
                         * @param {Array.<number>} [opt.boundingMode='all']
                         *        Specify how to calculate boundingRect when locating.
                         *        'all': Position the boundingRect that is transformed and uioned
                         *               both itself and its descendants.
                         *               This mode simplies confine the elements in the bounding
                         *               of their container (e.g., using 'right: 0').
                         *        'raw': Position the boundingRect that is not transformed and only itself.
                         *               This mode is useful when you want a element can overflow its
                         *               container. (Consider a rotated circle needs to be located in a corner.)
                         *               In this mode positionInfo.width/height can only be number.
                         */


                        function positionElement(el, positionInfo, containerRect, margin, opt) {
                            var h = !opt || !opt.hv || opt.hv[0];
                            var v = !opt || !opt.hv || opt.hv[1];
                            var boundingMode = opt && opt.boundingMode || 'all';

                            if (!h && !v) {
                                return;
                            }

                            var rect;

                            if (boundingMode === 'raw') {
                                rect = el.type === 'group' ? new BoundingRect(0, 0, +positionInfo.width || 0, +positionInfo.height || 0) : el.getBoundingRect();
                            } else {
                                rect = el.getBoundingRect();

                                if (el.needLocalTransform()) {
                                    var transform = el.getLocalTransform(); // Notice: raw rect may be inner object of el,
                                    // which should not be modified.

                                    rect = rect.clone();
                                    rect.applyTransform(transform);
                                }
                            } // The real width and height can not be specified but calculated by the given el.


                            positionInfo = getLayoutRect(zrUtil.defaults({
                                width: rect.width,
                                height: rect.height
                            }, positionInfo), containerRect, margin); // Because 'tranlate' is the last step in transform
                            // (see zrender/core/Transformable#getLocalTransfrom),
                            // we can just only modify el.position to get final result.

                            var elPos = el.position;
                            var dx = h ? positionInfo.x - rect.x : 0;
                            var dy = v ? positionInfo.y - rect.y : 0;
                            el.attr('position', boundingMode === 'raw' ? [dx, dy] : [elPos[0] + dx, elPos[1] + dy]);
                        }
                        /**
                         * @param {Object} option Contains some of the properties in HV_NAMES.
                         * @param {number} hvIdx 0: horizontal; 1: vertical.
                         */


                        function sizeCalculable(option, hvIdx) {
                            return option[HV_NAMES[hvIdx][0]] != null || option[HV_NAMES[hvIdx][1]] != null && option[HV_NAMES[hvIdx][2]] != null;
                        }
                        /**
                         * Consider Case:
                         * When defulat option has {left: 0, width: 100}, and we set {right: 0}
                         * through setOption or media query, using normal zrUtil.merge will cause
                         * {right: 0} does not take effect.
                         *
                         * @example
                         * ComponentModel.extend({
                         *     init: function () {
                         *         ...
                         *         var inputPositionParams = layout.getLayoutParams(option);
                         *         this.mergeOption(inputPositionParams);
                         *     },
                         *     mergeOption: function (newOption) {
                         *         newOption && zrUtil.merge(thisOption, newOption, true);
                         *         layout.mergeLayoutParam(thisOption, newOption);
                         *     }
                         * });
                         *
                         * @param {Object} targetOption
                         * @param {Object} newOption
                         * @param {Object|string} [opt]
                         * @param {boolean|Array.<boolean>} [opt.ignoreSize=false] Used for the components
                         *  that width (or height) should not be calculated by left and right (or top and bottom).
                         */


                        function mergeLayoutParam(targetOption, newOption, opt) {
                            !zrUtil.isObject(opt) && (opt = {});
                            var ignoreSize = opt.ignoreSize;
                            !zrUtil.isArray(ignoreSize) && (ignoreSize = [ignoreSize, ignoreSize]);
                            var hResult = merge(HV_NAMES[0], 0);
                            var vResult = merge(HV_NAMES[1], 1);
                            copy(HV_NAMES[0], targetOption, hResult);
                            copy(HV_NAMES[1], targetOption, vResult);

                            function merge(names, hvIdx) {
                                var newParams = {};
                                var newValueCount = 0;
                                var merged = {};
                                var mergedValueCount = 0;
                                var enoughParamNumber = 2;
                                each(names, function(name) {
                                    merged[name] = targetOption[name];
                                });
                                each(names, function(name) {
                                    // Consider case: newOption.width is null, which is
                                    // set by user for removing width setting.
                                    hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);
                                    hasValue(newParams, name) && newValueCount++;
                                    hasValue(merged, name) && mergedValueCount++;
                                });

                                if (ignoreSize[hvIdx]) {
                                    // Only one of left/right is premitted to exist.
                                    if (hasValue(newOption, names[1])) {
                                        merged[names[2]] = null;
                                    } else if (hasValue(newOption, names[2])) {
                                        merged[names[1]] = null;
                                    }

                                    return merged;
                                } // Case: newOption: {width: ..., right: ...},
                                // or targetOption: {right: ...} and newOption: {width: ...},
                                // There is no conflict when merged only has params count
                                // little than enoughParamNumber.


                                if (mergedValueCount === enoughParamNumber || !newValueCount) {
                                    return merged;
                                } // Case: newOption: {width: ..., right: ...},
                                // Than we can make sure user only want those two, and ignore
                                // all origin params in targetOption.
                                else if (newValueCount >= enoughParamNumber) {
                                    return newParams;
                                } else {
                                    // Chose another param from targetOption by priority.
                                    for (var i = 0; i < names.length; i++) {
                                        var name = names[i];

                                        if (!hasProp(newParams, name) && hasProp(targetOption, name)) {
                                            newParams[name] = targetOption[name];
                                            break;
                                        }
                                    }

                                    return newParams;
                                }
                            }

                            function hasProp(obj, name) {
                                return obj.hasOwnProperty(name);
                            }

                            function hasValue(obj, name) {
                                return obj[name] != null && obj[name] !== 'auto';
                            }

                            function copy(names, target, source) {
                                each(names, function(name) {
                                    target[name] = source[name];
                                });
                            }
                        }
                        /**
                         * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
                         * @param {Object} source
                         * @return {Object} Result contains those props.
                         */


                        function getLayoutParams(source) {
                            return copyLayoutParams({}, source);
                        }
                        /**
                         * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
                         * @param {Object} source
                         * @return {Object} Result contains those props.
                         */


                        function copyLayoutParams(target, source) {
                            source && target && each(LOCATION_PARAMS, function(name) {
                                source.hasOwnProperty(name) && (target[name] = source[name]);
                            });
                            return target;
                        }

                        exports.LOCATION_PARAMS = LOCATION_PARAMS;
                        exports.HV_NAMES = HV_NAMES;
                        exports.box = box;
                        exports.vbox = vbox;
                        exports.hbox = hbox;
                        exports.getAvailableSize = getAvailableSize;
                        exports.getLayoutRect = getLayoutRect;
                        exports.positionElement = positionElement;
                        exports.sizeCalculable = sizeCalculable;
                        exports.mergeLayoutParam = mergeLayoutParam;
                        exports.getLayoutParams = getLayoutParams;
                        exports.copyLayoutParams = copyLayoutParams;

                        /***/
                    }),
                    /* 4 */
                    /***/
                    (function(module, exports) {

                        function _default(seriesType, defaultSymbolType, legendSymbol, ecModel, api) {
                            // Encoding visual for all series include which is filtered for legend drawing
                            ecModel.eachRawSeriesByType(seriesType, function(seriesModel) {
                                var data = seriesModel.getData();
                                var symbolType = seriesModel.get('symbol') || defaultSymbolType;
                                var symbolSize = seriesModel.get('symbolSize');
                                data.setVisual({
                                    legendSymbol: legendSymbol || symbolType,
                                    symbol: symbolType,
                                    symbolSize: symbolSize
                                }); // Only visible series has each data be visual encoded

                                if (!ecModel.isSeriesFiltered(seriesModel)) {
                                    if (typeof symbolSize === 'function') {
                                        data.each(function(idx) {
                                            var rawValue = seriesModel.getRawValue(idx); // FIXME

                                            var params = seriesModel.getDataParams(idx);
                                            data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));
                                        });
                                    }

                                    data.each(function(idx) {
                                        var itemModel = data.getItemModel(idx);
                                        var itemSymbolType = itemModel.getShallow('symbol', true);
                                        var itemSymbolSize = itemModel.getShallow('symbolSize', true); // If has item symbol

                                        if (itemSymbolType != null) {
                                            data.setItemVisual(idx, 'symbol', itemSymbolType);
                                        }

                                        if (itemSymbolSize != null) {
                                            // PENDING Transform symbolSize ?
                                            data.setItemVisual(idx, 'symbolSize', itemSymbolSize);
                                        }
                                    });
                                }
                            });
                        }

                        module.exports = _default;

                        /***/
                    }),
                    /* 5 */
                    /***/
                    (function(module, exports) {

                        var _default = typeof window !== 'undefined' && (window.requestAnimationFrame && window.requestAnimationFrame.bind(window) || // https://github.com/ecomfe/zrender/issues/189#issuecomment-224919809
                            window.msRequestAnimationFrame && window.msRequestAnimationFrame.bind(window) || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame) || function(func) {
                            setTimeout(func, 16);
                        };

                        module.exports = _default;

                        /***/
                    }),
                    /* 6 */
                    /***/
                    (function(module, exports) {

                        // Simple LRU cache use doubly linked list
                        // @module zrender/core/LRU

                        /**
                         * Simple double linked list. Compared with array, it has O(1) remove operation.
                         * @constructor
                         */
                        var LinkedList = function() {
                            /**
                             * @type {module:zrender/core/LRU~Entry}
                             */
                            this.head = null;
                            /**
                             * @type {module:zrender/core/LRU~Entry}
                             */

                            this.tail = null;
                            this._len = 0;
                        };

                        var linkedListProto = LinkedList.prototype;
                        /**
                         * Insert a new value at the tail
                         * @param  {} val
                         * @return {module:zrender/core/LRU~Entry}
                         */

                        linkedListProto.insert = function(val) {
                            var entry = new Entry(val);
                            this.insertEntry(entry);
                            return entry;
                        };
                        /**
                         * Insert an entry at the tail
                         * @param  {module:zrender/core/LRU~Entry} entry
                         */


                        linkedListProto.insertEntry = function(entry) {
                            if (!this.head) {
                                this.head = this.tail = entry;
                            } else {
                                this.tail.next = entry;
                                entry.prev = this.tail;
                                entry.next = null;
                                this.tail = entry;
                            }

                            this._len++;
                        };
                        /**
                         * Remove entry.
                         * @param  {module:zrender/core/LRU~Entry} entry
                         */


                        linkedListProto.remove = function(entry) {
                            var prev = entry.prev;
                            var next = entry.next;

                            if (prev) {
                                prev.next = next;
                            } else {
                                // Is head
                                this.head = next;
                            }

                            if (next) {
                                next.prev = prev;
                            } else {
                                // Is tail
                                this.tail = prev;
                            }

                            entry.next = entry.prev = null;
                            this._len--;
                        };
                        /**
                         * @return {number}
                         */


                        linkedListProto.len = function() {
                            return this._len;
                        };
                        /**
                         * Clear list
                         */


                        linkedListProto.clear = function() {
                            this.head = this.tail = null;
                            this._len = 0;
                        };
                        /**
                         * @constructor
                         * @param {} val
                         */


                        var Entry = function(val) {
                            /**
                             * @type {}
                             */
                            this.value = val;
                            /**
                             * @type {module:zrender/core/LRU~Entry}
                             */

                            this.next;
                            /**
                             * @type {module:zrender/core/LRU~Entry}
                             */

                            this.prev;
                        };
                        /**
                         * LRU Cache
                         * @constructor
                         * @alias module:zrender/core/LRU
                         */


                        var LRU = function(maxSize) {
                            this._list = new LinkedList();
                            this._map = {};
                            this._maxSize = maxSize || 10;
                            this._lastRemovedEntry = null;
                        };

                        var LRUProto = LRU.prototype;
                        /**
                         * @param  {string} key
                         * @param  {} value
                         * @return {} Removed value
                         */

                        LRUProto.put = function(key, value) {
                            var list = this._list;
                            var map = this._map;
                            var removed = null;

                            if (map[key] == null) {
                                var len = list.len(); // Reuse last removed entry

                                var entry = this._lastRemovedEntry;

                                if (len >= this._maxSize && len > 0) {
                                    // Remove the least recently used
                                    var leastUsedEntry = list.head;
                                    list.remove(leastUsedEntry);
                                    delete map[leastUsedEntry.key];
                                    removed = leastUsedEntry.value;
                                    this._lastRemovedEntry = leastUsedEntry;
                                }

                                if (entry) {
                                    entry.value = value;
                                } else {
                                    entry = new Entry(value);
                                }

                                entry.key = key;
                                list.insertEntry(entry);
                                map[key] = entry;
                            }

                            return removed;
                        };
                        /**
                         * @param  {string} key
                         * @return {}
                         */


                        LRUProto.get = function(key) {
                            var entry = this._map[key];
                            var list = this._list;

                            if (entry != null) {
                                // Put the latest used entry in the tail
                                if (entry !== list.tail) {
                                    list.remove(entry);
                                    list.insertEntry(entry);
                                }

                                return entry.value;
                            }
                        };
                        /**
                         * Clear the cache
                         */


                        LRUProto.clear = function() {
                            this._list.clear();

                            this._map = {};
                        };

                        var _default = LRU;
                        module.exports = _default;

                        /***/
                    }),
                    /* 7 */
                    /***/
                    (function(module, exports, __webpack_require__) {

                        var vec2 = __webpack_require__(16);

                        var matrix = __webpack_require__(17);

                        /**
                         * @module echarts/core/BoundingRect
                         */
                        var v2ApplyTransform = vec2.applyTransform;
                        var mathMin = Math.min;
                        var mathMax = Math.max;
                        /**
                         * @alias module:echarts/core/BoundingRect
                         */

                        function BoundingRect(x, y, width, height) {
                            if (width < 0) {
                                x = x + width;
                                width = -width;
                            }

                            if (height < 0) {
                                y = y + height;
                                height = -height;
                            }
                            /**
                             * @type {number}
                             */


                            this.x = x;
                            /**
                             * @type {number}
                             */

                            this.y = y;
                            /**
                             * @type {number}
                             */

                            this.width = width;
                            /**
                             * @type {number}
                             */

                            this.height = height;
                        }

                        BoundingRect.prototype = {
                            constructor: BoundingRect,

                            /**
                             * @param {module:echarts/core/BoundingRect} other
                             */
                            union: function(other) {
                                var x = mathMin(other.x, this.x);
                                var y = mathMin(other.y, this.y);
                                this.width = mathMax(other.x + other.width, this.x + this.width) - x;
                                this.height = mathMax(other.y + other.height, this.y + this.height) - y;
                                this.x = x;
                                this.y = y;
                            },

                            /**
                             * @param {Array.<number>} m
                             * @methods
                             */
                            applyTransform: function() {
                                var lt = [];
                                var rb = [];
                                var lb = [];
                                var rt = [];
                                return function(m) {
                                    // In case usage like this
                                    // el.getBoundingRect().applyTransform(el.transform)
                                    // And element has no transform
                                    if (!m) {
                                        return;
                                    }

                                    lt[0] = lb[0] = this.x;
                                    lt[1] = rt[1] = this.y;
                                    rb[0] = rt[0] = this.x + this.width;
                                    rb[1] = lb[1] = this.y + this.height;
                                    v2ApplyTransform(lt, lt, m);
                                    v2ApplyTransform(rb, rb, m);
                                    v2ApplyTransform(lb, lb, m);
                                    v2ApplyTransform(rt, rt, m);
                                    this.x = mathMin(lt[0], rb[0], lb[0], rt[0]);
                                    this.y = mathMin(lt[1], rb[1], lb[1], rt[1]);
                                    var maxX = mathMax(lt[0], rb[0], lb[0], rt[0]);
                                    var maxY = mathMax(lt[1], rb[1], lb[1], rt[1]);
                                    this.width = maxX - this.x;
                                    this.height = maxY - this.y;
                                };
                            }(),

                            /**
                             * Calculate matrix of transforming from self to target rect
                             * @param  {module:zrender/core/BoundingRect} b
                             * @return {Array.<number>}
                             */
                            calculateTransform: function(b) {
                                var a = this;
                                var sx = b.width / a.width;
                                var sy = b.height / a.height;
                                var m = matrix.create(); // 矩阵右乘

                                matrix.translate(m, m, [-a.x, -a.y]);
                                matrix.scale(m, m, [sx, sy]);
                                matrix.translate(m, m, [b.x, b.y]);
                                return m;
                            },

                            /**
                             * @param {(module:echarts/core/BoundingRect|Object)} b
                             * @return {boolean}
                             */
                            intersect: function(b) {
                                if (!b) {
                                    return false;
                                }

                                if (!(b instanceof BoundingRect)) {
                                    // Normalize negative width/height.
                                    b = BoundingRect.create(b);
                                }

                                var a = this;
                                var ax0 = a.x;
                                var ax1 = a.x + a.width;
                                var ay0 = a.y;
                                var ay1 = a.y + a.height;
                                var bx0 = b.x;
                                var bx1 = b.x + b.width;
                                var by0 = b.y;
                                var by1 = b.y + b.height;
                                return !(ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);
                            },
                            contain: function(x, y) {
                                var rect = this;
                                return x >= rect.x && x <= rect.x + rect.width && y >= rect.y && y <= rect.y + rect.height;
                            },

                            /**
                             * @return {module:echarts/core/BoundingRect}
                             */
                            clone: function() {
                                return new BoundingRect(this.x, this.y, this.width, this.height);
                            },

                            /**
                             * Copy from another rect
                             */
                            copy: function(other) {
                                this.x = other.x;
                                this.y = other.y;
                                this.width = other.width;
                                this.height = other.height;
                            },
                            plain: function() {
                                return {
                                    x: this.x,
                                    y: this.y,
                                    width: this.width,
                                    height: this.height
                                };
                            }
                        };
                        /**
                         * @param {Object|module:zrender/core/BoundingRect} rect
                         * @param {number} rect.x
                         * @param {number} rect.y
                         * @param {number} rect.width
                         * @param {number} rect.height
                         * @return {module:zrender/core/BoundingRect}
                         */

                        BoundingRect.create = function(rect) {
                            return new BoundingRect(rect.x, rect.y, rect.width, rect.height);
                        };

                        var _default = BoundingRect;
                        module.exports = _default;

                        /***/
                    }),
                    /* 8 */
                    /***/
                    (function(module, exports, __webpack_require__) {

                        var zrUtil = __webpack_require__(2);

                        var RADIAN_EPSILON = 1e-4;

                        function _trim(str) {
                            return str.replace(/^\s+/, '').replace(/\s+$/, '');
                        }
                        /**
                         * Linear mapping a value from domain to range
                         * @memberOf module:echarts/util/number
                         * @param  {(number|Array.<number>)} val
                         * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]
                         * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]
                         * @param  {boolean} clamp
                         * @return {(number|Array.<number>}
                         */


                        function linearMap(val, domain, range, clamp) {
                            var subDomain = domain[1] - domain[0];
                            var subRange = range[1] - range[0];

                            if (subDomain === 0) {
                                return subRange === 0 ? range[0] : (range[0] + range[1]) / 2;
                            } // Avoid accuracy problem in edge, such as
                            // 146.39 - 62.83 === 83.55999999999999.
                            // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError
                            // It is a little verbose for efficiency considering this method
                            // is a hotspot.


                            if (clamp) {
                                if (subDomain > 0) {
                                    if (val <= domain[0]) {
                                        return range[0];
                                    } else if (val >= domain[1]) {
                                        return range[1];
                                    }
                                } else {
                                    if (val >= domain[0]) {
                                        return range[0];
                                    } else if (val <= domain[1]) {
                                        return range[1];
                                    }
                                }
                            } else {
                                if (val === domain[0]) {
                                    return range[0];
                                }

                                if (val === domain[1]) {
                                    return range[1];
                                }
                            }

                            return (val - domain[0]) / subDomain * subRange + range[0];
                        }
                        /**
                         * Convert a percent string to absolute number.
                         * Returns NaN if percent is not a valid string or number
                         * @memberOf module:echarts/util/number
                         * @param {string|number} percent
                         * @param {number} all
                         * @return {number}
                         */


                        function parsePercent(percent, all) {
                            switch (percent) {
                                case 'center':
                                case 'middle':
                                    percent = '50%';
                                    break;

                                case 'left':
                                case 'top':
                                    percent = '0%';
                                    break;

                                case 'right':
                                case 'bottom':
                                    percent = '100%';
                                    break;
                            }

                            if (typeof percent === 'string') {
                                if (_trim(percent).match(/%$/)) {
                                    return parseFloat(percent) / 100 * all;
                                }

                                return parseFloat(percent);
                            }

                            return percent == null ? NaN : +percent;
                        }
                        /**
                         * (1) Fix rounding error of float numbers.
                         * (2) Support return string to avoid scientific notation like '3.5e-7'.
                         *
                         * @param {number} x
                         * @param {number} [precision]
                         * @param {boolean} [returnStr]
                         * @return {number|string}
                         */


                        function round(x, precision, returnStr) {
                            if (precision == null) {
                                precision = 10;
                            } // Avoid range error


                            precision = Math.min(Math.max(0, precision), 20);
                            x = (+x).toFixed(precision);
                            return returnStr ? x : +x;
                        }

                        function asc(arr) {
                            arr.sort(function(a, b) {
                                return a - b;
                            });
                            return arr;
                        }
                        /**
                         * Get precision
                         * @param {number} val
                         */


                        function getPrecision(val) {
                            val = +val;

                            if (isNaN(val)) {
                                return 0;
                            } // It is much faster than methods converting number to string as follows
                            //      var tmp = val.toString();
                            //      return tmp.length - 1 - tmp.indexOf('.');
                            // especially when precision is low


                            var e = 1;
                            var count = 0;

                            while (Math.round(val * e) / e !== val) {
                                e *= 10;
                                count++;
                            }

                            return count;
                        }
                        /**
                         * @param {string|number} val
                         * @return {number}
                         */


                        function getPrecisionSafe(val) {
                            var str = val.toString(); // Consider scientific notation: '3.4e-12' '3.4e+12'

                            var eIndex = str.indexOf('e');

                            if (eIndex > 0) {
                                var precision = +str.slice(eIndex + 1);
                                return precision < 0 ? -precision : 0;
                            } else {
                                var dotIndex = str.indexOf('.');
                                return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;
                            }
                        }
                        /**
                         * Minimal dicernible data precisioin according to a single pixel.
                         *
                         * @param {Array.<number>} dataExtent
                         * @param {Array.<number>} pixelExtent
                         * @return {number} precision
                         */


                        function getPixelPrecision(dataExtent, pixelExtent) {
                            var log = Math.log;
                            var LN10 = Math.LN10;
                            var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);
                            var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10); // toFixed() digits argument must be between 0 and 20.

                            var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);
                            return !isFinite(precision) ? 20 : precision;
                        }
                        /**
                         * Get a data of given precision, assuring the sum of percentages
                         * in valueList is 1.
                         * The largest remainer method is used.
                         * https://en.wikipedia.org/wiki/Largest_remainder_method
                         *
                         * @param {Array.<number>} valueList a list of all data
                         * @param {number} idx index of the data to be processed in valueList
                         * @param {number} precision integer number showing digits of precision
                         * @return {number} percent ranging from 0 to 100
                         */


                        function getPercentWithPrecision(valueList, idx, precision) {
                            if (!valueList[idx]) {
                                return 0;
                            }

                            var sum = zrUtil.reduce(valueList, function(acc, val) {
                                return acc + (isNaN(val) ? 0 : val);
                            }, 0);

                            if (sum === 0) {
                                return 0;
                            }

                            var digits = Math.pow(10, precision);
                            var votesPerQuota = zrUtil.map(valueList, function(val) {
                                return (isNaN(val) ? 0 : val) / sum * digits * 100;
                            });
                            var targetSeats = digits * 100;
                            var seats = zrUtil.map(votesPerQuota, function(votes) {
                                // Assign automatic seats.
                                return Math.floor(votes);
                            });
                            var currentSum = zrUtil.reduce(seats, function(acc, val) {
                                return acc + val;
                            }, 0);
                            var remainder = zrUtil.map(votesPerQuota, function(votes, idx) {
                                return votes - seats[idx];
                            }); // Has remainding votes.

                            while (currentSum < targetSeats) {
                                // Find next largest remainder.
                                var max = Number.NEGATIVE_INFINITY;
                                var maxId = null;

                                for (var i = 0, len = remainder.length; i < len; ++i) {
                                    if (remainder[i] > max) {
                                        max = remainder[i];
                                        maxId = i;
                                    }
                                } // Add a vote to max remainder.


                                ++seats[maxId];
                                remainder[maxId] = 0;
                                ++currentSum;
                            }

                            return seats[idx] / digits;
                        } // Number.MAX_SAFE_INTEGER, ie do not support.


                        var MAX_SAFE_INTEGER = 9007199254740991;
                        /**
                         * To 0 - 2 * PI, considering negative radian.
                         * @param {number} radian
                         * @return {number}
                         */

                        function remRadian(radian) {
                            var pi2 = Math.PI * 2;
                            return (radian % pi2 + pi2) % pi2;
                        }
                        /**
                         * @param {type} radian
                         * @return {boolean}
                         */


                        function isRadianAroundZero(val) {
                            return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;
                        }

                        var TIME_REG = /^(?:(\d{4})(?:[-\/](\d{1,2})(?:[-\/](\d{1,2})(?:[T ](\d{1,2})(?::(\d\d)(?::(\d\d)(?:[.,](\d+))?)?)?(Z|[\+\-]\d\d:?\d\d)?)?)?)?)?$/; // jshint ignore:line

                        /**
                         * @param {string|Date|number} value These values can be accepted:
                         *   + An instance of Date, represent a time in its own time zone.
                         *   + Or string in a subset of ISO 8601, only including:
                         *     + only year, month, date: '2012-03', '2012-03-01', '2012-03-01 05', '2012-03-01 05:06',
                         *     + separated with T or space: '2012-03-01T12:22:33.123', '2012-03-01 12:22:33.123',
                         *     + time zone: '2012-03-01T12:22:33Z', '2012-03-01T12:22:33+8000', '2012-03-01T12:22:33-05:00',
                         *     all of which will be treated as local time if time zone is not specified
                         *     (see <https://momentjs.com/>).
                         *   + Or other string format, including (all of which will be treated as loacal time):
                         *     '2012', '2012-3-1', '2012/3/1', '2012/03/01',
                         *     '2009/6/12 2:00', '2009/6/12 2:05:08', '2009/6/12 2:05:08.123'
                         *   + a timestamp, which represent a time in UTC.
                         * @return {Date} date
                         */

                        function parseDate(value) {
                            if (value instanceof Date) {
                                return value;
                            } else if (typeof value === 'string') {
                                // Different browsers parse date in different way, so we parse it manually.
                                // Some other issues:
                                // new Date('1970-01-01') is UTC,
                                // new Date('1970/01/01') and new Date('1970-1-01') is local.
                                // See issue #3623
                                var match = TIME_REG.exec(value);

                                if (!match) {
                                    // return Invalid Date.
                                    return new Date(NaN);
                                } // Use local time when no timezone offset specifed.


                                if (!match[8]) {
                                    // match[n] can only be string or undefined.
                                    // But take care of '12' + 1 => '121'.
                                    return new Date(+match[1], +(match[2] || 1) - 1, +match[3] || 1, +match[4] || 0, +(match[5] || 0), +match[6] || 0, +match[7] || 0);
                                } // Timezoneoffset of Javascript Date has considered DST (Daylight Saving Time,
                                // https://tc39.github.io/ecma262/#sec-daylight-saving-time-adjustment).
                                // For example, system timezone is set as "Time Zone: America/Toronto",
                                // then these code will get different result:
                                // `new Date(1478411999999).getTimezoneOffset();  // get 240`
                                // `new Date(1478412000000).getTimezoneOffset();  // get 300`
                                // So we should not use `new Date`, but use `Date.UTC`.
                                else {
                                    var hour = +match[4] || 0;

                                    if (match[8].toUpperCase() !== 'Z') {
                                        hour -= match[8].slice(0, 3);
                                    }

                                    return new Date(Date.UTC(+match[1], +(match[2] || 1) - 1, +match[3] || 1, hour, +(match[5] || 0), +match[6] || 0, +match[7] || 0));
                                }
                            } else if (value == null) {
                                return new Date(NaN);
                            }

                            return new Date(Math.round(value));
                        }
                        /**
                         * Quantity of a number. e.g. 0.1, 1, 10, 100
                         *
                         * @param  {number} val
                         * @return {number}
                         */


                        function quantity(val) {
                            return Math.pow(10, quantityExponent(val));
                        }

                        function quantityExponent(val) {
                            return Math.floor(Math.log(val) / Math.LN10);
                        }
                        /**
                         * find a “nice” number approximately equal to x. Round the number if round = true,
                         * take ceiling if round = false. The primary observation is that the “nicest”
                         * numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.
                         *
                         * See "Nice Numbers for Graph Labels" of Graphic Gems.
                         *
                         * @param  {number} val Non-negative value.
                         * @param  {boolean} round
                         * @return {number}
                         */


                        function nice(val, round) {
                            var exponent = quantityExponent(val);
                            var exp10 = Math.pow(10, exponent);
                            var f = val / exp10; // 1 <= f < 10

                            var nf;

                            if (round) {
                                if (f < 1.5) {
                                    nf = 1;
                                } else if (f < 2.5) {
                                    nf = 2;
                                } else if (f < 4) {
                                    nf = 3;
                                } else if (f < 7) {
                                    nf = 5;
                                } else {
                                    nf = 10;
                                }
                            } else {
                                if (f < 1) {
                                    nf = 1;
                                } else if (f < 2) {
                                    nf = 2;
                                } else if (f < 3) {
                                    nf = 3;
                                } else if (f < 5) {
                                    nf = 5;
                                } else {
                                    nf = 10;
                                }
                            }

                            val = nf * exp10; // Fix 3 * 0.1 === 0.30000000000000004 issue (see IEEE 754).
                            // 20 is the uppper bound of toFixed.

                            return exponent >= -20 ? +val.toFixed(exponent < 0 ? -exponent : 0) : val;
                        }
                        /**
                         * Order intervals asc, and split them when overlap.
                         * expect(numberUtil.reformIntervals([
                         *     {interval: [18, 62], close: [1, 1]},
                         *     {interval: [-Infinity, -70], close: [0, 0]},
                         *     {interval: [-70, -26], close: [1, 1]},
                         *     {interval: [-26, 18], close: [1, 1]},
                         *     {interval: [62, 150], close: [1, 1]},
                         *     {interval: [106, 150], close: [1, 1]},
                         *     {interval: [150, Infinity], close: [0, 0]}
                         * ])).toEqual([
                         *     {interval: [-Infinity, -70], close: [0, 0]},
                         *     {interval: [-70, -26], close: [1, 1]},
                         *     {interval: [-26, 18], close: [0, 1]},
                         *     {interval: [18, 62], close: [0, 1]},
                         *     {interval: [62, 150], close: [0, 1]},
                         *     {interval: [150, Infinity], close: [0, 0]}
                         * ]);
                         * @param {Array.<Object>} list, where `close` mean open or close
                         *        of the interval, and Infinity can be used.
                         * @return {Array.<Object>} The origin list, which has been reformed.
                         */


                        function reformIntervals(list) {
                            list.sort(function(a, b) {
                                return littleThan(a, b, 0) ? -1 : 1;
                            });
                            var curr = -Infinity;
                            var currClose = 1;

                            for (var i = 0; i < list.length;) {
                                var interval = list[i].interval;
                                var close = list[i].close;

                                for (var lg = 0; lg < 2; lg++) {
                                    if (interval[lg] <= curr) {
                                        interval[lg] = curr;
                                        close[lg] = !lg ? 1 - currClose : 1;
                                    }

                                    curr = interval[lg];
                                    currClose = close[lg];
                                }

                                if (interval[0] === interval[1] && close[0] * close[1] !== 1) {
                                    list.splice(i, 1);
                                } else {
                                    i++;
                                }
                            }

                            return list;

                            function littleThan(a, b, lg) {
                                return a.interval[lg] < b.interval[lg] || a.interval[lg] === b.interval[lg] && (a.close[lg] - b.close[lg] === (!lg ? 1 : -1) || !lg && littleThan(a, b, 1));
                            }
                        }
                        /**
                         * parseFloat NaNs numeric-cast false positives (null|true|false|"")
                         * ...but misinterprets leading-number strings, particularly hex literals ("0x...")
                         * subtraction forces infinities to NaN
                         *
                         * @param {*} v
                         * @return {boolean}
                         */


                        function isNumeric(v) {
                            return v - parseFloat(v) >= 0;
                        }

                        exports.linearMap = linearMap;
                        exports.parsePercent = parsePercent;
                        exports.round = round;
                        exports.asc = asc;
                        exports.getPrecision = getPrecision;
                        exports.getPrecisionSafe = getPrecisionSafe;
                        exports.getPixelPrecision = getPixelPrecision;
                        exports.getPercentWithPrecision = getPercentWithPrecision;
                        exports.MAX_SAFE_INTEGER = MAX_SAFE_INTEGER;
                        exports.remRadian = remRadian;
                        exports.isRadianAroundZero = isRadianAroundZero;
                        exports.parseDate = parseDate;
                        exports.quantity = quantity;
                        exports.nice = nice;
                        exports.reformIntervals = reformIntervals;
                        exports.isNumeric = isNumeric;

                        /***/
                    }),
                    /* 9 */
                    /***/
                    (function(module, __webpack_exports__, __webpack_require__) {

                            "use strict";
                            Object.defineProperty(__webpack_exports__, "__esModule", { value: true });

                            // EXTERNAL MODULE: external "echarts"
                            var external__echarts_ = __webpack_require__(0);
                            var external__echarts__default = /*#__PURE__*/ __webpack_require__.n(external__echarts_);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/version.js
                            /**
                             * @name qtek.version
                             */
                            /* harmony default export */
                            var version = ('0.6.0');

                            // CONCATENATED MODULE: ./node_modules/qtek/src/core/mixin/extend.js
                            /**
                             * Extend a sub class from base class
                             * @param {object|Function} makeDefaultOpt default option of this sub class, method of the sub can use this.xxx to access this option
                             * @param {Function} [initialize] Initialize after the sub class is instantiated
                             * @param {Object} [proto] Prototype methods/properties of the sub class
                             * @memberOf qtek.core.mixin.extend
                             * @return {Function}
                             */
                            function derive(makeDefaultOpt, initialize /*optional*/ , proto /*optional*/ ) {

                                if (typeof initialize == 'object') {
                                    proto = initialize;
                                    initialize = null;
                                }

                                var _super = this;

                                var propList;
                                if (!(makeDefaultOpt instanceof Function)) {
                                    // Optimize the property iterate if it have been fixed
                                    propList = [];
                                    for (var propName in makeDefaultOpt) {
                                        if (makeDefaultOpt.hasOwnProperty(propName)) {
                                            propList.push(propName);
                                        }
                                    }
                                }

                                var sub = function(options) {

                                    // call super constructor
                                    _super.apply(this, arguments);

                                    if (makeDefaultOpt instanceof Function) {
                                        // Invoke makeDefaultOpt each time if it is a function, So we can make sure each
                                        // property in the object will not be shared by mutiple instances
                                        extend(this, makeDefaultOpt.call(this, options));
                                    } else {
                                        extendWithPropList(this, makeDefaultOpt, propList);
                                    }

                                    if (this.constructor === sub) {
                                        // Initialize function will be called in the order of inherit
                                        var initializers = sub.__initializers__;
                                        for (var i = 0; i < initializers.length; i++) {
                                            initializers[i].apply(this, arguments);
                                        }
                                    }
                                };
                                // save super constructor
                                sub.__super__ = _super;
                                // Initialize function will be called after all the super constructor is called
                                if (!_super.__initializers__) {
                                    sub.__initializers__ = [];
                                } else {
                                    sub.__initializers__ = _super.__initializers__.slice();
                                }
                                if (initialize) {
                                    sub.__initializers__.push(initialize);
                                }

                                var Ctor = function() {};
                                Ctor.prototype = _super.prototype;
                                sub.prototype = new Ctor();
                                sub.prototype.constructor = sub;
                                extend(sub.prototype, proto);

                                // extend the derive method as a static method;
                                sub.extend = _super.extend;

                                // DEPCRATED
                                sub.derive = _super.extend;

                                return sub;
                            }

                            function extend(target, source) {
                                if (!source) {
                                    return;
                                }
                                for (var name in source) {
                                    if (source.hasOwnProperty(name)) {
                                        target[name] = source[name];
                                    }
                                }
                            }

                            function extendWithPropList(target, source, propList) {
                                for (var i = 0; i < propList.length; i++) {
                                    var propName = propList[i];
                                    target[propName] = source[propName];
                                }
                            }

                            /**
                             * @alias qtek.core.mixin.extend
                             * @mixin
                             */
                            /* harmony default export */
                            var mixin_extend = ({

                                extend: derive,

                                // DEPCRATED
                                derive: derive
                            });

                            // CONCATENATED MODULE: ./node_modules/qtek/src/core/mixin/notifier.js
                            function Handler(action, context) {
                                this.action = action;
                                this.context = context;
                            }
                            /**
                             * @mixin
                             * @alias qtek.core.mixin.notifier
                             */
                            var notifier = {
                                /**
                                 * Trigger event
                                 * @param  {string} name
                                 */
                                trigger: function(name) {
                                    if (!this.hasOwnProperty('__handlers__')) {
                                        return;
                                    }
                                    if (!this.__handlers__.hasOwnProperty(name)) {
                                        return;
                                    }

                                    var hdls = this.__handlers__[name];
                                    var l = hdls.length,
                                        i = -1,
                                        args = arguments;
                                    // Optimize advise from backbone
                                    switch (args.length) {
                                        case 1:
                                            while (++i < l) {
                                                hdls[i].action.call(hdls[i].context);
                                            }
                                            return;
                                        case 2:
                                            while (++i < l) {
                                                hdls[i].action.call(hdls[i].context, args[1]);
                                            }
                                            return;
                                        case 3:
                                            while (++i < l) {
                                                hdls[i].action.call(hdls[i].context, args[1], args[2]);
                                            }
                                            return;
                                        case 4:
                                            while (++i < l) {
                                                hdls[i].action.call(hdls[i].context, args[1], args[2], args[3]);
                                            }
                                            return;
                                        case 5:
                                            while (++i < l) {
                                                hdls[i].action.call(hdls[i].context, args[1], args[2], args[3], args[4]);
                                            }
                                            return;
                                        default:
                                            while (++i < l) {
                                                hdls[i].action.apply(hdls[i].context, Array.prototype.slice.call(args, 1));
                                            }
                                            return;
                                    }
                                },
                                /**
                                 * Register event handler
                                 * @param  {string} name
                                 * @param  {Function} action
                                 * @param  {Object} [context]
                                 * @chainable
                                 */
                                on: function(name, action, context) {
                                    if (!name || !action) {
                                        return;
                                    }
                                    var handlers = this.__handlers__ || (this.__handlers__ = {});
                                    if (!handlers[name]) {
                                        handlers[name] = [];
                                    } else {
                                        if (this.has(name, action)) {
                                            return;
                                        }
                                    }
                                    var handler = new Handler(action, context || this);
                                    handlers[name].push(handler);

                                    return this;
                                },

                                /**
                                 * Register event, event will only be triggered once and then removed
                                 * @param  {string} name
                                 * @param  {Function} action
                                 * @param  {Object} [context]
                                 * @chainable
                                 */
                                once: function(name, action, context) {
                                    if (!name || !action) {
                                        return;
                                    }
                                    var self = this;

                                    function wrapper() {
                                        self.off(name, wrapper);
                                        action.apply(this, arguments);
                                    }
                                    return this.on(name, wrapper, context);
                                },

                                /**
                                 * Alias of once('before' + name)
                                 * @param  {string} name
                                 * @param  {Function} action
                                 * @param  {Object} [context]
                                 * @chainable
                                 */
                                before: function(name, action, context) {
                                    if (!name || !action) {
                                        return;
                                    }
                                    name = 'before' + name;
                                    return this.on(name, action, context);
                                },

                                /**
                                 * Alias of once('after' + name)
                                 * @param  {string} name
                                 * @param  {Function} action
                                 * @param  {Object} [context]
                                 * @chainable
                                 */
                                after: function(name, action, context) {
                                    if (!name || !action) {
                                        return;
                                    }
                                    name = 'after' + name;
                                    return this.on(name, action, context);
                                },

                                /**
                                 * Alias of on('success')
                                 * @param  {Function} action
                                 * @param  {Object} [context]
                                 * @chainable
                                 */
                                success: function(action, context) {
                                    return this.once('success', action, context);
                                },

                                /**
                                 * Alias of on('error')
                                 * @param  {Function} action
                                 * @param  {Object} [context]
                                 * @chainable
                                 */
                                error: function(action, context) {
                                    return this.once('error', action, context);
                                },

                                /**
                                 * Remove event listener
                                 * @param  {Function} action
                                 * @param  {Object} [context]
                                 * @chainable
                                 */
                                off: function(name, action) {

                                    var handlers = this.__handlers__ || (this.__handlers__ = {});

                                    if (!action) {
                                        handlers[name] = [];
                                        return;
                                    }
                                    if (handlers[name]) {
                                        var hdls = handlers[name];
                                        var retains = [];
                                        for (var i = 0; i < hdls.length; i++) {
                                            if (action && hdls[i].action !== action) {
                                                retains.push(hdls[i]);
                                            }
                                        }
                                        handlers[name] = retains;
                                    }

                                    return this;
                                },

                                /**
                                 * If registered the event handler
                                 * @param  {string}  name
                                 * @param  {Function}  action
                                 * @return {boolean}
                                 */
                                has: function(name, action) {
                                    var handlers = this.__handlers__;

                                    if (!handlers ||
                                        !handlers[name]) {
                                        return false;
                                    }
                                    var hdls = handlers[name];
                                    for (var i = 0; i < hdls.length; i++) {
                                        if (hdls[i].action === action) {
                                            return true;
                                        }
                                    }
                                }
                            };

                            /* harmony default export */
                            var mixin_notifier = (notifier);
                            // CONCATENATED MODULE: ./node_modules/qtek/src/core/util.js
                            var guid = 0;

                            var ArrayProto = Array.prototype;
                            var nativeForEach = ArrayProto.forEach;

                            /**
                             * Util functions
                             * @namespace qtek.core.util
                             */
                            var util = {

                                /**
                                 * Generate GUID
                                 * @return {number}
                                 * @memberOf qtek.core.util
                                 */
                                genGUID: function() {
                                    return ++guid;
                                },
                                /**
                                 * Relative path to absolute path
                                 * @param  {string} path
                                 * @param  {string} basePath
                                 * @return {string}
                                 * @memberOf qtek.core.util
                                 */
                                relative2absolute: function(path, basePath) {
                                    if (!basePath || path.match(/^\//)) {
                                        return path;
                                    }
                                    var pathParts = path.split('/');
                                    var basePathParts = basePath.split('/');

                                    var item = pathParts[0];
                                    while (item === '.' || item === '..') {
                                        if (item === '..') {
                                            basePathParts.pop();
                                        }
                                        pathParts.shift();
                                        item = pathParts[0];
                                    }
                                    return basePathParts.join('/') + '/' + pathParts.join('/');
                                },

                                /**
                                 * Extend target with source
                                 * @param  {Object} target
                                 * @param  {Object} source
                                 * @return {Object}
                                 * @memberOf qtek.core.util
                                 */
                                extend: function(target, source) {
                                    if (source) {
                                        for (var name in source) {
                                            if (source.hasOwnProperty(name)) {
                                                target[name] = source[name];
                                            }
                                        }
                                    }
                                    return target;
                                },

                                /**
                                 * Extend properties to target if not exist.
                                 * @param  {Object} target
                                 * @param  {Object} source
                                 * @return {Object}
                                 * @memberOf qtek.core.util
                                 */
                                defaults: function(target, source) {
                                    if (source) {
                                        for (var propName in source) {
                                            if (target[propName] === undefined) {
                                                target[propName] = source[propName];
                                            }
                                        }
                                    }
                                    return target;
                                },
                                /**
                                 * Extend properties with a given property list to avoid for..in.. iteration.
                                 * @param  {Object} target
                                 * @param  {Object} source
                                 * @param  {Array.<string>} propList
                                 * @return {Object}
                                 * @memberOf qtek.core.util
                                 */
                                extendWithPropList: function(target, source, propList) {
                                    if (source) {
                                        for (var i = 0; i < propList.length; i++) {
                                            var propName = propList[i];
                                            target[propName] = source[propName];
                                        }
                                    }
                                    return target;
                                },
                                /**
                                 * Extend properties to target if not exist. With a given property list avoid for..in.. iteration.
                                 * @param  {Object} target
                                 * @param  {Object} source
                                 * @param  {Array.<string>} propList
                                 * @return {Object}
                                 * @memberOf qtek.core.util
                                 */
                                defaultsWithPropList: function(target, source, propList) {
                                    if (source) {
                                        for (var i = 0; i < propList.length; i++) {
                                            var propName = propList[i];
                                            if (target[propName] == null) {
                                                target[propName] = source[propName];
                                            }
                                        }
                                    }
                                    return target;
                                },
                                /**
                                 * @param  {Object|Array} obj
                                 * @param  {Function} iterator
                                 * @param  {Object} [context]
                                 * @memberOf qtek.core.util
                                 */
                                each: function(obj, iterator, context) {
                                    if (!(obj && iterator)) {
                                        return;
                                    }
                                    if (obj.forEach && obj.forEach === nativeForEach) {
                                        obj.forEach(iterator, context);
                                    } else if (obj.length === +obj.length) {
                                        for (var i = 0, len = obj.length; i < len; i++) {
                                            iterator.call(context, obj[i], i, obj);
                                        }
                                    } else {
                                        for (var key in obj) {
                                            if (obj.hasOwnProperty(key)) {
                                                iterator.call(context, obj[key], key, obj);
                                            }
                                        }
                                    }
                                },

                                /**
                                 * Is object ?
                                 * @param  {}  obj
                                 * @return {boolean}
                                 * @memberOf qtek.core.util
                                 */
                                isObject: function(obj) {
                                    return obj === Object(obj);
                                },

                                /**
                                 * Is array ?
                                 * @param  {}  obj
                                 * @return {boolean}
                                 * @memberOf qtek.core.util
                                 */
                                isArray: function(obj) {
                                    return Array.isArray(obj);
                                },

                                /**
                                 * Is array like, which have a length property
                                 * @param  {}  obj
                                 * @return {boolean}
                                 * @memberOf qtek.core.util
                                 */
                                isArrayLike: function(obj) {
                                    if (!obj) {
                                        return false;
                                    } else {
                                        return obj.length === +obj.length;
                                    }
                                },

                                /**
                                 * @param  {} obj
                                 * @return {}
                                 * @memberOf qtek.core.util
                                 */
                                clone: function(obj) {
                                    if (!util.isObject(obj)) {
                                        return obj;
                                    } else if (util.isArray(obj)) {
                                        return obj.slice();
                                    } else if (util.isArrayLike(obj)) { // is typed array
                                        var ret = new obj.constructor(obj.length);
                                        for (var i = 0; i < obj.length; i++) {
                                            ret[i] = obj[i];
                                        }
                                        return ret;
                                    } else {
                                        return util.extend({}, obj);
                                    }
                                }
                            };

                            /* harmony default export */
                            var core_util = (util);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/core/Base.js




                            /**
                             * Base class of all objects
                             * @constructor
                             * @alias qtek.core.Base
                             * @mixes qtek.core.mixin.notifier
                             */
                            var Base = function() {
                                /**
                                 * @type {number}
                                 */
                                this.__GUID__ = core_util.genGUID();
                            };

                            Base.__initializers__ = [
                                function(opts) {
                                    core_util.extend(this, opts);
                                }
                            ];

                            core_util.extend(Base, mixin_extend);
                            core_util.extend(Base.prototype, mixin_notifier);

                            /* harmony default export */
                            var core_Base = (Base);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/core/GLInfo.js
                            /**
                             * @namespace qtek.core.glinfo
                             * @see http://www.khronos.org/registry/webgl/extensions/
                             */

                            var EXTENSION_LIST = [
                                'OES_texture_float',
                                'OES_texture_half_float',
                                'OES_texture_float_linear',
                                'OES_texture_half_float_linear',
                                'OES_standard_derivatives',
                                'OES_vertex_array_object',
                                'OES_element_index_uint',
                                'WEBGL_compressed_texture_s3tc',
                                'WEBGL_depth_texture',
                                'EXT_texture_filter_anisotropic',
                                'EXT_shader_texture_lod',
                                'WEBGL_draw_buffers',
                                'EXT_frag_depth',
                                'EXT_sRGB'
                            ];

                            var PARAMETER_NAMES = [
                                'MAX_TEXTURE_SIZE',
                                'MAX_CUBE_MAP_TEXTURE_SIZE'
                            ];

                            function GLInfo(_gl) {
                                var extensions = {};
                                var parameters = {};

                                // Get webgl extension
                                for (var i = 0; i < EXTENSION_LIST.length; i++) {
                                    var extName = EXTENSION_LIST[i];
                                    createExtension(extName);
                                }
                                // Get parameters
                                for (var i = 0; i < PARAMETER_NAMES.length; i++) {
                                    var name = PARAMETER_NAMES[i];
                                    parameters[name] = _gl.getParameter(_gl[name]);
                                }

                                /**
                                 * Get extension
                                 * @param {string} name - Extension name, vendorless
                                 * @return {WebGLExtension}
                                 * @memberOf qtek.core.glinfo
                                 */
                                this.getExtension = function(name) {
                                    if (!(name in extensions)) {
                                        createExtension(name);
                                    }
                                    return extensions[name];
                                };

                                /**
                                 * Get parameter
                                 * @param {string} name Parameter name
                                 * @return {*}
                                 */
                                this.getParameter = function(name) {
                                    return parameters[name];
                                };

                                function createExtension(name) {
                                    var ext = _gl.getExtension(name);
                                    if (!ext) {
                                        ext = _gl.getExtension('MOZ_' + name);
                                    }
                                    if (!ext) {
                                        ext = _gl.getExtension('WEBKIT_' + name);
                                    }
                                    extensions[name] = ext;
                                }
                            }

                            /* harmony default export */
                            var core_GLInfo = (GLInfo);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/core/glenum.js
                            /**
                             * @namespace qtek.core.glenum
                             * @see http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14
                             */
                            /* harmony default export */
                            var glenum = ({
                                /* ClearBufferMask */
                                DEPTH_BUFFER_BIT: 0x00000100,
                                STENCIL_BUFFER_BIT: 0x00000400,
                                COLOR_BUFFER_BIT: 0x00004000,

                                /* BeginMode */
                                POINTS: 0x0000,
                                LINES: 0x0001,
                                LINE_LOOP: 0x0002,
                                LINE_STRIP: 0x0003,
                                TRIANGLES: 0x0004,
                                TRIANGLE_STRIP: 0x0005,
                                TRIANGLE_FAN: 0x0006,

                                /* AlphaFunction (not supported in ES20) */
                                /*      NEVER */
                                /*      LESS */
                                /*      EQUAL */
                                /*      LEQUAL */
                                /*      GREATER */
                                /*      NOTEQUAL */
                                /*      GEQUAL */
                                /*      ALWAYS */

                                /* BlendingFactorDest */
                                ZERO: 0,
                                ONE: 1,
                                SRC_COLOR: 0x0300,
                                ONE_MINUS_SRC_COLOR: 0x0301,
                                SRC_ALPHA: 0x0302,
                                ONE_MINUS_SRC_ALPHA: 0x0303,
                                DST_ALPHA: 0x0304,
                                ONE_MINUS_DST_ALPHA: 0x0305,

                                /* BlendingFactorSrc */
                                /*      ZERO */
                                /*      ONE */
                                DST_COLOR: 0x0306,
                                ONE_MINUS_DST_COLOR: 0x0307,
                                SRC_ALPHA_SATURATE: 0x0308,
                                /*      SRC_ALPHA */
                                /*      ONE_MINUS_SRC_ALPHA */
                                /*      DST_ALPHA */
                                /*      ONE_MINUS_DST_ALPHA */

                                /* BlendEquationSeparate */
                                FUNC_ADD: 0x8006,
                                BLEND_EQUATION: 0x8009,
                                BLEND_EQUATION_RGB: 0x8009,
                                /* same as BLEND_EQUATION */
                                BLEND_EQUATION_ALPHA: 0x883D,

                                /* BlendSubtract */
                                FUNC_SUBTRACT: 0x800A,
                                FUNC_REVERSE_SUBTRACT: 0x800B,

                                /* Separate Blend Functions */
                                BLEND_DST_RGB: 0x80C8,
                                BLEND_SRC_RGB: 0x80C9,
                                BLEND_DST_ALPHA: 0x80CA,
                                BLEND_SRC_ALPHA: 0x80CB,
                                CONSTANT_COLOR: 0x8001,
                                ONE_MINUS_CONSTANT_COLOR: 0x8002,
                                CONSTANT_ALPHA: 0x8003,
                                ONE_MINUS_CONSTANT_ALPHA: 0x8004,
                                BLEND_COLOR: 0x8005,

                                /* Buffer Objects */
                                ARRAY_BUFFER: 0x8892,
                                ELEMENT_ARRAY_BUFFER: 0x8893,
                                ARRAY_BUFFER_BINDING: 0x8894,
                                ELEMENT_ARRAY_BUFFER_BINDING: 0x8895,

                                STREAM_DRAW: 0x88E0,
                                STATIC_DRAW: 0x88E4,
                                DYNAMIC_DRAW: 0x88E8,

                                BUFFER_SIZE: 0x8764,
                                BUFFER_USAGE: 0x8765,

                                CURRENT_VERTEX_ATTRIB: 0x8626,

                                /* CullFaceMode */
                                FRONT: 0x0404,
                                BACK: 0x0405,
                                FRONT_AND_BACK: 0x0408,

                                /* DepthFunction */
                                /*      NEVER */
                                /*      LESS */
                                /*      EQUAL */
                                /*      LEQUAL */
                                /*      GREATER */
                                /*      NOTEQUAL */
                                /*      GEQUAL */
                                /*      ALWAYS */

                                /* EnableCap */
                                /* TEXTURE_2D */
                                CULL_FACE: 0x0B44,
                                BLEND: 0x0BE2,
                                DITHER: 0x0BD0,
                                STENCIL_TEST: 0x0B90,
                                DEPTH_TEST: 0x0B71,
                                SCISSOR_TEST: 0x0C11,
                                POLYGON_OFFSET_FILL: 0x8037,
                                SAMPLE_ALPHA_TO_COVERAGE: 0x809E,
                                SAMPLE_COVERAGE: 0x80A0,

                                /* ErrorCode */
                                NO_ERROR: 0,
                                INVALID_ENUM: 0x0500,
                                INVALID_VALUE: 0x0501,
                                INVALID_OPERATION: 0x0502,
                                OUT_OF_MEMORY: 0x0505,

                                /* FrontFaceDirection */
                                CW: 0x0900,
                                CCW: 0x0901,

                                /* GetPName */
                                LINE_WIDTH: 0x0B21,
                                ALIASED_POINT_SIZE_RANGE: 0x846D,
                                ALIASED_LINE_WIDTH_RANGE: 0x846E,
                                CULL_FACE_MODE: 0x0B45,
                                FRONT_FACE: 0x0B46,
                                DEPTH_RANGE: 0x0B70,
                                DEPTH_WRITEMASK: 0x0B72,
                                DEPTH_CLEAR_VALUE: 0x0B73,
                                DEPTH_FUNC: 0x0B74,
                                STENCIL_CLEAR_VALUE: 0x0B91,
                                STENCIL_FUNC: 0x0B92,
                                STENCIL_FAIL: 0x0B94,
                                STENCIL_PASS_DEPTH_FAIL: 0x0B95,
                                STENCIL_PASS_DEPTH_PASS: 0x0B96,
                                STENCIL_REF: 0x0B97,
                                STENCIL_VALUE_MASK: 0x0B93,
                                STENCIL_WRITEMASK: 0x0B98,
                                STENCIL_BACK_FUNC: 0x8800,
                                STENCIL_BACK_FAIL: 0x8801,
                                STENCIL_BACK_PASS_DEPTH_FAIL: 0x8802,
                                STENCIL_BACK_PASS_DEPTH_PASS: 0x8803,
                                STENCIL_BACK_REF: 0x8CA3,
                                STENCIL_BACK_VALUE_MASK: 0x8CA4,
                                STENCIL_BACK_WRITEMASK: 0x8CA5,
                                VIEWPORT: 0x0BA2,
                                SCISSOR_BOX: 0x0C10,
                                /*      SCISSOR_TEST */
                                COLOR_CLEAR_VALUE: 0x0C22,
                                COLOR_WRITEMASK: 0x0C23,
                                UNPACK_ALIGNMENT: 0x0CF5,
                                PACK_ALIGNMENT: 0x0D05,
                                MAX_TEXTURE_SIZE: 0x0D33,
                                MAX_VIEWPORT_DIMS: 0x0D3A,
                                SUBPIXEL_BITS: 0x0D50,
                                RED_BITS: 0x0D52,
                                GREEN_BITS: 0x0D53,
                                BLUE_BITS: 0x0D54,
                                ALPHA_BITS: 0x0D55,
                                DEPTH_BITS: 0x0D56,
                                STENCIL_BITS: 0x0D57,
                                POLYGON_OFFSET_UNITS: 0x2A00,
                                /*      POLYGON_OFFSET_FILL */
                                POLYGON_OFFSET_FACTOR: 0x8038,
                                TEXTURE_BINDING_2D: 0x8069,
                                SAMPLE_BUFFERS: 0x80A8,
                                SAMPLES: 0x80A9,
                                SAMPLE_COVERAGE_VALUE: 0x80AA,
                                SAMPLE_COVERAGE_INVERT: 0x80AB,

                                /* GetTextureParameter */
                                /*      TEXTURE_MAG_FILTER */
                                /*      TEXTURE_MIN_FILTER */
                                /*      TEXTURE_WRAP_S */
                                /*      TEXTURE_WRAP_T */

                                COMPRESSED_TEXTURE_FORMATS: 0x86A3,

                                /* HintMode */
                                DONT_CARE: 0x1100,
                                FASTEST: 0x1101,
                                NICEST: 0x1102,

                                /* HintTarget */
                                GENERATE_MIPMAP_HINT: 0x8192,

                                /* DataType */
                                BYTE: 0x1400,
                                UNSIGNED_BYTE: 0x1401,
                                SHORT: 0x1402,
                                UNSIGNED_SHORT: 0x1403,
                                INT: 0x1404,
                                UNSIGNED_INT: 0x1405,
                                FLOAT: 0x1406,

                                /* PixelFormat */
                                DEPTH_COMPONENT: 0x1902,
                                ALPHA: 0x1906,
                                RGB: 0x1907,
                                RGBA: 0x1908,
                                LUMINANCE: 0x1909,
                                LUMINANCE_ALPHA: 0x190A,

                                /* PixelType */
                                /*      UNSIGNED_BYTE */
                                UNSIGNED_SHORT_4_4_4_4: 0x8033,
                                UNSIGNED_SHORT_5_5_5_1: 0x8034,
                                UNSIGNED_SHORT_5_6_5: 0x8363,

                                /* Shaders */
                                FRAGMENT_SHADER: 0x8B30,
                                VERTEX_SHADER: 0x8B31,
                                MAX_VERTEX_ATTRIBS: 0x8869,
                                MAX_VERTEX_UNIFORM_VECTORS: 0x8DFB,
                                MAX_VARYING_VECTORS: 0x8DFC,
                                MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0x8B4D,
                                MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0x8B4C,
                                MAX_TEXTURE_IMAGE_UNITS: 0x8872,
                                MAX_FRAGMENT_UNIFORM_VECTORS: 0x8DFD,
                                SHADER_TYPE: 0x8B4F,
                                DELETE_STATUS: 0x8B80,
                                LINK_STATUS: 0x8B82,
                                VALIDATE_STATUS: 0x8B83,
                                ATTACHED_SHADERS: 0x8B85,
                                ACTIVE_UNIFORMS: 0x8B86,
                                ACTIVE_ATTRIBUTES: 0x8B89,
                                SHADING_LANGUAGE_VERSION: 0x8B8C,
                                CURRENT_PROGRAM: 0x8B8D,

                                /* StencilFunction */
                                NEVER: 0x0200,
                                LESS: 0x0201,
                                EQUAL: 0x0202,
                                LEQUAL: 0x0203,
                                GREATER: 0x0204,
                                NOTEQUAL: 0x0205,
                                GEQUAL: 0x0206,
                                ALWAYS: 0x0207,

                                /* StencilOp */
                                /*      ZERO */
                                KEEP: 0x1E00,
                                REPLACE: 0x1E01,
                                INCR: 0x1E02,
                                DECR: 0x1E03,
                                INVERT: 0x150A,
                                INCR_WRAP: 0x8507,
                                DECR_WRAP: 0x8508,

                                /* StringName */
                                VENDOR: 0x1F00,
                                RENDERER: 0x1F01,
                                VERSION: 0x1F02,

                                /* TextureMagFilter */
                                NEAREST: 0x2600,
                                LINEAR: 0x2601,

                                /* TextureMinFilter */
                                /*      NEAREST */
                                /*      LINEAR */
                                NEAREST_MIPMAP_NEAREST: 0x2700,
                                LINEAR_MIPMAP_NEAREST: 0x2701,
                                NEAREST_MIPMAP_LINEAR: 0x2702,
                                LINEAR_MIPMAP_LINEAR: 0x2703,

                                /* TextureParameterName */
                                TEXTURE_MAG_FILTER: 0x2800,
                                TEXTURE_MIN_FILTER: 0x2801,
                                TEXTURE_WRAP_S: 0x2802,
                                TEXTURE_WRAP_T: 0x2803,

                                /* TextureTarget */
                                TEXTURE_2D: 0x0DE1,
                                TEXTURE: 0x1702,

                                TEXTURE_CUBE_MAP: 0x8513,
                                TEXTURE_BINDING_CUBE_MAP: 0x8514,
                                TEXTURE_CUBE_MAP_POSITIVE_X: 0x8515,
                                TEXTURE_CUBE_MAP_NEGATIVE_X: 0x8516,
                                TEXTURE_CUBE_MAP_POSITIVE_Y: 0x8517,
                                TEXTURE_CUBE_MAP_NEGATIVE_Y: 0x8518,
                                TEXTURE_CUBE_MAP_POSITIVE_Z: 0x8519,
                                TEXTURE_CUBE_MAP_NEGATIVE_Z: 0x851A,
                                MAX_CUBE_MAP_TEXTURE_SIZE: 0x851C,

                                /* TextureUnit */
                                TEXTURE0: 0x84C0,
                                TEXTURE1: 0x84C1,
                                TEXTURE2: 0x84C2,
                                TEXTURE3: 0x84C3,
                                TEXTURE4: 0x84C4,
                                TEXTURE5: 0x84C5,
                                TEXTURE6: 0x84C6,
                                TEXTURE7: 0x84C7,
                                TEXTURE8: 0x84C8,
                                TEXTURE9: 0x84C9,
                                TEXTURE10: 0x84CA,
                                TEXTURE11: 0x84CB,
                                TEXTURE12: 0x84CC,
                                TEXTURE13: 0x84CD,
                                TEXTURE14: 0x84CE,
                                TEXTURE15: 0x84CF,
                                TEXTURE16: 0x84D0,
                                TEXTURE17: 0x84D1,
                                TEXTURE18: 0x84D2,
                                TEXTURE19: 0x84D3,
                                TEXTURE20: 0x84D4,
                                TEXTURE21: 0x84D5,
                                TEXTURE22: 0x84D6,
                                TEXTURE23: 0x84D7,
                                TEXTURE24: 0x84D8,
                                TEXTURE25: 0x84D9,
                                TEXTURE26: 0x84DA,
                                TEXTURE27: 0x84DB,
                                TEXTURE28: 0x84DC,
                                TEXTURE29: 0x84DD,
                                TEXTURE30: 0x84DE,
                                TEXTURE31: 0x84DF,
                                ACTIVE_TEXTURE: 0x84E0,

                                /* TextureWrapMode */
                                REPEAT: 0x2901,
                                CLAMP_TO_EDGE: 0x812F,
                                MIRRORED_REPEAT: 0x8370,

                                /* Uniform Types */
                                FLOAT_VEC2: 0x8B50,
                                FLOAT_VEC3: 0x8B51,
                                FLOAT_VEC4: 0x8B52,
                                INT_VEC2: 0x8B53,
                                INT_VEC3: 0x8B54,
                                INT_VEC4: 0x8B55,
                                BOOL: 0x8B56,
                                BOOL_VEC2: 0x8B57,
                                BOOL_VEC3: 0x8B58,
                                BOOL_VEC4: 0x8B59,
                                FLOAT_MAT2: 0x8B5A,
                                FLOAT_MAT3: 0x8B5B,
                                FLOAT_MAT4: 0x8B5C,
                                SAMPLER_2D: 0x8B5E,
                                SAMPLER_CUBE: 0x8B60,

                                /* Vertex Arrays */
                                VERTEX_ATTRIB_ARRAY_ENABLED: 0x8622,
                                VERTEX_ATTRIB_ARRAY_SIZE: 0x8623,
                                VERTEX_ATTRIB_ARRAY_STRIDE: 0x8624,
                                VERTEX_ATTRIB_ARRAY_TYPE: 0x8625,
                                VERTEX_ATTRIB_ARRAY_NORMALIZED: 0x886A,
                                VERTEX_ATTRIB_ARRAY_POINTER: 0x8645,
                                VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 0x889F,

                                /* Shader Source */
                                COMPILE_STATUS: 0x8B81,

                                /* Shader Precision-Specified Types */
                                LOW_FLOAT: 0x8DF0,
                                MEDIUM_FLOAT: 0x8DF1,
                                HIGH_FLOAT: 0x8DF2,
                                LOW_INT: 0x8DF3,
                                MEDIUM_INT: 0x8DF4,
                                HIGH_INT: 0x8DF5,

                                /* Framebuffer Object. */
                                FRAMEBUFFER: 0x8D40,
                                RENDERBUFFER: 0x8D41,

                                RGBA4: 0x8056,
                                RGB5_A1: 0x8057,
                                RGB565: 0x8D62,
                                DEPTH_COMPONENT16: 0x81A5,
                                STENCIL_INDEX: 0x1901,
                                STENCIL_INDEX8: 0x8D48,
                                DEPTH_STENCIL: 0x84F9,

                                RENDERBUFFER_WIDTH: 0x8D42,
                                RENDERBUFFER_HEIGHT: 0x8D43,
                                RENDERBUFFER_INTERNAL_FORMAT: 0x8D44,
                                RENDERBUFFER_RED_SIZE: 0x8D50,
                                RENDERBUFFER_GREEN_SIZE: 0x8D51,
                                RENDERBUFFER_BLUE_SIZE: 0x8D52,
                                RENDERBUFFER_ALPHA_SIZE: 0x8D53,
                                RENDERBUFFER_DEPTH_SIZE: 0x8D54,
                                RENDERBUFFER_STENCIL_SIZE: 0x8D55,

                                FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 0x8CD0,
                                FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 0x8CD1,
                                FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 0x8CD2,
                                FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 0x8CD3,

                                COLOR_ATTACHMENT0: 0x8CE0,
                                DEPTH_ATTACHMENT: 0x8D00,
                                STENCIL_ATTACHMENT: 0x8D20,
                                DEPTH_STENCIL_ATTACHMENT: 0x821A,

                                NONE: 0,

                                FRAMEBUFFER_COMPLETE: 0x8CD5,
                                FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 0x8CD6,
                                FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 0x8CD7,
                                FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 0x8CD9,
                                FRAMEBUFFER_UNSUPPORTED: 0x8CDD,

                                FRAMEBUFFER_BINDING: 0x8CA6,
                                RENDERBUFFER_BINDING: 0x8CA7,
                                MAX_RENDERBUFFER_SIZE: 0x84E8,

                                INVALID_FRAMEBUFFER_OPERATION: 0x0506,

                                /* WebGL-specific enums */
                                UNPACK_FLIP_Y_WEBGL: 0x9240,
                                UNPACK_PREMULTIPLY_ALPHA_WEBGL: 0x9241,
                                CONTEXT_LOST_WEBGL: 0x9242,
                                UNPACK_COLORSPACE_CONVERSION_WEBGL: 0x9243,
                                BROWSER_DEFAULT_WEBGL: 0x9244,
                            });

                            // CONCATENATED MODULE: ./node_modules/qtek/src/core/vendor.js
                            var supportWebGL = true;
                            try {
                                var vendor_canvas = document.createElement('canvas');
                                var gl = vendor_canvas.getContext('webgl') || vendor_canvas.getContext('experimental-webgl');
                                if (!gl) {
                                    throw new Error();
                                }
                            } catch (e) {
                                supportWebGL = false;
                            }

                            var vendor = {};

                            /**
                             * If support WebGL
                             * @return {boolean}
                             */
                            vendor.supportWebGL = function() {
                                return supportWebGL;
                            };


                            vendor.Int8Array = typeof Int8Array == 'undefined' ? Array : Int8Array;

                            vendor.Uint8Array = typeof Uint8Array == 'undefined' ? Array : Uint8Array;

                            vendor.Uint16Array = typeof Uint16Array == 'undefined' ? Array : Uint16Array;

                            vendor.Uint32Array = typeof Uint32Array == 'undefined' ? Array : Uint32Array;

                            vendor.Int16Array = typeof Int16Array == 'undefined' ? Array : Int16Array;

                            vendor.Float32Array = typeof Float32Array == 'undefined' ? Array : Float32Array;

                            vendor.Float64Array = typeof Float64Array == 'undefined' ? Array : Float64Array;

                            /* harmony default export */
                            var core_vendor = (vendor);

                            // EXTERNAL MODULE: ./node_modules/qtek/src/dep/glmatrix.js
                            var glmatrix = __webpack_require__(1);
                            var glmatrix_default = /*#__PURE__*/ __webpack_require__.n(glmatrix);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/math/Vector3.js

                            var vec3 = glmatrix_default.a.vec3;

                            /**
                             * @constructor
                             * @alias qtek.math.Vector3
                             * @param {number} x
                             * @param {number} y
                             * @param {number} z
                             */
                            var Vector3 = function(x, y, z) {

                                x = x || 0;
                                y = y || 0;
                                z = z || 0;

                                /**
                                 * Storage of Vector3, read and write of x, y, z will change the values in _array
                                 * All methods also operate on the _array instead of x, y, z components
                                 * @name _array
                                 * @type {Float32Array}
                                 */
                                this._array = vec3.fromValues(x, y, z);

                                /**
                                 * Dirty flag is used by the Node to determine
                                 * if the matrix is updated to latest
                                 * @name _dirty
                                 * @type {boolean}
                                 */
                                this._dirty = true;
                            };

                            Vector3.prototype = {

                                constructor: Vector3,

                                /**
                                 * Add b to self
                                 * @param  {qtek.math.Vector3} b
                                 * @return {qtek.math.Vector3}
                                 */
                                add: function(b) {
                                    vec3.add(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Set x, y and z components
                                 * @param  {number}  x
                                 * @param  {number}  y
                                 * @param  {number}  z
                                 * @return {qtek.math.Vector3}
                                 */
                                set: function(x, y, z) {
                                    this._array[0] = x;
                                    this._array[1] = y;
                                    this._array[2] = z;
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Set x, y and z components from array
                                 * @param  {Float32Array|number[]} arr
                                 * @return {qtek.math.Vector3}
                                 */
                                setArray: function(arr) {
                                    this._array[0] = arr[0];
                                    this._array[1] = arr[1];
                                    this._array[2] = arr[2];

                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Clone a new Vector3
                                 * @return {qtek.math.Vector3}
                                 */
                                clone: function() {
                                    return new Vector3(this.x, this.y, this.z);
                                },

                                /**
                                 * Copy from b
                                 * @param  {qtek.math.Vector3} b
                                 * @return {qtek.math.Vector3}
                                 */
                                copy: function(b) {
                                    vec3.copy(this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Cross product of self and b, written to a Vector3 out
                                 * @param  {qtek.math.Vector3} a
                                 * @param  {qtek.math.Vector3} b
                                 * @return {qtek.math.Vector3}
                                 */
                                cross: function(a, b) {
                                    vec3.cross(this._array, a._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Alias for distance
                                 * @param  {qtek.math.Vector3} b
                                 * @return {number}
                                 */
                                dist: function(b) {
                                    return vec3.dist(this._array, b._array);
                                },

                                /**
                                 * Distance between self and b
                                 * @param  {qtek.math.Vector3} b
                                 * @return {number}
                                 */
                                distance: function(b) {
                                    return vec3.distance(this._array, b._array);
                                },

                                /**
                                 * Alias for divide
                                 * @param  {qtek.math.Vector3} b
                                 * @return {qtek.math.Vector3}
                                 */
                                div: function(b) {
                                    vec3.div(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Divide self by b
                                 * @param  {qtek.math.Vector3} b
                                 * @return {qtek.math.Vector3}
                                 */
                                divide: function(b) {
                                    vec3.divide(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Dot product of self and b
                                 * @param  {qtek.math.Vector3} b
                                 * @return {number}
                                 */
                                dot: function(b) {
                                    return vec3.dot(this._array, b._array);
                                },

                                /**
                                 * Alias of length
                                 * @return {number}
                                 */
                                len: function() {
                                    return vec3.len(this._array);
                                },

                                /**
                                 * Calculate the length
                                 * @return {number}
                                 */
                                length: function() {
                                    return vec3.length(this._array);
                                },
                                /**
                                 * Linear interpolation between a and b
                                 * @param  {qtek.math.Vector3} a
                                 * @param  {qtek.math.Vector3} b
                                 * @param  {number}  t
                                 * @return {qtek.math.Vector3}
                                 */
                                lerp: function(a, b, t) {
                                    vec3.lerp(this._array, a._array, b._array, t);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Minimum of self and b
                                 * @param  {qtek.math.Vector3} b
                                 * @return {qtek.math.Vector3}
                                 */
                                min: function(b) {
                                    vec3.min(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Maximum of self and b
                                 * @param  {qtek.math.Vector3} b
                                 * @return {qtek.math.Vector3}
                                 */
                                max: function(b) {
                                    vec3.max(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Alias for multiply
                                 * @param  {qtek.math.Vector3} b
                                 * @return {qtek.math.Vector3}
                                 */
                                mul: function(b) {
                                    vec3.mul(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Mutiply self and b
                                 * @param  {qtek.math.Vector3} b
                                 * @return {qtek.math.Vector3}
                                 */
                                multiply: function(b) {
                                    vec3.multiply(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Negate self
                                 * @return {qtek.math.Vector3}
                                 */
                                negate: function() {
                                    vec3.negate(this._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Normalize self
                                 * @return {qtek.math.Vector3}
                                 */
                                normalize: function() {
                                    vec3.normalize(this._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Generate random x, y, z components with a given scale
                                 * @param  {number} scale
                                 * @return {qtek.math.Vector3}
                                 */
                                random: function(scale) {
                                    vec3.random(this._array, scale);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Scale self
                                 * @param  {number}  scale
                                 * @return {qtek.math.Vector3}
                                 */
                                scale: function(s) {
                                    vec3.scale(this._array, this._array, s);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Scale b and add to self
                                 * @param  {qtek.math.Vector3} b
                                 * @param  {number}  scale
                                 * @return {qtek.math.Vector3}
                                 */
                                scaleAndAdd: function(b, s) {
                                    vec3.scaleAndAdd(this._array, this._array, b._array, s);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Alias for squaredDistance
                                 * @param  {qtek.math.Vector3} b
                                 * @return {number}
                                 */
                                sqrDist: function(b) {
                                    return vec3.sqrDist(this._array, b._array);
                                },

                                /**
                                 * Squared distance between self and b
                                 * @param  {qtek.math.Vector3} b
                                 * @return {number}
                                 */
                                squaredDistance: function(b) {
                                    return vec3.squaredDistance(this._array, b._array);
                                },

                                /**
                                 * Alias for squaredLength
                                 * @return {number}
                                 */
                                sqrLen: function() {
                                    return vec3.sqrLen(this._array);
                                },

                                /**
                                 * Squared length of self
                                 * @return {number}
                                 */
                                squaredLength: function() {
                                    return vec3.squaredLength(this._array);
                                },

                                /**
                                 * Alias for subtract
                                 * @param  {qtek.math.Vector3} b
                                 * @return {qtek.math.Vector3}
                                 */
                                sub: function(b) {
                                    vec3.sub(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Subtract b from self
                                 * @param  {qtek.math.Vector3} b
                                 * @return {qtek.math.Vector3}
                                 */
                                subtract: function(b) {
                                    vec3.subtract(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Transform self with a Matrix3 m
                                 * @param  {qtek.math.Matrix3} m
                                 * @return {qtek.math.Vector3}
                                 */
                                transformMat3: function(m) {
                                    vec3.transformMat3(this._array, this._array, m._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Transform self with a Matrix4 m
                                 * @param  {qtek.math.Matrix4} m
                                 * @return {qtek.math.Vector3}
                                 */
                                transformMat4: function(m) {
                                    vec3.transformMat4(this._array, this._array, m._array);
                                    this._dirty = true;
                                    return this;
                                },
                                /**
                                 * Transform self with a Quaternion q
                                 * @param  {qtek.math.Quaternion} q
                                 * @return {qtek.math.Vector3}
                                 */
                                transformQuat: function(q) {
                                    vec3.transformQuat(this._array, this._array, q._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Trasnform self into projection space with m
                                 * @param  {qtek.math.Matrix4} m
                                 * @return {qtek.math.Vector3}
                                 */
                                applyProjection: function(m) {
                                    var v = this._array;
                                    m = m._array;

                                    // Perspective projection
                                    if (m[15] === 0) {
                                        var w = -1 / v[2];
                                        v[0] = m[0] * v[0] * w;
                                        v[1] = m[5] * v[1] * w;
                                        v[2] = (m[10] * v[2] + m[14]) * w;
                                    } else {
                                        v[0] = m[0] * v[0] + m[12];
                                        v[1] = m[5] * v[1] + m[13];
                                        v[2] = m[10] * v[2] + m[14];
                                    }
                                    this._dirty = true;

                                    return this;
                                },

                                eulerFromQuat: function(q, order) {
                                    Vector3.eulerFromQuat(this, q, order);
                                },

                                eulerFromMat3: function(m, order) {
                                    Vector3.eulerFromMat3(this, m, order);
                                },

                                toString: function() {
                                    return '[' + Array.prototype.join.call(this._array, ',') + ']';
                                },

                                toArray: function() {
                                    return Array.prototype.slice.call(this._array);
                                }
                            };

                            var defineProperty = Object.defineProperty;
                            // Getter and Setter
                            if (defineProperty) {

                                var proto = Vector3.prototype;
                                /**
                                 * @name x
                                 * @type {number}
                                 * @memberOf qtek.math.Vector3
                                 * @instance
                                 */
                                defineProperty(proto, 'x', {
                                    get: function() {
                                        return this._array[0];
                                    },
                                    set: function(value) {
                                        this._array[0] = value;
                                        this._dirty = true;
                                    }
                                });

                                /**
                                 * @name y
                                 * @type {number}
                                 * @memberOf qtek.math.Vector3
                                 * @instance
                                 */
                                defineProperty(proto, 'y', {
                                    get: function() {
                                        return this._array[1];
                                    },
                                    set: function(value) {
                                        this._array[1] = value;
                                        this._dirty = true;
                                    }
                                });

                                /**
                                 * @name z
                                 * @type {number}
                                 * @memberOf qtek.math.Vector3
                                 * @instance
                                 */
                                defineProperty(proto, 'z', {
                                    get: function() {
                                        return this._array[2];
                                    },
                                    set: function(value) {
                                        this._array[2] = value;
                                        this._dirty = true;
                                    }
                                });
                            }


                            // Supply methods that are not in place

                            /**
                             * @param  {qtek.math.Vector3} out
                             * @param  {qtek.math.Vector3} a
                             * @param  {qtek.math.Vector3} b
                             * @return {qtek.math.Vector3}
                             */
                            Vector3.add = function(out, a, b) {
                                vec3.add(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Vector3} out
                             * @param  {number}  x
                             * @param  {number}  y
                             * @param  {number}  z
                             * @return {qtek.math.Vector3}
                             */
                            Vector3.set = function(out, x, y, z) {
                                vec3.set(out._array, x, y, z);
                                out._dirty = true;
                            };

                            /**
                             * @param  {qtek.math.Vector3} out
                             * @param  {qtek.math.Vector3} b
                             * @return {qtek.math.Vector3}
                             */
                            Vector3.copy = function(out, b) {
                                vec3.copy(out._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Vector3} out
                             * @param  {qtek.math.Vector3} a
                             * @param  {qtek.math.Vector3} b
                             * @return {qtek.math.Vector3}
                             */
                            Vector3.cross = function(out, a, b) {
                                vec3.cross(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Vector3} a
                             * @param  {qtek.math.Vector3} b
                             * @return {number}
                             */
                            Vector3.dist = function(a, b) {
                                return vec3.distance(a._array, b._array);
                            };

                            /**
                             * @method
                             * @param  {qtek.math.Vector3} a
                             * @param  {qtek.math.Vector3} b
                             * @return {number}
                             */
                            Vector3.distance = Vector3.dist;

                            /**
                             * @param  {qtek.math.Vector3} out
                             * @param  {qtek.math.Vector3} a
                             * @param  {qtek.math.Vector3} b
                             * @return {qtek.math.Vector3}
                             */
                            Vector3.div = function(out, a, b) {
                                vec3.divide(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @method
                             * @param  {qtek.math.Vector3} out
                             * @param  {qtek.math.Vector3} a
                             * @param  {qtek.math.Vector3} b
                             * @return {qtek.math.Vector3}
                             */
                            Vector3.divide = Vector3.div;

                            /**
                             * @param  {qtek.math.Vector3} a
                             * @param  {qtek.math.Vector3} b
                             * @return {number}
                             */
                            Vector3.dot = function(a, b) {
                                return vec3.dot(a._array, b._array);
                            };

                            /**
                             * @param  {qtek.math.Vector3} a
                             * @return {number}
                             */
                            Vector3.len = function(b) {
                                return vec3.length(b._array);
                            };

                            // Vector3.length = Vector3.len;

                            /**
                             * @param  {qtek.math.Vector3} out
                             * @param  {qtek.math.Vector3} a
                             * @param  {qtek.math.Vector3} b
                             * @param  {number}  t
                             * @return {qtek.math.Vector3}
                             */
                            Vector3.lerp = function(out, a, b, t) {
                                vec3.lerp(out._array, a._array, b._array, t);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @param  {qtek.math.Vector3} out
                             * @param  {qtek.math.Vector3} a
                             * @param  {qtek.math.Vector3} b
                             * @return {qtek.math.Vector3}
                             */
                            Vector3.min = function(out, a, b) {
                                vec3.min(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Vector3} out
                             * @param  {qtek.math.Vector3} a
                             * @param  {qtek.math.Vector3} b
                             * @return {qtek.math.Vector3}
                             */
                            Vector3.max = function(out, a, b) {
                                vec3.max(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @param  {qtek.math.Vector3} out
                             * @param  {qtek.math.Vector3} a
                             * @param  {qtek.math.Vector3} b
                             * @return {qtek.math.Vector3}
                             */
                            Vector3.mul = function(out, a, b) {
                                vec3.multiply(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @method
                             * @param  {qtek.math.Vector3} out
                             * @param  {qtek.math.Vector3} a
                             * @param  {qtek.math.Vector3} b
                             * @return {qtek.math.Vector3}
                             */
                            Vector3.multiply = Vector3.mul;
                            /**
                             * @param  {qtek.math.Vector3} out
                             * @param  {qtek.math.Vector3} a
                             * @return {qtek.math.Vector3}
                             */
                            Vector3.negate = function(out, a) {
                                vec3.negate(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @param  {qtek.math.Vector3} out
                             * @param  {qtek.math.Vector3} a
                             * @return {qtek.math.Vector3}
                             */
                            Vector3.normalize = function(out, a) {
                                vec3.normalize(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @param  {qtek.math.Vector3} out
                             * @param  {number}  scale
                             * @return {qtek.math.Vector3}
                             */
                            Vector3.random = function(out, scale) {
                                vec3.random(out._array, scale);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @param  {qtek.math.Vector3} out
                             * @param  {qtek.math.Vector3} a
                             * @param  {number}  scale
                             * @return {qtek.math.Vector3}
                             */
                            Vector3.scale = function(out, a, scale) {
                                vec3.scale(out._array, a._array, scale);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @param  {qtek.math.Vector3} out
                             * @param  {qtek.math.Vector3} a
                             * @param  {qtek.math.Vector3} b
                             * @param  {number}  scale
                             * @return {qtek.math.Vector3}
                             */
                            Vector3.scaleAndAdd = function(out, a, b, scale) {
                                vec3.scaleAndAdd(out._array, a._array, b._array, scale);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @param  {qtek.math.Vector3} a
                             * @param  {qtek.math.Vector3} b
                             * @return {number}
                             */
                            Vector3.sqrDist = function(a, b) {
                                return vec3.sqrDist(a._array, b._array);
                            };
                            /**
                             * @method
                             * @param  {qtek.math.Vector3} a
                             * @param  {qtek.math.Vector3} b
                             * @return {number}
                             */
                            Vector3.squaredDistance = Vector3.sqrDist;
                            /**
                             * @param  {qtek.math.Vector3} a
                             * @return {number}
                             */
                            Vector3.sqrLen = function(a) {
                                return vec3.sqrLen(a._array);
                            };
                            /**
                             * @method
                             * @param  {qtek.math.Vector3} a
                             * @return {number}
                             */
                            Vector3.squaredLength = Vector3.sqrLen;

                            /**
                             * @param  {qtek.math.Vector3} out
                             * @param  {qtek.math.Vector3} a
                             * @param  {qtek.math.Vector3} b
                             * @return {qtek.math.Vector3}
                             */
                            Vector3.sub = function(out, a, b) {
                                vec3.subtract(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @method
                             * @param  {qtek.math.Vector3} out
                             * @param  {qtek.math.Vector3} a
                             * @param  {qtek.math.Vector3} b
                             * @return {qtek.math.Vector3}
                             */
                            Vector3.subtract = Vector3.sub;

                            /**
                             * @param  {qtek.math.Vector3} out
                             * @param  {qtek.math.Vector3} a
                             * @param  {Matrix3} m
                             * @return {qtek.math.Vector3}
                             */
                            Vector3.transformMat3 = function(out, a, m) {
                                vec3.transformMat3(out._array, a._array, m._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Vector3} out
                             * @param  {qtek.math.Vector3} a
                             * @param  {qtek.math.Matrix4} m
                             * @return {qtek.math.Vector3}
                             */
                            Vector3.transformMat4 = function(out, a, m) {
                                vec3.transformMat4(out._array, a._array, m._array);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @param  {qtek.math.Vector3} out
                             * @param  {qtek.math.Vector3} a
                             * @param  {qtek.math.Quaternion} q
                             * @return {qtek.math.Vector3}
                             */
                            Vector3.transformQuat = function(out, a, q) {
                                vec3.transformQuat(out._array, a._array, q._array);
                                out._dirty = true;
                                return out;
                            };

                            function clamp(val, min, max) {
                                return val < min ? min : (val > max ? max : val);
                            }
                            var atan2 = Math.atan2;
                            var asin = Math.asin;
                            var abs = Math.abs;
                            /**
                             * Convert quaternion to euler angle
                             * Quaternion must be normalized
                             * From three.js
                             */
                            Vector3.eulerFromQuat = function(out, q, order) {
                                out._dirty = true;
                                q = q._array;

                                var target = out._array;
                                var x = q[0],
                                    y = q[1],
                                    z = q[2],
                                    w = q[3];
                                var x2 = x * x;
                                var y2 = y * y;
                                var z2 = z * z;
                                var w2 = w * w;

                                var order = (order || 'XYZ').toUpperCase();

                                switch (order) {
                                    case 'XYZ':
                                        target[0] = atan2(2 * (x * w - y * z), (w2 - x2 - y2 + z2));
                                        target[1] = asin(clamp(2 * (x * z + y * w), -1, 1));
                                        target[2] = atan2(2 * (z * w - x * y), (w2 + x2 - y2 - z2));
                                        break;
                                    case 'YXZ':
                                        target[0] = asin(clamp(2 * (x * w - y * z), -1, 1));
                                        target[1] = atan2(2 * (x * z + y * w), (w2 - x2 - y2 + z2));
                                        target[2] = atan2(2 * (x * y + z * w), (w2 - x2 + y2 - z2));
                                        break;
                                    case 'ZXY':
                                        target[0] = asin(clamp(2 * (x * w + y * z), -1, 1));
                                        target[1] = atan2(2 * (y * w - z * x), (w2 - x2 - y2 + z2));
                                        target[2] = atan2(2 * (z * w - x * y), (w2 - x2 + y2 - z2));
                                        break;
                                    case 'ZYX':
                                        target[0] = atan2(2 * (x * w + z * y), (w2 - x2 - y2 + z2));
                                        target[1] = asin(clamp(2 * (y * w - x * z), -1, 1));
                                        target[2] = atan2(2 * (x * y + z * w), (w2 + x2 - y2 - z2));
                                        break;
                                    case 'YZX':
                                        target[0] = atan2(2 * (x * w - z * y), (w2 - x2 + y2 - z2));
                                        target[1] = atan2(2 * (y * w - x * z), (w2 + x2 - y2 - z2));
                                        target[2] = asin(clamp(2 * (x * y + z * w), -1, 1));
                                        break;
                                    case 'XZY':
                                        target[0] = atan2(2 * (x * w + y * z), (w2 - x2 + y2 - z2));
                                        target[1] = atan2(2 * (x * z + y * w), (w2 + x2 - y2 - z2));
                                        target[2] = asin(clamp(2 * (z * w - x * y), -1, 1));
                                        break;
                                    default:
                                        console.warn('Unkown order: ' + order);
                                }
                                return out;
                            };

                            /**
                             * Convert rotation matrix to euler angle
                             * from three.js
                             */
                            Vector3.eulerFromMat3 = function(out, m, order) {
                                // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
                                var te = m._array;
                                var m11 = te[0],
                                    m12 = te[3],
                                    m13 = te[6];
                                var m21 = te[1],
                                    m22 = te[4],
                                    m23 = te[7];
                                var m31 = te[2],
                                    m32 = te[5],
                                    m33 = te[8];
                                var target = out._array;

                                var order = (order || 'XYZ').toUpperCase();

                                switch (order) {
                                    case 'XYZ':
                                        target[1] = asin(clamp(m13, -1, 1));
                                        if (abs(m13) < 0.99999) {
                                            target[0] = atan2(-m23, m33);
                                            target[2] = atan2(-m12, m11);
                                        } else {
                                            target[0] = atan2(m32, m22);
                                            target[2] = 0;
                                        }
                                        break;
                                    case 'YXZ':
                                        target[0] = asin(-clamp(m23, -1, 1));
                                        if (abs(m23) < 0.99999) {
                                            target[1] = atan2(m13, m33);
                                            target[2] = atan2(m21, m22);
                                        } else {
                                            target[1] = atan2(-m31, m11);
                                            target[2] = 0;
                                        }
                                        break;
                                    case 'ZXY':
                                        target[0] = asin(clamp(m32, -1, 1));
                                        if (abs(m32) < 0.99999) {
                                            target[1] = atan2(-m31, m33);
                                            target[2] = atan2(-m12, m22);
                                        } else {
                                            target[1] = 0;
                                            target[2] = atan2(m21, m11);
                                        }
                                        break;
                                    case 'ZYX':
                                        target[1] = asin(-clamp(m31, -1, 1));
                                        if (abs(m31) < 0.99999) {
                                            target[0] = atan2(m32, m33);
                                            target[2] = atan2(m21, m11);
                                        } else {
                                            target[0] = 0;
                                            target[2] = atan2(-m12, m22);
                                        }
                                        break;
                                    case 'YZX':
                                        target[2] = asin(clamp(m21, -1, 1));
                                        if (abs(m21) < 0.99999) {
                                            target[0] = atan2(-m23, m22);
                                            target[1] = atan2(-m31, m11);
                                        } else {
                                            target[0] = 0;
                                            target[1] = atan2(m13, m33);
                                        }
                                        break;
                                    case 'XZY':
                                        target[2] = asin(-clamp(m12, -1, 1));
                                        if (abs(m12) < 0.99999) {
                                            target[0] = atan2(m32, m22);
                                            target[1] = atan2(m13, m11);
                                        } else {
                                            target[0] = atan2(-m23, m33);
                                            target[1] = 0;
                                        }
                                        break;
                                    default:
                                        console.warn('Unkown order: ' + order);
                                }
                                out._dirty = true;

                                return out;
                            };

                            /**
                             * @type {qtek.math.Vector3}
                             */
                            Vector3.POSITIVE_X = new Vector3(1, 0, 0);
                            /**
                             * @type {qtek.math.Vector3}
                             */
                            Vector3.NEGATIVE_X = new Vector3(-1, 0, 0);
                            /**
                             * @type {qtek.math.Vector3}
                             */
                            Vector3.POSITIVE_Y = new Vector3(0, 1, 0);
                            /**
                             * @type {qtek.math.Vector3}
                             */
                            Vector3.NEGATIVE_Y = new Vector3(0, -1, 0);
                            /**
                             * @type {qtek.math.Vector3}
                             */
                            Vector3.POSITIVE_Z = new Vector3(0, 0, 1);
                            /**
                             * @type {qtek.math.Vector3}
                             */
                            Vector3.NEGATIVE_Z = new Vector3(0, 0, -1);
                            /**
                             * @type {qtek.math.Vector3}
                             */
                            Vector3.UP = new Vector3(0, 1, 0);
                            /**
                             * @type {qtek.math.Vector3}
                             */
                            Vector3.ZERO = new Vector3(0, 0, 0);

                            /* harmony default export */
                            var math_Vector3 = (Vector3);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/math/BoundingBox.js


                            var BoundingBox_vec3 = glmatrix_default.a.vec3;

                            var vec3Copy = BoundingBox_vec3.copy;
                            var vec3Set = BoundingBox_vec3.set;

                            /**
                             * Axis aligned bounding box
                             * @constructor
                             * @alias qtek.math.BoundingBox
                             * @param {qtek.math.Vector3} [min]
                             * @param {qtek.math.Vector3} [max]
                             */
                            var BoundingBox = function(min, max) {

                                /**
                                 * Minimum coords of bounding box
                                 * @type {qtek.math.Vector3}
                                 */
                                this.min = min || new math_Vector3(Infinity, Infinity, Infinity);

                                /**
                                 * Maximum coords of bounding box
                                 * @type {qtek.math.Vector3}
                                 */
                                this.max = max || new math_Vector3(-Infinity, -Infinity, -Infinity);
                            };

                            BoundingBox.prototype = {

                                constructor: BoundingBox,
                                /**
                                 * Update min and max coords from a vertices array
                                 * @param  {array} vertices
                                 */
                                updateFromVertices: function(vertices) {
                                    if (vertices.length > 0) {
                                        var min = this.min;
                                        var max = this.max;
                                        var minArr = min._array;
                                        var maxArr = max._array;
                                        vec3Copy(minArr, vertices[0]);
                                        vec3Copy(maxArr, vertices[0]);
                                        for (var i = 1; i < vertices.length; i++) {
                                            var vertex = vertices[i];

                                            if (vertex[0] < minArr[0]) { minArr[0] = vertex[0]; }
                                            if (vertex[1] < minArr[1]) { minArr[1] = vertex[1]; }
                                            if (vertex[2] < minArr[2]) { minArr[2] = vertex[2]; }

                                            if (vertex[0] > maxArr[0]) { maxArr[0] = vertex[0]; }
                                            if (vertex[1] > maxArr[1]) { maxArr[1] = vertex[1]; }
                                            if (vertex[2] > maxArr[2]) { maxArr[2] = vertex[2]; }
                                        }
                                        min._dirty = true;
                                        max._dirty = true;
                                    }
                                },

                                /**
                                 * Union operation with another bounding box
                                 * @param  {qtek.math.BoundingBox} bbox
                                 */
                                union: function(bbox) {
                                    var min = this.min;
                                    var max = this.max;
                                    BoundingBox_vec3.min(min._array, min._array, bbox.min._array);
                                    BoundingBox_vec3.max(max._array, max._array, bbox.max._array);
                                    min._dirty = true;
                                    max._dirty = true;
                                    return this;
                                },

                                /**
                                 * Intersection operation with another bounding box
                                 * @param  {qtek.math.BoundingBox} bbox
                                 */
                                intersection: function(bbox) {
                                    var min = this.min;
                                    var max = this.max;
                                    BoundingBox_vec3.max(min._array, min._array, bbox.min._array);
                                    BoundingBox_vec3.min(max._array, max._array, bbox.max._array);
                                    min._dirty = true;
                                    max._dirty = true;
                                    return this;
                                },

                                /**
                                 * If intersect with another bounding box
                                 * @param  {qtek.math.BoundingBox} bbox
                                 * @return {boolean}
                                 */
                                intersectBoundingBox: function(bbox) {
                                    var _min = this.min._array;
                                    var _max = this.max._array;

                                    var _min2 = bbox.min._array;
                                    var _max2 = bbox.max._array;

                                    return !(_min[0] > _max2[0] || _min[1] > _max2[1] || _min[2] > _max2[2] ||
                                        _max[0] < _min2[0] || _max[1] < _min2[1] || _max[2] < _min2[2]);
                                },

                                /**
                                 * If contain another bounding box entirely
                                 * @param  {qtek.math.BoundingBox} bbox
                                 * @return {boolean}
                                 */
                                containBoundingBox: function(bbox) {

                                    var _min = this.min._array;
                                    var _max = this.max._array;

                                    var _min2 = bbox.min._array;
                                    var _max2 = bbox.max._array;

                                    return _min[0] <= _min2[0] && _min[1] <= _min2[1] && _min[2] <= _min2[2] &&
                                        _max[0] >= _max2[0] && _max[1] >= _max2[1] && _max[2] >= _max2[2];
                                },

                                /**
                                 * If contain point entirely
                                 * @param  {qtek.math.Vector3} point
                                 * @return {boolean}
                                 */
                                containPoint: function(p) {
                                    var _min = this.min._array;
                                    var _max = this.max._array;

                                    var _p = p._array;

                                    return _min[0] <= _p[0] && _min[1] <= _p[1] && _min[2] <= _p[2] &&
                                        _max[0] >= _p[0] && _max[1] >= _p[1] && _max[2] >= _p[2];
                                },

                                /**
                                 * If bounding box is finite
                                 */
                                isFinite: function() {
                                    var _min = this.min._array;
                                    var _max = this.max._array;
                                    return isFinite(_min[0]) && isFinite(_min[1]) && isFinite(_min[2]) &&
                                        isFinite(_max[0]) && isFinite(_max[1]) && isFinite(_max[2]);
                                },

                                /**
                                 * Apply an affine transform matrix to the bounding box
                                 * @param  {qtek.math.Matrix4} matrix
                                 */
                                applyTransform: (function() {
                                    // http://dev.theomader.com/transform-bounding-boxes/
                                    var xa = BoundingBox_vec3.create();
                                    var xb = BoundingBox_vec3.create();
                                    var ya = BoundingBox_vec3.create();
                                    var yb = BoundingBox_vec3.create();
                                    var za = BoundingBox_vec3.create();
                                    var zb = BoundingBox_vec3.create();

                                    return function(matrix) {
                                        var min = this.min._array;
                                        var max = this.max._array;

                                        var m = matrix._array;

                                        xa[0] = m[0] * min[0];
                                        xa[1] = m[1] * min[0];
                                        xa[2] = m[2] * min[0];
                                        xb[0] = m[0] * max[0];
                                        xb[1] = m[1] * max[0];
                                        xb[2] = m[2] * max[0];

                                        ya[0] = m[4] * min[1];
                                        ya[1] = m[5] * min[1];
                                        ya[2] = m[6] * min[1];
                                        yb[0] = m[4] * max[1];
                                        yb[1] = m[5] * max[1];
                                        yb[2] = m[6] * max[1];

                                        za[0] = m[8] * min[2];
                                        za[1] = m[9] * min[2];
                                        za[2] = m[10] * min[2];
                                        zb[0] = m[8] * max[2];
                                        zb[1] = m[9] * max[2];
                                        zb[2] = m[10] * max[2];

                                        min[0] = Math.min(xa[0], xb[0]) + Math.min(ya[0], yb[0]) + Math.min(za[0], zb[0]) + m[12];
                                        min[1] = Math.min(xa[1], xb[1]) + Math.min(ya[1], yb[1]) + Math.min(za[1], zb[1]) + m[13];
                                        min[2] = Math.min(xa[2], xb[2]) + Math.min(ya[2], yb[2]) + Math.min(za[2], zb[2]) + m[14];

                                        max[0] = Math.max(xa[0], xb[0]) + Math.max(ya[0], yb[0]) + Math.max(za[0], zb[0]) + m[12];
                                        max[1] = Math.max(xa[1], xb[1]) + Math.max(ya[1], yb[1]) + Math.max(za[1], zb[1]) + m[13];
                                        max[2] = Math.max(xa[2], xb[2]) + Math.max(ya[2], yb[2]) + Math.max(za[2], zb[2]) + m[14];

                                        this.min._dirty = true;
                                        this.max._dirty = true;

                                        return this;
                                    };
                                })(),

                                /**
                                 * Apply a projection matrix to the bounding box
                                 * @param  {qtek.math.Matrix4} matrix
                                 */
                                applyProjection: function(matrix) {
                                    var min = this.min._array;
                                    var max = this.max._array;

                                    var m = matrix._array;
                                    // min in min z
                                    var v10 = min[0];
                                    var v11 = min[1];
                                    var v12 = min[2];
                                    // max in min z
                                    var v20 = max[0];
                                    var v21 = max[1];
                                    var v22 = min[2];
                                    // max in max z
                                    var v30 = max[0];
                                    var v31 = max[1];
                                    var v32 = max[2];

                                    if (m[15] === 1) { // Orthographic projection
                                        min[0] = m[0] * v10 + m[12];
                                        min[1] = m[5] * v11 + m[13];
                                        max[2] = m[10] * v12 + m[14];

                                        max[0] = m[0] * v30 + m[12];
                                        max[1] = m[5] * v31 + m[13];
                                        min[2] = m[10] * v32 + m[14];
                                    } else {
                                        var w = -1 / v12;
                                        min[0] = m[0] * v10 * w;
                                        min[1] = m[5] * v11 * w;
                                        max[2] = (m[10] * v12 + m[14]) * w;

                                        w = -1 / v22;
                                        max[0] = m[0] * v20 * w;
                                        max[1] = m[5] * v21 * w;

                                        w = -1 / v32;
                                        min[2] = (m[10] * v32 + m[14]) * w;
                                    }
                                    this.min._dirty = true;
                                    this.max._dirty = true;

                                    return this;
                                },

                                updateVertices: function() {
                                    var vertices = this.vertices;
                                    if (!vertices) {
                                        // Cube vertices
                                        var vertices = [];
                                        for (var i = 0; i < 8; i++) {
                                            vertices[i] = BoundingBox_vec3.fromValues(0, 0, 0);
                                        }

                                        /**
                                         * Eight coords of bounding box
                                         * @type {Float32Array[]}
                                         */
                                        this.vertices = vertices;
                                    }
                                    var min = this.min._array;
                                    var max = this.max._array;
                                    //--- min z
                                    // min x
                                    vec3Set(vertices[0], min[0], min[1], min[2]);
                                    vec3Set(vertices[1], min[0], max[1], min[2]);
                                    // max x
                                    vec3Set(vertices[2], max[0], min[1], min[2]);
                                    vec3Set(vertices[3], max[0], max[1], min[2]);

                                    //-- max z
                                    vec3Set(vertices[4], min[0], min[1], max[2]);
                                    vec3Set(vertices[5], min[0], max[1], max[2]);
                                    vec3Set(vertices[6], max[0], min[1], max[2]);
                                    vec3Set(vertices[7], max[0], max[1], max[2]);

                                    return this;
                                },
                                /**
                                 * Copy values from another bounding box
                                 * @param  {qtek.math.BoundingBox} bbox
                                 */
                                copy: function(bbox) {
                                    var min = this.min;
                                    var max = this.max;
                                    vec3Copy(min._array, bbox.min._array);
                                    vec3Copy(max._array, bbox.max._array);
                                    min._dirty = true;
                                    max._dirty = true;
                                    return this;
                                },

                                /**
                                 * Clone a new bounding box
                                 * @return {qtek.math.BoundingBox}
                                 */
                                clone: function() {
                                    var boundingBox = new BoundingBox();
                                    boundingBox.copy(this);
                                    return boundingBox;
                                }
                            };

                            /* harmony default export */
                            var math_BoundingBox = (BoundingBox);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/math/Matrix4.js


                            var mat4 = glmatrix_default.a.mat4;
                            var Matrix4_vec3 = glmatrix_default.a.vec3;
                            var Matrix4_mat3 = glmatrix_default.a.mat3;
                            var quat = glmatrix_default.a.quat;

                            /**
                             * @constructor
                             * @alias qtek.math.Matrix4
                             */
                            var Matrix4 = function() {

                                this._axisX = new math_Vector3();
                                this._axisY = new math_Vector3();
                                this._axisZ = new math_Vector3();

                                /**
                                 * Storage of Matrix4
                                 * @name _array
                                 * @type {Float32Array}
                                 */
                                this._array = mat4.create();

                                /**
                                 * @name _dirty
                                 * @type {boolean}
                                 */
                                this._dirty = true;
                            };

                            Matrix4.prototype = {

                                constructor: Matrix4,

                                /**
                                 * Set components from array
                                 * @param  {Float32Array|number[]} arr
                                 */
                                setArray: function(arr) {
                                    for (var i = 0; i < this._array.length; i++) {
                                        this._array[i] = arr[i];
                                    }
                                    this._dirty = true;
                                    return this;
                                },
                                /**
                                 * Calculate the adjugate of self, in-place
                                 * @return {qtek.math.Matrix4}
                                 */
                                adjoint: function() {
                                    mat4.adjoint(this._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Clone a new Matrix4
                                 * @return {qtek.math.Matrix4}
                                 */
                                clone: function() {
                                    return (new Matrix4()).copy(this);
                                },

                                /**
                                 * Copy from b
                                 * @param  {qtek.math.Matrix4} b
                                 * @return {qtek.math.Matrix4}
                                 */
                                copy: function(a) {
                                    mat4.copy(this._array, a._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Calculate matrix determinant
                                 * @return {number}
                                 */
                                determinant: function() {
                                    return mat4.determinant(this._array);
                                },

                                /**
                                 * Set upper 3x3 part from quaternion
                                 * @param  {qtek.math.Quaternion} q
                                 * @return {qtek.math.Matrix4}
                                 */
                                fromQuat: function(q) {
                                    mat4.fromQuat(this._array, q._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Set from a quaternion rotation and a vector translation
                                 * @param  {qtek.math.Quaternion} q
                                 * @param  {qtek.math.Vector3} v
                                 * @return {qtek.math.Matrix4}
                                 */
                                fromRotationTranslation: function(q, v) {
                                    mat4.fromRotationTranslation(this._array, q._array, v._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Set from Matrix2d, it is used when converting a 2d shape to 3d space.
                                 * In 3d space it is equivalent to ranslate on xy plane and rotate about z axis
                                 * @param  {qtek.math.Matrix2d} m2d
                                 * @return {qtek.math.Matrix4}
                                 */
                                fromMat2d: function(m2d) {
                                    Matrix4.fromMat2d(this, m2d);
                                    return this;
                                },

                                /**
                                 * Set from frustum bounds
                                 * @param  {number} left
                                 * @param  {number} right
                                 * @param  {number} bottom
                                 * @param  {number} top
                                 * @param  {number} near
                                 * @param  {number} far
                                 * @return {qtek.math.Matrix4}
                                 */
                                frustum: function(left, right, bottom, top, near, far) {
                                    mat4.frustum(this._array, left, right, bottom, top, near, far);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Set to a identity matrix
                                 * @return {qtek.math.Matrix4}
                                 */
                                identity: function() {
                                    mat4.identity(this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Invert self
                                 * @return {qtek.math.Matrix4}
                                 */
                                invert: function() {
                                    mat4.invert(this._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Set as a matrix with the given eye position, focal point, and up axis
                                 * @param  {qtek.math.Vector3} eye
                                 * @param  {qtek.math.Vector3} center
                                 * @param  {qtek.math.Vector3} up
                                 * @return {qtek.math.Matrix4}
                                 */
                                lookAt: function(eye, center, up) {
                                    mat4.lookAt(this._array, eye._array, center._array, up._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Alias for mutiply
                                 * @param  {qtek.math.Matrix4} b
                                 * @return {qtek.math.Matrix4}
                                 */
                                mul: function(b) {
                                    mat4.mul(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Alias for multiplyLeft
                                 * @param  {qtek.math.Matrix4} a
                                 * @return {qtek.math.Matrix4}
                                 */
                                mulLeft: function(a) {
                                    mat4.mul(this._array, a._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Multiply self and b
                                 * @param  {qtek.math.Matrix4} b
                                 * @return {qtek.math.Matrix4}
                                 */
                                multiply: function(b) {
                                    mat4.multiply(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Multiply a and self, a is on the left
                                 * @param  {qtek.math.Matrix3} a
                                 * @return {qtek.math.Matrix3}
                                 */
                                multiplyLeft: function(a) {
                                    mat4.multiply(this._array, a._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Set as a orthographic projection matrix
                                 * @param  {number} left
                                 * @param  {number} right
                                 * @param  {number} bottom
                                 * @param  {number} top
                                 * @param  {number} near
                                 * @param  {number} far
                                 * @return {qtek.math.Matrix4}
                                 */
                                ortho: function(left, right, bottom, top, near, far) {
                                    mat4.ortho(this._array, left, right, bottom, top, near, far);
                                    this._dirty = true;
                                    return this;
                                },
                                /**
                                 * Set as a perspective projection matrix
                                 * @param  {number} fovy
                                 * @param  {number} aspect
                                 * @param  {number} near
                                 * @param  {number} far
                                 * @return {qtek.math.Matrix4}
                                 */
                                perspective: function(fovy, aspect, near, far) {
                                    mat4.perspective(this._array, fovy, aspect, near, far);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Rotate self by rad about axis.
                                 * Equal to right-multiply a rotaion matrix
                                 * @param  {number}   rad
                                 * @param  {qtek.math.Vector3} axis
                                 * @return {qtek.math.Matrix4}
                                 */
                                rotate: function(rad, axis) {
                                    mat4.rotate(this._array, this._array, rad, axis._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Rotate self by a given radian about X axis.
                                 * Equal to right-multiply a rotaion matrix
                                 * @param {number} rad
                                 * @return {qtek.math.Matrix4}
                                 */
                                rotateX: function(rad) {
                                    mat4.rotateX(this._array, this._array, rad);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Rotate self by a given radian about Y axis.
                                 * Equal to right-multiply a rotaion matrix
                                 * @param {number} rad
                                 * @return {qtek.math.Matrix4}
                                 */
                                rotateY: function(rad) {
                                    mat4.rotateY(this._array, this._array, rad);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Rotate self by a given radian about Z axis.
                                 * Equal to right-multiply a rotaion matrix
                                 * @param {number} rad
                                 * @return {qtek.math.Matrix4}
                                 */
                                rotateZ: function(rad) {
                                    mat4.rotateZ(this._array, this._array, rad);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Scale self by s
                                 * Equal to right-multiply a scale matrix
                                 * @param  {qtek.math.Vector3}  s
                                 * @return {qtek.math.Matrix4}
                                 */
                                scale: function(v) {
                                    mat4.scale(this._array, this._array, v._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Translate self by v.
                                 * Equal to right-multiply a translate matrix
                                 * @param  {qtek.math.Vector3}  v
                                 * @return {qtek.math.Matrix4}
                                 */
                                translate: function(v) {
                                    mat4.translate(this._array, this._array, v._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Transpose self, in-place.
                                 * @return {qtek.math.Matrix2}
                                 */
                                transpose: function() {
                                    mat4.transpose(this._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Decompose a matrix to SRT
                                 * @param {qtek.math.Vector3} [scale]
                                 * @param {qtek.math.Quaternion} rotation
                                 * @param {qtek.math.Vector} position
                                 * @see http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.matrix.decompose.aspx
                                 */
                                decomposeMatrix: (function() {

                                    var x = Matrix4_vec3.create();
                                    var y = Matrix4_vec3.create();
                                    var z = Matrix4_vec3.create();

                                    var m3 = Matrix4_mat3.create();

                                    return function(scale, rotation, position) {

                                        var el = this._array;
                                        Matrix4_vec3.set(x, el[0], el[1], el[2]);
                                        Matrix4_vec3.set(y, el[4], el[5], el[6]);
                                        Matrix4_vec3.set(z, el[8], el[9], el[10]);

                                        var sx = Matrix4_vec3.length(x);
                                        var sy = Matrix4_vec3.length(y);
                                        var sz = Matrix4_vec3.length(z);

                                        // if determine is negative, we need to invert one scale
                                        var det = this.determinant();
                                        if (det < 0) {
                                            sx = -sx;
                                        }

                                        if (scale) {
                                            scale.set(sx, sy, sz);
                                        }

                                        position.set(el[12], el[13], el[14]);

                                        Matrix4_mat3.fromMat4(m3, el);
                                        // Not like mat4, mat3 in glmatrix seems to be row-based
                                        // Seems fixed in gl-matrix 2.2.2
                                        // https://github.com/toji/gl-matrix/issues/114
                                        // mat3.transpose(m3, m3);

                                        m3[0] /= sx;
                                        m3[1] /= sx;
                                        m3[2] /= sx;

                                        m3[3] /= sy;
                                        m3[4] /= sy;
                                        m3[5] /= sy;

                                        m3[6] /= sz;
                                        m3[7] /= sz;
                                        m3[8] /= sz;

                                        quat.fromMat3(rotation._array, m3);
                                        quat.normalize(rotation._array, rotation._array);

                                        rotation._dirty = true;
                                        position._dirty = true;
                                    };
                                })(),

                                toString: function() {
                                    return '[' + Array.prototype.join.call(this._array, ',') + ']';
                                },

                                toArray: function() {
                                    return Array.prototype.slice.call(this._array);
                                }
                            };

                            var Matrix4_defineProperty = Object.defineProperty;

                            if (Matrix4_defineProperty) {
                                var Matrix4_proto = Matrix4.prototype;
                                /**
                                 * Z Axis of local transform
                                 * @name z
                                 * @type {qtek.math.Vector3}
                                 * @memberOf qtek.math.Matrix4
                                 * @instance
                                 */
                                Matrix4_defineProperty(Matrix4_proto, 'z', {
                                    get: function() {
                                        var el = this._array;
                                        this._axisZ.set(el[8], el[9], el[10]);
                                        return this._axisZ;
                                    },
                                    set: function(v) {
                                        // TODO Here has a problem
                                        // If only set an item of vector will not work
                                        var el = this._array;
                                        v = v._array;
                                        el[8] = v[0];
                                        el[9] = v[1];
                                        el[10] = v[2];

                                        this._dirty = true;
                                    }
                                });

                                /**
                                 * Y Axis of local transform
                                 * @name y
                                 * @type {qtek.math.Vector3}
                                 * @memberOf qtek.math.Matrix4
                                 * @instance
                                 */
                                Matrix4_defineProperty(Matrix4_proto, 'y', {
                                    get: function() {
                                        var el = this._array;
                                        this._axisY.set(el[4], el[5], el[6]);
                                        return this._axisY;
                                    },
                                    set: function(v) {
                                        var el = this._array;
                                        v = v._array;
                                        el[4] = v[0];
                                        el[5] = v[1];
                                        el[6] = v[2];

                                        this._dirty = true;
                                    }
                                });

                                /**
                                 * X Axis of local transform
                                 * @name x
                                 * @type {qtek.math.Vector3}
                                 * @memberOf qtek.math.Matrix4
                                 * @instance
                                 */
                                Matrix4_defineProperty(Matrix4_proto, 'x', {
                                    get: function() {
                                        var el = this._array;
                                        this._axisX.set(el[0], el[1], el[2]);
                                        return this._axisX;
                                    },
                                    set: function(v) {
                                        var el = this._array;
                                        v = v._array;
                                        el[0] = v[0];
                                        el[1] = v[1];
                                        el[2] = v[2];

                                        this._dirty = true;
                                    }
                                })
                            }

                            /**
                             * @param  {qtek.math.Matrix4} out
                             * @param  {qtek.math.Matrix4} a
                             * @return {qtek.math.Matrix4}
                             */
                            Matrix4.adjoint = function(out, a) {
                                mat4.adjoint(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix4} out
                             * @param  {qtek.math.Matrix4} a
                             * @return {qtek.math.Matrix4}
                             */
                            Matrix4.copy = function(out, a) {
                                mat4.copy(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix4} a
                             * @return {number}
                             */
                            Matrix4.determinant = function(a) {
                                return mat4.determinant(a._array);
                            };

                            /**
                             * @param  {qtek.math.Matrix4} out
                             * @return {qtek.math.Matrix4}
                             */
                            Matrix4.identity = function(out) {
                                mat4.identity(out._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix4} out
                             * @param  {number}  left
                             * @param  {number}  right
                             * @param  {number}  bottom
                             * @param  {number}  top
                             * @param  {number}  near
                             * @param  {number}  far
                             * @return {qtek.math.Matrix4}
                             */
                            Matrix4.ortho = function(out, left, right, bottom, top, near, far) {
                                mat4.ortho(out._array, left, right, bottom, top, near, far);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix4} out
                             * @param  {number}  fovy
                             * @param  {number}  aspect
                             * @param  {number}  near
                             * @param  {number}  far
                             * @return {qtek.math.Matrix4}
                             */
                            Matrix4.perspective = function(out, fovy, aspect, near, far) {
                                mat4.perspective(out._array, fovy, aspect, near, far);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix4} out
                             * @param  {qtek.math.Vector3} eye
                             * @param  {qtek.math.Vector3} center
                             * @param  {qtek.math.Vector3} up
                             * @return {qtek.math.Matrix4}
                             */
                            Matrix4.lookAt = function(out, eye, center, up) {
                                mat4.lookAt(out._array, eye._array, center._array, up._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix4} out
                             * @param  {qtek.math.Matrix4} a
                             * @return {qtek.math.Matrix4}
                             */
                            Matrix4.invert = function(out, a) {
                                mat4.invert(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix4} out
                             * @param  {qtek.math.Matrix4} a
                             * @param  {qtek.math.Matrix4} b
                             * @return {qtek.math.Matrix4}
                             */
                            Matrix4.mul = function(out, a, b) {
                                mat4.mul(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @method
                             * @param  {qtek.math.Matrix4} out
                             * @param  {qtek.math.Matrix4} a
                             * @param  {qtek.math.Matrix4} b
                             * @return {qtek.math.Matrix4}
                             */
                            Matrix4.multiply = Matrix4.mul;

                            /**
                             * @param  {qtek.math.Matrix4}    out
                             * @param  {qtek.math.Quaternion} q
                             * @return {qtek.math.Matrix4}
                             */
                            Matrix4.fromQuat = function(out, q) {
                                mat4.fromQuat(out._array, q._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix4}    out
                             * @param  {qtek.math.Quaternion} q
                             * @param  {qtek.math.Vector3}    v
                             * @return {qtek.math.Matrix4}
                             */
                            Matrix4.fromRotationTranslation = function(out, q, v) {
                                mat4.fromRotationTranslation(out._array, q._array, v._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix4} m4
                             * @param  {qtek.math.Matrix2d} m2d
                             * @return {qtek.math.Matrix4}
                             */
                            Matrix4.fromMat2d = function(m4, m2d) {
                                m4._dirty = true;
                                var m2d = m2d._array;
                                var m4 = m4._array;

                                m4[0] = m2d[0];
                                m4[4] = m2d[2];
                                m4[12] = m2d[4];

                                m4[1] = m2d[1];
                                m4[5] = m2d[3];
                                m4[13] = m2d[5];

                                return m4;
                            };

                            /**
                             * @param  {qtek.math.Matrix4} out
                             * @param  {qtek.math.Matrix4} a
                             * @param  {number}  rad
                             * @param  {qtek.math.Vector3} axis
                             * @return {qtek.math.Matrix4}
                             */
                            Matrix4.rotate = function(out, a, rad, axis) {
                                mat4.rotate(out._array, a._array, rad, axis._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix4} out
                             * @param  {qtek.math.Matrix4} a
                             * @param  {number}  rad
                             * @return {qtek.math.Matrix4}
                             */
                            Matrix4.rotateX = function(out, a, rad) {
                                mat4.rotateX(out._array, a._array, rad);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix4} out
                             * @param  {qtek.math.Matrix4} a
                             * @param  {number}  rad
                             * @return {qtek.math.Matrix4}
                             */
                            Matrix4.rotateY = function(out, a, rad) {
                                mat4.rotateY(out._array, a._array, rad);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix4} out
                             * @param  {qtek.math.Matrix4} a
                             * @param  {number}  rad
                             * @return {qtek.math.Matrix4}
                             */
                            Matrix4.rotateZ = function(out, a, rad) {
                                mat4.rotateZ(out._array, a._array, rad);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix4} out
                             * @param  {qtek.math.Matrix4} a
                             * @param  {qtek.math.Vector3} v
                             * @return {qtek.math.Matrix4}
                             */
                            Matrix4.scale = function(out, a, v) {
                                mat4.scale(out._array, a._array, v._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix4} out
                             * @param  {qtek.math.Matrix4} a
                             * @return {qtek.math.Matrix4}
                             */
                            Matrix4.transpose = function(out, a) {
                                mat4.transpose(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix4} out
                             * @param  {qtek.math.Matrix4} a
                             * @param  {qtek.math.Vector3} v
                             * @return {qtek.math.Matrix4}
                             */
                            Matrix4.translate = function(out, a, v) {
                                mat4.translate(out._array, a._array, v._array);
                                out._dirty = true;
                                return out;
                            };

                            /* harmony default export */
                            var math_Matrix4 = (Matrix4);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/core/Cache.js
                            var DIRTY_PREFIX = '__dt__';

                            var Cache = function() {

                                this._contextId = 0;

                                this._caches = [];

                                this._context = {};
                            };

                            Cache.prototype = {

                                use: function(contextId, documentSchema) {
                                    var caches = this._caches;
                                    if (!caches[contextId]) {
                                        caches[contextId] = {};

                                        if (documentSchema) {
                                            caches[contextId] = documentSchema();
                                        }
                                    }
                                    this._contextId = contextId;

                                    this._context = caches[contextId];
                                },

                                put: function(key, value) {
                                    this._context[key] = value;
                                },

                                get: function(key) {
                                    return this._context[key];
                                },

                                dirty: function(field) {
                                    field = field || '';
                                    var key = DIRTY_PREFIX + field;
                                    this.put(key, true);
                                },

                                dirtyAll: function(field) {
                                    field = field || '';
                                    var key = DIRTY_PREFIX + field;
                                    var caches = this._caches;
                                    for (var i = 0; i < caches.length; i++) {
                                        if (caches[i]) {
                                            caches[i][key] = true;
                                        }
                                    }
                                },

                                fresh: function(field) {
                                    field = field || '';
                                    var key = DIRTY_PREFIX + field;
                                    this.put(key, false);
                                },

                                freshAll: function(field) {
                                    field = field || '';
                                    var key = DIRTY_PREFIX + field;
                                    var caches = this._caches;
                                    for (var i = 0; i < caches.length; i++) {
                                        if (caches[i]) {
                                            caches[i][key] = false;
                                        }
                                    }
                                },

                                isDirty: function(field) {
                                    field = field || '';
                                    var key = DIRTY_PREFIX + field;
                                    var context = this._context;
                                    return !context.hasOwnProperty(key) ||
                                        context[key] === true;
                                },

                                deleteContext: function(contextId) {
                                    delete this._caches[contextId];
                                    this._context = {};
                                },

                                delete: function(key) {
                                    delete this._context[key];
                                },

                                clearAll: function() {
                                    this._caches = {};
                                },

                                getContext: function() {
                                    return this._context;
                                },

                                eachContext: function(cb, context) {
                                    var keys = Object.keys(this._caches);
                                    keys.forEach(function(key) {
                                        cb && cb.call(context, key);
                                    });
                                },

                                miss: function(key) {
                                    return !this._context.hasOwnProperty(key);
                                }
                            };

                            Cache.prototype.constructor = Cache;

                            /* harmony default export */
                            var core_Cache = (Cache);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/Shader.js
                            /**
                             * Mainly do the parse and compile of shader string
                             * Support shader code chunk import and export
                             * Support shader semantics
                             * http://www.nvidia.com/object/using_sas.html
                             * https://github.com/KhronosGroup/collada2json/issues/45
                             *
                             * TODO: Use etpl or other string template engine
                             */





                            var mat2 = glmatrix_default.a.mat2;
                            var Shader_mat3 = glmatrix_default.a.mat3;
                            var Shader_mat4 = glmatrix_default.a.mat4;

                            var uniformRegex = /uniform\s+(bool|float|int|vec2|vec3|vec4|ivec2|ivec3|ivec4|mat2|mat3|mat4|sampler2D|samplerCube)\s+([\w\,]+)?(\[.*?\])?\s*(:\s*([\S\s]+?))?;/g;
                            var attributeRegex = /attribute\s+(float|int|vec2|vec3|vec4)\s+(\w*)\s*(:\s*(\w+))?;/g;
                            var defineRegex = /#define\s+(\w+)?(\s+[\w-.]+)?\s*;?\s*\n/g;
                            var loopRegex = /for\s*?\(int\s*?_idx_\s*\=\s*([\w-]+)\;\s*_idx_\s*<\s*([\w-]+);\s*_idx_\s*\+\+\s*\)\s*\{\{([\s\S]+?)(?=\}\})\}\}/g;

                            var uniformTypeMap = {
                                'bool': '1i',
                                'int': '1i',
                                'sampler2D': 't',
                                'samplerCube': 't',
                                'float': '1f',
                                'vec2': '2f',
                                'vec3': '3f',
                                'vec4': '4f',
                                'ivec2': '2i',
                                'ivec3': '3i',
                                'ivec4': '4i',
                                'mat2': 'm2',
                                'mat3': 'm3',
                                'mat4': 'm4'
                            };

                            var uniformValueConstructor = {
                                'bool': function() { return true; },
                                'int': function() { return 0; },
                                'float': function() { return 0; },
                                'sampler2D': function() { return null; },
                                'samplerCube': function() { return null; },

                                'vec2': function() { return [0, 0]; },
                                'vec3': function() { return [0, 0, 0]; },
                                'vec4': function() { return [0, 0, 0, 0]; },

                                'ivec2': function() { return [0, 0]; },
                                'ivec3': function() { return [0, 0, 0]; },
                                'ivec4': function() { return [0, 0, 0, 0]; },

                                'mat2': function() { return mat2.create(); },
                                'mat3': function() { return Shader_mat3.create(); },
                                'mat4': function() { return Shader_mat4.create(); },

                                'array': function() { return []; }
                            };

                            var attribSemantics = [
                                'POSITION',
                                'NORMAL',
                                'BINORMAL',
                                'TANGENT',
                                'TEXCOORD',
                                'TEXCOORD_0',
                                'TEXCOORD_1',
                                'COLOR',
                                // Skinning
                                // https://github.com/KhronosGroup/glTF/blob/master/specification/README.md#semantics
                                'JOINT',
                                'WEIGHT'
                            ];
                            var uniformSemantics = [
                                'SKIN_MATRIX',
                                // Information about viewport
                                'VIEWPORT_SIZE',
                                'VIEWPORT',
                                'DEVICEPIXELRATIO',
                                // Window size for window relative coordinate
                                // https://www.opengl.org/sdk/docs/man/html/gl_FragCoord.xhtml
                                'WINDOW_SIZE',
                                // Infomation about camera
                                'NEAR',
                                'FAR',
                                // Time
                                'TIME'
                            ];
                            var matrixSemantics = [
                                'WORLD',
                                'VIEW',
                                'PROJECTION',
                                'WORLDVIEW',
                                'VIEWPROJECTION',
                                'WORLDVIEWPROJECTION',
                                'WORLDINVERSE',
                                'VIEWINVERSE',
                                'PROJECTIONINVERSE',
                                'WORLDVIEWINVERSE',
                                'VIEWPROJECTIONINVERSE',
                                'WORLDVIEWPROJECTIONINVERSE',
                                'WORLDTRANSPOSE',
                                'VIEWTRANSPOSE',
                                'PROJECTIONTRANSPOSE',
                                'WORLDVIEWTRANSPOSE',
                                'VIEWPROJECTIONTRANSPOSE',
                                'WORLDVIEWPROJECTIONTRANSPOSE',
                                'WORLDINVERSETRANSPOSE',
                                'VIEWINVERSETRANSPOSE',
                                'PROJECTIONINVERSETRANSPOSE',
                                'WORLDVIEWINVERSETRANSPOSE',
                                'VIEWPROJECTIONINVERSETRANSPOSE',
                                'WORLDVIEWPROJECTIONINVERSETRANSPOSE'
                            ];

                            // Enable attribute operation is global to all programs
                            // Here saved the list of all enabled attribute index
                            // http://www.mjbshaw.com/2013/03/webgl-fixing-invalidoperation.html
                            var enabledAttributeList = {};

                            var SHADER_STATE_TO_ENABLE = 1;
                            var SHADER_STATE_KEEP_ENABLE = 2;
                            var SHADER_STATE_PENDING = 3;

                            /**
                             * @constructor
                             * @extends qtek.core.Base
                             * @alias qtek.Shader
                             * @example
                             * // Create a phong shader
                             * var shader = new qtek.Shader({
                             *     vertex: qtek.Shader.source('qtek.phong.vertex'),
                             *     fragment: qtek.Shader.source('qtek.phong.fragment')
                             * });
                             * // Enable diffuse texture
                             * shader.enableTexture('diffuseMap');
                             * // Use alpha channel in diffuse texture
                             * shader.define('fragment', 'DIFFUSEMAP_ALPHA_ALPHA');
                             */
                            var Shader = core_Base.extend(function() {
                                    return /** @lends qtek.Shader# */ {
                                        /**
                                         * Vertex shader code
                                         * @type {string}
                                         */
                                        vertex: '',

                                        /**
                                         * Fragment shader code
                                         * @type {string}
                                         */
                                        fragment: '',


                                        // FIXME mediump is toooooo low for depth on mobile
                                        precision: 'highp',

                                        // Properties follow will be generated by the program
                                        attribSemantics: {},
                                        matrixSemantics: {},
                                        uniformSemantics: {},
                                        matrixSemanticKeys: [],

                                        uniformTemplates: {},
                                        attributeTemplates: {},

                                        /**
                                         * Custom defined values in the vertex shader
                                         * @type {Object}
                                         */
                                        vertexDefines: {},
                                        /**
                                         * Custom defined values in the vertex shader
                                         * @type {Object}
                                         */
                                        fragmentDefines: {},

                                        /**
                                         * Enabled extensions
                                         * @type {Array.<string>}
                                         */
                                        extensions: [
                                            'OES_standard_derivatives',
                                            'EXT_shader_texture_lod'
                                        ],

                                        /**
                                         * Used light group. default is all zero
                                         */
                                        lightGroup: 0,

                                        // Defines the each type light number in the scene
                                        // AMBIENT_LIGHT
                                        // AMBIENT_SH_LIGHT
                                        // AMBIENT_CUBEMAP_LIGHT
                                        // POINT_LIGHT
                                        // SPOT_LIGHT
                                        // AREA_LIGHT
                                        lightNumber: {},

                                        _textureSlot: 0,

                                        _attacheMaterialNumber: 0,

                                        _uniformList: [],
                                        // {
                                        //  enabled: true
                                        //  shaderType: "vertex",
                                        // }
                                        _textureStatus: {},

                                        _vertexProcessed: '',
                                        _fragmentProcessed: '',

                                        _currentLocationsMap: {}
                                    };
                                }, function() {

                                    this._cache = new core_Cache();

                                    // All context use same code
                                    this._codeDirty = true;

                                    this._updateShaderString();
                                },
                                /** @lends qtek.Shader.prototype */
                                {
                                    /**
                                     * If code is equal with given shader.
                                     * @param {qtek.Shader}
                                     * @return {boolean}
                                     */
                                    isEqual: function(otherShader) {
                                        if (!otherShader) {
                                            return false;
                                        }
                                        if (this === otherShader) {
                                            // Still needs update and rebind if dirty.
                                            return !this._codeDirty;
                                        }
                                        if (otherShader._codeDirty) {
                                            otherShader._updateShaderString();
                                        }
                                        if (this._codeDirty) {
                                            this._updateShaderString();
                                        }
                                        return !(otherShader._vertexProcessed !== this._vertexProcessed ||
                                            otherShader._fragmentProcessed !== this._fragmentProcessed);
                                    },
                                    /**
                                     * Set vertex shader code
                                     * @param {string} str
                                     */
                                    setVertex: function(str) {
                                        this.vertex = str;
                                        this._updateShaderString();
                                        this.dirty();
                                    },

                                    /**
                                     * Set fragment shader code
                                     * @param {string} str
                                     */
                                    setFragment: function(str) {
                                        this.fragment = str;
                                        this._updateShaderString();
                                        this.dirty();
                                    },

                                    /**
                                     * Bind shader program
                                     * Return true or error msg if error happened
                                     * @param {qtek.Renderer} renderer
                                     */
                                    bind: function(renderer) {
                                        var cache = this._cache;
                                        var _gl = renderer.gl;
                                        cache.use(renderer.__GUID__, getCacheSchema);

                                        this._currentLocationsMap = cache.get('locations');

                                        // Reset slot
                                        this._textureSlot = 0;

                                        if (this._codeDirty) {
                                            // PENDING
                                            // var availableExts = [];
                                            // var extensions = this.extensions;
                                            // for (var i = 0; i < extensions.length; i++) {
                                            //     if (glInfo.getExtension(_gl, extensions[i])) {
                                            //         availableExts.push(extensions[i]);
                                            //     }
                                            // }
                                            this._updateShaderString();
                                        }

                                        if (cache.isDirty('program')) {
                                            var errMsg = this._buildProgram(_gl, this._vertexProcessed, this._fragmentProcessed);
                                            cache.fresh('program');

                                            if (errMsg) {
                                                return errMsg;
                                            }
                                        }

                                        _gl.useProgram(cache.get('program'));
                                    },

                                    /**
                                     * Mark dirty and update program in next frame
                                     */
                                    dirty: function() {
                                        var cache = this._cache;
                                        this._codeDirty = true;
                                        cache.dirtyAll('program');
                                        for (var i = 0; i < cache._caches.length; i++) {
                                            if (cache._caches[i]) {
                                                var context = cache._caches[i];
                                                context['locations'] = {};
                                                context['attriblocations'] = {};
                                            }
                                        }
                                    },

                                    _updateShaderString: function(exts) {

                                        if (this.vertex !== this._vertexPrev ||
                                            this.fragment !== this._fragmentPrev
                                        ) {

                                            this._parseImport();

                                            this.attribSemantics = {};
                                            this.matrixSemantics = {};
                                            this._textureStatus = {};

                                            this._parseUniforms();
                                            this._parseAttributes();
                                            this._parseDefines();

                                            this._vertexPrev = this.vertex;
                                            this._fragmentPrev = this.fragment;
                                        }

                                        this._addDefineExtensionAndPrecision(exts);

                                        this._vertexProcessed = this._unrollLoop(this._vertexProcessed, this.vertexDefines);
                                        this._fragmentProcessed = this._unrollLoop(this._fragmentProcessed, this.fragmentDefines);

                                        this._codeDirty = false;
                                    },

                                    /**
                                     * Add a #define macro in shader code
                                     * @param  {string} shaderType Can be vertex, fragment or both
                                     * @param  {string} symbol
                                     * @param  {number} [val]
                                     */
                                    define: function(shaderType, symbol, val) {
                                        var vertexDefines = this.vertexDefines;
                                        var fragmentDefines = this.fragmentDefines;
                                        if (shaderType !== 'vertex' && shaderType !== 'fragment' && shaderType !== 'both' &&
                                            arguments.length < 3
                                        ) {
                                            // shaderType default to be 'both'
                                            val = symbol;
                                            symbol = shaderType;
                                            shaderType = 'both';
                                        }
                                        val = val != null ? val : null;
                                        if (shaderType === 'vertex' || shaderType === 'both') {
                                            if (vertexDefines[symbol] !== val) {
                                                vertexDefines[symbol] = val;
                                                // Mark as dirty
                                                this.dirty();
                                            }
                                        }
                                        if (shaderType === 'fragment' || shaderType === 'both') {
                                            if (fragmentDefines[symbol] !== val) {
                                                fragmentDefines[symbol] = val;
                                                if (shaderType !== 'both') {
                                                    this.dirty();
                                                }
                                            }
                                        }
                                    },

                                    /**
                                     * Remove a #define macro in shader code
                                     * @param  {string} shaderType Can be vertex, fragment or both
                                     * @param  {string} symbol
                                     */
                                    undefine: function(shaderType, symbol) {
                                        if (shaderType !== 'vertex' && shaderType !== 'fragment' && shaderType !== 'both' &&
                                            arguments.length < 2
                                        ) {
                                            // shaderType default to be 'both'
                                            symbol = shaderType;
                                            shaderType = 'both';
                                        }
                                        if (shaderType === 'vertex' || shaderType === 'both') {
                                            if (this.isDefined('vertex', symbol)) {
                                                delete this.vertexDefines[symbol];
                                                // Mark as dirty
                                                this.dirty();
                                            }
                                        }
                                        if (shaderType === 'fragment' || shaderType === 'both') {
                                            if (this.isDefined('fragment', symbol)) {
                                                delete this.fragmentDefines[symbol];
                                                if (shaderType !== 'both') {
                                                    this.dirty();
                                                }
                                            }
                                        }
                                    },

                                    /**
                                     * If macro is defined in shader.
                                     * @param  {string} shaderType Can be vertex, fragment or both
                                     * @param  {string} symbol
                                     */
                                    isDefined: function(shaderType, symbol) {
                                        switch (shaderType) {
                                            case 'vertex':
                                                return this.vertexDefines[symbol] !== undefined;
                                            case 'fragment':
                                                return this.fragmentDefines[symbol] !== undefined;
                                        }
                                    },
                                    /**
                                     * Get macro value defined in shader.
                                     * @param  {string} shaderType Can be vertex, fragment or both
                                     * @param  {string} symbol
                                     */
                                    getDefine: function(shaderType, symbol) {
                                        switch (shaderType) {
                                            case 'vertex':
                                                return this.vertexDefines[symbol];
                                            case 'fragment':
                                                return this.fragmentDefines[symbol];
                                        }
                                    },
                                    /**
                                     * Enable a texture, actually it will add a #define macro in the shader code
                                     * For example, if texture symbol is diffuseMap, it will add a line `#define DIFFUSEMAP_ENABLED` in the shader code
                                     * @param  {string} symbol
                                     */
                                    enableTexture: function(symbol) {
                                        if (Array.isArray(symbol)) {
                                            for (var i = 0; i < symbol.length; i++) {
                                                this.enableTexture(symbol[i]);
                                            }
                                            return;
                                        }

                                        var status = this._textureStatus[symbol];
                                        if (status) {
                                            var isEnabled = status.enabled;
                                            if (!isEnabled) {
                                                status.enabled = true;
                                                this.dirty();
                                            }
                                        }
                                    },
                                    /**
                                     * Enable all textures used in the shader
                                     */
                                    enableTexturesAll: function() {
                                        var textureStatus = this._textureStatus;
                                        for (var symbol in textureStatus) {
                                            textureStatus[symbol].enabled = true;
                                        }

                                        this.dirty();
                                    },
                                    /**
                                     * Disable a texture, it remove a #define macro in the shader
                                     * @param  {string} symbol
                                     */
                                    disableTexture: function(symbol) {
                                        if (Array.isArray(symbol)) {
                                            for (var i = 0; i < symbol.length; i++) {
                                                this.disableTexture(symbol[i]);
                                            }
                                            return;
                                        }

                                        var status = this._textureStatus[symbol];
                                        if (status) {
                                            var isDisabled = !status.enabled;
                                            if (!isDisabled) {
                                                status.enabled = false;
                                                this.dirty();
                                            }
                                        }
                                    },
                                    /**
                                     * Disable all textures used in the shader
                                     */
                                    disableTexturesAll: function() {
                                        var textureStatus = this._textureStatus;
                                        for (var symbol in textureStatus) {
                                            textureStatus[symbol].enabled = false;
                                        }

                                        this.dirty();
                                    },
                                    /**
                                     * If texture of given type is enabled.
                                     * @param  {string}  symbol
                                     * @return {boolean}
                                     */
                                    isTextureEnabled: function(symbol) {
                                        var textureStatus = this._textureStatus;
                                        return !!textureStatus[symbol] &&
                                            textureStatus[symbol].enabled;
                                    },

                                    /**
                                     * Get all enabled textures
                                     * @return {string[]}
                                     */
                                    getEnabledTextures: function() {
                                        var enabledTextures = [];
                                        var textureStatus = this._textureStatus;
                                        for (var symbol in textureStatus) {
                                            if (textureStatus[symbol].enabled) {
                                                enabledTextures.push(symbol);
                                            }
                                        }
                                        return enabledTextures;
                                    },

                                    hasUniform: function(symbol) {
                                        var location = this._currentLocationsMap[symbol];
                                        return location !== null && location !== undefined;
                                    },

                                    currentTextureSlot: function() {
                                        return this._textureSlot;
                                    },

                                    resetTextureSlot: function(slot) {
                                        this._textureSlot = slot || 0;
                                    },

                                    takeCurrentTextureSlot: function(_gl, texture) {
                                        var textureSlot = this._textureSlot;

                                        this.useTextureSlot(_gl, texture, textureSlot);

                                        this._textureSlot++;

                                        return textureSlot;
                                    },

                                    useTextureSlot: function(renderer, texture, slot) {
                                        if (texture) {
                                            renderer.gl.activeTexture(renderer.gl.TEXTURE0 + slot);
                                            // Maybe texture is not loaded yet;
                                            if (texture.isRenderable()) {
                                                texture.bind(renderer);
                                            } else {
                                                // Bind texture to null
                                                texture.unbind(renderer);
                                            }
                                        }
                                    },

                                    setUniform: function(_gl, type, symbol, value) {
                                        var locationMap = this._currentLocationsMap;
                                        var location = locationMap[symbol];
                                        // Uniform is not existed in the shader
                                        if (location === null || location === undefined) {
                                            return false;
                                        }
                                        switch (type) {
                                            case 'm4':
                                                // The matrix must be created by glmatrix and can pass it directly.
                                                _gl.uniformMatrix4fv(location, false, value);
                                                break;
                                            case '2i':
                                                _gl.uniform2i(location, value[0], value[1]);
                                                break;
                                            case '2f':
                                                _gl.uniform2f(location, value[0], value[1]);
                                                break;
                                            case '3i':
                                                _gl.uniform3i(location, value[0], value[1], value[2]);
                                                break;
                                            case '3f':
                                                _gl.uniform3f(location, value[0], value[1], value[2]);
                                                break;
                                            case '4i':
                                                _gl.uniform4i(location, value[0], value[1], value[2], value[3]);
                                                break;
                                            case '4f':
                                                _gl.uniform4f(location, value[0], value[1], value[2], value[3]);
                                                break;
                                            case '1i':
                                                _gl.uniform1i(location, value);
                                                break;
                                            case '1f':
                                                _gl.uniform1f(location, value);
                                                break;
                                            case '1fv':
                                                _gl.uniform1fv(location, value);
                                                break;
                                            case '1iv':
                                                _gl.uniform1iv(location, value);
                                                break;
                                            case '2iv':
                                                _gl.uniform2iv(location, value);
                                                break;
                                            case '2fv':
                                                _gl.uniform2fv(location, value);
                                                break;
                                            case '3iv':
                                                _gl.uniform3iv(location, value);
                                                break;
                                            case '3fv':
                                                _gl.uniform3fv(location, value);
                                                break;
                                            case '4iv':
                                                _gl.uniform4iv(location, value);
                                                break;
                                            case '4fv':
                                                _gl.uniform4fv(location, value);
                                                break;
                                            case 'm2':
                                            case 'm2v':
                                                _gl.uniformMatrix2fv(location, false, value);
                                                break;
                                            case 'm3':
                                            case 'm3v':
                                                _gl.uniformMatrix3fv(location, false, value);
                                                break;
                                            case 'm4v':
                                                // Raw value
                                                if (Array.isArray(value)) {
                                                    var array = new core_vendor.Float32Array(value.length * 16);
                                                    var cursor = 0;
                                                    for (var i = 0; i < value.length; i++) {
                                                        var item = value[i];
                                                        for (var j = 0; j < 16; j++) {
                                                            array[cursor++] = item[j];
                                                        }
                                                    }
                                                    _gl.uniformMatrix4fv(location, false, array);
                                                } else if (value instanceof core_vendor.Float32Array) { // ArrayBufferView
                                                    _gl.uniformMatrix4fv(location, false, value);
                                                }
                                                break;
                                        }
                                        return true;
                                    },

                                    setUniformOfSemantic: function(_gl, semantic, val) {
                                        var semanticInfo = this.uniformSemantics[semantic];
                                        if (semanticInfo) {
                                            return this.setUniform(_gl, semanticInfo.type, semanticInfo.symbol, val);
                                        }
                                        return false;
                                    },

                                    // Used for creating VAO
                                    // Enable the attributes passed in and disable the rest
                                    // Example Usage:
                                    // enableAttributes(renderer, ["position", "texcoords"])
                                    enableAttributes: function(renderer, attribList, vao) {
                                        var _gl = renderer.gl;
                                        var program = this._cache.get('program');

                                        var locationMap = this._cache.get('attriblocations');

                                        var enabledAttributeListInContext;
                                        if (vao) {
                                            enabledAttributeListInContext = vao.__enabledAttributeList;
                                        } else {
                                            enabledAttributeListInContext = enabledAttributeList[renderer.__GUID__];
                                        }
                                        if (!enabledAttributeListInContext) {
                                            // In vertex array object context
                                            // PENDING Each vao object needs to enable attributes again?
                                            if (vao) {
                                                enabledAttributeListInContext
                                                    = vao.__enabledAttributeList = [];
                                            } else {
                                                enabledAttributeListInContext
                                                    = enabledAttributeList[renderer.__GUID__] = [];
                                            }
                                        }
                                        var locationList = [];
                                        for (var i = 0; i < attribList.length; i++) {
                                            var symbol = attribList[i];
                                            if (!this.attributeTemplates[symbol]) {
                                                locationList[i] = -1;
                                                continue;
                                            }
                                            var location = locationMap[symbol];
                                            if (location === undefined) {
                                                location = _gl.getAttribLocation(program, symbol);
                                                // Attrib location is a number from 0 to ...
                                                if (location === -1) {
                                                    locationList[i] = -1;
                                                    continue;
                                                }
                                                locationMap[symbol] = location;
                                            }
                                            locationList[i] = location;

                                            if (!enabledAttributeListInContext[location]) {
                                                enabledAttributeListInContext[location] = SHADER_STATE_TO_ENABLE;
                                            } else {
                                                enabledAttributeListInContext[location] = SHADER_STATE_KEEP_ENABLE;
                                            }
                                        }

                                        for (var i = 0; i < enabledAttributeListInContext.length; i++) {
                                            switch (enabledAttributeListInContext[i]) {
                                                case SHADER_STATE_TO_ENABLE:
                                                    _gl.enableVertexAttribArray(i);
                                                    enabledAttributeListInContext[i] = SHADER_STATE_PENDING;
                                                    break;
                                                case SHADER_STATE_KEEP_ENABLE:
                                                    enabledAttributeListInContext[i] = SHADER_STATE_PENDING;
                                                    break;
                                                    // Expired
                                                case SHADER_STATE_PENDING:
                                                    _gl.disableVertexAttribArray(i);
                                                    enabledAttributeListInContext[i] = 0;
                                                    break;
                                            }
                                        }

                                        return locationList;
                                    },

                                    _parseImport: function() {

                                        this._vertexProcessedWithoutDefine = Shader.parseImport(this.vertex);
                                        this._fragmentProcessedWithoutDefine = Shader.parseImport(this.fragment);

                                    },

                                    _addDefineExtensionAndPrecision: function(exts) {

                                        exts = exts || this.extensions;
                                        // Extension declaration must before all non-preprocessor codes
                                        // TODO vertex ? extension enum ?
                                        var extensionStr = [];
                                        for (var i = 0; i < exts.length; i++) {
                                            extensionStr.push('#extension GL_' + exts[i] + ' : enable');
                                        }

                                        // Add defines
                                        // VERTEX
                                        var defineStr = this._getDefineStr(this.vertexDefines);
                                        this._vertexProcessed = defineStr + '\n' + this._vertexProcessedWithoutDefine;

                                        // FRAGMENT
                                        defineStr = this._getDefineStr(this.fragmentDefines);
                                        var code = defineStr + '\n' + this._fragmentProcessedWithoutDefine;

                                        // Add precision
                                        this._fragmentProcessed = extensionStr.join('\n') + '\n' +
                                            ['precision', this.precision, 'float'].join(' ') + ';\n' +
                                            ['precision', this.precision, 'int'].join(' ') + ';\n'
                                            // depth texture may have precision problem on iOS device.
                                            +
                                            ['precision', this.precision, 'sampler2D'].join(' ') + ';\n' +
                                            code;
                                    },

                                    _getDefineStr: function(defines) {

                                        var lightNumber = this.lightNumber;
                                        var textureStatus = this._textureStatus;
                                        var defineStr = [];
                                        for (var lightType in lightNumber) {
                                            var count = lightNumber[lightType];
                                            if (count > 0) {
                                                defineStr.push('#define ' + lightType.toUpperCase() + '_COUNT ' + count);
                                            }
                                        }
                                        for (var symbol in textureStatus) {
                                            var status = textureStatus[symbol];
                                            if (status.enabled) {
                                                defineStr.push('#define ' + symbol.toUpperCase() + '_ENABLED');
                                            }
                                        }
                                        // Custom Defines
                                        for (var symbol in defines) {
                                            var value = defines[symbol];
                                            if (value === null) {
                                                defineStr.push('#define ' + symbol);
                                            } else {
                                                defineStr.push('#define ' + symbol + ' ' + value.toString());
                                            }
                                        }
                                        return defineStr.join('\n');
                                    },

                                    _unrollLoop: function(shaderStr, defines) {
                                        // Loop unroll from three.js, https://github.com/mrdoob/three.js/blob/master/src/renderers/webgl/WebGLProgram.js#L175
                                        // In some case like shadowMap in loop use 'i' to index value much slower.

                                        // Loop use _idx_ and increased with _idx_++ will be unrolled
                                        // Use {{ }} to match the pair so the if statement will not be affected
                                        // Write like following
                                        // for (int _idx_ = 0; _idx_ < 4; _idx_++) {{
                                        //     vec3 color = texture2D(textures[_idx_], uv).rgb;
                                        // }}
                                        function replace(match, start, end, snippet) {
                                            var unroll = '';
                                            // Try to treat as define
                                            if (isNaN(start)) {
                                                if (start in defines) {
                                                    start = defines[start];
                                                } else {
                                                    start = lightNumberDefines[start];
                                                }
                                            }
                                            if (isNaN(end)) {
                                                if (end in defines) {
                                                    end = defines[end];
                                                } else {
                                                    end = lightNumberDefines[end];
                                                }
                                            }
                                            // TODO Error checking

                                            for (var idx = parseInt(start); idx < parseInt(end); idx++) {
                                                // PENDING Add scope?
                                                unroll += '{' +
                                                    snippet
                                                    .replace(/float\s*\(\s*_idx_\s*\)/g, idx.toFixed(1))
                                                    .replace(/_idx_/g, idx) +
                                                    '}';
                                            }

                                            return unroll;
                                        }

                                        var lightNumberDefines = {};
                                        for (var lightType in this.lightNumber) {
                                            lightNumberDefines[lightType + '_COUNT'] = this.lightNumber[lightType];
                                        }
                                        return shaderStr.replace(loopRegex, replace);
                                    },

                                    _parseUniforms: function() {
                                        var uniforms = {};
                                        var self = this;
                                        var shaderType = 'vertex';
                                        this._uniformList = [];

                                        this._vertexProcessedWithoutDefine = this._vertexProcessedWithoutDefine.replace(uniformRegex, _uniformParser);
                                        shaderType = 'fragment';
                                        this._fragmentProcessedWithoutDefine = this._fragmentProcessedWithoutDefine.replace(uniformRegex, _uniformParser);

                                        self.matrixSemanticKeys = Object.keys(this.matrixSemantics);

                                        function _uniformParser(str, type, symbol, isArray, semanticWrapper, semantic) {
                                            if (type && symbol) {
                                                var uniformType = uniformTypeMap[type];
                                                var isConfigurable = true;
                                                var defaultValueFunc;
                                                if (uniformType) {
                                                    self._uniformList.push(symbol);
                                                    if (type === 'sampler2D' || type === 'samplerCube') {
                                                        // Texture is default disabled
                                                        self._textureStatus[symbol] = {
                                                            enabled: false,
                                                            shaderType: shaderType
                                                        };
                                                    }
                                                    if (isArray) {
                                                        uniformType += 'v';
                                                    }
                                                    if (semantic) {
                                                        // This case is only for SKIN_MATRIX
                                                        // TODO
                                                        if (attribSemantics.indexOf(semantic) >= 0) {
                                                            self.attribSemantics[semantic] = {
                                                                symbol: symbol,
                                                                type: uniformType
                                                            };
                                                            isConfigurable = false;
                                                        } else if (matrixSemantics.indexOf(semantic) >= 0) {
                                                            var isTranspose = false;
                                                            var semanticNoTranspose = semantic;
                                                            if (semantic.match(/TRANSPOSE$/)) {
                                                                isTranspose = true;
                                                                semanticNoTranspose = semantic.slice(0, -9);
                                                            }
                                                            self.matrixSemantics[semantic] = {
                                                                symbol: symbol,
                                                                type: uniformType,
                                                                isTranspose: isTranspose,
                                                                semanticNoTranspose: semanticNoTranspose
                                                            };
                                                            isConfigurable = false;
                                                        } else if (uniformSemantics.indexOf(semantic) >= 0) {
                                                            self.uniformSemantics[semantic] = {
                                                                symbol: symbol,
                                                                type: uniformType
                                                            };
                                                            isConfigurable = false;
                                                        } else {
                                                            // The uniform is not configurable, which means it will not appear
                                                            // in the material uniform properties
                                                            if (semantic === 'unconfigurable') {
                                                                isConfigurable = false;
                                                            } else {
                                                                // Uniform have a defalut value, like
                                                                // uniform vec3 color: [1, 1, 1];
                                                                defaultValueFunc = self._parseDefaultValue(type, semantic);
                                                                if (!defaultValueFunc) {
                                                                    throw new Error('Unkown semantic "' + semantic + '"');
                                                                } else {
                                                                    semantic = '';
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if (isConfigurable) {
                                                        uniforms[symbol] = {
                                                            type: uniformType,
                                                            value: isArray ? uniformValueConstructor['array'] : (defaultValueFunc || uniformValueConstructor[type]),
                                                            semantic: semantic || null
                                                        };
                                                    }
                                                }
                                                return ['uniform', type, symbol, isArray].join(' ') + ';\n';
                                            }
                                        }

                                        this.uniformTemplates = uniforms;
                                    },

                                    _parseDefaultValue: function(type, str) {
                                        var arrayRegex = /\[\s*(.*)\s*\]/;
                                        if (type === 'vec2' || type === 'vec3' || type === 'vec4') {
                                            var arrayStr = arrayRegex.exec(str)[1];
                                            if (arrayStr) {
                                                var arr = arrayStr.split(/\s*,\s*/);
                                                return function() {
                                                    return new core_vendor.Float32Array(arr);
                                                };
                                            } else {
                                                // Invalid value
                                                return;
                                            }
                                        } else if (type === 'bool') {
                                            return function() {
                                                return str.toLowerCase() === 'true' ? true : false;
                                            };
                                        } else if (type === 'float') {
                                            return function() {
                                                return parseFloat(str);
                                            };
                                        } else if (type === 'int') {
                                            return function() {
                                                return parseInt(str);
                                            };
                                        }
                                    },

                                    // Create a new uniform instance for material
                                    createUniforms: function() {
                                        var uniforms = {};

                                        for (var symbol in this.uniformTemplates) {
                                            var uniformTpl = this.uniformTemplates[symbol];
                                            uniforms[symbol] = {
                                                type: uniformTpl.type,
                                                value: uniformTpl.value()
                                            };
                                        }

                                        return uniforms;
                                    },

                                    // Attached to material
                                    attached: function() {
                                        this._attacheMaterialNumber++;
                                    },

                                    // Detached to material
                                    detached: function() {
                                        this._attacheMaterialNumber--;
                                    },

                                    isAttachedToAny: function() {
                                        return this._attacheMaterialNumber !== 0;
                                    },

                                    _parseAttributes: function() {
                                        var attributes = {};
                                        var self = this;
                                        this._vertexProcessedWithoutDefine = this._vertexProcessedWithoutDefine.replace(
                                            attributeRegex, _attributeParser
                                        );

                                        function _attributeParser(str, type, symbol, semanticWrapper, semantic) {
                                            if (type && symbol) {
                                                var size = 1;
                                                switch (type) {
                                                    case 'vec4':
                                                        size = 4;
                                                        break;
                                                    case 'vec3':
                                                        size = 3;
                                                        break;
                                                    case 'vec2':
                                                        size = 2;
                                                        break;
                                                    case 'float':
                                                        size = 1;
                                                        break;
                                                }

                                                attributes[symbol] = {
                                                    // Can only be float
                                                    type: 'float',
                                                    size: size,
                                                    semantic: semantic || null
                                                };

                                                if (semantic) {
                                                    if (attribSemantics.indexOf(semantic) < 0) {
                                                        throw new Error('Unkown semantic "' + semantic + '"');
                                                    } else {
                                                        self.attribSemantics[semantic] = {
                                                            symbol: symbol,
                                                            type: type
                                                        };
                                                    }
                                                }
                                            }

                                            return ['attribute', type, symbol].join(' ') + ';\n';
                                        }

                                        this.attributeTemplates = attributes;
                                    },

                                    _parseDefines: function() {
                                        var self = this;
                                        var shaderType = 'vertex';
                                        this._vertexProcessedWithoutDefine = this._vertexProcessedWithoutDefine.replace(defineRegex, _defineParser);
                                        shaderType = 'fragment';
                                        this._fragmentProcessedWithoutDefine = this._fragmentProcessedWithoutDefine.replace(defineRegex, _defineParser);

                                        function _defineParser(str, symbol, value) {
                                            var defines = shaderType === 'vertex' ? self.vertexDefines : self.fragmentDefines;
                                            if (!defines[symbol]) { // Haven't been defined by user
                                                if (value == 'false') {
                                                    defines[symbol] = false;
                                                } else if (value == 'true') {
                                                    defines[symbol] = true;
                                                } else {
                                                    defines[symbol] = value
                                                        // If can parse to float
                                                        ?
                                                        (isNaN(parseFloat(value)) ? value : parseFloat(value)) :
                                                        null;
                                                }
                                            }
                                            return '';
                                        }
                                    },

                                    // Return true or error msg if error happened
                                    _buildProgram: function(_gl, vertexShaderString, fragmentShaderString) {
                                        var cache = this._cache;
                                        if (cache.get('program')) {
                                            _gl.deleteProgram(cache.get('program'));
                                        }
                                        var program = _gl.createProgram();

                                        var vertexShader = _gl.createShader(_gl.VERTEX_SHADER);
                                        _gl.shaderSource(vertexShader, vertexShaderString);
                                        _gl.compileShader(vertexShader);

                                        var fragmentShader = _gl.createShader(_gl.FRAGMENT_SHADER);
                                        _gl.shaderSource(fragmentShader, fragmentShaderString);
                                        _gl.compileShader(fragmentShader);

                                        var msg = checkShaderErrorMsg(_gl, vertexShader, vertexShaderString);
                                        if (msg) {
                                            return msg;
                                        }
                                        msg = checkShaderErrorMsg(_gl, fragmentShader, fragmentShaderString);
                                        if (msg) {
                                            return msg;
                                        }

                                        _gl.attachShader(program, vertexShader);
                                        _gl.attachShader(program, fragmentShader);
                                        // Force the position bind to location 0;
                                        if (this.attribSemantics['POSITION']) {
                                            _gl.bindAttribLocation(program, 0, this.attribSemantics['POSITION'].symbol);
                                        } else {
                                            // Else choose an attribute and bind to location 0;
                                            var keys = Object.keys(this.attributeTemplates);
                                            _gl.bindAttribLocation(program, 0, keys[0]);
                                        }

                                        _gl.linkProgram(program);

                                        if (!_gl.getProgramParameter(program, _gl.LINK_STATUS)) {
                                            return 'Could not link program\n' + 'VALIDATE_STATUS: ' + _gl.getProgramParameter(program, _gl.VALIDATE_STATUS) + ', gl error [' + _gl.getError() + ']';
                                        }

                                        // Cache uniform locations
                                        for (var i = 0; i < this._uniformList.length; i++) {
                                            var uniformSymbol = this._uniformList[i];
                                            var locationMap = cache.get('locations');
                                            locationMap[uniformSymbol] = _gl.getUniformLocation(program, uniformSymbol);
                                        }

                                        _gl.deleteShader(vertexShader);
                                        _gl.deleteShader(fragmentShader);

                                        cache.put('program', program);
                                    },

                                    /**
                                     * Clone a new shader
                                     * @return {qtek.Shader}
                                     */
                                    clone: function() {
                                        var shader = new Shader({
                                            vertex: this.vertex,
                                            fragment: this.fragment,
                                            vertexDefines: core_util.clone(this.vertexDefines),
                                            fragmentDefines: core_util.clone(this.fragmentDefines)
                                        });
                                        for (var name in this._textureStatus) {
                                            shader._textureStatus[name] = core_util.clone(this._textureStatus[name]);
                                        }
                                        return shader;
                                    },
                                    /**
                                     * Dispose given context
                                     * @param  {qtek.Renderer} renderer
                                     */
                                    dispose: function(renderer) {
                                        var cache = this._cache;

                                        cache.use(renderer.__GUID__);
                                        var program = cache.get('program');
                                        if (program) {
                                            renderer.gl.deleteProgram(program);
                                        }
                                        cache.deleteContext(renderer.__GUID__);

                                        this._locations = {};
                                    }
                                });

                            function getCacheSchema() {
                                return {
                                    locations: {},
                                    attriblocations: {}
                                };
                            }

                            // Return true or error msg if error happened
                            function checkShaderErrorMsg(_gl, shader, shaderString) {
                                if (!_gl.getShaderParameter(shader, _gl.COMPILE_STATUS)) {
                                    return [_gl.getShaderInfoLog(shader), addLineNumbers(shaderString)].join('\n');
                                }
                            }

                            // some util functions
                            function addLineNumbers(string) {
                                var chunks = string.split('\n');
                                for (var i = 0, il = chunks.length; i < il; i++) {
                                    // Chrome reports shader errors on lines
                                    // starting counting from 1
                                    chunks[i] = (i + 1) + ': ' + chunks[i];
                                }
                                return chunks.join('\n');
                            }

                            var importRegex = /(@import)\s*([0-9a-zA-Z_\-\.]*)/g;
                            Shader.parseImport = function(shaderStr) {
                                shaderStr = shaderStr.replace(importRegex, function(str, importSymbol, importName) {
                                    var str = Shader.source(importName);
                                    if (str) {
                                        // Recursively parse
                                        return Shader.parseImport(str);
                                    } else {
                                        console.error('Shader chunk "' + importName + '" not existed in library');
                                        return '';
                                    }
                                });
                                return shaderStr;
                            };

                            var exportRegex = /(@export)\s*([0-9a-zA-Z_\-\.]*)\s*\n([\s\S]*?)@end/g;

                            /**
                             * Import shader source
                             * @param  {string} shaderStr
                             * @memberOf qtek.Shader
                             */
                            Shader['import'] = function(shaderStr) {
                                shaderStr.replace(exportRegex, function(str, exportSymbol, exportName, code) {
                                    var code = code.replace(/(^[\s\t\xa0\u3000]+)|([\u3000\xa0\s\t]+\x24)/g, '');
                                    if (code) {
                                        var parts = exportName.split('.');
                                        var obj = Shader.codes;
                                        var i = 0;
                                        var key;
                                        while (i < parts.length - 1) {
                                            key = parts[i++];
                                            if (!obj[key]) {
                                                obj[key] = {};
                                            }
                                            obj = obj[key];
                                        }
                                        key = parts[i];
                                        obj[key] = code;
                                    }
                                    return code;
                                });
                            };

                            /**
                             * Library to store all the loaded shader codes
                             * @type {Object}
                             * @readOnly
                             * @memberOf qtek.Shader
                             */
                            Shader.codes = {};

                            /**
                             * Get shader source
                             * @param  {string} name
                             * @return {string}
                             */
                            Shader.source = function(name) {
                                var parts = name.split('.');
                                var obj = Shader.codes;
                                var i = 0;
                                while (obj && i < parts.length) {
                                    var key = parts[i++];
                                    obj = obj[key];
                                }
                                if (typeof obj !== 'string') {
                                    // FIXME Use default instead
                                    console.error('Shader "' + name + '" not existed in library');
                                    return '';
                                }
                                return obj;
                            };

                            /* harmony default export */
                            var src_Shader = (Shader);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/shader/library.js
                            /**
                             * @export{Object} library
                             */


                            var _library = {};

                            /**
                             * @export qtek.shader.library~Libaray
                             */
                            function ShaderLibrary() {
                                this._pool = {};
                            }

                            /**
                             * ### Builin shaders
                             * + qtek.standard
                             * + qtek.basic
                             * + qtek.lambert
                             * + qtek.wireframe
                             *
                             * @namespace qtek.shader.library
                             */
                            /**
                             *
                             * Get shader from library. use shader name and option as hash key.
                             *
                             * @param {string} name
                             * @param {Object|string|Array.<string>} [option]
                             * @return {qtek.Shader}
                             *
                             * @example
                             *     qtek.shader.library.get('qtek.standard', 'diffuseMap', 'normalMap');
                             *     qtek.shader.library.get('qtek.standard', ['diffuseMap', 'normalMap']);
                             *     qtek.shader.library.get('qtek.standard', {
                             *         textures: ['diffuseMap'],
                             *         vertexDefines: {},
                             *         fragmentDefines: {}
                             *         precision: 'mediump'
                             *     })
                             */
                            ShaderLibrary.prototype.get = function(name, option) {
                                var enabledTextures = [];
                                var vertexDefines = {};
                                var fragmentDefines = {};
                                var precision;
                                if (typeof(option) === 'string') {
                                    enabledTextures = Array.prototype.slice.call(arguments, 1);
                                } else if (Object.prototype.toString.call(option) == '[object Object]') {
                                    enabledTextures = option.textures || [];
                                    vertexDefines = option.vertexDefines || {};
                                    fragmentDefines = option.fragmentDefines || {};
                                    precision = option.precision;
                                } else if (Array.isArray(option)) {
                                    enabledTextures = option;
                                }
                                var vertexDefineKeys = Object.keys(vertexDefines);
                                var fragmentDefineKeys = Object.keys(fragmentDefines);
                                enabledTextures.sort();
                                vertexDefineKeys.sort();
                                fragmentDefineKeys.sort();

                                var keyArr = [name];
                                keyArr = keyArr.concat(enabledTextures);
                                for (var i = 0; i < vertexDefineKeys.length; i++) {
                                    keyArr.push(
                                        vertexDefineKeys[i],
                                        vertexDefines[vertexDefineKeys[i]]
                                    );
                                }
                                for (var i = 0; i < fragmentDefineKeys.length; i++) {
                                    keyArr.push(
                                        fragmentDefineKeys[i],
                                        fragmentDefines[fragmentDefineKeys[i]]
                                    );
                                }
                                if (precision) {
                                    keyArr.push(precision);
                                }
                                var key = keyArr.join('_');

                                if (this._pool[key]) {
                                    return this._pool[key];
                                } else {
                                    var source = _library[name];
                                    if (!source) {
                                        console.error('Shader "' + name + '"' + ' is not in the library');
                                        return;
                                    }
                                    var shader = new src_Shader({
                                        'vertex': source.vertex,
                                        'fragment': source.fragment
                                    });
                                    if (precision) {
                                        shader.precision = precision;
                                    }
                                    for (var i = 0; i < enabledTextures.length; i++) {
                                        shader.enableTexture(enabledTextures[i]);
                                    }
                                    for (var name in vertexDefines) {
                                        shader.define('vertex', name, vertexDefines[name]);
                                    }
                                    for (var name in fragmentDefines) {
                                        shader.define('fragment', name, fragmentDefines[name]);
                                    }
                                    this._pool[key] = shader;
                                    return shader;
                                }
                            };

                            /**
                             * Clear shaders
                             */
                            ShaderLibrary.prototype.clear = function() {
                                this._pool = {};
                            };

                            /**
                             * @memberOf qtek.shader.library
                             * @param  {string} name
                             * @param  {string} vertex - Vertex shader code
                             * @param  {string} fragment - Fragment shader code
                             */
                            function template(name, vertex, fragment) {
                                _library[name] = {
                                    vertex: vertex,
                                    fragment: fragment
                                };
                            }

                            var defaultLibrary = new ShaderLibrary();

                            /**
                             * @alias qtek.shader.library
                             */
                            /* harmony default export */
                            var library = ({
                                /**
                                 * Create a new shader library.
                                 */
                                createLibrary: function() {
                                    return new ShaderLibrary();
                                },
                                get: function() {
                                    return defaultLibrary.get.apply(defaultLibrary, arguments);
                                },
                                template: template,
                                clear: function() {
                                    return defaultLibrary.clear();
                                }
                            });

                            // CONCATENATED MODULE: ./node_modules/qtek/src/Texture.js
                            /**
                             * Base class for all textures like compressed texture, texture2d, texturecube
                             * TODO mapping
                             */




                            /**
                             * @constructor
                             * @alias qtek.Texture
                             * @extends qtek.core.Base
                             */
                            var Texture = core_Base.extend(
                                /** @lends qtek.Texture# */
                                {
                                    /**
                                     * Texture width, readonly when the texture source is image
                                     * @type {number}
                                     */
                                    width: 512,
                                    /**
                                     * Texture height, readonly when the texture source is image
                                     * @type {number}
                                     */
                                    height: 512,
                                    /**
                                     * Texel data type.
                                     * Possible values:
                                     *  + {@link qtek.Texture.UNSIGNED_BYTE}
                                     *  + {@link qtek.Texture.HALF_FLOAT}
                                     *  + {@link qtek.Texture.FLOAT}
                                     *  + {@link qtek.Texture.UNSIGNED_INT_24_8_WEBGL}
                                     *  + {@link qtek.Texture.UNSIGNED_INT}
                                     * @type {number}
                                     */
                                    type: glenum.UNSIGNED_BYTE,
                                    /**
                                     * Format of texel data
                                     * Possible values:
                                     *  + {@link qtek.Texture.RGBA}
                                     *  + {@link qtek.Texture.DEPTH_COMPONENT}
                                     *  + {@link qtek.Texture.DEPTH_STENCIL}
                                     * @type {number}
                                     */
                                    format: glenum.RGBA,
                                    /**
                                     * Texture wrap. Default to be REPEAT.
                                     * Possible values:
                                     *  + {@link qtek.Texture.CLAMP_TO_EDGE}
                                     *  + {@link qtek.Texture.REPEAT}
                                     *  + {@link qtek.Texture.MIRRORED_REPEAT}
                                     * @type {number}
                                     */
                                    wrapS: glenum.REPEAT,
                                    /**
                                     * Texture wrap. Default to be REPEAT.
                                     * Possible values:
                                     *  + {@link qtek.Texture.CLAMP_TO_EDGE}
                                     *  + {@link qtek.Texture.REPEAT}
                                     *  + {@link qtek.Texture.MIRRORED_REPEAT}
                                     * @type {number}
                                     */
                                    wrapT: glenum.REPEAT,
                                    /**
                                     * Possible values:
                                     *  + {@link qtek.Texture.NEAREST}
                                     *  + {@link qtek.Texture.LINEAR}
                                     *  + {@link qtek.Texture.NEAREST_MIPMAP_NEAREST}
                                     *  + {@link qtek.Texture.LINEAR_MIPMAP_NEAREST}
                                     *  + {@link qtek.Texture.NEAREST_MIPMAP_LINEAR}
                                     *  + {@link qtek.Texture.LINEAR_MIPMAP_LINEAR}
                                     * @type {number}
                                     */
                                    minFilter: glenum.LINEAR_MIPMAP_LINEAR,
                                    /**
                                     * Possible values:
                                     *  + {@link qtek.Texture.NEAREST}
                                     *  + {@link qtek.Texture.LINEAR}
                                     * @type {number}
                                     */
                                    magFilter: glenum.LINEAR,
                                    /**
                                     * If enable mimap.
                                     * @type {boolean}
                                     */
                                    useMipmap: true,

                                    /**
                                     * Anisotropic filtering, enabled if value is larger than 1
                                     * @see http://blog.tojicode.com/2012/03/anisotropic-filtering-in-webgl.html
                                     * @type {number}
                                     */
                                    anisotropic: 1,
                                    // pixelStorei parameters, not available when texture is used as render target
                                    // http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml
                                    /**
                                     * If flip in y axis for given image source
                                     * @type {boolean}
                                     * @default true
                                     */
                                    flipY: true,
                                    /**
                                     * @type {number}
                                     * @default 4
                                     */
                                    unpackAlignment: 4,
                                    /**
                                     * @type {boolean}
                                     * @default false
                                     */
                                    premultiplyAlpha: false,

                                    /**
                                     * Dynamic option for texture like video
                                     * @type {boolean}
                                     */
                                    dynamic: false,

                                    NPOT: false
                                },
                                function() {
                                    this._cache = new core_Cache();
                                },
                                /** @lends qtek.Texture.prototype */
                                {

                                    getWebGLTexture: function(renderer) {
                                        var _gl = renderer.gl;
                                        var cache = this._cache;
                                        cache.use(renderer.__GUID__);

                                        if (cache.miss('webgl_texture')) {
                                            // In a new gl context, create new texture and set dirty true
                                            cache.put('webgl_texture', _gl.createTexture());
                                        }
                                        if (this.dynamic) {
                                            this.update(renderer);
                                        } else if (cache.isDirty()) {
                                            this.update(renderer);
                                            cache.fresh();
                                        }

                                        return cache.get('webgl_texture');
                                    },

                                    bind: function() {},
                                    unbind: function() {},

                                    /**
                                     * Mark texture is dirty and update in the next frame
                                     */
                                    dirty: function() {
                                        if (this._cache) {
                                            this._cache.dirtyAll();
                                        }
                                    },

                                    update: function(renderer) {},

                                    // Update the common parameters of texture
                                    updateCommon: function(renderer) {
                                        var _gl = renderer.gl;
                                        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, this.flipY);
                                        _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);
                                        _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, this.unpackAlignment);

                                        // Use of none-power of two texture
                                        // http://www.khronos.org/webgl/wiki/WebGL_and_OpenGL_Differences
                                        if (this.format === glenum.DEPTH_COMPONENT) {
                                            this.useMipmap = false;
                                        }

                                        var sRGBExt = renderer.getGLExtension('EXT_sRGB');
                                        // Fallback
                                        if (this.format === Texture.SRGB && !sRGBExt) {
                                            this.format = Texture.RGB;
                                        }
                                        if (this.format === Texture.SRGB_ALPHA && !sRGBExt) {
                                            this.format = Texture.RGBA;
                                        }

                                        this.NPOT = !this.isPowerOfTwo();
                                    },

                                    getAvailableWrapS: function() {
                                        if (this.NPOT) {
                                            return glenum.CLAMP_TO_EDGE;
                                        }
                                        return this.wrapS;
                                    },
                                    getAvailableWrapT: function() {
                                        if (this.NPOT) {
                                            return glenum.CLAMP_TO_EDGE;
                                        }
                                        return this.wrapT;
                                    },
                                    getAvailableMinFilter: function() {
                                        var minFilter = this.minFilter;
                                        if (this.NPOT || !this.useMipmap) {
                                            if (minFilter == glenum.NEAREST_MIPMAP_NEAREST ||
                                                minFilter == glenum.NEAREST_MIPMAP_LINEAR
                                            ) {
                                                return glenum.NEAREST;
                                            } else if (minFilter == glenum.LINEAR_MIPMAP_LINEAR ||
                                                minFilter == glenum.LINEAR_MIPMAP_NEAREST
                                            ) {
                                                return glenum.LINEAR;
                                            } else {
                                                return minFilter;
                                            }
                                        } else {
                                            return minFilter;
                                        }
                                    },
                                    getAvailableMagFilter: function() {
                                        return this.magFilter;
                                    },

                                    nextHighestPowerOfTwo: function(x) {
                                        --x;
                                        for (var i = 1; i < 32; i <<= 1) {
                                            x = x | x >> i;
                                        }
                                        return x + 1;
                                    },
                                    /**
                                     * @param  {qtek.Renderer} renderer
                                     */
                                    dispose: function(renderer) {

                                        var cache = this._cache;

                                        cache.use(renderer.__GUID__);

                                        var webglTexture = cache.get('webgl_texture');
                                        if (webglTexture) {
                                            renderer.gl.deleteTexture(webglTexture);
                                        }
                                        cache.deleteContext(renderer.__GUID__);

                                    },
                                    /**
                                     * Test if image of texture is valid and loaded.
                                     * @return {boolean}
                                     */
                                    isRenderable: function() {},

                                    /**
                                     * Test if texture size is power of two
                                     * @return {boolean}
                                     */
                                    isPowerOfTwo: function() {}
                                });

                            Object.defineProperty(Texture.prototype, 'width', {
                                get: function() {
                                    return this._width;
                                },
                                set: function(value) {
                                    this._width = value;
                                }
                            });
                            Object.defineProperty(Texture.prototype, 'height', {
                                get: function() {
                                    return this._height;
                                },
                                set: function(value) {
                                    this._height = value;
                                }
                            });

                            /* DataType */

                            /**
                             * @type {number}
                             */
                            Texture.BYTE = glenum.BYTE;
                            /**
                             * @type {number}
                             */
                            Texture.UNSIGNED_BYTE = glenum.UNSIGNED_BYTE;
                            /**
                             * @type {number}
                             */
                            Texture.SHORT = glenum.SHORT;
                            /**
                             * @type {number}
                             */
                            Texture.UNSIGNED_SHORT = glenum.UNSIGNED_SHORT;
                            /**
                             * @type {number}
                             */
                            Texture.INT = glenum.INT;
                            /**
                             * @type {number}
                             */
                            Texture.UNSIGNED_INT = glenum.UNSIGNED_INT;
                            /**
                             * @type {number}
                             */
                            Texture.FLOAT = glenum.FLOAT;
                            /**
                             * @type {number}
                             */
                            Texture.HALF_FLOAT = 0x8D61;

                            /**
                             * UNSIGNED_INT_24_8_WEBGL for WEBGL_depth_texture extension
                             * @type {number}
                             */
                            Texture.UNSIGNED_INT_24_8_WEBGL = 34042;

                            /* PixelFormat */
                            /**
                             * @type {number}
                             */
                            Texture.DEPTH_COMPONENT = glenum.DEPTH_COMPONENT;
                            /**
                             * @type {number}
                             */
                            Texture.DEPTH_STENCIL = glenum.DEPTH_STENCIL;
                            /**
                             * @type {number}
                             */
                            Texture.ALPHA = glenum.ALPHA;
                            /**
                             * @type {number}
                             */
                            Texture.RGB = glenum.RGB;
                            /**
                             * @type {number}
                             */
                            Texture.RGBA = glenum.RGBA;
                            /**
                             * @type {number}
                             */
                            Texture.LUMINANCE = glenum.LUMINANCE;
                            /**
                             * @type {number}
                             */
                            Texture.LUMINANCE_ALPHA = glenum.LUMINANCE_ALPHA;

                            /**
                             * @see https://www.khronos.org/registry/webgl/extensions/EXT_sRGB/
                             * @type {number}
                             */
                            Texture.SRGB = 0x8C40;
                            /**
                             * @see https://www.khronos.org/registry/webgl/extensions/EXT_sRGB/
                             * @type {number}
                             */
                            Texture.SRGB_ALPHA = 0x8C42;

                            /* Compressed Texture */
                            Texture.COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
                            Texture.COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
                            Texture.COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
                            Texture.COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;

                            /* TextureMagFilter */
                            /**
                             * @type {number}
                             */
                            Texture.NEAREST = glenum.NEAREST;
                            /**
                             * @type {number}
                             */
                            Texture.LINEAR = glenum.LINEAR;

                            /* TextureMinFilter */
                            /**
                             * @type {number}
                             */
                            Texture.NEAREST_MIPMAP_NEAREST = glenum.NEAREST_MIPMAP_NEAREST;
                            /**
                             * @type {number}
                             */
                            Texture.LINEAR_MIPMAP_NEAREST = glenum.LINEAR_MIPMAP_NEAREST;
                            /**
                             * @type {number}
                             */
                            Texture.NEAREST_MIPMAP_LINEAR = glenum.NEAREST_MIPMAP_LINEAR;
                            /**
                             * @type {number}
                             */
                            Texture.LINEAR_MIPMAP_LINEAR = glenum.LINEAR_MIPMAP_LINEAR;

                            /* TextureWrapMode */
                            /**
                             * @type {number}
                             */
                            Texture.REPEAT = glenum.REPEAT;
                            /**
                             * @type {number}
                             */
                            Texture.CLAMP_TO_EDGE = glenum.CLAMP_TO_EDGE;
                            /**
                             * @type {number}
                             */
                            Texture.MIRRORED_REPEAT = glenum.MIRRORED_REPEAT;


                            /* harmony default export */
                            var src_Texture = (Texture);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/Material.js



                            /**
                             * @constructor qtek.Material
                             * @extends qtek.core.Base
                             */
                            var Material = core_Base.extend(
                                /** @lends qtek.Material# */
                                {
                                    /**
                                     * @type {string}
                                     */
                                    name: '',

                                    /**
                                     * @type {Object}
                                     */
                                    // uniforms: null,

                                    /**
                                     * @type {qtek.Shader}
                                     */
                                    // shader: null,

                                    /**
                                     * @type {boolean}
                                     */
                                    depthTest: true,

                                    /**
                                     * @type {boolean}
                                     */
                                    depthMask: true,

                                    /**
                                     * @type {boolean}
                                     */
                                    transparent: false,
                                    /**
                                     * Blend func is a callback function when the material
                                     * have custom blending
                                     * The gl context will be the only argument passed in tho the
                                     * blend function
                                     * Detail of blend function in WebGL:
                                     * http://www.khronos.org/registry/gles/specs/2.0/es_full_spec_2.0.25.pdf
                                     *
                                     * Example :
                                     * function(_gl) {
                                     *  _gl.blendEquation(_gl.FUNC_ADD);
                                     *  _gl.blendFunc(_gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA);
                                     * }
                                     */
                                    blend: null,

                                    // shadowTransparentMap : null

                                    _enabledUniforms: null,
                                },
                                function() {
                                    if (!this.name) {
                                        this.name = 'MATERIAL_' + this.__GUID__;
                                    }
                                    if (this.shader) {
                                        this.attachShader(this.shader);
                                    }
                                    if (!this.uniforms) {
                                        this.uniforms = {};
                                    }
                                },
                                /** @lends qtek.Material.prototype */
                                {

                                    bind: function(renderer, shader, prevMaterial, prevShader) {
                                        var _gl = renderer.gl;
                                        // PENDING Same texture in different material take different slot?

                                        // May use shader of other material if shader code are same
                                        var shader = shader || this.shader;

                                        // var sameShader = prevShader === shader;

                                        var currentTextureSlot = shader.currentTextureSlot();

                                        for (var u = 0; u < this._enabledUniforms.length; u++) {
                                            var symbol = this._enabledUniforms[u];
                                            var uniformValue = this.uniforms[symbol].value;
                                            if (uniformValue instanceof src_Texture) {
                                                // Reset slot
                                                uniformValue.__slot = -1;
                                            } else if (Array.isArray(uniformValue)) {
                                                for (var i = 0; i < uniformValue.length; i++) {
                                                    if (uniformValue[i] instanceof src_Texture) {
                                                        uniformValue[i].__slot = -1;
                                                    }
                                                }
                                            }
                                        }
                                        // Set uniforms
                                        for (var u = 0; u < this._enabledUniforms.length; u++) {
                                            var symbol = this._enabledUniforms[u];
                                            var uniform = this.uniforms[symbol];
                                            var uniformValue = uniform.value;

                                            // PENDING
                                            // When binding two materials with the same shader
                                            // Many uniforms will be be set twice even if they have the same value
                                            // So add a evaluation to see if the uniform is really needed to be set
                                            // if (prevMaterial && sameShader) {
                                            //     if (prevMaterial.uniforms[symbol].value === uniformValue) {
                                            //         continue;
                                            //     }
                                            // }

                                            if (uniformValue === null) {
                                                // FIXME Assume material with same shader have same order uniforms
                                                // Or if different material use same textures,
                                                // the slot will be different and still skipped because optimization
                                                if (uniform.type === 't') {
                                                    var slot = shader.currentTextureSlot();
                                                    var res = shader.setUniform(_gl, '1i', symbol, slot);
                                                    if (res) { // Texture is enabled
                                                        // Still occupy the slot to make sure same texture in different materials have same slot.
                                                        shader.takeCurrentTextureSlot(renderer, null);
                                                    }
                                                }
                                                continue;
                                            } else if (uniformValue instanceof src_Texture) {
                                                if (uniformValue.__slot < 0) {
                                                    var slot = shader.currentTextureSlot();
                                                    var res = shader.setUniform(_gl, '1i', symbol, slot);
                                                    if (!res) { // Texture uniform is not enabled
                                                        continue;
                                                    }
                                                    shader.takeCurrentTextureSlot(renderer, uniformValue);
                                                    uniformValue.__slot = slot;
                                                }
                                                // Multiple uniform use same texture..
                                                else {
                                                    shader.setUniform(_gl, '1i', symbol, uniformValue.__slot);
                                                }
                                            } else if (Array.isArray(uniformValue)) {
                                                if (uniformValue.length === 0) {
                                                    continue;
                                                }
                                                // Texture Array
                                                var exampleValue = uniformValue[0];

                                                if (exampleValue instanceof src_Texture) {
                                                    if (!shader.hasUniform(symbol)) {
                                                        continue;
                                                    }

                                                    var arr = [];
                                                    for (var i = 0; i < uniformValue.length; i++) {
                                                        var texture = uniformValue[i];

                                                        if (texture.__slot < 0) {
                                                            var slot = shader.currentTextureSlot();
                                                            arr.push(slot);
                                                            shader.takeCurrentTextureSlot(renderer, texture);
                                                            texture.__slot = slot;
                                                        } else {
                                                            arr.push(texture.__slot);
                                                        }
                                                    }

                                                    shader.setUniform(_gl, '1iv', symbol, arr);
                                                } else {
                                                    shader.setUniform(_gl, uniform.type, symbol, uniformValue);
                                                }
                                            } else {
                                                shader.setUniform(_gl, uniform.type, symbol, uniformValue);
                                            }
                                        }
                                        // Texture slot maybe used out of material.
                                        shader.resetTextureSlot(currentTextureSlot);
                                    },

                                    /**
                                     * Set material uniform
                                     * @example
                                     *  mat.setUniform('color', [1, 1, 1, 1]);
                                     * @param {string} symbol
                                     * @param {number|array|qtek.Texture|ArrayBufferView} value
                                     */
                                    setUniform: function(symbol, value) {
                                        if (value === undefined) {
                                            console.warn('Uniform value "' + symbol + '" is undefined');
                                        }
                                        var uniform = this.uniforms[symbol];
                                        if (uniform) {
                                            uniform.value = value;
                                        }
                                    },

                                    /**
                                     * @param {Object} obj
                                     */
                                    setUniforms: function(obj) {
                                        for (var key in obj) {
                                            var val = obj[key];
                                            this.setUniform(key, val);
                                        }
                                    },

                                    // /**
                                    //  * Enable a uniform
                                    //  * It only have effect on the uniform exists in shader.
                                    //  * @param  {string} symbol
                                    //  */
                                    // enableUniform: function (symbol) {
                                    //     if (this.uniforms[symbol] && !this.isUniformEnabled(symbol)) {
                                    //         this._enabledUniforms.push(symbol);
                                    //     }
                                    // },

                                    // /**
                                    //  * Disable a uniform
                                    //  * It will not affect the uniform state in the shader. Because the shader uniforms is parsed from shader code with naive regex. When using micro to disable some uniforms in the shader. It will still try to set these uniforms in each rendering pass. We can disable these uniforms manually if we need this bit performance improvement. Mostly we can simply ignore it.
                                    //  * @param  {string} symbol
                                    //  */
                                    // disableUniform: function (symbol) {
                                    //     var idx = this._enabledUniforms.indexOf(symbol);
                                    //     if (idx >= 0) {
                                    //         this._enabledUniforms.splice(idx, 1);
                                    //     }
                                    // },

                                    /**
                                     * @param  {string}  symbol
                                     * @return {boolean}
                                     */
                                    isUniformEnabled: function(symbol) {
                                        return this._enabledUniforms.indexOf(symbol) >= 0;
                                    },

                                    /**
                                     * Alias of setUniform and setUniforms
                                     * @param {object|string} symbol
                                     * @param {number|array|qtek.Texture|ArrayBufferView} [value]
                                     */
                                    set: function(symbol, value) {
                                        if (typeof(symbol) === 'object') {
                                            for (var key in symbol) {
                                                var val = symbol[key];
                                                this.set(key, val);
                                            }
                                        } else {
                                            var uniform = this.uniforms[symbol];
                                            if (uniform) {
                                                if (typeof value === 'undefined') {
                                                    console.warn('Uniform value "' + symbol + '" is undefined');
                                                    value = null;
                                                }
                                                uniform.value = value;
                                            }
                                        }
                                    },
                                    /**
                                     * Get uniform value
                                     * @param  {string} symbol
                                     * @return {number|array|qtek.Texture|ArrayBufferView}
                                     */
                                    get: function(symbol) {
                                        var uniform = this.uniforms[symbol];
                                        if (uniform) {
                                            return uniform.value;
                                        }
                                    },
                                    /**
                                     * Attach a shader instance
                                     * @param  {qtek.Shader} shader
                                     * @param  {boolean} keepUniform If try to keep uniform value
                                     */
                                    attachShader: function(shader, keepUniform) {
                                        if (this.shader) {
                                            this.shader.detached();
                                        }

                                        var originalUniforms = this.uniforms;

                                        // Ignore if uniform can use in shader.
                                        this.uniforms = shader.createUniforms();
                                        this.shader = shader;

                                        var uniforms = this.uniforms;
                                        this._enabledUniforms = Object.keys(uniforms);
                                        // Make sure uniforms are set in same order to avoid texture slot wrong
                                        this._enabledUniforms.sort();

                                        if (keepUniform) {
                                            for (var symbol in originalUniforms) {
                                                if (uniforms[symbol]) {
                                                    uniforms[symbol].value = originalUniforms[symbol].value;
                                                }
                                            }
                                        }

                                        shader.attached();
                                    },

                                    /**
                                     * Detach a shader instance
                                     */
                                    detachShader: function() {
                                        this.shader.detached();
                                        this.shader = null;
                                        this.uniforms = {};
                                    },

                                    /**
                                     * Clone a new material and keep uniforms, shader will not be cloned
                                     * @return {qtek.Material}
                                     */
                                    clone: function() {
                                        var material = new this.constructor({
                                            name: this.name,
                                            shader: this.shader
                                        });
                                        for (var symbol in this.uniforms) {
                                            material.uniforms[symbol].value = this.uniforms[symbol].value;
                                        }
                                        material.depthTest = this.depthTest;
                                        material.depthMask = this.depthMask;
                                        material.transparent = this.transparent;
                                        material.blend = this.blend;

                                        return material;
                                    },

                                    /**
                                     * Dispose material, if material shader is not attached to any other materials
                                     * Shader will also be disposed
                                     * @param {WebGLRenderingContext} gl
                                     * @param {boolean} [disposeTexture=false] If dispose the textures used in the material
                                     */
                                    dispose: function(renderer, disposeTexture) {
                                        if (disposeTexture) {
                                            for (var name in this.uniforms) {
                                                var val = this.uniforms[name].value;
                                                if (!val) {
                                                    continue;
                                                }
                                                if (val instanceof src_Texture) {
                                                    val.dispose(renderer);
                                                } else if (Array.isArray(val)) {
                                                    for (var i = 0; i < val.length; i++) {
                                                        if (val[i] instanceof src_Texture) {
                                                            val[i].dispose(renderer);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        var shader = this.shader;
                                        if (shader) {
                                            this.detachShader();
                                            if (!shader.isAttachedToAny()) {
                                                shader.dispose(renderer);
                                            }
                                        }
                                    }
                                });

                            /* harmony default export */
                            var src_Material = (Material);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/math/Vector2.js

                            var vec2 = glmatrix_default.a.vec2;

                            /**
                             * @constructor
                             * @alias qtek.math.Vector2
                             * @param {number} x
                             * @param {number} y
                             */
                            var Vector2 = function(x, y) {

                                x = x || 0;
                                y = y || 0;

                                /**
                                 * Storage of Vector2, read and write of x, y will change the values in _array
                                 * All methods also operate on the _array instead of x, y components
                                 * @name _array
                                 * @type {Float32Array}
                                 */
                                this._array = vec2.fromValues(x, y);

                                /**
                                 * Dirty flag is used by the Node to determine
                                 * if the matrix is updated to latest
                                 * @name _dirty
                                 * @type {boolean}
                                 */
                                this._dirty = true;
                            };

                            Vector2.prototype = {

                                constructor: Vector2,

                                /**
                                 * Add b to self
                                 * @param  {qtek.math.Vector2} b
                                 * @return {qtek.math.Vector2}
                                 */
                                add: function(b) {
                                    vec2.add(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Set x and y components
                                 * @param  {number}  x
                                 * @param  {number}  y
                                 * @return {qtek.math.Vector2}
                                 */
                                set: function(x, y) {
                                    this._array[0] = x;
                                    this._array[1] = y;
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Set x and y components from array
                                 * @param  {Float32Array|number[]} arr
                                 * @return {qtek.math.Vector2}
                                 */
                                setArray: function(arr) {
                                    this._array[0] = arr[0];
                                    this._array[1] = arr[1];

                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Clone a new Vector2
                                 * @return {qtek.math.Vector2}
                                 */
                                clone: function() {
                                    return new Vector2(this.x, this.y);
                                },

                                /**
                                 * Copy x, y from b
                                 * @param  {qtek.math.Vector2} b
                                 * @return {qtek.math.Vector2}
                                 */
                                copy: function(b) {
                                    vec2.copy(this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Cross product of self and b, written to a Vector3 out
                                 * @param  {qtek.math.Vector3} out
                                 * @param  {qtek.math.Vector2} b
                                 * @return {qtek.math.Vector2}
                                 */
                                cross: function(out, b) {
                                    vec2.cross(out._array, this._array, b._array);
                                    out._dirty = true;
                                    return this;
                                },

                                /**
                                 * Alias for distance
                                 * @param  {qtek.math.Vector2} b
                                 * @return {number}
                                 */
                                dist: function(b) {
                                    return vec2.dist(this._array, b._array);
                                },

                                /**
                                 * Distance between self and b
                                 * @param  {qtek.math.Vector2} b
                                 * @return {number}
                                 */
                                distance: function(b) {
                                    return vec2.distance(this._array, b._array);
                                },

                                /**
                                 * Alias for divide
                                 * @param  {qtek.math.Vector2} b
                                 * @return {qtek.math.Vector2}
                                 */
                                div: function(b) {
                                    vec2.div(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Divide self by b
                                 * @param  {qtek.math.Vector2} b
                                 * @return {qtek.math.Vector2}
                                 */
                                divide: function(b) {
                                    vec2.divide(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Dot product of self and b
                                 * @param  {qtek.math.Vector2} b
                                 * @return {number}
                                 */
                                dot: function(b) {
                                    return vec2.dot(this._array, b._array);
                                },

                                /**
                                 * Alias of length
                                 * @return {number}
                                 */
                                len: function() {
                                    return vec2.len(this._array);
                                },

                                /**
                                 * Calculate the length
                                 * @return {number}
                                 */
                                length: function() {
                                    return vec2.length(this._array);
                                },

                                /**
                                 * Linear interpolation between a and b
                                 * @param  {qtek.math.Vector2} a
                                 * @param  {qtek.math.Vector2} b
                                 * @param  {number}  t
                                 * @return {qtek.math.Vector2}
                                 */
                                lerp: function(a, b, t) {
                                    vec2.lerp(this._array, a._array, b._array, t);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Minimum of self and b
                                 * @param  {qtek.math.Vector2} b
                                 * @return {qtek.math.Vector2}
                                 */
                                min: function(b) {
                                    vec2.min(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Maximum of self and b
                                 * @param  {qtek.math.Vector2} b
                                 * @return {qtek.math.Vector2}
                                 */
                                max: function(b) {
                                    vec2.max(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Alias for multiply
                                 * @param  {qtek.math.Vector2} b
                                 * @return {qtek.math.Vector2}
                                 */
                                mul: function(b) {
                                    vec2.mul(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Mutiply self and b
                                 * @param  {qtek.math.Vector2} b
                                 * @return {qtek.math.Vector2}
                                 */
                                multiply: function(b) {
                                    vec2.multiply(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Negate self
                                 * @return {qtek.math.Vector2}
                                 */
                                negate: function() {
                                    vec2.negate(this._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Normalize self
                                 * @return {qtek.math.Vector2}
                                 */
                                normalize: function() {
                                    vec2.normalize(this._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Generate random x, y components with a given scale
                                 * @param  {number} scale
                                 * @return {qtek.math.Vector2}
                                 */
                                random: function(scale) {
                                    vec2.random(this._array, scale);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Scale self
                                 * @param  {number}  scale
                                 * @return {qtek.math.Vector2}
                                 */
                                scale: function(s) {
                                    vec2.scale(this._array, this._array, s);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Scale b and add to self
                                 * @param  {qtek.math.Vector2} b
                                 * @param  {number}  scale
                                 * @return {qtek.math.Vector2}
                                 */
                                scaleAndAdd: function(b, s) {
                                    vec2.scaleAndAdd(this._array, this._array, b._array, s);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Alias for squaredDistance
                                 * @param  {qtek.math.Vector2} b
                                 * @return {number}
                                 */
                                sqrDist: function(b) {
                                    return vec2.sqrDist(this._array, b._array);
                                },

                                /**
                                 * Squared distance between self and b
                                 * @param  {qtek.math.Vector2} b
                                 * @return {number}
                                 */
                                squaredDistance: function(b) {
                                    return vec2.squaredDistance(this._array, b._array);
                                },

                                /**
                                 * Alias for squaredLength
                                 * @return {number}
                                 */
                                sqrLen: function() {
                                    return vec2.sqrLen(this._array);
                                },

                                /**
                                 * Squared length of self
                                 * @return {number}
                                 */
                                squaredLength: function() {
                                    return vec2.squaredLength(this._array);
                                },

                                /**
                                 * Alias for subtract
                                 * @param  {qtek.math.Vector2} b
                                 * @return {qtek.math.Vector2}
                                 */
                                sub: function(b) {
                                    vec2.sub(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Subtract b from self
                                 * @param  {qtek.math.Vector2} b
                                 * @return {qtek.math.Vector2}
                                 */
                                subtract: function(b) {
                                    vec2.subtract(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Transform self with a Matrix2 m
                                 * @param  {qtek.math.Matrix2} m
                                 * @return {qtek.math.Vector2}
                                 */
                                transformMat2: function(m) {
                                    vec2.transformMat2(this._array, this._array, m._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Transform self with a Matrix2d m
                                 * @param  {qtek.math.Matrix2d} m
                                 * @return {qtek.math.Vector2}
                                 */
                                transformMat2d: function(m) {
                                    vec2.transformMat2d(this._array, this._array, m._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Transform self with a Matrix3 m
                                 * @param  {qtek.math.Matrix3} m
                                 * @return {qtek.math.Vector2}
                                 */
                                transformMat3: function(m) {
                                    vec2.transformMat3(this._array, this._array, m._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Transform self with a Matrix4 m
                                 * @param  {qtek.math.Matrix4} m
                                 * @return {qtek.math.Vector2}
                                 */
                                transformMat4: function(m) {
                                    vec2.transformMat4(this._array, this._array, m._array);
                                    this._dirty = true;
                                    return this;
                                },

                                toString: function() {
                                    return '[' + Array.prototype.join.call(this._array, ',') + ']';
                                },

                                toArray: function() {
                                    return Array.prototype.slice.call(this._array);
                                }
                            };

                            // Getter and Setter
                            if (Object.defineProperty) {

                                var Vector2_proto = Vector2.prototype;
                                /**
                                 * @name x
                                 * @type {number}
                                 * @memberOf qtek.math.Vector2
                                 * @instance
                                 */
                                Object.defineProperty(Vector2_proto, 'x', {
                                    get: function() {
                                        return this._array[0];
                                    },
                                    set: function(value) {
                                        this._array[0] = value;
                                        this._dirty = true;
                                    }
                                });

                                /**
                                 * @name y
                                 * @type {number}
                                 * @memberOf qtek.math.Vector2
                                 * @instance
                                 */
                                Object.defineProperty(Vector2_proto, 'y', {
                                    get: function() {
                                        return this._array[1];
                                    },
                                    set: function(value) {
                                        this._array[1] = value;
                                        this._dirty = true;
                                    }
                                });
                            }

                            // Supply methods that are not in place

                            /**
                             * @param  {qtek.math.Vector2} out
                             * @param  {qtek.math.Vector2} a
                             * @param  {qtek.math.Vector2} b
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.add = function(out, a, b) {
                                vec2.add(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Vector2} out
                             * @param  {number}  x
                             * @param  {number}  y
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.set = function(out, x, y) {
                                vec2.set(out._array, x, y);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Vector2} out
                             * @param  {qtek.math.Vector2} b
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.copy = function(out, b) {
                                vec2.copy(out._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Vector3} out
                             * @param  {qtek.math.Vector2} a
                             * @param  {qtek.math.Vector2} b
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.cross = function(out, a, b) {
                                vec2.cross(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @param  {qtek.math.Vector2} a
                             * @param  {qtek.math.Vector2} b
                             * @return {number}
                             */
                            Vector2.dist = function(a, b) {
                                return vec2.distance(a._array, b._array);
                            };
                            /**
                             * @method
                             * @param  {qtek.math.Vector2} a
                             * @param  {qtek.math.Vector2} b
                             * @return {number}
                             */
                            Vector2.distance = Vector2.dist;
                            /**
                             * @param  {qtek.math.Vector2} out
                             * @param  {qtek.math.Vector2} a
                             * @param  {qtek.math.Vector2} b
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.div = function(out, a, b) {
                                vec2.divide(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @method
                             * @param  {qtek.math.Vector2} out
                             * @param  {qtek.math.Vector2} a
                             * @param  {qtek.math.Vector2} b
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.divide = Vector2.div;
                            /**
                             * @param  {qtek.math.Vector2} a
                             * @param  {qtek.math.Vector2} b
                             * @return {number}
                             */
                            Vector2.dot = function(a, b) {
                                return vec2.dot(a._array, b._array);
                            };

                            /**
                             * @param  {qtek.math.Vector2} a
                             * @return {number}
                             */
                            Vector2.len = function(b) {
                                return vec2.length(b._array);
                            };

                            // Vector2.length = Vector2.len;

                            /**
                             * @param  {qtek.math.Vector2} out
                             * @param  {qtek.math.Vector2} a
                             * @param  {qtek.math.Vector2} b
                             * @param  {number}  t
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.lerp = function(out, a, b, t) {
                                vec2.lerp(out._array, a._array, b._array, t);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @param  {qtek.math.Vector2} out
                             * @param  {qtek.math.Vector2} a
                             * @param  {qtek.math.Vector2} b
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.min = function(out, a, b) {
                                vec2.min(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Vector2} out
                             * @param  {qtek.math.Vector2} a
                             * @param  {qtek.math.Vector2} b
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.max = function(out, a, b) {
                                vec2.max(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @param  {qtek.math.Vector2} out
                             * @param  {qtek.math.Vector2} a
                             * @param  {qtek.math.Vector2} b
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.mul = function(out, a, b) {
                                vec2.multiply(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @method
                             * @param  {qtek.math.Vector2} out
                             * @param  {qtek.math.Vector2} a
                             * @param  {qtek.math.Vector2} b
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.multiply = Vector2.mul;
                            /**
                             * @param  {qtek.math.Vector2} out
                             * @param  {qtek.math.Vector2} a
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.negate = function(out, a) {
                                vec2.negate(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @param  {qtek.math.Vector2} out
                             * @param  {qtek.math.Vector2} a
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.normalize = function(out, a) {
                                vec2.normalize(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @param  {qtek.math.Vector2} out
                             * @param  {number}  scale
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.random = function(out, scale) {
                                vec2.random(out._array, scale);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @param  {qtek.math.Vector2} out
                             * @param  {qtek.math.Vector2} a
                             * @param  {number}  scale
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.scale = function(out, a, scale) {
                                vec2.scale(out._array, a._array, scale);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @param  {qtek.math.Vector2} out
                             * @param  {qtek.math.Vector2} a
                             * @param  {qtek.math.Vector2} b
                             * @param  {number}  scale
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.scaleAndAdd = function(out, a, b, scale) {
                                vec2.scaleAndAdd(out._array, a._array, b._array, scale);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @param  {qtek.math.Vector2} a
                             * @param  {qtek.math.Vector2} b
                             * @return {number}
                             */
                            Vector2.sqrDist = function(a, b) {
                                return vec2.sqrDist(a._array, b._array);
                            };
                            /**
                             * @method
                             * @param  {qtek.math.Vector2} a
                             * @param  {qtek.math.Vector2} b
                             * @return {number}
                             */
                            Vector2.squaredDistance = Vector2.sqrDist;

                            /**
                             * @param  {qtek.math.Vector2} a
                             * @return {number}
                             */
                            Vector2.sqrLen = function(a) {
                                return vec2.sqrLen(a._array);
                            };
                            /**
                             * @method
                             * @param  {qtek.math.Vector2} a
                             * @return {number}
                             */
                            Vector2.squaredLength = Vector2.sqrLen;

                            /**
                             * @param  {qtek.math.Vector2} out
                             * @param  {qtek.math.Vector2} a
                             * @param  {qtek.math.Vector2} b
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.sub = function(out, a, b) {
                                vec2.subtract(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @method
                             * @param  {qtek.math.Vector2} out
                             * @param  {qtek.math.Vector2} a
                             * @param  {qtek.math.Vector2} b
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.subtract = Vector2.sub;
                            /**
                             * @param  {qtek.math.Vector2} out
                             * @param  {qtek.math.Vector2} a
                             * @param  {qtek.math.Matrix2} m
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.transformMat2 = function(out, a, m) {
                                vec2.transformMat2(out._array, a._array, m._array);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @param  {qtek.math.Vector2}  out
                             * @param  {qtek.math.Vector2}  a
                             * @param  {qtek.math.Matrix2d} m
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.transformMat2d = function(out, a, m) {
                                vec2.transformMat2d(out._array, a._array, m._array);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @param  {qtek.math.Vector2} out
                             * @param  {qtek.math.Vector2} a
                             * @param  {Matrix3} m
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.transformMat3 = function(out, a, m) {
                                vec2.transformMat3(out._array, a._array, m._array);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @param  {qtek.math.Vector2} out
                             * @param  {qtek.math.Vector2} a
                             * @param  {qtek.math.Matrix4} m
                             * @return {qtek.math.Vector2}
                             */
                            Vector2.transformMat4 = function(out, a, m) {
                                vec2.transformMat4(out._array, a._array, m._array);
                                out._dirty = true;
                                return out;
                            };

                            /* harmony default export */
                            var math_Vector2 = (Vector2);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/shader/source/header/calcAmbientSHLight.glsl.js
                            /* harmony default export */
                            var calcAmbientSHLight_glsl = ("vec3 calcAmbientSHLight(int idx, vec3 N) {\n    int offset = 9 * idx;\n    return ambientSHLightCoefficients[0]\n        + ambientSHLightCoefficients[1] * N.x\n        + ambientSHLightCoefficients[2] * N.y\n        + ambientSHLightCoefficients[3] * N.z\n        + ambientSHLightCoefficients[4] * N.x * N.z\n        + ambientSHLightCoefficients[5] * N.z * N.y\n        + ambientSHLightCoefficients[6] * N.y * N.x\n        + ambientSHLightCoefficients[7] * (3.0 * N.z * N.z - 1.0)\n        + ambientSHLightCoefficients[8] * (N.x * N.x - N.y * N.y);\n}");

                            // CONCATENATED MODULE: ./node_modules/qtek/src/shader/source/header/light.js


                            var uniformVec3Prefix = 'uniform vec3 ';
                            var uniformFloatPrefix = 'uniform float ';
                            var exportHeaderPrefix = '@export qtek.header.';
                            var exportEnd = '@end';
                            var unconfigurable = ':unconfigurable;';
                            /* harmony default export */
                            var header_light = ([
                                exportHeaderPrefix + 'directional_light',
                                uniformVec3Prefix + 'directionalLightDirection[DIRECTIONAL_LIGHT_COUNT]' + unconfigurable,
                                uniformVec3Prefix + 'directionalLightColor[DIRECTIONAL_LIGHT_COUNT]' + unconfigurable,
                                exportEnd,

                                exportHeaderPrefix + 'ambient_light',
                                uniformVec3Prefix + 'ambientLightColor[AMBIENT_LIGHT_COUNT]' + unconfigurable,
                                exportEnd,

                                exportHeaderPrefix + 'ambient_sh_light',
                                uniformVec3Prefix + 'ambientSHLightColor[AMBIENT_SH_LIGHT_COUNT]' + unconfigurable,
                                uniformVec3Prefix + 'ambientSHLightCoefficients[AMBIENT_SH_LIGHT_COUNT * 9]' + unconfigurable,
                                calcAmbientSHLight_glsl,
                                exportEnd,

                                exportHeaderPrefix + 'ambient_cubemap_light',
                                uniformVec3Prefix + 'ambientCubemapLightColor[AMBIENT_CUBEMAP_LIGHT_COUNT]' + unconfigurable,
                                'uniform samplerCube ambientCubemapLightCubemap[AMBIENT_CUBEMAP_LIGHT_COUNT]' + unconfigurable,
                                'uniform sampler2D ambientCubemapLightBRDFLookup[AMBIENT_CUBEMAP_LIGHT_COUNT]' + unconfigurable,
                                exportEnd,

                                exportHeaderPrefix + 'point_light',
                                uniformVec3Prefix + 'pointLightPosition[POINT_LIGHT_COUNT]' + unconfigurable,
                                uniformFloatPrefix + 'pointLightRange[POINT_LIGHT_COUNT]' + unconfigurable,
                                uniformVec3Prefix + 'pointLightColor[POINT_LIGHT_COUNT]' + unconfigurable,
                                exportEnd,

                                exportHeaderPrefix + 'spot_light',
                                uniformVec3Prefix + 'spotLightPosition[SPOT_LIGHT_COUNT]' + unconfigurable,
                                uniformVec3Prefix + 'spotLightDirection[SPOT_LIGHT_COUNT]' + unconfigurable,
                                uniformFloatPrefix + 'spotLightRange[SPOT_LIGHT_COUNT]' + unconfigurable,
                                uniformFloatPrefix + 'spotLightUmbraAngleCosine[SPOT_LIGHT_COUNT]' + unconfigurable,
                                uniformFloatPrefix + 'spotLightPenumbraAngleCosine[SPOT_LIGHT_COUNT]' + unconfigurable,
                                uniformFloatPrefix + 'spotLightFalloffFactor[SPOT_LIGHT_COUNT]' + unconfigurable,
                                uniformVec3Prefix + 'spotLightColor[SPOT_LIGHT_COUNT]' + unconfigurable,
                                exportEnd
                            ].join('\n'));

                            // CONCATENATED MODULE: ./node_modules/qtek/src/shader/source/prez.glsl.js
                            /* harmony default export */
                            var prez_glsl = ("@export qtek.prez.vertex\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nattribute vec3 position : POSITION;\n@import qtek.chunk.skinning_header\nvoid main()\n{\n    vec3 skinnedPosition = position;\n#ifdef SKINNING\n    @import qtek.chunk.skin_matrix\n    skinnedPosition = (skinMatrixWS * vec4(position, 1.0)).xyz;\n#endif\n    gl_Position = worldViewProjection * vec4(skinnedPosition, 1.0);\n}\n@end\n@export qtek.prez.fragment\nvoid main()\n{\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n}\n@end");

                            // CONCATENATED MODULE: ./node_modules/qtek/src/Renderer.js
                            // TODO Resources like shader, texture, geometry reference management
                            // Trace and find out which shader, texture, geometry can be destroyed
                            //
                            // TODO prez skinning










                            // Light header




                            src_Shader['import'](header_light);
                            src_Shader['import'](prez_glsl);


                            var Renderer_mat4 = glmatrix_default.a.mat4;
                            var Renderer_vec3 = glmatrix_default.a.vec3;

                            var mat4Create = Renderer_mat4.create;

                            var errorShader = {};

                            /**
                             * @constructor qtek.Renderer
                             */
                            var Renderer = core_Base.extend(function() {
                                    return /** @lends qtek.Renderer# */ {

                                        /**
                                         * @type {HTMLCanvasElement}
                                         * @readonly
                                         */
                                        canvas: null,

                                        /**
                                         * Canvas width, set by resize method
                                         * @type {number}
                                         * @private
                                         */
                                        _width: 100,

                                        /**
                                         * Canvas width, set by resize method
                                         * @type {number}
                                         * @private
                                         */
                                        _height: 100,

                                        /**
                                         * Device pixel ratio, set by setDevicePixelRatio method
                                         * Specially for high defination display
                                         * @see http://www.khronos.org/webgl/wiki/HandlingHighDPI
                                         * @type {number}
                                         * @private
                                         */
                                        devicePixelRatio: window.devicePixelRatio || 1.0,

                                        /**
                                         * Clear color
                                         * @type {number[]}
                                         */
                                        clearColor: [0.0, 0.0, 0.0, 0.0],

                                        /**
                                         * Default:
                                         *     _gl.COLOR_BUFFER_BIT | _gl.DEPTH_BUFFER_BIT | _gl.STENCIL_BUFFER_BIT
                                         * @type {number}
                                         */
                                        clearBit: 17664,

                                        // Settings when getting context
                                        // http://www.khronos.org/registry/webgl/specs/latest/#2.4

                                        /**
                                         * If enable alpha, default true
                                         * @type {boolean}
                                         */
                                        alpha: true,
                                        /**
                                         * If enable depth buffer, default true
                                         * @type {boolean}
                                         */
                                        depth: true,
                                        /**
                                         * If enable stencil buffer, default false
                                         * @type {boolean}
                                         */
                                        stencil: false,
                                        /**
                                         * If enable antialias, default true
                                         * @type {boolean}
                                         */
                                        antialias: true,
                                        /**
                                         * If enable premultiplied alpha, default true
                                         * @type {boolean}
                                         */
                                        premultipliedAlpha: true,
                                        /**
                                         * If preserve drawing buffer, default false
                                         * @type {boolean}
                                         */
                                        preserveDrawingBuffer: false,
                                        /**
                                         * If throw context error, usually turned on in debug mode
                                         * @type {boolean}
                                         */
                                        throwError: true,
                                        /**
                                         * WebGL Context created from given canvas
                                         * @type {WebGLRenderingContext}
                                         */
                                        gl: null,
                                        /**
                                         * Renderer viewport, read-only, can be set by setViewport method
                                         * @type {Object}
                                         */
                                        viewport: {},

                                        // Set by FrameBuffer#bind
                                        __currentFrameBuffer: null,

                                        _viewportStack: [],
                                        _clearStack: [],

                                        _sceneRendering: null
                                    };
                                }, function() {

                                    if (!this.canvas) {
                                        this.canvas = document.createElement('canvas');
                                    }
                                    var canvas = this.canvas;
                                    try {
                                        var opts = {
                                            alpha: this.alpha,
                                            depth: this.depth,
                                            stencil: this.stencil,
                                            antialias: this.antialias,
                                            premultipliedAlpha: this.premultipliedAlpha,
                                            preserveDrawingBuffer: this.preserveDrawingBuffer
                                        };

                                        this.gl = canvas.getContext('webgl', opts) ||
                                            canvas.getContext('experimental-webgl', opts);

                                        if (!this.gl) {
                                            throw new Error();
                                        }

                                        this._glinfo = new core_GLInfo(this.gl);

                                        if (this.gl.targetRenderer) {
                                            console.error('Already created a renderer');
                                        }
                                        this.gl.targetRenderer = this;

                                        this.resize();
                                    } catch (e) {
                                        throw 'Error creating WebGL Context ' + e;
                                    }
                                },
                                /** @lends qtek.Renderer.prototype. **/
                                {
                                    /**
                                     * Resize the canvas
                                     * @param {number} width
                                     * @param {number} height
                                     */
                                    resize: function(width, height) {
                                        var canvas = this.canvas;
                                        // http://www.khronos.org/webgl/wiki/HandlingHighDPI
                                        // set the display size of the canvas.
                                        var dpr = this.devicePixelRatio;
                                        if (width != null) {
                                            canvas.style.width = width + 'px';
                                            canvas.style.height = height + 'px';
                                            // set the size of the drawingBuffer
                                            canvas.width = width * dpr;
                                            canvas.height = height * dpr;

                                            this._width = width;
                                            this._height = height;
                                        } else {
                                            this._width = canvas.width / dpr;
                                            this._height = canvas.height / dpr;
                                        }

                                        this.setViewport(0, 0, this._width, this._height);
                                    },

                                    /**
                                     * Get renderer width
                                     * @return {number}
                                     */
                                    getWidth: function() {
                                        return this._width;
                                    },

                                    /**
                                     * Get renderer height
                                     * @return {number}
                                     */
                                    getHeight: function() {
                                        return this._height;
                                    },

                                    /**
                                     * Get viewport aspect,
                                     * @return {number}
                                     */
                                    getViewportAspect: function() {
                                        var viewport = this.viewport;
                                        return viewport.width / viewport.height;
                                    },

                                    /**
                                     * Set devicePixelRatio
                                     * @param {number} devicePixelRatio
                                     */
                                    setDevicePixelRatio: function(devicePixelRatio) {
                                        this.devicePixelRatio = devicePixelRatio;
                                        this.resize(this._width, this._height);
                                    },

                                    /**
                                     * Get devicePixelRatio
                                     * @param {number} devicePixelRatio
                                     */
                                    getDevicePixelRatio: function() {
                                        return this.devicePixelRatio;
                                    },

                                    /**
                                     * Get WebGL extension
                                     * @param {string} name
                                     * @return {object}
                                     */
                                    getGLExtension: function(name) {
                                        return this._glinfo.getExtension(name);
                                    },

                                    /**
                                     * Get WebGL parameter
                                     * @param {string} name
                                     * @return {*}
                                     */
                                    getGLParameter: function(name) {
                                        return this._glinfo.getParameter(name);
                                    },

                                    /**
                                     * Set rendering viewport
                                     * @param {number|Object} x
                                     * @param {number} [y]
                                     * @param {number} [width]
                                     * @param {number} [height]
                                     * @param {number} [devicePixelRatio]
                                     *        Defaultly use the renderere devicePixelRatio
                                     *        It needs to be 1 when setViewport is called by frameBuffer
                                     *
                                     * @example
                                     *  setViewport(0,0,width,height,1)
                                     *  setViewport({
                                     *      x: 0,
                                     *      y: 0,
                                     *      width: width,
                                     *      height: height,
                                     *      devicePixelRatio: 1
                                     *  })
                                     */
                                    setViewport: function(x, y, width, height, dpr) {

                                        if (typeof x === 'object') {
                                            var obj = x;

                                            x = obj.x;
                                            y = obj.y;
                                            width = obj.width;
                                            height = obj.height;
                                            dpr = obj.devicePixelRatio;
                                        }
                                        dpr = dpr || this.devicePixelRatio;

                                        this.gl.viewport(
                                            x * dpr, y * dpr, width * dpr, height * dpr
                                        );
                                        // Use a fresh new object, not write property.
                                        this.viewport = {
                                            x: x,
                                            y: y,
                                            width: width,
                                            height: height,
                                            devicePixelRatio: dpr
                                        };
                                    },

                                    /**
                                     * Push current viewport into a stack
                                     */
                                    saveViewport: function() {
                                        this._viewportStack.push(this.viewport);
                                    },

                                    /**
                                     * Pop viewport from stack, restore in the renderer
                                     */
                                    restoreViewport: function() {
                                        if (this._viewportStack.length > 0) {
                                            this.setViewport(this._viewportStack.pop());
                                        }
                                    },

                                    /**
                                     * Push current clear into a stack
                                     */
                                    saveClear: function() {
                                        this._clearStack.push({
                                            clearBit: this.clearBit,
                                            clearColor: this.clearColor
                                        });
                                    },

                                    /**
                                     * Pop clear from stack, restore in the renderer
                                     */
                                    restoreClear: function() {
                                        if (this._clearStack.length > 0) {
                                            var opt = this._clearStack.pop();
                                            this.clearColor = opt.clearColor;
                                            this.clearBit = opt.clearBit;
                                        }
                                    },

                                    bindSceneRendering: function(scene) {
                                        this._sceneRendering = scene;
                                    },

                                    // Hook before and after render each object
                                    beforeRenderObject: function() {},
                                    afterRenderObject: function() {},
                                    /**
                                     * Render the scene in camera to the screen or binded offline framebuffer
                                     * @param  {qtek.Scene}       scene
                                     * @param  {qtek.Camera}      camera
                                     * @param  {boolean}     [notUpdateScene] If not call the scene.update methods in the rendering, default true
                                     * @param  {boolean}     [preZ]           If use preZ optimization, default false
                                     * @return {IRenderInfo}
                                     */
                                    render: function(scene, camera, notUpdateScene, preZ) {
                                        var _gl = this.gl;

                                        this._sceneRendering = scene;

                                        var clearColor = this.clearColor;

                                        if (this.clearBit) {

                                            // Must set depth and color mask true before clear
                                            _gl.colorMask(true, true, true, true);
                                            _gl.depthMask(true);
                                            var viewport = this.viewport;
                                            var needsScissor = false;
                                            var viewportDpr = viewport.devicePixelRatio;
                                            if (viewport.width !== this._width || viewport.height !== this._height ||
                                                (viewportDpr && viewportDpr !== this.devicePixelRatio) ||
                                                viewport.x || viewport.y
                                            ) {
                                                needsScissor = true;
                                                // http://stackoverflow.com/questions/11544608/how-to-clear-a-rectangle-area-in-webgl
                                                // Only clear the viewport
                                                _gl.enable(_gl.SCISSOR_TEST);
                                                _gl.scissor(viewport.x * viewportDpr, viewport.y * viewportDpr, viewport.width * viewportDpr, viewport.height * viewportDpr);
                                            }
                                            _gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);
                                            _gl.clear(this.clearBit);
                                            if (needsScissor) {
                                                _gl.disable(_gl.SCISSOR_TEST);
                                            }
                                        }

                                        // If the scene have been updated in the prepass like shadow map
                                        // There is no need to update it again
                                        if (!notUpdateScene) {
                                            scene.update(false);
                                        }
                                        // Update if camera not mounted on the scene
                                        if (!camera.getScene()) {
                                            camera.update(true);
                                        }

                                        var opaqueQueue = scene.opaqueQueue;
                                        var transparentQueue = scene.transparentQueue;
                                        var sceneMaterial = scene.material;

                                        // StandardMaterial needs updateShader method so shader can be created on demand.
                                        for (var i = 0; i < opaqueQueue.length; i++) {
                                            var material = opaqueQueue[i].material;
                                            material.updateShader && material.updateShader(this);
                                        }
                                        // StandardMaterial needs updateShader method so shader can be created on demand.
                                        for (var i = 0; i < transparentQueue.length; i++) {
                                            var material = transparentQueue[i].material;
                                            material.updateShader && material.updateShader(this);
                                        }
                                        scene.trigger('beforerender', this, scene, camera);
                                        // Sort render queue
                                        // Calculate the object depth
                                        if (transparentQueue.length > 0) {
                                            var worldViewMat = mat4Create();
                                            var posViewSpace = Renderer_vec3.create();
                                            for (var i = 0; i < transparentQueue.length; i++) {
                                                var node = transparentQueue[i];
                                                Renderer_mat4.multiplyAffine(worldViewMat, camera.viewMatrix._array, node.worldTransform._array);
                                                Renderer_vec3.transformMat4(posViewSpace, node.position._array, worldViewMat);
                                                node.__depth = posViewSpace[2];
                                            }
                                        }
                                        opaqueQueue.sort(this.opaqueSortFunc);
                                        transparentQueue.sort(this.transparentSortFunc);

                                        // Render Opaque queue
                                        scene.trigger('beforerender:opaque', this, opaqueQueue);

                                        // Reset the scene bounding box;
                                        scene.viewBoundingBoxLastFrame.min.set(Infinity, Infinity, Infinity);
                                        scene.viewBoundingBoxLastFrame.max.set(-Infinity, -Infinity, -Infinity);

                                        _gl.disable(_gl.BLEND);
                                        _gl.enable(_gl.DEPTH_TEST);
                                        var opaqueRenderInfo = this.renderQueue(opaqueQueue, camera, sceneMaterial, preZ);

                                        scene.trigger('afterrender:opaque', this, opaqueQueue, opaqueRenderInfo);
                                        scene.trigger('beforerender:transparent', this, transparentQueue);

                                        // Render Transparent Queue
                                        _gl.enable(_gl.BLEND);
                                        var transparentRenderInfo = this.renderQueue(transparentQueue, camera, sceneMaterial);

                                        scene.trigger('afterrender:transparent', this, transparentQueue, transparentRenderInfo);
                                        var renderInfo = {};
                                        for (var name in opaqueRenderInfo) {
                                            renderInfo[name] = opaqueRenderInfo[name] + transparentRenderInfo[name];
                                        }

                                        scene.trigger('afterrender', this, scene, camera, renderInfo);

                                        // Cleanup
                                        this._sceneRendering = null;
                                        return renderInfo;
                                    },

                                    resetRenderStatus: function() {
                                        this._currentShader = null;
                                    },

                                    /**
                                     * Callback during rendering process to determine if render given renderable.
                                     * @param {qtek.Renderable} given renderable.
                                     * @return {boolean}
                                     */
                                    ifRenderObject: function(obj) {
                                        return true;
                                    },

                                    /**
                                     * Render a single renderable list in camera in sequence
                                     * @param  {qtek.Renderable[]} queue       List of all renderables.
                                     *                                         Best to be sorted by Renderer.opaqueSortFunc or Renderer.transparentSortFunc
                                     * @param  {qtek.Camera}       camera
                                     * @param  {qtek.Material}     [globalMaterial] globalMaterial will override the material of each renderable
                                     * @param  {boolean}           [preZ]           If use preZ optimization, default false
                                     * @return {IRenderInfo}
                                     */
                                    renderQueue: function(queue, camera, globalMaterial, preZ) {
                                        var renderInfo = {
                                            triangleCount: 0,
                                            vertexCount: 0,
                                            drawCallCount: 0,
                                            meshCount: queue.length,
                                            renderedMeshCount: 0
                                        };

                                        // Some common builtin uniforms
                                        var viewport = this.viewport;
                                        var vDpr = viewport.devicePixelRatio;
                                        var viewportUniform = [
                                            viewport.x * vDpr, viewport.y * vDpr,
                                            viewport.width * vDpr, viewport.height * vDpr
                                        ];
                                        var windowDpr = this.devicePixelRatio;
                                        var windowSizeUniform = this.__currentFrameBuffer ?
                                            [this.__currentFrameBuffer.getTextureWidth(), this.__currentFrameBuffer.getTextureHeight()] :
                                            [this._width * windowDpr, this._height * windowDpr];
                                        // DEPRECATED
                                        var viewportSizeUniform = [
                                            viewportUniform[2], viewportUniform[3]
                                        ];
                                        var time = Date.now();

                                        // Calculate view and projection matrix
                                        Renderer_mat4.copy(matrices.VIEW, camera.viewMatrix._array);
                                        Renderer_mat4.copy(matrices.PROJECTION, camera.projectionMatrix._array);
                                        Renderer_mat4.multiply(matrices.VIEWPROJECTION, camera.projectionMatrix._array, matrices.VIEW);
                                        Renderer_mat4.copy(matrices.VIEWINVERSE, camera.worldTransform._array);
                                        Renderer_mat4.invert(matrices.PROJECTIONINVERSE, matrices.PROJECTION);
                                        Renderer_mat4.invert(matrices.VIEWPROJECTIONINVERSE, matrices.VIEWPROJECTION);

                                        var _gl = this.gl;
                                        var scene = this._sceneRendering;

                                        var prevMaterial;
                                        var prevShader;

                                        var culledRenderQueue;
                                        if (preZ) {
                                            culledRenderQueue = this._renderPreZ(queue, scene, camera);
                                        } else {
                                            culledRenderQueue = queue;
                                            _gl.depthFunc(_gl.LESS);
                                        }

                                        // Status
                                        var depthTest, depthMask;
                                        var culling, cullFace, frontFace;

                                        for (var i = 0; i < culledRenderQueue.length; i++) {
                                            var renderable = culledRenderQueue[i];
                                            if (!this.ifRenderObject(renderable)) {
                                                continue;
                                            }

                                            var geometry = renderable.geometry;

                                            // Skinned mesh will transformed to joint space. Ignore the mesh transform
                                            var worldM = renderable.isSkinnedMesh() ? matrices.IDENTITY : renderable.worldTransform._array;
                                            // All matrices ralated to world matrix will be updated on demand;
                                            Renderer_mat4.multiplyAffine(matrices.WORLDVIEW, matrices.VIEW, worldM);
                                            // TODO Skinned mesh may have wrong bounding box.
                                            if (geometry.boundingBox && !preZ) {
                                                if (this.isFrustumCulled(
                                                        renderable, scene, camera, matrices.WORLDVIEW, matrices.PROJECTION
                                                    )) {
                                                    continue;
                                                }
                                            }

                                            var material = globalMaterial || renderable.material;

                                            var shader = material.shader;

                                            Renderer_mat4.copy(matrices.WORLD, worldM);
                                            Renderer_mat4.multiply(matrices.WORLDVIEWPROJECTION, matrices.VIEWPROJECTION, worldM);
                                            if (shader.matrixSemantics.WORLDINVERSE ||
                                                shader.matrixSemantics.WORLDINVERSETRANSPOSE) {
                                                Renderer_mat4.invert(matrices.WORLDINVERSE, worldM);
                                            }
                                            if (shader.matrixSemantics.WORLDVIEWINVERSE ||
                                                shader.matrixSemantics.WORLDVIEWINVERSETRANSPOSE) {
                                                Renderer_mat4.invert(matrices.WORLDVIEWINVERSE, matrices.WORLDVIEW);
                                            }
                                            if (shader.matrixSemantics.WORLDVIEWPROJECTIONINVERSE ||
                                                shader.matrixSemantics.WORLDVIEWPROJECTIONINVERSETRANSPOSE) {
                                                Renderer_mat4.invert(matrices.WORLDVIEWPROJECTIONINVERSE, matrices.WORLDVIEWPROJECTION);
                                            }

                                            // FIXME Optimize for compositing.
                                            // var prevShader = this._sceneRendering ? null : this._currentShader;
                                            // var prevShader = null;

                                            // Before render hook
                                            renderable.beforeRender(this);
                                            this.beforeRenderObject(renderable, prevMaterial, prevShader);

                                            var shaderChanged = !shader.isEqual(prevShader);
                                            if (shaderChanged) {
                                                // Set lights number
                                                if (scene && scene.isShaderLightNumberChanged(shader)) {
                                                    scene.setShaderLightNumber(shader);
                                                }
                                                var errMsg = shader.bind(this);
                                                if (errMsg) {

                                                    if (errorShader[shader.__GUID__]) {
                                                        continue;
                                                    }
                                                    errorShader[shader.__GUID__] = true;

                                                    if (this.throwError) {
                                                        throw new Error(errMsg);
                                                    } else {
                                                        this.trigger('error', errMsg);
                                                    }
                                                }
                                                // Set some common uniforms
                                                shader.setUniformOfSemantic(_gl, 'VIEWPORT', viewportUniform);
                                                shader.setUniformOfSemantic(_gl, 'WINDOW_SIZE', windowSizeUniform);
                                                shader.setUniformOfSemantic(_gl, 'NEAR', camera.near);
                                                shader.setUniformOfSemantic(_gl, 'FAR', camera.far);
                                                shader.setUniformOfSemantic(_gl, 'DEVICEPIXELRATIO', vDpr);
                                                shader.setUniformOfSemantic(_gl, 'TIME', time);
                                                // DEPRECATED
                                                shader.setUniformOfSemantic(_gl, 'VIEWPORT_SIZE', viewportSizeUniform);

                                                // Set lights uniforms
                                                // TODO needs optimized
                                                if (scene) {
                                                    scene.setLightUniforms(shader, this);
                                                }

                                                // Save current used shader in the renderer
                                                // ALWAYS USE RENDERER TO DRAW THE MESH
                                                // this._currentShader = shader;
                                            } else {
                                                shader = prevShader;
                                            }

                                            if (prevMaterial !== material) {
                                                if (!preZ) {
                                                    if (material.depthTest !== depthTest) {
                                                        material.depthTest ?
                                                            _gl.enable(_gl.DEPTH_TEST) :
                                                            _gl.disable(_gl.DEPTH_TEST);
                                                        depthTest = material.depthTest;
                                                    }
                                                    if (material.depthMask !== depthMask) {
                                                        _gl.depthMask(material.depthMask);
                                                        depthMask = material.depthMask;
                                                    }
                                                }
                                                material.bind(this, shader, prevMaterial, prevShader);
                                                prevMaterial = material;

                                                // TODO cache blending
                                                if (material.transparent) {
                                                    if (material.blend) {
                                                        material.blend(_gl);
                                                    } else { // Default blend function
                                                        _gl.blendEquationSeparate(_gl.FUNC_ADD, _gl.FUNC_ADD);
                                                        _gl.blendFuncSeparate(_gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA, _gl.ONE, _gl.ONE_MINUS_SRC_ALPHA);
                                                    }
                                                }
                                            }

                                            var matrixSemanticKeys = shader.matrixSemanticKeys;
                                            for (var k = 0; k < matrixSemanticKeys.length; k++) {
                                                var semantic = matrixSemanticKeys[k];
                                                var semanticInfo = shader.matrixSemantics[semantic];
                                                var matrix = matrices[semantic];
                                                if (semanticInfo.isTranspose) {
                                                    var matrixNoTranspose = matrices[semanticInfo.semanticNoTranspose];
                                                    Renderer_mat4.transpose(matrix, matrixNoTranspose);
                                                }
                                                shader.setUniform(_gl, semanticInfo.type, semanticInfo.symbol, matrix);
                                            }

                                            if (renderable.cullFace !== cullFace) {
                                                cullFace = renderable.cullFace;
                                                _gl.cullFace(cullFace);
                                            }
                                            if (renderable.frontFace !== frontFace) {
                                                frontFace = renderable.frontFace;
                                                _gl.frontFace(frontFace);
                                            }
                                            if (renderable.culling !== culling) {
                                                culling = renderable.culling;
                                                culling ? _gl.enable(_gl.CULL_FACE) : _gl.disable(_gl.CULL_FACE);
                                            }

                                            var objectRenderInfo = renderable.render(this, shader);

                                            if (objectRenderInfo) {
                                                renderInfo.triangleCount += objectRenderInfo.triangleCount;
                                                renderInfo.vertexCount += objectRenderInfo.vertexCount;
                                                renderInfo.drawCallCount += objectRenderInfo.drawCallCount;
                                                renderInfo.renderedMeshCount++;
                                            }

                                            // After render hook
                                            this.afterRenderObject(renderable, objectRenderInfo);
                                            renderable.afterRender(this, objectRenderInfo);

                                            prevShader = shader;
                                        }

                                        return renderInfo;
                                    },

                                    _renderPreZ: function(queue, scene, camera) {
                                        var _gl = this.gl;
                                        var preZPassMaterial = this._prezMaterial || new src_Material({
                                            shader: new src_Shader({
                                                vertex: src_Shader.source('qtek.prez.vertex'),
                                                fragment: src_Shader.source('qtek.prez.fragment')
                                            })
                                        });
                                        this._prezMaterial = preZPassMaterial;
                                        var preZPassShader = preZPassMaterial.shader;

                                        var culledRenderQueue = [];
                                        // Status
                                        var culling, cullFace, frontFace;

                                        preZPassShader.bind(this);
                                        _gl.colorMask(false, false, false, false);
                                        _gl.depthMask(true);
                                        _gl.enable(_gl.DEPTH_TEST);
                                        for (var i = 0; i < queue.length; i++) {
                                            var renderable = queue[i];
                                            // PENDING
                                            if (!this.ifRenderObject(renderable)) {
                                                continue;
                                            }

                                            var worldM = renderable.isSkinnedMesh() ? matrices.IDENTITY : renderable.worldTransform._array;
                                            var geometry = renderable.geometry;

                                            Renderer_mat4.multiplyAffine(matrices.WORLDVIEW, matrices.VIEW, worldM);

                                            if (geometry.boundingBox) {
                                                if (this.isFrustumCulled(
                                                        renderable, scene, camera, matrices.WORLDVIEW, matrices.PROJECTION
                                                    )) {
                                                    continue;
                                                }
                                            }
                                            culledRenderQueue.push(renderable);
                                            if (renderable.skeleton || renderable.ignorePreZ) { // FIXME  skinned mesh and custom vertex shader material.
                                                continue;
                                            }

                                            Renderer_mat4.multiply(matrices.WORLDVIEWPROJECTION, matrices.VIEWPROJECTION, worldM);

                                            if (renderable.cullFace !== cullFace) {
                                                cullFace = renderable.cullFace;
                                                _gl.cullFace(cullFace);
                                            }
                                            if (renderable.frontFace !== frontFace) {
                                                frontFace = renderable.frontFace;
                                                _gl.frontFace(frontFace);
                                            }
                                            if (renderable.culling !== culling) {
                                                culling = renderable.culling;
                                                culling ? _gl.enable(_gl.CULL_FACE) : _gl.disable(_gl.CULL_FACE);
                                            }

                                            var semanticInfo = preZPassShader.matrixSemantics.WORLDVIEWPROJECTION;
                                            preZPassShader.setUniform(_gl, semanticInfo.type, semanticInfo.symbol, matrices.WORLDVIEWPROJECTION);

                                            // PENDING If invoke beforeRender hook
                                            renderable.render(this, preZPassMaterial.shader);
                                        }
                                        _gl.depthFunc(_gl.LEQUAL);
                                        _gl.colorMask(true, true, true, true);
                                        _gl.depthMask(true);

                                        return culledRenderQueue;
                                    },

                                    /**
                                     * If an scene object is culled by camera frustum
                                     *
                                     * Object can be a renderable or a light
                                     *
                                     * @param {qtek.Node} Scene object
                                     * @param {qtek.Camera} camera
                                     * @param {Array.<number>} worldViewMat represented with array
                                     * @param {Array.<number>} projectionMat represented with array
                                     */
                                    isFrustumCulled: (function() {
                                        // Frustum culling
                                        // http://www.cse.chalmers.se/~uffe/vfc_bbox.pdf
                                        var cullingBoundingBox = new math_BoundingBox();
                                        var cullingMatrix = new math_Matrix4();
                                        return function(object, scene, camera, worldViewMat, projectionMat) {
                                            // Bounding box can be a property of object(like light) or renderable.geometry
                                            var geoBBox = object.boundingBox || object.geometry.boundingBox;
                                            cullingMatrix._array = worldViewMat;
                                            cullingBoundingBox.copy(geoBBox);
                                            cullingBoundingBox.applyTransform(cullingMatrix);

                                            // Passingly update the scene bounding box
                                            // FIXME exclude very large mesh like ground plane or terrain ?
                                            // FIXME Only rendererable which cast shadow ?

                                            // FIXME boundingBox becomes much larger after transformd.
                                            if (scene && object.isRenderable() && object.castShadow) {
                                                scene.viewBoundingBoxLastFrame.union(cullingBoundingBox);
                                            }
                                            // Ignore frustum culling if object is skinned mesh.
                                            if (object.frustumCulling && !object.isSkinnedMesh()) {
                                                if (!cullingBoundingBox.intersectBoundingBox(camera.frustum.boundingBox)) {
                                                    return true;
                                                }

                                                cullingMatrix._array = projectionMat;
                                                if (
                                                    cullingBoundingBox.max._array[2] > 0 &&
                                                    cullingBoundingBox.min._array[2] < 0
                                                ) {
                                                    // Clip in the near plane
                                                    cullingBoundingBox.max._array[2] = -1e-20;
                                                }

                                                cullingBoundingBox.applyProjection(cullingMatrix);

                                                var min = cullingBoundingBox.min._array;
                                                var max = cullingBoundingBox.max._array;

                                                if (
                                                    max[0] < -1 || min[0] > 1 ||
                                                    max[1] < -1 || min[1] > 1 ||
                                                    max[2] < -1 || min[2] > 1
                                                ) {
                                                    return true;
                                                }
                                            }

                                            return false;
                                        };
                                    })(),

                                    /**
                                     * Dispose given scene, including all geometris, textures and shaders in the scene
                                     * @param {qtek.Scene} scene
                                     */
                                    disposeScene: function(scene) {
                                        this.disposeNode(scene, true, true);
                                        scene.dispose();
                                    },

                                    /**
                                     * Dispose given node, including all geometries, textures and shaders attached on it or its descendant
                                     * @param {qtek.Node} node
                                     * @param {boolean} [disposeGeometry=false] If dispose the geometries used in the descendant mesh
                                     * @param {boolean} [disposeTexture=false] If dispose the textures used in the descendant mesh
                                     */
                                    disposeNode: function(root, disposeGeometry, disposeTexture) {
                                        var materials = {};
                                        // Dettached from parent
                                        if (root.getParent()) {
                                            root.getParent().remove(root);
                                        }
                                        root.traverse(function(node) {
                                            if (node.geometry && disposeGeometry) {
                                                node.geometry.dispose(this);
                                            }
                                            if (node.material) {
                                                materials[node.material.__GUID__] = node.material;
                                            }
                                            // Particle system and AmbientCubemap light need to dispose
                                            if (node.dispose) {
                                                node.dispose(this);
                                            }
                                        }, this);
                                        for (var guid in materials) {
                                            var mat = materials[guid];
                                            mat.dispose(this, disposeTexture);
                                        }
                                    },

                                    /**
                                     * Dispose given shader
                                     * @param {qtek.Shader} shader
                                     */
                                    disposeShader: function(shader) {
                                        shader.dispose(this);
                                    },

                                    /**
                                     * Dispose given geometry
                                     * @param {qtek.Geometry} geometry
                                     */
                                    disposeGeometry: function(geometry) {
                                        geometry.dispose(this);
                                    },

                                    /**
                                     * Dispose given texture
                                     * @param {qtek.Texture} texture
                                     */
                                    disposeTexture: function(texture) {
                                        texture.dispose(this);
                                    },

                                    /**
                                     * Dispose given frame buffer
                                     * @param {qtek.FrameBuffer} frameBuffer
                                     */
                                    disposeFrameBuffer: function(frameBuffer) {
                                        frameBuffer.dispose(this);
                                    },

                                    /**
                                     * Dispose renderer
                                     */
                                    dispose: function() {},

                                    /**
                                     * Convert screen coords to normalized device coordinates(NDC)
                                     * Screen coords can get from mouse event, it is positioned relative to canvas element
                                     * NDC can be used in ray casting with Camera.prototype.castRay methods
                                     *
                                     * @param  {number}       x
                                     * @param  {number}       y
                                     * @param  {qtek.math.Vector2} [out]
                                     * @return {qtek.math.Vector2}
                                     */
                                    screenToNDC: function(x, y, out) {
                                        if (!out) {
                                            out = new math_Vector2();
                                        }
                                        // Invert y;
                                        y = this._height - y;

                                        var viewport = this.viewport;
                                        var arr = out._array;
                                        arr[0] = (x - viewport.x) / viewport.width;
                                        arr[0] = arr[0] * 2 - 1;
                                        arr[1] = (y - viewport.y) / viewport.height;
                                        arr[1] = arr[1] * 2 - 1;

                                        return out;
                                    }
                                });

                            /**
                             * Opaque renderables compare function
                             * @param  {qtek.Renderable} x
                             * @param  {qtek.Renderable} y
                             * @return {boolean}
                             * @static
                             */
                            Renderer.opaqueSortFunc = Renderer.prototype.opaqueSortFunc = function(x, y) {
                                // Priority renderOrder -> shader -> material -> geometry
                                if (x.renderOrder === y.renderOrder) {
                                    if (x.material.shader === y.material.shader) {
                                        if (x.material === y.material) {
                                            return x.geometry.__GUID__ - y.geometry.__GUID__;
                                        }
                                        return x.material.__GUID__ - y.material.__GUID__;
                                    }
                                    return x.material.shader.__GUID__ - y.material.shader.__GUID__;
                                }
                                return x.renderOrder - y.renderOrder;
                            };

                            /**
                             * Transparent renderables compare function
                             * @param  {qtek.Renderable} a
                             * @param  {qtek.Renderable} b
                             * @return {boolean}
                             * @static
                             */
                            Renderer.transparentSortFunc = Renderer.prototype.transparentSortFunc = function(x, y) {
                                // Priority renderOrder -> depth -> shader -> material -> geometry

                                if (x.renderOrder === y.renderOrder) {
                                    if (x.__depth === y.__depth) {
                                        if (x.material.shader === y.material.shader) {
                                            if (x.material === y.material) {
                                                return x.geometry.__GUID__ - y.geometry.__GUID__;
                                            }
                                            return x.material.__GUID__ - y.material.__GUID__;
                                        }
                                        return x.material.shader.__GUID__ - y.material.shader.__GUID__;
                                    }
                                    // Depth is negative
                                    // So farther object has smaller depth value
                                    return x.__depth - y.__depth;
                                }
                                return x.renderOrder - y.renderOrder;
                            };

                            // Temporary variables
                            var matrices = {
                                IDENTITY: mat4Create(),

                                WORLD: mat4Create(),
                                VIEW: mat4Create(),
                                PROJECTION: mat4Create(),
                                WORLDVIEW: mat4Create(),
                                VIEWPROJECTION: mat4Create(),
                                WORLDVIEWPROJECTION: mat4Create(),

                                WORLDINVERSE: mat4Create(),
                                VIEWINVERSE: mat4Create(),
                                PROJECTIONINVERSE: mat4Create(),
                                WORLDVIEWINVERSE: mat4Create(),
                                VIEWPROJECTIONINVERSE: mat4Create(),
                                WORLDVIEWPROJECTIONINVERSE: mat4Create(),

                                WORLDTRANSPOSE: mat4Create(),
                                VIEWTRANSPOSE: mat4Create(),
                                PROJECTIONTRANSPOSE: mat4Create(),
                                WORLDVIEWTRANSPOSE: mat4Create(),
                                VIEWPROJECTIONTRANSPOSE: mat4Create(),
                                WORLDVIEWPROJECTIONTRANSPOSE: mat4Create(),
                                WORLDINVERSETRANSPOSE: mat4Create(),
                                VIEWINVERSETRANSPOSE: mat4Create(),
                                PROJECTIONINVERSETRANSPOSE: mat4Create(),
                                WORLDVIEWINVERSETRANSPOSE: mat4Create(),
                                VIEWPROJECTIONINVERSETRANSPOSE: mat4Create(),
                                WORLDVIEWPROJECTIONINVERSETRANSPOSE: mat4Create()
                            };

                            /**
                             * @name qtek.Renderer.COLOR_BUFFER_BIT
                             * @type {number}
                             */
                            Renderer.COLOR_BUFFER_BIT = glenum.COLOR_BUFFER_BIT;
                            /**
                             * @name qtek.Renderer.DEPTH_BUFFER_BIT
                             * @type {number}
                             */
                            Renderer.DEPTH_BUFFER_BIT = glenum.DEPTH_BUFFER_BIT;
                            /**
                             * @name qtek.Renderer.STENCIL_BUFFER_BIT
                             * @type {number}
                             */
                            Renderer.STENCIL_BUFFER_BIT = glenum.STENCIL_BUFFER_BIT;

                            /* harmony default export */
                            var src_Renderer = (Renderer);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/math/Ray.js


                            var Ray_vec3 = glmatrix_default.a.vec3;

                            var EPSILON = 1e-5;

                            /**
                             * @constructor
                             * @alias qtek.math.Ray
                             * @param {qtek.math.Vector3} [origin]
                             * @param {qtek.math.Vector3} [direction]
                             */
                            var Ray = function(origin, direction) {
                                /**
                                 * @type {qtek.math.Vector3}
                                 */
                                this.origin = origin || new math_Vector3();
                                /**
                                 * @type {qtek.math.Vector3}
                                 */
                                this.direction = direction || new math_Vector3();
                            };

                            Ray.prototype = {

                                constructor: Ray,

                                // http://www.siggraph.org/education/materials/HyperGraph/raytrace/rayplane_intersection.htm
                                /**
                                 * Calculate intersection point between ray and a give plane
                                 * @param  {qtek.math.Plane} plane
                                 * @param  {qtek.math.Vector3} [out]
                                 * @return {qtek.math.Vector3}
                                 */
                                intersectPlane: function(plane, out) {
                                    var pn = plane.normal._array;
                                    var d = plane.distance;
                                    var ro = this.origin._array;
                                    var rd = this.direction._array;

                                    var divider = Ray_vec3.dot(pn, rd);
                                    // ray is parallel to the plane
                                    if (divider === 0) {
                                        return null;
                                    }
                                    if (!out) {
                                        out = new math_Vector3();
                                    }
                                    var t = (Ray_vec3.dot(pn, ro) - d) / divider;
                                    Ray_vec3.scaleAndAdd(out._array, ro, rd, -t);
                                    out._dirty = true;
                                    return out;
                                },

                                /**
                                 * Mirror the ray against plane
                                 * @param  {qtek.math.Plane} plane
                                 */
                                mirrorAgainstPlane: function(plane) {
                                    // Distance to plane
                                    var d = Ray_vec3.dot(plane.normal._array, this.direction._array);
                                    Ray_vec3.scaleAndAdd(this.direction._array, this.direction._array, plane.normal._array, -d * 2);
                                    this.direction._dirty = true;
                                },

                                distanceToPoint: (function() {
                                    var v = Ray_vec3.create();
                                    return function(point) {
                                        Ray_vec3.sub(v, point, this.origin._array);
                                        // Distance from projection point to origin
                                        var b = Ray_vec3.dot(v, this.direction._array);
                                        if (b < 0) {
                                            return Ray_vec3.distance(this.origin._array, point);
                                        }
                                        // Squared distance from center to origin
                                        var c2 = Ray_vec3.lenSquared(v);
                                        // Squared distance from center to projection point
                                        return Math.sqrt(c2 - b * b);
                                    };
                                })(),

                                /**
                                 * Calculate intersection point between ray and sphere
                                 * @param  {qtek.math.Vector3} center
                                 * @param  {number} radius
                                 * @param  {qtek.math.Vector3} out
                                 * @return {qtek.math.Vector3}
                                 */
                                intersectSphere: (function() {
                                    var v = Ray_vec3.create();
                                    return function(center, radius, out) {
                                        var origin = this.origin._array;
                                        var direction = this.direction._array;
                                        center = center._array;
                                        Ray_vec3.sub(v, center, origin);
                                        // Distance from projection point to origin
                                        var b = Ray_vec3.dot(v, direction);
                                        // Squared distance from center to origin
                                        var c2 = Ray_vec3.squaredLength(v);
                                        // Squared distance from center to projection point
                                        var d2 = c2 - b * b;

                                        var r2 = radius * radius;
                                        // No intersection
                                        if (d2 > r2) {
                                            return;
                                        }

                                        var a = Math.sqrt(r2 - d2);
                                        // First intersect point
                                        var t0 = b - a;
                                        // Second intersect point
                                        var t1 = b + a;

                                        if (!out) {
                                            out = new math_Vector3();
                                        }
                                        if (t0 < 0) {
                                            if (t1 < 0) {
                                                return null;
                                            } else {
                                                Ray_vec3.scaleAndAdd(out._array, origin, direction, t1);
                                                return out;
                                            }
                                        } else {
                                            Ray_vec3.scaleAndAdd(out._array, origin, direction, t0);
                                            return out;
                                        }
                                    };
                                })(),

                                // http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-box-intersection/
                                /**
                                 * Calculate intersection point between ray and bounding box
                                 * @param {qtek.math.BoundingBox} bbox
                                 * @param {qtek.math.Vector3}
                                 * @return {qtek.math.Vector3}
                                 */
                                intersectBoundingBox: function(bbox, out) {
                                    var dir = this.direction._array;
                                    var origin = this.origin._array;
                                    var min = bbox.min._array;
                                    var max = bbox.max._array;

                                    var invdirx = 1 / dir[0];
                                    var invdiry = 1 / dir[1];
                                    var invdirz = 1 / dir[2];

                                    var tmin, tmax, tymin, tymax, tzmin, tzmax;
                                    if (invdirx >= 0) {
                                        tmin = (min[0] - origin[0]) * invdirx;
                                        tmax = (max[0] - origin[0]) * invdirx;
                                    } else {
                                        tmax = (min[0] - origin[0]) * invdirx;
                                        tmin = (max[0] - origin[0]) * invdirx;
                                    }
                                    if (invdiry >= 0) {
                                        tymin = (min[1] - origin[1]) * invdiry;
                                        tymax = (max[1] - origin[1]) * invdiry;
                                    } else {
                                        tymax = (min[1] - origin[1]) * invdiry;
                                        tymin = (max[1] - origin[1]) * invdiry;
                                    }

                                    if ((tmin > tymax) || (tymin > tmax)) {
                                        return null;
                                    }

                                    if (tymin > tmin || tmin !== tmin) {
                                        tmin = tymin;
                                    }
                                    if (tymax < tmax || tmax !== tmax) {
                                        tmax = tymax;
                                    }

                                    if (invdirz >= 0) {
                                        tzmin = (min[2] - origin[2]) * invdirz;
                                        tzmax = (max[2] - origin[2]) * invdirz;
                                    } else {
                                        tzmax = (min[2] - origin[2]) * invdirz;
                                        tzmin = (max[2] - origin[2]) * invdirz;
                                    }

                                    if ((tmin > tzmax) || (tzmin > tmax)) {
                                        return null;
                                    }

                                    if (tzmin > tmin || tmin !== tmin) {
                                        tmin = tzmin;
                                    }
                                    if (tzmax < tmax || tmax !== tmax) {
                                        tmax = tzmax;
                                    }
                                    if (tmax < 0) {
                                        return null;
                                    }

                                    var t = tmin >= 0 ? tmin : tmax;

                                    if (!out) {
                                        out = new math_Vector3();
                                    }
                                    Ray_vec3.scaleAndAdd(out._array, origin, dir, t);
                                    return out;
                                },

                                // http://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm
                                /**
                                 * Calculate intersection point between ray and three triangle vertices
                                 * @param {qtek.math.Vector3} a
                                 * @param {qtek.math.Vector3} b
                                 * @param {qtek.math.Vector3} c
                                 * @param {boolean}           singleSided, CW triangle will be ignored
                                 * @param {qtek.math.Vector3} [out]
                                 * @param {qtek.math.Vector3} [barycenteric] barycentric coords
                                 * @return {qtek.math.Vector3}
                                 */
                                intersectTriangle: (function() {

                                    var eBA = Ray_vec3.create();
                                    var eCA = Ray_vec3.create();
                                    var AO = Ray_vec3.create();
                                    var vCross = Ray_vec3.create();

                                    return function(a, b, c, singleSided, out, barycenteric) {
                                        var dir = this.direction._array;
                                        var origin = this.origin._array;
                                        a = a._array;
                                        b = b._array;
                                        c = c._array;

                                        Ray_vec3.sub(eBA, b, a);
                                        Ray_vec3.sub(eCA, c, a);

                                        Ray_vec3.cross(vCross, eCA, dir);

                                        var det = Ray_vec3.dot(eBA, vCross);

                                        if (singleSided) {
                                            if (det > -EPSILON) {
                                                return null;
                                            }
                                        } else {
                                            if (det > -EPSILON && det < EPSILON) {
                                                return null;
                                            }
                                        }

                                        Ray_vec3.sub(AO, origin, a);
                                        var u = Ray_vec3.dot(vCross, AO) / det;
                                        if (u < 0 || u > 1) {
                                            return null;
                                        }

                                        Ray_vec3.cross(vCross, eBA, AO);
                                        var v = Ray_vec3.dot(dir, vCross) / det;

                                        if (v < 0 || v > 1 || (u + v > 1)) {
                                            return null;
                                        }

                                        Ray_vec3.cross(vCross, eBA, eCA);
                                        var t = -Ray_vec3.dot(AO, vCross) / det;

                                        if (t < 0) {
                                            return null;
                                        }

                                        if (!out) {
                                            out = new math_Vector3();
                                        }
                                        if (barycenteric) {
                                            math_Vector3.set(barycenteric, (1 - u - v), u, v);
                                        }
                                        Ray_vec3.scaleAndAdd(out._array, origin, dir, t);

                                        return out;
                                    };
                                })(),

                                /**
                                 * Apply an affine transform matrix to the ray
                                 * @return {qtek.math.Matrix4} matrix
                                 */
                                applyTransform: function(matrix) {
                                    math_Vector3.add(this.direction, this.direction, this.origin);
                                    math_Vector3.transformMat4(this.origin, this.origin, matrix);
                                    math_Vector3.transformMat4(this.direction, this.direction, matrix);

                                    math_Vector3.sub(this.direction, this.direction, this.origin);
                                    math_Vector3.normalize(this.direction, this.direction);
                                },

                                /**
                                 * Copy values from another ray
                                 * @param {qtek.math.Ray} ray
                                 */
                                copy: function(ray) {
                                    math_Vector3.copy(this.origin, ray.origin);
                                    math_Vector3.copy(this.direction, ray.direction);
                                },

                                /**
                                 * Clone a new ray
                                 * @return {qtek.math.Ray}
                                 */
                                clone: function() {
                                    var ray = new Ray();
                                    ray.copy(this);
                                    return ray;
                                }
                            };

                            /* harmony default export */
                            var math_Ray = (Ray);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/math/Quaternion.js

                            var Quaternion_quat = glmatrix_default.a.quat;

                            /**
                             * @constructor
                             * @alias qtek.math.Quaternion
                             * @param {number} x
                             * @param {number} y
                             * @param {number} z
                             * @param {number} w
                             */
                            var Quaternion = function(x, y, z, w) {

                                x = x || 0;
                                y = y || 0;
                                z = z || 0;
                                w = w === undefined ? 1 : w;

                                /**
                                 * Storage of Quaternion, read and write of x, y, z, w will change the values in _array
                                 * All methods also operate on the _array instead of x, y, z, w components
                                 * @name _array
                                 * @type {Float32Array}
                                 */
                                this._array = Quaternion_quat.fromValues(x, y, z, w);

                                /**
                                 * Dirty flag is used by the Node to determine
                                 * if the matrix is updated to latest
                                 * @name _dirty
                                 * @type {boolean}
                                 */
                                this._dirty = true;
                            };

                            Quaternion.prototype = {

                                constructor: Quaternion,

                                /**
                                 * Add b to self
                                 * @param  {qtek.math.Quaternion} b
                                 * @return {qtek.math.Quaternion}
                                 */
                                add: function(b) {
                                    Quaternion_quat.add(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Calculate the w component from x, y, z component
                                 * @return {qtek.math.Quaternion}
                                 */
                                calculateW: function() {
                                    Quaternion_quat.calculateW(this._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Set x, y and z components
                                 * @param  {number}  x
                                 * @param  {number}  y
                                 * @param  {number}  z
                                 * @param  {number}  w
                                 * @return {qtek.math.Quaternion}
                                 */
                                set: function(x, y, z, w) {
                                    this._array[0] = x;
                                    this._array[1] = y;
                                    this._array[2] = z;
                                    this._array[3] = w;
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Set x, y, z and w components from array
                                 * @param  {Float32Array|number[]} arr
                                 * @return {qtek.math.Quaternion}
                                 */
                                setArray: function(arr) {
                                    this._array[0] = arr[0];
                                    this._array[1] = arr[1];
                                    this._array[2] = arr[2];
                                    this._array[3] = arr[3];

                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Clone a new Quaternion
                                 * @return {qtek.math.Quaternion}
                                 */
                                clone: function() {
                                    return new Quaternion(this.x, this.y, this.z, this.w);
                                },

                                /**
                                 * Calculates the conjugate of self If the quaternion is normalized,
                                 * this function is faster than invert and produces the same result.
                                 *
                                 * @return {qtek.math.Quaternion}
                                 */
                                conjugate: function() {
                                    Quaternion_quat.conjugate(this._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Copy from b
                                 * @param  {qtek.math.Quaternion} b
                                 * @return {qtek.math.Quaternion}
                                 */
                                copy: function(b) {
                                    Quaternion_quat.copy(this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Dot product of self and b
                                 * @param  {qtek.math.Quaternion} b
                                 * @return {number}
                                 */
                                dot: function(b) {
                                    return Quaternion_quat.dot(this._array, b._array);
                                },

                                /**
                                 * Set from the given 3x3 rotation matrix
                                 * @param  {qtek.math.Matrix3} m
                                 * @return {qtek.math.Quaternion}
                                 */
                                fromMat3: function(m) {
                                    Quaternion_quat.fromMat3(this._array, m._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Set from the given 4x4 rotation matrix
                                 * The 4th column and 4th row will be droped
                                 * @param  {qtek.math.Matrix4} m
                                 * @return {qtek.math.Quaternion}
                                 */
                                fromMat4: (function() {
                                    var mat3 = glmatrix_default.a.mat3;
                                    var m3 = mat3.create();
                                    return function(m) {
                                        mat3.fromMat4(m3, m._array);
                                        // TODO Not like mat4, mat3 in glmatrix seems to be row-based
                                        mat3.transpose(m3, m3);
                                        Quaternion_quat.fromMat3(this._array, m3);
                                        this._dirty = true;
                                        return this;
                                    };
                                })(),

                                /**
                                 * Set to identity quaternion
                                 * @return {qtek.math.Quaternion}
                                 */
                                identity: function() {
                                    Quaternion_quat.identity(this._array);
                                    this._dirty = true;
                                    return this;
                                },
                                /**
                                 * Invert self
                                 * @return {qtek.math.Quaternion}
                                 */
                                invert: function() {
                                    Quaternion_quat.invert(this._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },
                                /**
                                 * Alias of length
                                 * @return {number}
                                 */
                                len: function() {
                                    return Quaternion_quat.len(this._array);
                                },

                                /**
                                 * Calculate the length
                                 * @return {number}
                                 */
                                length: function() {
                                    return Quaternion_quat.length(this._array);
                                },

                                /**
                                 * Linear interpolation between a and b
                                 * @param  {qtek.math.Quaternion} a
                                 * @param  {qtek.math.Quaternion} b
                                 * @param  {number}  t
                                 * @return {qtek.math.Quaternion}
                                 */
                                lerp: function(a, b, t) {
                                    Quaternion_quat.lerp(this._array, a._array, b._array, t);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Alias for multiply
                                 * @param  {qtek.math.Quaternion} b
                                 * @return {qtek.math.Quaternion}
                                 */
                                mul: function(b) {
                                    Quaternion_quat.mul(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Alias for multiplyLeft
                                 * @param  {qtek.math.Quaternion} a
                                 * @return {qtek.math.Quaternion}
                                 */
                                mulLeft: function(a) {
                                    Quaternion_quat.multiply(this._array, a._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Mutiply self and b
                                 * @param  {qtek.math.Quaternion} b
                                 * @return {qtek.math.Quaternion}
                                 */
                                multiply: function(b) {
                                    Quaternion_quat.multiply(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Mutiply a and self
                                 * Quaternion mutiply is not commutative, so the result of mutiplyLeft is different with multiply.
                                 * @param  {qtek.math.Quaternion} a
                                 * @return {qtek.math.Quaternion}
                                 */
                                multiplyLeft: function(a) {
                                    Quaternion_quat.multiply(this._array, a._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Normalize self
                                 * @return {qtek.math.Quaternion}
                                 */
                                normalize: function() {
                                    Quaternion_quat.normalize(this._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Rotate self by a given radian about X axis
                                 * @param {number} rad
                                 * @return {qtek.math.Quaternion}
                                 */
                                rotateX: function(rad) {
                                    Quaternion_quat.rotateX(this._array, this._array, rad);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Rotate self by a given radian about Y axis
                                 * @param {number} rad
                                 * @return {qtek.math.Quaternion}
                                 */
                                rotateY: function(rad) {
                                    Quaternion_quat.rotateY(this._array, this._array, rad);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Rotate self by a given radian about Z axis
                                 * @param {number} rad
                                 * @return {qtek.math.Quaternion}
                                 */
                                rotateZ: function(rad) {
                                    Quaternion_quat.rotateZ(this._array, this._array, rad);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Sets self to represent the shortest rotation from Vector3 a to Vector3 b.
                                 * a and b needs to be normalized
                                 * @param  {qtek.math.Vector3} a
                                 * @param  {qtek.math.Vector3} b
                                 * @return {qtek.math.Quaternion}
                                 */
                                rotationTo: function(a, b) {
                                    Quaternion_quat.rotationTo(this._array, a._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },
                                /**
                                 * Sets self with values corresponding to the given axes
                                 * @param {qtek.math.Vector3} view
                                 * @param {qtek.math.Vector3} right
                                 * @param {qtek.math.Vector3} up
                                 * @return {qtek.math.Quaternion}
                                 */
                                setAxes: function(view, right, up) {
                                    Quaternion_quat.setAxes(this._array, view._array, right._array, up._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Sets self with a rotation axis and rotation angle
                                 * @param {qtek.math.Vector3} axis
                                 * @param {number} rad
                                 * @return {qtek.math.Quaternion}
                                 */
                                setAxisAngle: function(axis, rad) {
                                    Quaternion_quat.setAxisAngle(this._array, axis._array, rad);
                                    this._dirty = true;
                                    return this;
                                },
                                /**
                                 * Perform spherical linear interpolation between a and b
                                 * @param  {qtek.math.Quaternion} a
                                 * @param  {qtek.math.Quaternion} b
                                 * @param  {number} t
                                 * @return {qtek.math.Quaternion}
                                 */
                                slerp: function(a, b, t) {
                                    Quaternion_quat.slerp(this._array, a._array, b._array, t);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Alias for squaredLength
                                 * @return {number}
                                 */
                                sqrLen: function() {
                                    return Quaternion_quat.sqrLen(this._array);
                                },

                                /**
                                 * Squared length of self
                                 * @return {number}
                                 */
                                squaredLength: function() {
                                    return Quaternion_quat.squaredLength(this._array);
                                },

                                /**
                                 * Set from euler
                                 * @param {qtek.math.Vector3} v
                                 * @param {String} order
                                 */
                                fromEuler: function(v, order) {
                                    return Quaternion.fromEuler(this, v, order);
                                },

                                toString: function() {
                                    return '[' + Array.prototype.join.call(this._array, ',') + ']';
                                },

                                toArray: function() {
                                    return Array.prototype.slice.call(this._array);
                                }
                            };

                            var Quaternion_defineProperty = Object.defineProperty;
                            // Getter and Setter
                            if (Quaternion_defineProperty) {

                                var Quaternion_proto = Quaternion.prototype;
                                /**
                                 * @name x
                                 * @type {number}
                                 * @memberOf qtek.math.Quaternion
                                 * @instance
                                 */
                                Quaternion_defineProperty(Quaternion_proto, 'x', {
                                    get: function() {
                                        return this._array[0];
                                    },
                                    set: function(value) {
                                        this._array[0] = value;
                                        this._dirty = true;
                                    }
                                });

                                /**
                                 * @name y
                                 * @type {number}
                                 * @memberOf qtek.math.Quaternion
                                 * @instance
                                 */
                                Quaternion_defineProperty(Quaternion_proto, 'y', {
                                    get: function() {
                                        return this._array[1];
                                    },
                                    set: function(value) {
                                        this._array[1] = value;
                                        this._dirty = true;
                                    }
                                });

                                /**
                                 * @name z
                                 * @type {number}
                                 * @memberOf qtek.math.Quaternion
                                 * @instance
                                 */
                                Quaternion_defineProperty(Quaternion_proto, 'z', {
                                    get: function() {
                                        return this._array[2];
                                    },
                                    set: function(value) {
                                        this._array[2] = value;
                                        this._dirty = true;
                                    }
                                });

                                /**
                                 * @name w
                                 * @type {number}
                                 * @memberOf qtek.math.Quaternion
                                 * @instance
                                 */
                                Quaternion_defineProperty(Quaternion_proto, 'w', {
                                    get: function() {
                                        return this._array[3];
                                    },
                                    set: function(value) {
                                        this._array[3] = value;
                                        this._dirty = true;
                                    }
                                });
                            }

                            // Supply methods that are not in place

                            /**
                             * @param  {qtek.math.Quaternion} out
                             * @param  {qtek.math.Quaternion} a
                             * @param  {qtek.math.Quaternion} b
                             * @return {qtek.math.Quaternion}
                             */
                            Quaternion.add = function(out, a, b) {
                                Quaternion_quat.add(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Quaternion} out
                             * @param  {number}     x
                             * @param  {number}     y
                             * @param  {number}     z
                             * @param  {number}     w
                             * @return {qtek.math.Quaternion}
                             */
                            Quaternion.set = function(out, x, y, z, w) {
                                Quaternion_quat.set(out._array, x, y, z, w);
                                out._dirty = true;
                            };

                            /**
                             * @param  {qtek.math.Quaternion} out
                             * @param  {qtek.math.Quaternion} b
                             * @return {qtek.math.Quaternion}
                             */
                            Quaternion.copy = function(out, b) {
                                Quaternion_quat.copy(out._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Quaternion} out
                             * @param  {qtek.math.Quaternion} a
                             * @return {qtek.math.Quaternion}
                             */
                            Quaternion.calculateW = function(out, a) {
                                Quaternion_quat.calculateW(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Quaternion} out
                             * @param  {qtek.math.Quaternion} a
                             * @return {qtek.math.Quaternion}
                             */
                            Quaternion.conjugate = function(out, a) {
                                Quaternion_quat.conjugate(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Quaternion} out
                             * @return {qtek.math.Quaternion}
                             */
                            Quaternion.identity = function(out) {
                                Quaternion_quat.identity(out._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Quaternion} out
                             * @param  {qtek.math.Quaternion} a
                             * @return {qtek.math.Quaternion}
                             */
                            Quaternion.invert = function(out, a) {
                                Quaternion_quat.invert(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Quaternion} a
                             * @param  {qtek.math.Quaternion} b
                             * @return {number}
                             */
                            Quaternion.dot = function(a, b) {
                                return Quaternion_quat.dot(a._array, b._array);
                            };

                            /**
                             * @param  {qtek.math.Quaternion} a
                             * @return {number}
                             */
                            Quaternion.len = function(a) {
                                return Quaternion_quat.length(a._array);
                            };

                            // Quaternion.length = Quaternion.len;

                            /**
                             * @param  {qtek.math.Quaternion} out
                             * @param  {qtek.math.Quaternion} a
                             * @param  {qtek.math.Quaternion} b
                             * @param  {number}     t
                             * @return {qtek.math.Quaternion}
                             */
                            Quaternion.lerp = function(out, a, b, t) {
                                Quaternion_quat.lerp(out._array, a._array, b._array, t);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Quaternion} out
                             * @param  {qtek.math.Quaternion} a
                             * @param  {qtek.math.Quaternion} b
                             * @param  {number}     t
                             * @return {qtek.math.Quaternion}
                             */
                            Quaternion.slerp = function(out, a, b, t) {
                                Quaternion_quat.slerp(out._array, a._array, b._array, t);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Quaternion} out
                             * @param  {qtek.math.Quaternion} a
                             * @param  {qtek.math.Quaternion} b
                             * @return {qtek.math.Quaternion}
                             */
                            Quaternion.mul = function(out, a, b) {
                                Quaternion_quat.multiply(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @method
                             * @param  {qtek.math.Quaternion} out
                             * @param  {qtek.math.Quaternion} a
                             * @param  {qtek.math.Quaternion} b
                             * @return {qtek.math.Quaternion}
                             */
                            Quaternion.multiply = Quaternion.mul;

                            /**
                             * @param  {qtek.math.Quaternion} out
                             * @param  {qtek.math.Quaternion} a
                             * @param  {number}     rad
                             * @return {qtek.math.Quaternion}
                             */
                            Quaternion.rotateX = function(out, a, rad) {
                                Quaternion_quat.rotateX(out._array, a._array, rad);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Quaternion} out
                             * @param  {qtek.math.Quaternion} a
                             * @param  {number}     rad
                             * @return {qtek.math.Quaternion}
                             */
                            Quaternion.rotateY = function(out, a, rad) {
                                Quaternion_quat.rotateY(out._array, a._array, rad);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Quaternion} out
                             * @param  {qtek.math.Quaternion} a
                             * @param  {number}     rad
                             * @return {qtek.math.Quaternion}
                             */
                            Quaternion.rotateZ = function(out, a, rad) {
                                Quaternion_quat.rotateZ(out._array, a._array, rad);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Quaternion} out
                             * @param  {qtek.math.Vector3}    axis
                             * @param  {number}     rad
                             * @return {qtek.math.Quaternion}
                             */
                            Quaternion.setAxisAngle = function(out, axis, rad) {
                                Quaternion_quat.setAxisAngle(out._array, axis._array, rad);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Quaternion} out
                             * @param  {qtek.math.Quaternion} a
                             * @return {qtek.math.Quaternion}
                             */
                            Quaternion.normalize = function(out, a) {
                                Quaternion_quat.normalize(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Quaternion} a
                             * @return {number}
                             */
                            Quaternion.sqrLen = function(a) {
                                return Quaternion_quat.sqrLen(a._array);
                            };

                            /**
                             * @method
                             * @param  {qtek.math.Quaternion} a
                             * @return {number}
                             */
                            Quaternion.squaredLength = Quaternion.sqrLen;

                            /**
                             * @param  {qtek.math.Quaternion} out
                             * @param  {qtek.math.Matrix3}    m
                             * @return {qtek.math.Quaternion}
                             */
                            Quaternion.fromMat3 = function(out, m) {
                                Quaternion_quat.fromMat3(out._array, m._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Quaternion} out
                             * @param  {qtek.math.Vector3}    view
                             * @param  {qtek.math.Vector3}    right
                             * @param  {qtek.math.Vector3}    up
                             * @return {qtek.math.Quaternion}
                             */
                            Quaternion.setAxes = function(out, view, right, up) {
                                Quaternion_quat.setAxes(out._array, view._array, right._array, up._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Quaternion} out
                             * @param  {qtek.math.Vector3}    a
                             * @param  {qtek.math.Vector3}    b
                             * @return {qtek.math.Quaternion}
                             */
                            Quaternion.rotationTo = function(out, a, b) {
                                Quaternion_quat.rotationTo(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * Set quaternion from euler
                             * @param {qtek.math.Quaternion} out
                             * @param {qtek.math.Vector3} v
                             * @param {String} order
                             */
                            Quaternion.fromEuler = function(out, v, order) {

                                out._dirty = true;

                                v = v._array;
                                var target = out._array;
                                var c1 = Math.cos(v[0] / 2);
                                var c2 = Math.cos(v[1] / 2);
                                var c3 = Math.cos(v[2] / 2);
                                var s1 = Math.sin(v[0] / 2);
                                var s2 = Math.sin(v[1] / 2);
                                var s3 = Math.sin(v[2] / 2);

                                var order = (order || 'XYZ').toUpperCase();

                                // http://www.mathworks.com/matlabcentral/fileexchange/
                                //  20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
                                //  content/SpinCalc.m

                                switch (order) {
                                    case 'XYZ':
                                        target[0] = s1 * c2 * c3 + c1 * s2 * s3;
                                        target[1] = c1 * s2 * c3 - s1 * c2 * s3;
                                        target[2] = c1 * c2 * s3 + s1 * s2 * c3;
                                        target[3] = c1 * c2 * c3 - s1 * s2 * s3;
                                        break;
                                    case 'YXZ':
                                        target[0] = s1 * c2 * c3 + c1 * s2 * s3;
                                        target[1] = c1 * s2 * c3 - s1 * c2 * s3;
                                        target[2] = c1 * c2 * s3 - s1 * s2 * c3;
                                        target[3] = c1 * c2 * c3 + s1 * s2 * s3;
                                        break;
                                    case 'ZXY':
                                        target[0] = s1 * c2 * c3 - c1 * s2 * s3;
                                        target[1] = c1 * s2 * c3 + s1 * c2 * s3;
                                        target[2] = c1 * c2 * s3 + s1 * s2 * c3;
                                        target[3] = c1 * c2 * c3 - s1 * s2 * s3;
                                        break;
                                    case 'ZYX':
                                        target[0] = s1 * c2 * c3 - c1 * s2 * s3;
                                        target[1] = c1 * s2 * c3 + s1 * c2 * s3;
                                        target[2] = c1 * c2 * s3 - s1 * s2 * c3;
                                        target[3] = c1 * c2 * c3 + s1 * s2 * s3;
                                        break;
                                    case 'YZX':
                                        target[0] = s1 * c2 * c3 + c1 * s2 * s3;
                                        target[1] = c1 * s2 * c3 + s1 * c2 * s3;
                                        target[2] = c1 * c2 * s3 - s1 * s2 * c3;
                                        target[3] = c1 * c2 * c3 - s1 * s2 * s3;
                                        break;
                                    case 'XZY':
                                        target[0] = s1 * c2 * c3 - c1 * s2 * s3;
                                        target[1] = c1 * s2 * c3 - s1 * c2 * s3;
                                        target[2] = c1 * c2 * s3 + s1 * s2 * c3;
                                        target[3] = c1 * c2 * c3 + s1 * s2 * s3;
                                        break;
                                }
                            };

                            /* harmony default export */
                            var math_Quaternion = (Quaternion);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/Node.js






                            var Node_mat4 = glmatrix_default.a.mat4;

                            var nameId = 0;

                            /**
                             * @constructor qtek.Node
                             * @extends qtek.core.Base
                             */
                            var Node = core_Base.extend(
                                /** @lends qtek.Node# */
                                {
                                    /**
                                     * Scene node name
                                     * @type {string}
                                     */
                                    name: '',

                                    /**
                                     * Position relative to its parent node. aka translation.
                                     * @type {qtek.math.Vector3}
                                     */
                                    position: null,

                                    /**
                                     * Rotation relative to its parent node. Represented by a quaternion
                                     * @type {qtek.math.Quaternion}
                                     */
                                    rotation: null,

                                    /**
                                     * Scale relative to its parent node
                                     * @type {qtek.math.Vector3}
                                     */
                                    scale: null,

                                    /**
                                     * Affine transform matrix relative to its root scene.
                                     * @type {qtek.math.Matrix4}
                                     */
                                    worldTransform: null,

                                    /**
                                     * Affine transform matrix relative to its parent node.
                                     * Composited with position, rotation and scale.
                                     * @type {qtek.math.Matrix4}
                                     */
                                    localTransform: null,

                                    /**
                                     * If the local transform is update from SRT(scale, rotation, translation, which is position here) each frame
                                     * @type {boolean}
                                     */
                                    autoUpdateLocalTransform: true,

                                    /**
                                     * Parent of current scene node
                                     * @type {?qtek.Node}
                                     * @private
                                     */
                                    _parent: null,
                                    /**
                                     * The root scene mounted. Null if it is a isolated node
                                     * @type {?qtek.Scene}
                                     * @private
                                     */
                                    _scene: null,
                                    /**
                                     * @type {boolean}
                                     * @private
                                     */
                                    _needsUpdateWorldTransform: true,
                                    /**
                                     * @type {boolean}
                                     * @private
                                     */
                                    _inIterating: false,

                                    // Depth for transparent queue sorting
                                    __depth: 0

                                },
                                function() {

                                    if (!this.name) {
                                        this.name = (this.type || 'NODE') + '_' + (nameId++);
                                    }

                                    if (!this.position) {
                                        this.position = new math_Vector3();
                                    }
                                    if (!this.rotation) {
                                        this.rotation = new math_Quaternion();
                                    }
                                    if (!this.scale) {
                                        this.scale = new math_Vector3(1, 1, 1);
                                    }

                                    this.worldTransform = new math_Matrix4();
                                    this.localTransform = new math_Matrix4();

                                    this._children = [];

                                },
                                /**@lends qtek.Node.prototype. */
                                {

                                    /**
                                     * @type {?qtek.math.Vector3}
                                     * @instance
                                     */
                                    target: null,
                                    /**
                                     * If node and its chilren invisible
                                     * @type {boolean}
                                     * @instance
                                     */
                                    invisible: false,

                                    /**
                                     * If Node is a skinned mesh
                                     * @return {boolean}
                                     */
                                    isSkinnedMesh: function() {
                                        return false;
                                    },
                                    /**
                                     * Return true if it is a renderable scene node, like Mesh and ParticleSystem
                                     * @return {boolean}
                                     */
                                    isRenderable: function() {
                                        return false;
                                    },

                                    /**
                                     * Set the name of the scene node
                                     * @param {string} name
                                     */
                                    setName: function(name) {
                                        var scene = this._scene;
                                        if (scene) {
                                            var nodeRepository = scene._nodeRepository;
                                            delete nodeRepository[this.name];
                                            nodeRepository[name] = this;
                                        }
                                        this.name = name;
                                    },

                                    /**
                                     * Add a child node
                                     * @param {qtek.Node} node
                                     */
                                    add: function(node) {
                                        if (this._inIterating) {
                                            console.warn('Add operation can cause unpredictable error when in iterating');
                                        }
                                        var originalParent = node._parent;
                                        if (originalParent === this) {
                                            return;
                                        }
                                        if (originalParent) {
                                            originalParent.remove(node);
                                        }
                                        node._parent = this;
                                        this._children.push(node);

                                        var scene = this._scene;
                                        if (scene && scene !== node.scene) {
                                            node.traverse(this._addSelfToScene, this);
                                        }
                                        // Mark children needs update transform
                                        // In case child are remove and added again after parent moved
                                        node._needsUpdateWorldTransform = true;
                                    },

                                    /**
                                     * Remove the given child scene node
                                     * @param {qtek.Node} node
                                     */
                                    remove: function(node) {
                                        if (this._inIterating) {
                                            console.warn('Remove operation can cause unpredictable error when in iterating');
                                        }
                                        var children = this._children;
                                        var idx = children.indexOf(node);
                                        if (idx < 0) {
                                            return;
                                        }

                                        children.splice(idx, 1);
                                        node._parent = null;

                                        if (this._scene) {
                                            node.traverse(this._removeSelfFromScene, this);
                                        }
                                    },

                                    /**
                                     * Remove all children
                                     */
                                    removeAll: function() {
                                        var children = this._children;

                                        for (var idx = 0; idx < children.length; idx++) {
                                            children[idx]._parent = null;

                                            if (this._scene) {
                                                children[idx].traverse(this._removeSelfFromScene, this);
                                            }
                                        }

                                        this._children = [];
                                    },

                                    /**
                                     * Get the scene mounted
                                     * @return {qtek.Scene}
                                     */
                                    getScene: function() {
                                        return this._scene;
                                    },

                                    /**
                                     * Get parent node
                                     * @return {qtek.Scene}
                                     */
                                    getParent: function() {
                                        return this._parent;
                                    },

                                    _removeSelfFromScene: function(descendant) {
                                        descendant._scene.removeFromScene(descendant);
                                        descendant._scene = null;
                                    },

                                    _addSelfToScene: function(descendant) {
                                        this._scene.addToScene(descendant);
                                        descendant._scene = this._scene;
                                    },

                                    /**
                                     * Return true if it is ancestor of the given scene node
                                     * @param {qtek.Node} node
                                     */
                                    isAncestor: function(node) {
                                        var parent = node._parent;
                                        while (parent) {
                                            if (parent === this) {
                                                return true;
                                            }
                                            parent = parent._parent;
                                        }
                                        return false;
                                    },

                                    /**
                                     * Get a new created array of all children nodes
                                     * @return {qtek.Node[]}
                                     */
                                    children: function() {
                                        return this._children.slice();
                                    },

                                    /**
                                     * Get child scene node at given index.
                                     * @param {number} idx
                                     * @return {qtek.Node}
                                     */
                                    childAt: function(idx) {
                                        return this._children[idx];
                                    },

                                    /**
                                     * Get first child with the given name
                                     * @param {string} name
                                     * @return {qtek.Node}
                                     */
                                    getChildByName: function(name) {
                                        var children = this._children;
                                        for (var i = 0; i < children.length; i++) {
                                            if (children[i].name === name) {
                                                return children[i];
                                            }
                                        }
                                    },

                                    /**
                                     * Get first descendant have the given name
                                     * @param {string} name
                                     * @return {qtek.Node}
                                     */
                                    getDescendantByName: function(name) {
                                        var children = this._children;
                                        for (var i = 0; i < children.length; i++) {
                                            var child = children[i];
                                            if (child.name === name) {
                                                return child;
                                            } else {
                                                var res = child.getDescendantByName(name);
                                                if (res) {
                                                    return res;
                                                }
                                            }
                                        }
                                    },

                                    /**
                                     * Query descendant node by path
                                     * @param {string} path
                                     * @return {qtek.Node}
                                     * @example
                                     *  node.queryNode('root/parent/child');
                                     */
                                    queryNode: function(path) {
                                        if (!path) {
                                            return;
                                        }
                                        // TODO Name have slash ?
                                        var pathArr = path.split('/');
                                        var current = this;
                                        for (var i = 0; i < pathArr.length; i++) {
                                            var name = pathArr[i];
                                            // Skip empty
                                            if (!name) {
                                                continue;
                                            }
                                            var found = false;
                                            var children = current._children;
                                            for (var j = 0; j < children.length; j++) {
                                                var child = children[j];
                                                if (child.name === name) {
                                                    current = child;
                                                    found = true;
                                                    break;
                                                }
                                            }
                                            // Early return if not found
                                            if (!found) {
                                                return;
                                            }
                                        }

                                        return current;
                                    },

                                    /**
                                     * Get query path, relative to rootNode(default is scene)
                                     * @param {qtek.Node} [rootNode]
                                     * @return {string}
                                     */
                                    getPath: function(rootNode) {
                                        if (!this._parent) {
                                            return '/';
                                        }

                                        var current = this._parent;
                                        var path = this.name;
                                        while (current._parent) {
                                            path = current.name + '/' + path;
                                            if (current._parent == rootNode) {
                                                break;
                                            }
                                            current = current._parent;
                                        }
                                        if (!current._parent && rootNode) {
                                            return null;
                                        }
                                        return path;
                                    },

                                    /**
                                     * Depth first traverse all its descendant scene nodes and
                                     * @param {Function} callback
                                     * @param {Node} [context]
                                     * @param {Function} [filter]
                                     */
                                    traverse: function(callback, context, filter) {

                                        this._inIterating = true;

                                        if (!filter || filter.call(context, this)) {
                                            callback.call(context, this);
                                        }
                                        var _children = this._children;
                                        for (var i = 0, len = _children.length; i < len; i++) {
                                            _children[i].traverse(callback, context, filter);
                                        }

                                        this._inIterating = false;
                                    },

                                    eachChild: function(callback, context, ctor) {
                                        this._inIterating = true;

                                        var _children = this._children;
                                        var noCtor = ctor == null;
                                        for (var i = 0, len = _children.length; i < len; i++) {
                                            var child = _children[i];
                                            if (noCtor || child.constructor === ctor) {
                                                callback.call(context, child, i);
                                            }
                                        }

                                        this._inIterating = false;
                                    },

                                    /**
                                     * Set the local transform and decompose to SRT
                                     * @param {qtek.math.Matrix4} matrix
                                     */
                                    setLocalTransform: function(matrix) {
                                        Node_mat4.copy(this.localTransform._array, matrix._array);
                                        this.decomposeLocalTransform();
                                    },

                                    /**
                                     * Decompose the local transform to SRT
                                     */
                                    decomposeLocalTransform: function(keepScale) {
                                        var scale = !keepScale ? this.scale : null;
                                        this.localTransform.decomposeMatrix(scale, this.rotation, this.position);
                                    },

                                    /**
                                     * Set the world transform and decompose to SRT
                                     * @param {qtek.math.Matrix4} matrix
                                     */
                                    setWorldTransform: function(matrix) {
                                        Node_mat4.copy(this.worldTransform._array, matrix._array);
                                        this.decomposeWorldTransform();
                                    },

                                    /**
                                     * Decompose the world transform to SRT
                                     * @method
                                     */
                                    decomposeWorldTransform: (function() {

                                        var tmp = Node_mat4.create();

                                        return function(keepScale) {
                                            var localTransform = this.localTransform;
                                            var worldTransform = this.worldTransform;
                                            // Assume world transform is updated
                                            if (this._parent) {
                                                Node_mat4.invert(tmp, this._parent.worldTransform._array);
                                                Node_mat4.multiply(localTransform._array, tmp, worldTransform._array);
                                            } else {
                                                Node_mat4.copy(localTransform._array, worldTransform._array);
                                            }
                                            var scale = !keepScale ? this.scale : null;
                                            localTransform.decomposeMatrix(scale, this.rotation, this.position);
                                        };
                                    })(),

                                    transformNeedsUpdate: function() {
                                        return this.position._dirty ||
                                            this.rotation._dirty ||
                                            this.scale._dirty;
                                    },

                                    /**
                                     * Update local transform from SRT
                                     * Notice that local transform will not be updated if _dirty mark of position, rotation, scale is all false
                                     */
                                    updateLocalTransform: function() {
                                        var position = this.position;
                                        var rotation = this.rotation;
                                        var scale = this.scale;

                                        if (this.transformNeedsUpdate()) {
                                            var m = this.localTransform._array;

                                            // Transform order, scale->rotation->position
                                            Node_mat4.fromRotationTranslation(m, rotation._array, position._array);

                                            Node_mat4.scale(m, m, scale._array);

                                            rotation._dirty = false;
                                            scale._dirty = false;
                                            position._dirty = false;

                                            this._needsUpdateWorldTransform = true;
                                        }
                                    },

                                    /**
                                     * Update world transform, assume its parent world transform have been updated
                                     * @private
                                     */
                                    _updateWorldTransformTopDown: function() {
                                        var localTransform = this.localTransform._array;
                                        var worldTransform = this.worldTransform._array;
                                        if (this._parent) {
                                            Node_mat4.multiplyAffine(
                                                worldTransform,
                                                this._parent.worldTransform._array,
                                                localTransform
                                            );
                                        } else {
                                            Node_mat4.copy(worldTransform, localTransform);
                                        }
                                    },

                                    /**
                                     * Update world transform before whole scene is updated.
                                     */
                                    updateWorldTransform: function() {
                                        // Find the root node which transform needs update;
                                        var rootNodeIsDirty = this;
                                        while (rootNodeIsDirty && rootNodeIsDirty.getParent() &&
                                            rootNodeIsDirty.getParent().transformNeedsUpdate()
                                        ) {
                                            rootNodeIsDirty = rootNodeIsDirty.getParent();
                                        }
                                        2
                                        rootNodeIsDirty.update();
                                    },

                                    /**
                                     * Update local transform and world transform recursively
                                     * @param {boolean} forceUpdateWorld
                                     */
                                    update: function(forceUpdateWorld) {
                                        if (this.autoUpdateLocalTransform) {
                                            this.updateLocalTransform();
                                        } else {
                                            // Transform is manually setted
                                            forceUpdateWorld = true;
                                        }

                                        if (forceUpdateWorld || this._needsUpdateWorldTransform) {
                                            this._updateWorldTransformTopDown();
                                            forceUpdateWorld = true;
                                            this._needsUpdateWorldTransform = false;
                                        }

                                        var children = this._children;
                                        for (var i = 0, len = children.length; i < len; i++) {
                                            children[i].update(forceUpdateWorld);
                                        }
                                    },

                                    /**
                                     * Get bounding box of node
                                     * @param  {Function} [filter]
                                     * @param  {qtek.math.BoundingBox} [out]
                                     * @return {qtek.math.BoundingBox}
                                     */
                                    // TODO Skinning
                                    getBoundingBox: (function() {
                                        function defaultFilter(el) {
                                            return !el.invisible && el.geometry;
                                        }
                                        var tmpBBox = new math_BoundingBox();
                                        var tmpMat4 = new math_Matrix4();
                                        var invWorldTransform = new math_Matrix4();
                                        return function(filter, out) {
                                            out = out || new math_BoundingBox();
                                            filter = filter || defaultFilter;

                                            if (this._parent) {
                                                math_Matrix4.invert(invWorldTransform, this._parent.worldTransform);
                                            } else {
                                                math_Matrix4.identity(invWorldTransform);
                                            }

                                            this.traverse(function(mesh) {
                                                if (mesh.geometry && mesh.geometry.boundingBox) {
                                                    tmpBBox.copy(mesh.geometry.boundingBox);
                                                    math_Matrix4.multiply(tmpMat4, invWorldTransform, mesh.worldTransform);
                                                    tmpBBox.applyTransform(tmpMat4);
                                                    out.union(tmpBBox);
                                                }
                                            }, this, defaultFilter);

                                            return out;
                                        };
                                    })(),

                                    /**
                                     * Get world position, extracted from world transform
                                     * @param  {qtek.math.Vector3} [out]
                                     * @return {qtek.math.Vector3}
                                     */
                                    getWorldPosition: function(out) {
                                        // PENDING
                                        if (this.transformNeedsUpdate()) {
                                            this.updateWorldTransform();
                                        }
                                        var m = this.worldTransform._array;
                                        if (out) {
                                            var arr = out._array;
                                            arr[0] = m[12];
                                            arr[1] = m[13];
                                            arr[2] = m[14];
                                            return out;
                                        } else {
                                            return new math_Vector3(m[12], m[13], m[14]);
                                        }
                                    },

                                    /**
                                     * Clone a new node
                                     * @return {Node}
                                     */
                                    clone: function() {
                                        var node = new this.constructor();
                                        var children = this._children;

                                        node.setName(this.name);
                                        node.position.copy(this.position);
                                        node.rotation.copy(this.rotation);
                                        node.scale.copy(this.scale);

                                        for (var i = 0; i < children.length; i++) {
                                            node.add(children[i].clone());
                                        }
                                        return node;
                                    },

                                    /**
                                     * Rotate the node around a axis by angle degrees, axis passes through point
                                     * @param {qtek.math.Vector3} point Center point
                                     * @param {qtek.math.Vector3} axis  Center axis
                                     * @param {number}       angle Rotation angle
                                     * @see http://docs.unity3d.com/Documentation/ScriptReference/Transform.RotateAround.html
                                     * @method
                                     */
                                    rotateAround: (function() {
                                        var v = new math_Vector3();
                                        var RTMatrix = new math_Matrix4();

                                        // TODO improve performance
                                        return function(point, axis, angle) {

                                            v.copy(this.position).subtract(point);

                                            var localTransform = this.localTransform;
                                            localTransform.identity();
                                            // parent node
                                            localTransform.translate(point);
                                            localTransform.rotate(angle, axis);

                                            RTMatrix.fromRotationTranslation(this.rotation, v);
                                            localTransform.multiply(RTMatrix);
                                            localTransform.scale(this.scale);

                                            this.decomposeLocalTransform();
                                            this._needsUpdateWorldTransform = true;
                                        };
                                    })(),

                                    /**
                                     * @param {qtek.math.Vector3} target
                                     * @param {qtek.math.Vector3} [up]
                                     * @see http://www.opengl.org/sdk/docs/man2/xhtml/gluLookAt.xml
                                     * @method
                                     */
                                    lookAt: (function() {
                                        var m = new math_Matrix4();
                                        return function(target, up) {
                                            m.lookAt(this.position, target, up || this.localTransform.y).invert();
                                            this.setLocalTransform(m);

                                            this.target = target;
                                        };
                                    })()
                                });

                            /* harmony default export */
                            var src_Node = (Node);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/Renderable.js



                            // Cache
                            var prevDrawID = 0;
                            var prevDrawIndicesBuffer = null;
                            var prevDrawIsUseIndices = true;

                            var currentDrawID;

                            var RenderInfo = function() {
                                this.triangleCount = 0;
                                this.vertexCount = 0;
                                this.drawCallCount = 0;
                            };

                            function VertexArrayObject(
                                availableAttributes,
                                availableAttributeSymbols,
                                indicesBuffer
                            ) {
                                this.availableAttributes = availableAttributes;
                                this.availableAttributeSymbols = availableAttributeSymbols;
                                this.indicesBuffer = indicesBuffer;

                                this.vao = null;
                            }
                            /**
                             * @constructor
                             * @alias qtek.Renderable
                             * @extends qtek.Node
                             */
                            var Renderable = src_Node.extend(
                                /** @lends qtek.Renderable# */
                                {
                                    /**
                                     * @type {qtek.Material}
                                     */
                                    material: null,

                                    /**
                                     * @type {qtek.Geometry}
                                     */
                                    geometry: null,

                                    /**
                                     * @type {number}
                                     */
                                    mode: glenum.TRIANGLES,

                                    _drawCache: null,

                                    _renderInfo: null
                                },
                                function() {
                                    this._drawCache = {};
                                    this._renderInfo = new RenderInfo();
                                },
                                /** @lends qtek.Renderable.prototype */
                                {

                                    /**
                                     * Render order, Nodes with smaller value renders before nodes with larger values.
                                     * @type {Number}
                                     */
                                    renderOrder: 0,
                                    /**
                                     * Used when mode is LINES, LINE_STRIP or LINE_LOOP
                                     * @type {number}
                                     */
                                    lineWidth: 1,

                                    /**
                                     * If enable culling
                                     * @type {boolean}
                                     */
                                    culling: true,
                                    /**
                                     * Specify which side of polygon will be culled.
                                     * Possible values:
                                     *  + {@link qtek.Renderable.BACK}
                                     *  + {@link qtek.Renderable.FRONT}
                                     *  + {@link qtek.Renderable.FRONT_AND_BACK}
                                     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/cullFace
                                     * @type {number}
                                     */
                                    cullFace: glenum.BACK,
                                    /**
                                     * Specify which side is front face.
                                     * Possible values:
                                     *  + {@link qtek.Renderable.CW}
                                     *  + {@link qtek.Renderable.CCW}
                                     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/frontFace
                                     * @type {number}
                                     */
                                    frontFace: glenum.CCW,

                                    /**
                                     * If enable software frustum culling 
                                     * @type {boolean}
                                     */
                                    frustumCulling: true,
                                    /**
                                     * @type {boolean}
                                     */
                                    receiveShadow: true,
                                    /**
                                     * @type {boolean}
                                     */
                                    castShadow: true,
                                    /**
                                     * @type {boolean}
                                     */
                                    ignorePicking: false,
                                    /**
                                     * @type {boolean}
                                     */
                                    ignorePreZ: false,

                                    /**
                                     * @type {boolean}
                                     */
                                    ignoreGBuffer: false,

                                    /**
                                     * @return {boolean}
                                     */
                                    isRenderable: function() {
                                        // TODO Shader ?
                                        return this.geometry && this.material && !this.invisible &&
                                            this.geometry.vertexCount > 0;
                                    },

                                    /**
                                     * Before render hook
                                     * @type {Function}
                                     */
                                    beforeRender: function(_gl) {},

                                    /**
                                     * Before render hook
                                     * @type {Function}
                                     */
                                    afterRender: function(_gl, renderStat) {},

                                    getBoundingBox: function(filter, out) {
                                        out = src_Node.prototype.getBoundingBox.call(this, filter, out);
                                        if (this.geometry && this.geometry.boundingBox) {
                                            out.union(this.geometry.boundingBox);
                                        }

                                        return out;
                                    },

                                    /**
                                     * @param  {qtek.Renderer} renderer
                                     * @param  {qtek.Shader} [shader] May use shader of other material if shader code are same
                                     * @return {Object}
                                     */
                                    render: function(renderer, shader) {
                                        var _gl = renderer.gl;
                                        // May use shader of other material if shader code are same
                                        var shader = shader || this.material.shader;
                                        var geometry = this.geometry;

                                        var glDrawMode = this.mode;

                                        var nVertex = geometry.vertexCount;
                                        var isUseIndices = geometry.isUseIndices();

                                        var uintExt = renderer.getGLExtension('OES_element_index_uint');
                                        var useUintExt = uintExt && nVertex > 0xffff;
                                        var indicesType = useUintExt ? _gl.UNSIGNED_INT : _gl.UNSIGNED_SHORT;

                                        var vaoExt = renderer.getGLExtension('OES_vertex_array_object');
                                        // var vaoExt = null;

                                        var isStatic = !geometry.dynamic;

                                        var renderInfo = this._renderInfo;
                                        renderInfo.vertexCount = nVertex;
                                        renderInfo.triangleCount = 0;
                                        renderInfo.drawCallCount = 0;
                                        // Draw each chunk
                                        var drawHashChanged = false;
                                        // Hash with shader id in case previous material has less attributes than next material
                                        currentDrawID = renderer.__GUID__ + '-' + geometry.__GUID__ + '-' + shader.__GUID__;

                                        if (currentDrawID !== prevDrawID) {
                                            drawHashChanged = true;
                                        } else {
                                            // The cache will be invalid in the following cases
                                            // 1. Geometry is splitted to multiple chunks
                                            // 2. VAO is enabled and is binded to null after render
                                            // 3. Geometry needs update
                                            if (
                                                ((nVertex > 0xffff && !uintExt) && isUseIndices) ||
                                                (vaoExt && isStatic) ||
                                                geometry._cache.isDirty()
                                            ) {
                                                drawHashChanged = true;
                                            }
                                        }
                                        prevDrawID = currentDrawID;

                                        if (!drawHashChanged) {
                                            // Direct draw
                                            if (prevDrawIsUseIndices) {
                                                _gl.drawElements(glDrawMode, prevDrawIndicesBuffer.count, indicesType, 0);
                                                renderInfo.triangleCount = prevDrawIndicesBuffer.count / 3;
                                            } else {
                                                // FIXME Use vertex number in buffer
                                                // vertexCount may get the wrong value when geometry forget to mark dirty after update
                                                _gl.drawArrays(glDrawMode, 0, nVertex);
                                            }
                                            renderInfo.drawCallCount = 1;
                                        } else {
                                            // Use the cache of static geometry
                                            var vaoList = this._drawCache[currentDrawID];
                                            if (!vaoList) {
                                                var chunks = geometry.getBufferChunks(renderer);
                                                if (!chunks) { // Empty mesh
                                                    return;
                                                }
                                                vaoList = [];
                                                for (var c = 0; c < chunks.length; c++) {
                                                    var chunk = chunks[c];
                                                    var attributeBuffers = chunk.attributeBuffers;
                                                    var indicesBuffer = chunk.indicesBuffer;

                                                    var availableAttributes = [];
                                                    var availableAttributeSymbols = [];
                                                    for (var a = 0; a < attributeBuffers.length; a++) {
                                                        var attributeBufferInfo = attributeBuffers[a];
                                                        var name = attributeBufferInfo.name;
                                                        var semantic = attributeBufferInfo.semantic;
                                                        var symbol;
                                                        if (semantic) {
                                                            var semanticInfo = shader.attribSemantics[semantic];
                                                            symbol = semanticInfo && semanticInfo.symbol;
                                                        } else {
                                                            symbol = name;
                                                        }
                                                        if (symbol && shader.attributeTemplates[symbol]) {
                                                            availableAttributes.push(attributeBufferInfo);
                                                            availableAttributeSymbols.push(symbol);
                                                        }
                                                    }

                                                    var vao = new VertexArrayObject(
                                                        availableAttributes,
                                                        availableAttributeSymbols,
                                                        indicesBuffer
                                                    );
                                                    vaoList.push(vao);
                                                }
                                                if (isStatic) {
                                                    this._drawCache[currentDrawID] = vaoList;
                                                }
                                            }

                                            for (var i = 0; i < vaoList.length; i++) {
                                                var vao = vaoList[i];
                                                var needsBindAttributes = true;

                                                // Create vertex object array cost a lot
                                                // So we don't use it on the dynamic object
                                                if (vaoExt && isStatic) {
                                                    // Use vertex array object
                                                    // http://blog.tojicode.com/2012/10/oesvertexarrayobject-extension.html
                                                    if (vao.vao == null) {
                                                        vao.vao = vaoExt.createVertexArrayOES();
                                                    } else {
                                                        needsBindAttributes = false;
                                                    }
                                                    vaoExt.bindVertexArrayOES(vao.vao);
                                                }

                                                var availableAttributes = vao.availableAttributes;
                                                var indicesBuffer = vao.indicesBuffer;

                                                if (needsBindAttributes) {
                                                    var locationList = shader.enableAttributes(renderer, vao.availableAttributeSymbols, (vaoExt && isStatic && vao.vao));
                                                    // Setting attributes;
                                                    for (var a = 0; a < availableAttributes.length; a++) {
                                                        var location = locationList[a];
                                                        if (location === -1) {
                                                            continue;
                                                        }
                                                        var attributeBufferInfo = availableAttributes[a];
                                                        var buffer = attributeBufferInfo.buffer;
                                                        var size = attributeBufferInfo.size;
                                                        var glType;
                                                        switch (attributeBufferInfo.type) {
                                                            case 'float':
                                                                glType = _gl.FLOAT;
                                                                break;
                                                            case 'byte':
                                                                glType = _gl.BYTE;
                                                                break;
                                                            case 'ubyte':
                                                                glType = _gl.UNSIGNED_BYTE;
                                                                break;
                                                            case 'short':
                                                                glType = _gl.SHORT;
                                                                break;
                                                            case 'ushort':
                                                                glType = _gl.UNSIGNED_SHORT;
                                                                break;
                                                            default:
                                                                glType = _gl.FLOAT;
                                                                break;
                                                        }

                                                        _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);
                                                        _gl.vertexAttribPointer(location, size, glType, false, 0, 0);
                                                    }
                                                }
                                                if (
                                                    glDrawMode == glenum.LINES ||
                                                    glDrawMode == glenum.LINE_STRIP ||
                                                    glDrawMode == glenum.LINE_LOOP
                                                ) {
                                                    _gl.lineWidth(this.lineWidth);
                                                }

                                                prevDrawIndicesBuffer = indicesBuffer;
                                                prevDrawIsUseIndices = geometry.isUseIndices();
                                                // Do drawing
                                                if (prevDrawIsUseIndices) {
                                                    if (needsBindAttributes) {
                                                        _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, indicesBuffer.buffer);
                                                    }
                                                    _gl.drawElements(glDrawMode, indicesBuffer.count, indicesType, 0);
                                                    renderInfo.triangleCount += indicesBuffer.count / 3;
                                                } else {
                                                    _gl.drawArrays(glDrawMode, 0, nVertex);
                                                }

                                                if (vaoExt && isStatic) {
                                                    vaoExt.bindVertexArrayOES(null);
                                                }

                                                renderInfo.drawCallCount++;
                                            }
                                        }

                                        return renderInfo;
                                    },

                                    /**
                                     * Clone a new renderable
                                     * @method
                                     * @return {qtek.Renderable}
                                     */
                                    clone: (function() {
                                        var properties = [
                                            'castShadow', 'receiveShadow',
                                            'mode', 'culling', 'cullFace', 'frontFace',
                                            'frustumCulling',
                                            'renderOrder', 'lineWidth',
                                            'ignorePicking', 'ignorePreZ', 'ignoreGBuffer'
                                        ];
                                        return function() {
                                            var renderable = src_Node.prototype.clone.call(this);

                                            renderable.geometry = this.geometry;
                                            renderable.material = this.material;

                                            for (var i = 0; i < properties.length; i++) {
                                                var name = properties[i];
                                                // Try not to overwrite the prototype property
                                                if (renderable[name] !== this[name]) {
                                                    renderable[name] = this[name];
                                                }
                                            }

                                            return renderable;
                                        };
                                    })()
                                });

                            /**
                             * @type {number}
                             */
                            Renderable.POINTS = glenum.POINTS;
                            /**
                             * @type {number}
                             */
                            Renderable.LINES = glenum.LINES;
                            /**
                             * @type {number}
                             */
                            Renderable.LINE_LOOP = glenum.LINE_LOOP;
                            /**
                             * @type {number}
                             */
                            Renderable.LINE_STRIP = glenum.LINE_STRIP;
                            /**
                             * @type {number}
                             */
                            Renderable.TRIANGLES = glenum.TRIANGLES;
                            /**
                             * @type {number}
                             */
                            Renderable.TRIANGLE_STRIP = glenum.TRIANGLE_STRIP;
                            /**
                             * @type {number}
                             */
                            Renderable.TRIANGLE_FAN = glenum.TRIANGLE_FAN;
                            /**
                             * @type {number}
                             */
                            Renderable.BACK = glenum.BACK;
                            /**
                             * @type {number}
                             */
                            Renderable.FRONT = glenum.FRONT;
                            /**
                             * @type {number}
                             */
                            Renderable.FRONT_AND_BACK = glenum.FRONT_AND_BACK;
                            /**
                             * @type {number}
                             */
                            Renderable.CW = glenum.CW;
                            /**
                             * @type {number}
                             */
                            Renderable.CCW = glenum.CCW;

                            Renderable.RenderInfo = RenderInfo;

                            /* harmony default export */
                            var src_Renderable = (Renderable);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/picking/RayPicking.js









                            var RayPicking_vec3 = glmatrix_default.a.vec3;

                            /**
                             * @constructor qtek.picking.RayPicking
                             * @extends qtek.core.Base
                             */
                            var RayPicking = core_Base.extend(
                                /** @lends qtek.picking.RayPicking# */
                                {
                                    /**
                                     * Target scene
                                     * @type {qtek.Scene}
                                     */
                                    scene: null,
                                    /**
                                     * Target camera
                                     * @type {qtek.Camera}
                                     */
                                    camera: null,
                                    /**
                                     * Target renderer
                                     * @type {qtek.Renderer}
                                     */
                                    renderer: null
                                },
                                function() {
                                    this._ray = new math_Ray();
                                    this._ndc = new math_Vector2();
                                },
                                /** @lends qtek.picking.RayPicking.prototype */
                                {

                                    /**
                                     * Pick the nearest intersection object in the scene
                                     * @param  {number} x Mouse position x
                                     * @param  {number} y Mouse position y
                                     * @param  {boolean} [forcePickAll=false] ignore ignorePicking
                                     * @return {qtek.picking.RayPicking~Intersection}
                                     */
                                    pick: function(x, y, forcePickAll) {
                                        var out = this.pickAll(x, y, [], forcePickAll);
                                        return out[0] || null;
                                    },

                                    /**
                                     * Pick all intersection objects, wich will be sorted from near to far
                                     * @param  {number} x Mouse position x
                                     * @param  {number} y Mouse position y
                                     * @param  {Array} [output]
                                     * @param  {boolean} [forcePickAll=false] ignore ignorePicking
                                     * @return {Array.<qtek.picking.RayPicking~Intersection>}
                                     */
                                    pickAll: function(x, y, output, forcePickAll) {
                                        this.renderer.screenToNDC(x, y, this._ndc);
                                        this.camera.castRay(this._ndc, this._ray);

                                        output = output || [];

                                        this._intersectNode(this.scene, output, forcePickAll || false);

                                        output.sort(this._intersectionCompareFunc);

                                        return output;
                                    },

                                    _intersectNode: function(node, out, forcePickAll) {
                                        if ((node instanceof src_Renderable) && node.isRenderable()) {
                                            if ((!node.ignorePicking || forcePickAll) &&
                                                (
                                                    // Only triangle mesh support ray picking
                                                    (node.mode === glenum.TRIANGLES && node.geometry.isUseIndices())
                                                    // Or if geometry has it's own pickByRay, pick, implementation
                                                    ||
                                                    node.geometry.pickByRay ||
                                                    node.geometry.pick
                                                )
                                            ) {
                                                this._intersectRenderable(node, out);
                                            }
                                        }
                                        for (var i = 0; i < node._children.length; i++) {
                                            this._intersectNode(node._children[i], out, forcePickAll);
                                        }
                                    },

                                    _intersectRenderable: (function() {

                                        var v1 = new math_Vector3();
                                        var v2 = new math_Vector3();
                                        var v3 = new math_Vector3();
                                        var ray = new math_Ray();
                                        var worldInverse = new math_Matrix4();

                                        return function(renderable, out) {

                                            var isSkinnedMesh = renderable.isSkinnedMesh();
                                            ray.copy(this._ray);
                                            math_Matrix4.invert(worldInverse, renderable.worldTransform);

                                            // Skinned mesh will ignore the world transform.
                                            if (!isSkinnedMesh) {
                                                ray.applyTransform(worldInverse);
                                            }

                                            var geometry = renderable.geometry;
                                            // Ignore bounding box of skinned mesh?
                                            if (!isSkinnedMesh) {
                                                if (geometry.boundingBox) {
                                                    if (!ray.intersectBoundingBox(geometry.boundingBox)) {
                                                        return;
                                                    }
                                                }
                                            }
                                            // Use user defined picking algorithm
                                            if (geometry.pick) {
                                                geometry.pick(
                                                    this._ndc.x, this._ndc.y,
                                                    this.renderer,
                                                    this.camera,
                                                    renderable, out
                                                );
                                                return;
                                            }
                                            // Use user defined ray picking algorithm
                                            else if (geometry.pickByRay) {
                                                geometry.pickByRay(ray, renderable, out);
                                                return;
                                            }

                                            var cullBack = (renderable.cullFace === glenum.BACK && renderable.frontFace === glenum.CCW) ||
                                                (renderable.cullFace === glenum.FRONT && renderable.frontFace === glenum.CW);

                                            var point;
                                            var indices = geometry.indices;
                                            var positionAttr = geometry.attributes.position;
                                            var weightAttr = geometry.attributes.weight;
                                            var jointAttr = geometry.attributes.joint;
                                            var skinMatricesArray;
                                            var skinMatrices = [];
                                            // Check if valid.
                                            if (!positionAttr || !positionAttr.value || !indices) {
                                                return;
                                            }
                                            if (isSkinnedMesh) {
                                                skinMatricesArray = renderable.skeleton.getSubSkinMatrices(renderable.__GUID__, renderable.joints);
                                                for (var i = 0; i < renderable.joints.length; i++) {
                                                    skinMatrices[i] = skinMatrices[i] || [];
                                                    for (var k = 0; k < 16; k++) {
                                                        skinMatrices[i][k] = skinMatricesArray[i * 16 + k];
                                                    }
                                                }
                                                var pos = [];
                                                var weight = [];
                                                var joint = [];
                                                var skinnedPos = [];
                                                var tmp = [];
                                                var skinnedPositionAttr = geometry.attributes.skinnedPosition;
                                                if (!skinnedPositionAttr || !skinnedPositionAttr.value) {
                                                    geometry.createAttribute('skinnedPosition', 'f', 3);
                                                    skinnedPositionAttr = geometry.attributes.skinnedPosition;
                                                    skinnedPositionAttr.init(geometry.vertexCount);
                                                }
                                                for (var i = 0; i < geometry.vertexCount; i++) {
                                                    positionAttr.get(i, pos);
                                                    weightAttr.get(i, weight);
                                                    jointAttr.get(i, joint);
                                                    weight[3] = 1 - weight[0] - weight[1] - weight[2];
                                                    RayPicking_vec3.set(skinnedPos, 0, 0, 0);
                                                    for (var k = 0; k < 4; k++) {
                                                        if (joint[k] >= 0 && weight[k] > 1e-4) {
                                                            RayPicking_vec3.transformMat4(tmp, pos, skinMatrices[joint[k]]);
                                                            RayPicking_vec3.scaleAndAdd(skinnedPos, skinnedPos, tmp, weight[k]);
                                                        }
                                                    }
                                                    skinnedPositionAttr.set(i, skinnedPos);
                                                }
                                            }

                                            for (var i = 0; i < indices.length; i += 3) {
                                                var i1 = indices[i];
                                                var i2 = indices[i + 1];
                                                var i3 = indices[i + 2];
                                                var finalPosAttr = isSkinnedMesh ?
                                                    geometry.attributes.skinnedPosition :
                                                    positionAttr;
                                                finalPosAttr.get(i1, v1._array);
                                                finalPosAttr.get(i2, v2._array);
                                                finalPosAttr.get(i3, v3._array);

                                                if (cullBack) {
                                                    point = ray.intersectTriangle(v1, v2, v3, renderable.culling);
                                                } else {
                                                    point = ray.intersectTriangle(v1, v3, v2, renderable.culling);
                                                }
                                                if (point) {
                                                    var pointW = new math_Vector3();
                                                    if (!isSkinnedMesh) {
                                                        math_Vector3.transformMat4(pointW, point, renderable.worldTransform);
                                                    } else {
                                                        // TODO point maybe not right.
                                                        math_Vector3.copy(pointW, point);
                                                    }
                                                    out.push(new RayPicking.Intersection(
                                                        point, pointW, renderable, [i1, i2, i3], i / 3,
                                                        math_Vector3.dist(pointW, this._ray.origin)
                                                    ));
                                                }
                                            }
                                        };
                                    })(),

                                    _intersectionCompareFunc: function(a, b) {
                                        return a.distance - b.distance;
                                    }
                                });

                            /**
                             * @constructor qtek.picking.RayPicking~Intersection
                             * @param {qtek.math.Vector3} point
                             * @param {qtek.math.Vector3} pointWorld
                             * @param {qtek.Node} target
                             * @param {Array.<number>} triangle
                             * @param {number} triangleIndex
                             * @param {number} distance
                             */
                            RayPicking.Intersection = function(point, pointWorld, target, triangle, triangleIndex, distance) {
                                /**
                                 * Intersection point in local transform coordinates
                                 * @type {qtek.math.Vector3}
                                 */
                                this.point = point;
                                /**
                                 * Intersection point in world transform coordinates
                                 * @type {qtek.math.Vector3}
                                 */
                                this.pointWorld = pointWorld;
                                /**
                                 * Intersection scene node
                                 * @type {qtek.Node}
                                 */
                                this.target = target;
                                /**
                                 * Intersection triangle, which is an array of vertex index
                                 * @type {Array.<number>}
                                 */
                                this.triangle = triangle;
                                /**
                                 * Index of intersection triangle.
                                 */
                                this.triangleIndex = triangleIndex;
                                /**
                                 * Distance from intersection point to ray origin
                                 * @type {number}
                                 */
                                this.distance = distance;
                            };

                            /* harmony default export */
                            var picking_RayPicking = (RayPicking);

                            // EXTERNAL MODULE: ./node_modules/zrender/lib/animation/requestAnimationFrame.js
                            var requestAnimationFrame = __webpack_require__(5);
                            var requestAnimationFrame_default = /*#__PURE__*/ __webpack_require__.n(requestAnimationFrame);

                            // CONCATENATED MODULE: ./src/core/LayerGL.js
                            /**
                             * Provide WebGL layer to zrender. Which is rendered on top of qtek.
                             *
                             *
                             * Relationship between zrender, LayerGL(renderer) and ViewGL(Scene, Camera, Viewport)
                             *           zrender
                             *           /     \
                             *      LayerGL   LayerGL
                             *    (renderer) (renderer)
                             *      /     \
                             *  ViewGL   ViewGL
                             *
                             * @module echarts-gl/core/LayerGL
                             * @author Yi Shen(http://github.com/pissang)
                             */






                            // PENDING, qtek notifier is same with zrender Eventful



                            // configs for Auto GC for GPU resources
                            // PENDING
                            var MAX_SHADER_COUNT = 60;
                            var MAX_GEOMETRY_COUNT = 20;
                            var MAX_TEXTURE_COUNT = 20;

                            /**
                             * @constructor
                             * @alias module:echarts-gl/core/LayerGL
                             * @param {string} id Layer ID
                             * @param {module:zrender/ZRender} zr
                             */
                            var LayerGL = function(id, zr) {

                                /**
                                 * Layer ID
                                 * @type {string}
                                 */
                                this.id = id;

                                /**
                                 * @type {module:zrender/ZRender}
                                 */
                                this.zr = zr;

                                /**
                                 * @type {qtek.Renderer}
                                 */
                                try {
                                    this.renderer = new src_Renderer({
                                        clearBit: 0,
                                        devicePixelRatio: zr.painter.dpr,
                                        preserveDrawingBuffer: true,
                                        // PENDING
                                        premultipliedAlpha: true
                                    });
                                    this.renderer.resize(zr.painter.getWidth(), zr.painter.getHeight());
                                } catch (e) {
                                    this.renderer = null;
                                    this.dom = document.createElement('div');
                                    this.dom.style.cssText = 'position:absolute; left: 0; top: 0; right: 0; bottom: 0;';
                                    this.dom.className = 'ecgl-nowebgl';
                                    this.dom.innerHTML = 'Sorry, your browser does support WebGL';

                                    console.error(e);
                                    return;
                                }

                                this.onglobalout = this.onglobalout.bind(this);
                                zr.on('globalout', this.onglobalout);

                                /**
                                 * Canvas dom for webgl rendering
                                 * @type {HTMLCanvasElement}
                                 */
                                this.dom = this.renderer.canvas;
                                var style = this.dom.style;
                                style.position = 'absolute';
                                style.left = '0';
                                style.top = '0';

                                /**
                                 * @type {Array.<qtek.Scene>}
                                 */
                                this.views = [];

                                this._picking = new picking_RayPicking({
                                    renderer: this.renderer
                                });

                                this._viewsToDispose = [];

                                /**
                                 * Current accumulating id.
                                 */
                                this._accumulatingId = 0;

                                this._zrEventProxy = new external__echarts__default.a.graphic.Rect({
                                    shape: { x: -1, y: -1, width: 2, height: 2 },
                                    // FIXME Better solution.
                                    __isGLToZRProxy: true
                                });
                            };

                            /**
                             * @param {module:echarts-gl/core/ViewGL} view
                             */
                            LayerGL.prototype.addView = function(view) {
                                if (view.layer === this) {
                                    return;
                                }
                                // If needs to dispose in this layer. unmark it.
                                var idx = this._viewsToDispose.indexOf(view);
                                if (idx >= 0) {
                                    this._viewsToDispose.splice(idx, 1);
                                }

                                this.views.push(view);

                                view.layer = this;

                                var zr = this.zr;
                                view.scene.traverse(function(node) {
                                    node.__zr = zr;
                                    if (node.addAnimatorsToZr) {
                                        node.addAnimatorsToZr(zr);
                                    }
                                });
                            };

                            function removeFromZr(node) {
                                var zr = node.__zr;
                                node.__zr = null;
                                if (zr && node.removeAnimatorsFromZr) {
                                    node.removeAnimatorsFromZr(zr);
                                }
                            }
                            /**
                             * @param {module:echarts-gl/core/ViewGL} view
                             */
                            LayerGL.prototype.removeView = function(view) {
                                if (view.layer !== this) {
                                    return;
                                }

                                var idx = this.views.indexOf(view);
                                if (idx >= 0) {
                                    this.views.splice(idx, 1);
                                    view.scene.traverse(removeFromZr, this);
                                    view.layer = null;

                                    // Mark to dispose in this layer.
                                    this._viewsToDispose.push(view);
                                }
                            };

                            /**
                             * Remove all views
                             */
                            LayerGL.prototype.removeViewsAll = function() {
                                this.views.forEach(function(view) {
                                    view.scene.traverse(removeFromZr, this);
                                    view.layer = null;

                                    // Mark to dispose in this layer.
                                    this._viewsToDispose.push(view);
                                }, this);

                                this.views.length = 0;

                            };

                            /**
                             * Resize the canvas and viewport, will be invoked by zrender
                             * @param  {number} width
                             * @param  {number} height
                             */
                            LayerGL.prototype.resize = function(width, height) {
                                var renderer = this.renderer;
                                renderer.resize(width, height);
                            };

                            /**
                             * Clear color and depth
                             * @return {[type]} [description]
                             */
                            LayerGL.prototype.clear = function() {
                                var gl = this.renderer.gl;
                                gl.clearColor(0, 0, 0, 0);
                                gl.depthMask(true);
                                gl.colorMask(true, true, true, true);
                                gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);
                            };

                            /**
                             * Clear depth
                             */
                            LayerGL.prototype.clearDepth = function() {
                                var gl = this.renderer.gl;
                                gl.clear(gl.DEPTH_BUFFER_BIT);
                            };

                            /**
                             * Clear color
                             */
                            LayerGL.prototype.clearColor = function() {
                                var gl = this.renderer.gl;
                                gl.clearColor(0, 0, 0, 0);
                                gl.clear(gl.COLOR_BUFFER_BIT);
                            };

                            /**
                             * Mark layer to refresh next tick
                             */
                            LayerGL.prototype.needsRefresh = function() {
                                this.zr.refresh();
                            };

                            /**
                             * Refresh the layer, will be invoked by zrender
                             */
                            LayerGL.prototype.refresh = function() {

                                for (var i = 0; i < this.views.length; i++) {
                                    this.views[i].prepareRender();
                                }

                                this._doRender(false);

                                // Auto dispose unused resources on GPU, like program(shader), texture, geometry(buffers)
                                this._trackAndClean();

                                // Dispose trashed views
                                for (var i = 0; i < this._viewsToDispose.length; i++) {
                                    this._viewsToDispose[i].dispose(this.renderer);
                                }
                                this._viewsToDispose.length = 0;

                                this._startAccumulating();
                            };


                            LayerGL.prototype.renderToCanvas = function(ctx) {
                                // PENDING will block the page
                                this._startAccumulating(true);
                                ctx.drawImage(this.dom, 0, 0, ctx.canvas.width, ctx.canvas.height);
                            };

                            LayerGL.prototype._doRender = function(accumulating) {
                                this.clear();
                                this.renderer.saveViewport();
                                for (var i = 0; i < this.views.length; i++) {
                                    this.views[i].render(this.renderer, accumulating);
                                }
                                this.renderer.restoreViewport();
                            };

                            /**
                             * Stop accumulating
                             */
                            LayerGL.prototype._stopAccumulating = function() {
                                this._accumulatingId = 0;
                                clearTimeout(this._accumulatingTimeout);
                            };

                            var accumulatingId = 1;
                            /**
                             * Start accumulating all the views.
                             * Accumulating is for antialising and have more sampling in SSAO
                             * @private
                             */
                            LayerGL.prototype._startAccumulating = function(immediate) {
                                var self = this;
                                this._stopAccumulating();

                                var needsAccumulate = false;
                                for (var i = 0; i < this.views.length; i++) {
                                    needsAccumulate = this.views[i].needsAccumulate() || needsAccumulate;
                                }
                                if (!needsAccumulate) {
                                    return;
                                }

                                function accumulate(id) {
                                    if (!self._accumulatingId || id !== self._accumulatingId) {
                                        return;
                                    }

                                    var isFinished = true;
                                    for (var i = 0; i < self.views.length; i++) {
                                        isFinished = self.views[i].isAccumulateFinished() && needsAccumulate;
                                    }

                                    if (!isFinished) {
                                        self._doRender(true);

                                        if (immediate) {
                                            accumulate(id);
                                        } else {
                                            requestAnimationFrame_default()(function() {
                                                accumulate(id);
                                            });
                                        }
                                    }
                                }

                                this._accumulatingId = accumulatingId++;

                                if (immediate) {
                                    accumulate(self._accumulatingId);
                                } else {
                                    this._accumulatingTimeout = setTimeout(function() {
                                        accumulate(self._accumulatingId);
                                    }, 50);
                                }
                            };

                            function getId(resource) {
                                return resource.__GUID__;
                            }

                            function checkAndDispose(renderer, resourceMap, maxCount) {
                                var count = 0;
                                // FIXME not allocate array.
                                var unused = [];
                                for (var id in resourceMap) {
                                    if (!resourceMap[id].count) {
                                        unused.push(resourceMap[id].target);
                                    } else {
                                        count++;
                                    }
                                }
                                for (var i = 0; i < Math.min(count - maxCount, unused.length); i++) {
                                    unused[i].dispose(renderer);
                                }
                            }

                            function addToMap(map, target) {
                                var id = getId(target);
                                map[id] = map[id] || {
                                    count: 0,
                                    target: target
                                };
                                map[id].count++;
                            }
                            LayerGL.prototype._trackAndClean = function() {
                                var shadersMap = this._shadersMap = this._shadersMap || {};
                                var texturesMap = this._texturesMap = this._texturesMap || {};
                                var geometriesMap = this._geometriesMap = this._geometriesMap || {};

                                for (var id in shadersMap) {
                                    shadersMap[id].count = 0;
                                }
                                for (var id in texturesMap) {
                                    texturesMap[id].count = 0;
                                }
                                for (var id in geometriesMap) {
                                    geometriesMap[id].count = 0;
                                }

                                function trackQueue(queue) {
                                    for (var i = 0; i < queue.length; i++) {
                                        var renderable = queue[i];
                                        var geometry = renderable.geometry;
                                        var material = renderable.material;
                                        var shader = material.shader;
                                        addToMap(geometriesMap, geometry);
                                        addToMap(shadersMap, shader);

                                        for (var name in material.uniforms) {
                                            var val = material.uniforms[name].value;
                                            if (val instanceof src_Texture) {
                                                addToMap(texturesMap, val);
                                            } else if (val instanceof Array) {
                                                for (var k = 0; k < val.length; k++) {
                                                    if (val[k] instanceof src_Texture) {
                                                        addToMap(texturesMap, val[k]);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                for (var i = 0; i < this.views.length; i++) {
                                    var viewGL = this.views[i];
                                    var scene = viewGL.scene;

                                    trackQueue(scene.opaqueQueue);
                                    trackQueue(scene.transparentQueue);

                                    for (var k = 0; k < scene.lights.length; k++) {
                                        // Track AmbientCubemap
                                        if (scene.lights[k].cubemap) {
                                            addToMap(texturesMap, scene.lights[k].cubemap);
                                        }
                                    }
                                }
                                // Dispose those unsed resources
                                checkAndDispose(this.renderer, shadersMap, MAX_SHADER_COUNT);
                                checkAndDispose(this.renderer, texturesMap, MAX_TEXTURE_COUNT);
                                checkAndDispose(this.renderer, geometriesMap, MAX_GEOMETRY_COUNT);
                            };

                            /**
                             * Dispose the layer
                             */
                            LayerGL.prototype.dispose = function() {
                                this._stopAccumulating();
                                this.renderer.disposeScene(this.scene);

                                this.zr.off('globalout', this.onglobalout);
                            };

                            // Event handlers
                            LayerGL.prototype.onmousedown = function(e) {
                                if (e.target && e.target.__isGLToZRProxy) {
                                    return;
                                }

                                e = e.event;
                                var obj = this.pickObject(e.offsetX, e.offsetY);
                                if (obj) {
                                    this._dispatchEvent('mousedown', e, obj);
                                    this._dispatchDataEvent('mousedown', e, obj);
                                }

                                this._downX = e.offsetX;
                                this._downY = e.offsetY;
                            };

                            LayerGL.prototype.onmousemove = function(e) {
                                if (e.target && e.target.__isGLToZRProxy) {
                                    return;
                                }

                                e = e.event;
                                var obj = this.pickObject(e.offsetX, e.offsetY);

                                var target = obj && obj.target;
                                var lastHovered = this._hovered;
                                this._hovered = obj;

                                if (lastHovered && target !== lastHovered.target) {
                                    lastHovered.relatedTarget = target;
                                    this._dispatchEvent('mouseout', e, lastHovered);
                                    // this._dispatchDataEvent('mouseout', e, lastHovered);

                                    this.zr.setCursorStyle('default');
                                }

                                this._dispatchEvent('mousemove', e, obj);

                                if (obj) {
                                    this.zr.setCursorStyle('pointer');

                                    if (!lastHovered || (target !== lastHovered.target)) {
                                        this._dispatchEvent('mouseover', e, obj);
                                        // this._dispatchDataEvent('mouseover', e, obj);
                                    }
                                }

                                this._dispatchDataEvent('mousemove', e, obj);
                            };

                            LayerGL.prototype.onmouseup = function(e) {
                                if (e.target && e.target.__isGLToZRProxy) {
                                    return;
                                }

                                e = e.event;
                                var obj = this.pickObject(e.offsetX, e.offsetY);

                                if (obj) {
                                    this._dispatchEvent('mouseup', e, obj);
                                    this._dispatchDataEvent('mouseup', e, obj);
                                }

                                this._upX = e.offsetX;
                                this._upY = e.offsetY;
                            };

                            LayerGL.prototype.onclick = LayerGL.prototype.dblclick = function(e) {
                                if (e.target && e.target.__isGLToZRProxy) {
                                    return;
                                }

                                // Ignore click event if mouse moved
                                var dx = this._upX - this._downX;
                                var dy = this._upY - this._downY;
                                if (Math.sqrt(dx * dx + dy * dy) > 20) {
                                    return;
                                }

                                e = e.event;
                                var obj = this.pickObject(e.offsetX, e.offsetY);

                                if (obj) {
                                    this._dispatchEvent(e.type, e, obj);
                                    this._dispatchDataEvent(e.type, e, obj);
                                }

                                // Try set depth of field onclick
                                var result = this._clickToSetFocusPoint(e);
                                if (result) {
                                    var success = result.view.setDOFFocusOnPoint(result.distance);
                                    if (success) {
                                        this.zr.refresh();
                                    }
                                }
                            };

                            LayerGL.prototype._clickToSetFocusPoint = function(e) {
                                var renderer = this.renderer;
                                var oldViewport = renderer.viewport;
                                for (var i = this.views.length - 1; i >= 0; i--) {
                                    var viewGL = this.views[i];
                                    if (viewGL.hasDOF() && viewGL.containPoint(e.offsetX, e.offsetY)) {
                                        this._picking.scene = viewGL.scene;
                                        this._picking.camera = viewGL.camera;
                                        // Only used for picking, renderer.setViewport will also invoke gl.viewport.
                                        // Set directly, PENDING.
                                        renderer.viewport = viewGL.viewport;
                                        var result = this._picking.pick(e.offsetX, e.offsetY, true);
                                        if (result) {
                                            result.view = viewGL;
                                            return result;
                                        }
                                    }
                                }
                                renderer.viewport = oldViewport;
                            };

                            LayerGL.prototype.onglobalout = function(e) {
                                var lastHovered = this._hovered;
                                if (lastHovered) {
                                    this._dispatchEvent('mouseout', e, {
                                        target: lastHovered.target
                                    });
                                }
                            };

                            LayerGL.prototype.pickObject = function(x, y) {

                                var output = [];
                                var renderer = this.renderer;
                                var oldViewport = renderer.viewport;
                                for (var i = 0; i < this.views.length; i++) {
                                    var viewGL = this.views[i];
                                    if (viewGL.containPoint(x, y)) {
                                        this._picking.scene = viewGL.scene;
                                        this._picking.camera = viewGL.camera;
                                        // Only used for picking, renderer.setViewport will also invoke gl.viewport.
                                        // Set directly, PENDING.
                                        renderer.viewport = viewGL.viewport;
                                        this._picking.pickAll(x, y, output);
                                    }
                                }
                                renderer.viewport = oldViewport;
                                output.sort(function(a, b) {
                                    return a.distance - b.distance;
                                });
                                return output[0];
                            };

                            LayerGL.prototype._dispatchEvent = function(eveName, originalEvent, newEvent) {
                                if (!newEvent) {
                                    newEvent = {};
                                }
                                var current = newEvent.target;

                                newEvent.cancelBubble = false;
                                newEvent.event = originalEvent;
                                newEvent.type = eveName;
                                newEvent.offsetX = originalEvent.offsetX;
                                newEvent.offsetY = originalEvent.offsetY;

                                while (current) {
                                    current.trigger(eveName, newEvent);
                                    current = current.getParent();

                                    if (newEvent.cancelBubble) {
                                        break;
                                    }
                                }

                                this._dispatchToView(eveName, newEvent);
                            };

                            LayerGL.prototype._dispatchDataEvent = function(eveName, originalEvent, newEvent) {
                                var mesh = newEvent && newEvent.target;

                                var dataIndex = mesh && mesh.dataIndex;
                                var seriesIndex = mesh && mesh.seriesIndex;
                                // Custom event data
                                var eventData = mesh && mesh.eventData;
                                var elChangedInMouseMove = false;

                                var eventProxy = this._zrEventProxy;
                                eventProxy.position = [originalEvent.offsetX, originalEvent.offsetY];
                                eventProxy.update();

                                var targetInfo = {
                                    target: eventProxy
                                };
                                if (eveName === 'mousemove') {
                                    if (dataIndex != null) {
                                        if (dataIndex !== this._lastDataIndex) {
                                            if (parseInt(this._lastDataIndex, 10) >= 0) {
                                                eventProxy.dataIndex = this._lastDataIndex;
                                                eventProxy.seriesIndex = this._lastSeriesIndex;
                                                // FIXME May cause double events.
                                                this.zr.handler.dispatchToElement(targetInfo, 'mouseout', originalEvent);
                                            }
                                            elChangedInMouseMove = true;
                                        }
                                    } else if (eventData != null) {
                                        if (eventData !== this._lastEventData) {
                                            if (this._lastEventData != null) {
                                                eventProxy.eventData = this._lastEventData;
                                                // FIXME May cause double events.
                                                this.zr.handler.dispatchToElement(targetInfo, 'mouseout', originalEvent);
                                            }
                                            elChangedInMouseMove = true;
                                        }
                                    }
                                    this._lastEventData = eventData;
                                    this._lastDataIndex = dataIndex;
                                    this._lastSeriesIndex = seriesIndex;
                                }

                                eventProxy.eventData = eventData;
                                eventProxy.dataIndex = dataIndex;
                                eventProxy.seriesIndex = seriesIndex;

                                if (eventData != null || parseInt(dataIndex, 10) >= 0) {
                                    this.zr.handler.dispatchToElement(targetInfo, eveName, originalEvent);

                                    if (elChangedInMouseMove) {
                                        this.zr.handler.dispatchToElement(targetInfo, 'mouseover', originalEvent);
                                    }
                                }
                            };

                            LayerGL.prototype._dispatchToView = function(eventName, e) {
                                for (var i = 0; i < this.views.length; i++) {
                                    if (this.views[i].containPoint(e.offsetX, e.offsetY)) {
                                        this.views[i].trigger(eventName, e);
                                    }
                                }
                            };

                            external__echarts__default.a.util.extend(LayerGL.prototype, mixin_notifier);

                            /* harmony default export */
                            var core_LayerGL = (LayerGL);
                            // CONCATENATED MODULE: ./src/preprocessor/backwardCompat.js


                            var GL_SERIES = ['bar3D', 'line3D', 'map3D', 'scatter3D', 'surface', 'lines3D', 'scatterGL', 'scatter3D'];

                            function convertNormalEmphasis(option, optType) {
                                if (option && option[optType] && (option[optType].normal || option[optType].emphasis)) {
                                    var normalOpt = option[optType].normal;
                                    var emphasisOpt = option[optType].emphasis;

                                    if (normalOpt) {
                                        option[optType] = normalOpt;
                                    }
                                    if (emphasisOpt) {
                                        option.emphasis = option.emphasis || {};
                                        option.emphasis[optType] = emphasisOpt;
                                    }
                                }
                            }

                            function convertNormalEmphasisForEach(option) {
                                convertNormalEmphasis(option, 'itemStyle');
                                convertNormalEmphasis(option, 'lineStyle');
                                convertNormalEmphasis(option, 'areaStyle');
                                convertNormalEmphasis(option, 'label');
                            }

                            function removeTextStyleInAxis(axesOpt) {
                                if (!axesOpt) {
                                    return;
                                }
                                if (!(axesOpt instanceof Array)) {
                                    axesOpt = [axesOpt];
                                }
                                external__echarts__default.a.util.each(axesOpt, function(axisOpt) {
                                    if (axisOpt.axisLabel) {
                                        var labelOpt = axisOpt.axisLabel;
                                        external__echarts__default.a.util.extend(labelOpt, labelOpt.textStyle);
                                        labelOpt.textStyle = null;
                                    }
                                });
                            }

                            /* harmony default export */
                            var backwardCompat = (function(option) {
                                external__echarts__default.a.util.each(option.series, function(series) {
                                    if (external__echarts__default.a.util.indexOf(GL_SERIES, series.type) >= 0) {
                                        convertNormalEmphasisForEach(series);
                                    }
                                });

                                removeTextStyleInAxis(option.xAxis3D);
                                removeTextStyleInAxis(option.yAxis3D);
                                removeTextStyleInAxis(option.zAxis3D);
                                removeTextStyleInAxis(option.grid3D);

                                convertNormalEmphasis(option.geo3D);
                            });;
                            // CONCATENATED MODULE: ./node_modules/qtek/src/math/util.js
                            var mathUtil = {};

                            mathUtil.isPowerOfTwo = function(value) {
                                return (value & (value - 1)) === 0;
                            };

                            mathUtil.nextPowerOfTwo = function(value) {
                                value--;
                                value |= value >> 1;
                                value |= value >> 2;
                                value |= value >> 4;
                                value |= value >> 8;
                                value |= value >> 16;
                                value++;

                                return value;
                            };

                            mathUtil.nearestPowerOfTwo = function(value) {
                                return Math.pow(2, Math.round(Math.log(value) / Math.LN2));
                            };

                            /* harmony default export */
                            var math_util = (mathUtil);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/Texture2D.js



                            var isPowerOfTwo = math_util.isPowerOfTwo;

                            /**
                             * @constructor qtek.Texture2D
                             * @extends qtek.Texture
                             *
                             * @example
                             *     ...
                             *     var mat = new qtek.Material({
                             *         shader: qtek.shader.library.get('qtek.phong', 'diffuseMap')
                             *     });
                             *     var diffuseMap = new qtek.Texture2D();
                             *     diffuseMap.load('assets/textures/diffuse.jpg');
                             *     mat.set('diffuseMap', diffuseMap);
                             *     ...
                             *     diffuseMap.success(function () {
                             *         // Wait for the diffuse texture loaded
                             *         animation.on('frame', function (frameTime) {
                             *             renderer.render(scene, camera);
                             *         });
                             *     });
                             */
                            var Texture2D = src_Texture.extend(function() {
                                return /** @lends qtek.Texture2D# */ {
                                    /**
                                     * @type {?HTMLImageElement|HTMLCanvasElemnet}
                                     */
                                    image: null,
                                    /**
                                     * Pixels data. Will be ignored if image is set.
                                     * @type {?Uint8Array|Float32Array}
                                     */
                                    pixels: null,
                                    /**
                                     * @type {Array.<Object>}
                                     * @example
                                     *     [{
                                     *         image: mipmap0,
                                     *         pixels: null
                                     *     }, {
                                     *         image: mipmap1,
                                     *         pixels: null
                                     *     }, ....]
                                     */
                                    mipmaps: []
                                };
                            }, {
                                update: function(renderer) {

                                    var _gl = renderer.gl;
                                    _gl.bindTexture(_gl.TEXTURE_2D, this._cache.get('webgl_texture'));

                                    this.updateCommon(renderer);

                                    var glFormat = this.format;
                                    var glType = this.type;

                                    _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, this.getAvailableWrapS());
                                    _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, this.getAvailableWrapT());

                                    _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, this.getAvailableMagFilter());
                                    _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, this.getAvailableMinFilter());

                                    var anisotropicExt = renderer.getGLExtension('EXT_texture_filter_anisotropic');
                                    if (anisotropicExt && this.anisotropic > 1) {
                                        _gl.texParameterf(_gl.TEXTURE_2D, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, this.anisotropic);
                                    }

                                    // Fallback to float type if browser don't have half float extension
                                    if (glType === 36193) {
                                        var halfFloatExt = renderer.getGLExtension('OES_texture_half_float');
                                        if (!halfFloatExt) {
                                            glType = glenum.FLOAT;
                                        }
                                    }

                                    if (this.mipmaps.length) {
                                        var width = this.width;
                                        var height = this.height;
                                        for (var i = 0; i < this.mipmaps.length; i++) {
                                            var mipmap = this.mipmaps[i];
                                            this._updateTextureData(_gl, mipmap, i, width, height, glFormat, glType);
                                            width /= 2;
                                            height /= 2;
                                        }
                                    } else {
                                        this._updateTextureData(_gl, this, 0, this.width, this.height, glFormat, glType);

                                        if (this.useMipmap && !this.NPOT) {
                                            _gl.generateMipmap(_gl.TEXTURE_2D);
                                        }
                                    }

                                    _gl.bindTexture(_gl.TEXTURE_2D, null);
                                },

                                _updateTextureData: function(_gl, data, level, width, height, glFormat, glType) {
                                    if (data.image) {
                                        _gl.texImage2D(_gl.TEXTURE_2D, level, glFormat, glFormat, glType, data.image);
                                    } else {
                                        // Can be used as a blank texture when writing render to texture(RTT)
                                        if (
                                            glFormat <= src_Texture.COMPRESSED_RGBA_S3TC_DXT5_EXT &&
                                            glFormat >= src_Texture.COMPRESSED_RGB_S3TC_DXT1_EXT
                                        ) {
                                            _gl.compressedTexImage2D(_gl.TEXTURE_2D, level, glFormat, width, height, 0, data.pixels);
                                        } else {
                                            // Is a render target if pixels is null
                                            _gl.texImage2D(_gl.TEXTURE_2D, level, glFormat, width, height, 0, glFormat, glType, data.pixels);
                                        }
                                    }
                                },

                                /**
                                 * @param  {qtek.Renderer} renderer
                                 * @memberOf qtek.Texture2D.prototype
                                 */
                                generateMipmap: function(renderer) {
                                    var _gl = renderer.gl;
                                    if (this.useMipmap && !this.NPOT) {
                                        _gl.bindTexture(_gl.TEXTURE_2D, this._cache.get('webgl_texture'));
                                        _gl.generateMipmap(_gl.TEXTURE_2D);
                                    }
                                },

                                isPowerOfTwo: function() {
                                    var width;
                                    var height;
                                    if (this.image) {
                                        width = this.image.width;
                                        height = this.image.height;
                                    } else {
                                        width = this.width;
                                        height = this.height;
                                    }
                                    return isPowerOfTwo(width) && isPowerOfTwo(height);
                                },

                                isRenderable: function() {
                                    if (this.image) {
                                        return this.image.nodeName === 'CANVAS' ||
                                            this.image.nodeName === 'VIDEO' ||
                                            this.image.complete;
                                    } else {
                                        return !!(this.width && this.height);
                                    }
                                },

                                bind: function(renderer) {
                                    renderer.gl.bindTexture(renderer.gl.TEXTURE_2D, this.getWebGLTexture(renderer));
                                },

                                unbind: function(renderer) {
                                    renderer.gl.bindTexture(renderer.gl.TEXTURE_2D, null);
                                },

                                load: function(src, crossOrigin) {
                                    var image = new Image();
                                    if (crossOrigin) {
                                        image.crossOrigin = crossOrigin;
                                    }
                                    var self = this;
                                    image.onload = function() {
                                        self.dirty();
                                        self.trigger('success', self);
                                        image.onload = null;
                                    };
                                    image.onerror = function() {
                                        self.trigger('error', self);
                                        image.onerror = null;
                                    };

                                    image.src = src;
                                    this.image = image;

                                    return this;
                                }
                            });

                            Object.defineProperty(Texture2D.prototype, 'width', {
                                get: function() {
                                    if (this.image) {
                                        return this.image.width;
                                    }
                                    return this._width;
                                },
                                set: function(value) {
                                    if (this.image) {
                                        console.warn('Texture from image can\'t set width');
                                    } else {
                                        if (this._width !== value) {
                                            this.dirty();
                                        }
                                        this._width = value;
                                    }
                                }
                            });
                            Object.defineProperty(Texture2D.prototype, 'height', {
                                get: function() {
                                    if (this.image) {
                                        return this.image.height;
                                    }
                                    return this._height;
                                },
                                set: function(value) {
                                    if (this.image) {
                                        console.warn('Texture from image can\'t set height');
                                    } else {
                                        if (this._height !== value) {
                                            this.dirty();
                                        }
                                        this._height = value;
                                    }
                                }
                            });

                            /* harmony default export */
                            var src_Texture2D = (Texture2D);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/Mesh.js




                            /**
                             * @constructor qtek.Mesh
                             * @extends qtek.Renderable
                             */
                            var Mesh = src_Renderable.extend(
                                /** @lends qtek.Mesh# */
                                {
                                    /**
                                     * Used when it is a skinned mesh
                                     * @type {qtek.Skeleton}
                                     */
                                    skeleton: null,
                                    /**
                                     * Joints indices Meshes can share the one skeleton instance and each mesh can use one part of joints. Joints indices indicate the index of joint in the skeleton instance
                                     * @type {number[]}
                                     */
                                    joints: null,

                                    /**
                                     * If store the skin matrices in vertex texture
                                     * @type {bool}
                                     */
                                    useSkinMatricesTexture: false

                                },
                                function() {
                                    if (!this.joints) {
                                        this.joints = [];
                                    }
                                }, {

                                    isSkinnedMesh: function() {
                                        return !!(this.skeleton && this.material.shader.isDefined('vertex', 'SKINNING'));
                                    },

                                    render: function(renderer, shader) {
                                        var _gl = renderer.gl;
                                        shader = shader || this.material.shader;
                                        // Set pose matrices of skinned mesh
                                        if (this.skeleton) {
                                            // TODO Multiple mesh share same skeleton
                                            this.skeleton.update();

                                            var skinMatricesArray = this.skeleton.getSubSkinMatrices(this.__GUID__, this.joints);

                                            if (this.useSkinMatricesTexture) {
                                                var size;
                                                var numJoints = this.joints.length;
                                                if (numJoints > 256) {
                                                    size = 64;
                                                } else if (numJoints > 64) {
                                                    size = 32;
                                                } else if (numJoints > 16) {
                                                    size = 16;
                                                } else {
                                                    size = 8;
                                                }

                                                var texture = this.getSkinMatricesTexture();
                                                texture.width = size;
                                                texture.height = size;

                                                if (!texture.pixels || texture.pixels.length !== size * size * 4) {
                                                    texture.pixels = new Float32Array(size * size * 4);
                                                }
                                                texture.pixels.set(skinMatricesArray);
                                                texture.dirty();

                                                shader.setUniform(_gl, '1f', 'skinMatricesTextureSize', size);
                                            } else {
                                                shader.setUniformOfSemantic(_gl, 'SKIN_MATRIX', skinMatricesArray);
                                            }
                                        }

                                        return src_Renderable.prototype.render.call(this, renderer, shader);
                                    },

                                    getSkinMatricesTexture: function() {
                                        this._skinMatricesTexture = this._skinMatricesTexture || new src_Texture2D({
                                            type: glenum.FLOAT,
                                            minFilter: glenum.NEAREST,
                                            magFilter: glenum.NEAREST,
                                            useMipmap: false,
                                            flipY: false
                                        });

                                        return this._skinMatricesTexture;
                                    }
                                });

                            // Enums
                            Mesh.POINTS = glenum.POINTS;
                            Mesh.LINES = glenum.LINES;
                            Mesh.LINE_LOOP = glenum.LINE_LOOP;
                            Mesh.LINE_STRIP = glenum.LINE_STRIP;
                            Mesh.TRIANGLES = glenum.TRIANGLES;
                            Mesh.TRIANGLE_STRIP = glenum.TRIANGLE_STRIP;
                            Mesh.TRIANGLE_FAN = glenum.TRIANGLE_FAN;

                            Mesh.BACK = glenum.BACK;
                            Mesh.FRONT = glenum.FRONT;
                            Mesh.FRONT_AND_BACK = glenum.FRONT_AND_BACK;
                            Mesh.CW = glenum.CW;
                            Mesh.CCW = glenum.CCW;

                            /* harmony default export */
                            var src_Mesh = (Mesh);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/Geometry.js







                            var Geometry_vec3 = glmatrix_default.a.vec3;
                            var Geometry_mat4 = glmatrix_default.a.mat4;

                            var vec3Create = Geometry_vec3.create;
                            var vec3Add = Geometry_vec3.add;
                            var Geometry_vec3Set = Geometry_vec3.set;

                            function getArrayCtorByType(type) {
                                return ({
                                    'byte': core_vendor.Int8Array,
                                    'ubyte': core_vendor.Uint8Array,
                                    'short': core_vendor.Int16Array,
                                    'ushort': core_vendor.Uint16Array
                                })[type] || core_vendor.Float32Array;
                            }

                            function makeAttrKey(attrName) {
                                return 'attr_' + attrName;
                            }
                            /**
                             * Geometry attribute
                             * @alias qtek.Geometry.Attribute
                             * @constructor
                             */
                            function Attribute(name, type, size, semantic) {
                                /**
                                 * Attribute name
                                 * @type {string}
                                 */
                                this.name = name;
                                /**
                                 * Attribute type
                                 * Possible values:
                                 *  + `'byte'`
                                 *  + `'ubyte'`
                                 *  + `'short'`
                                 *  + `'ushort'`
                                 *  + `'float'` Most commonly used.
                                 * @type {string}
                                 */
                                this.type = type;
                                /**
                                 * Size of attribute component. 1 - 4.
                                 * @type {number}
                                 */
                                this.size = size;
                                /**
                                 * Semantic of this attribute.
                                 * Possible values:
                                 *  + `'POSITION'`
                                 *  + `'NORMAL'`
                                 *  + `'BINORMAL'`
                                 *  + `'TANGENT'`
                                 *  + `'TEXCOORD'`
                                 *  + `'TEXCOORD_0'`
                                 *  + `'TEXCOORD_1'`
                                 *  + `'COLOR'`
                                 *  + `'JOINT'`
                                 *  + `'WEIGHT'`
                                 * 
                                 * In shader, attribute with same semantic will be automatically mapped. For example:
                                 * ```glsl
                                 * attribute vec3 pos: POSITION
                                 * ```
                                 * will use the attribute value with semantic POSITION in geometry, no matter what name it used.
                                 * @type {string}
                                 */
                                this.semantic = semantic || '';

                                /**
                                 * Value of the attribute.
                                 * @type {TypedArray}
                                 */
                                this.value = null;

                                // Init getter setter
                                switch (size) {
                                    case 1:
                                        this.get = function(idx) {
                                            return this.value[idx];
                                        };
                                        this.set = function(idx, value) {
                                            this.value[idx] = value;
                                        };
                                        // Copy from source to target
                                        this.copy = function(target, source) {
                                            this.value[target] = this.value[target];
                                        };
                                        break;
                                    case 2:
                                        this.get = function(idx, out) {
                                            var arr = this.value;
                                            out[0] = arr[idx * 2];
                                            out[1] = arr[idx * 2 + 1];
                                            return out;
                                        };
                                        this.set = function(idx, val) {
                                            var arr = this.value;
                                            arr[idx * 2] = val[0];
                                            arr[idx * 2 + 1] = val[1];
                                        };
                                        this.copy = function(target, source) {
                                            var arr = this.value;
                                            source *= 2;
                                            target *= 2;
                                            arr[target] = arr[source];
                                            arr[target + 1] = arr[source + 1];
                                        };
                                        break;
                                    case 3:
                                        this.get = function(idx, out) {
                                            var idx3 = idx * 3;
                                            var arr = this.value;
                                            out[0] = arr[idx3];
                                            out[1] = arr[idx3 + 1];
                                            out[2] = arr[idx3 + 2];
                                            return out;
                                        };
                                        this.set = function(idx, val) {
                                            var idx3 = idx * 3;
                                            var arr = this.value;
                                            arr[idx3] = val[0];
                                            arr[idx3 + 1] = val[1];
                                            arr[idx3 + 2] = val[2];
                                        };
                                        this.copy = function(target, source) {
                                            var arr = this.value;
                                            source *= 3;
                                            target *= 3;
                                            arr[target] = arr[source];
                                            arr[target + 1] = arr[source + 1];
                                            arr[target + 2] = arr[source + 2];
                                        };
                                        break;
                                    case 4:
                                        this.get = function(idx, out) {
                                            var arr = this.value;
                                            var idx4 = idx * 4;
                                            out[0] = arr[idx4];
                                            out[1] = arr[idx4 + 1];
                                            out[2] = arr[idx4 + 2];
                                            out[3] = arr[idx4 + 3];
                                            return out;
                                        };
                                        this.set = function(idx, val) {
                                            var arr = this.value;
                                            var idx4 = idx * 4;
                                            arr[idx4] = val[0];
                                            arr[idx4 + 1] = val[1];
                                            arr[idx4 + 2] = val[2];
                                            arr[idx4 + 3] = val[3];
                                        };
                                        this.copy = function(target, source) {
                                            var arr = this.value;
                                            source *= 4;
                                            target *= 4;
                                            // copyWithin is extremely slow
                                            arr[target] = arr[source];
                                            arr[target + 1] = arr[source + 1];
                                            arr[target + 2] = arr[source + 2];
                                            arr[target + 3] = arr[source + 3];
                                        };
                                }
                            }

                            /**
                             * Set item value at give index. Second parameter val is number if size is 1
                             * @method
                             * @name qtek.Geometry.Attribute#set
                             * @param {number} idx
                             * @param {number[]|number} val
                             * @example
                             * geometry.getAttribute('position').set(0, [1, 1, 1]);
                             */

                            /**
                             * Get item value at give index. Second parameter out is no need if size is 1
                             * @method
                             * @name qtek.Geometry.Attribute#set
                             * @param {number} idx
                             * @param {number[]} [out]
                             * @example
                             * geometry.getAttribute('position').get(0, out);
                             */

                            /**
                             * Initialize attribute with given vertex count
                             * @param {number} nVertex 
                             */
                            Attribute.prototype.init = function(nVertex) {
                                if (!this.value || this.value.length != nVertex * this.size) {
                                    var ArrayConstructor = getArrayCtorByType(this.type);
                                    this.value = new ArrayConstructor(nVertex * this.size);
                                }
                            };

                            /**
                             * Initialize attribute with given array. Which can be 1 dimensional or 2 dimensional
                             * @param {Array} array
                             * @example
                             *  geometry.getAttribute('position').fromArray(
                             *      [-1, 0, 0, 1, 0, 0, 0, 1, 0]
                             *  );
                             *  geometry.getAttribute('position').fromArray(
                             *      [ [-1, 0, 0], [1, 0, 0], [0, 1, 0] ]
                             *  );
                             */
                            Attribute.prototype.fromArray = function(array) {
                                var ArrayConstructor = getArrayCtorByType(this.type);
                                var value;
                                // Convert 2d array to flat
                                if (array[0] && (array[0].length)) {
                                    var n = 0;
                                    var size = this.size;
                                    value = new ArrayConstructor(array.length * size);
                                    for (var i = 0; i < array.length; i++) {
                                        for (var j = 0; j < size; j++) {
                                            value[n++] = array[i][j];
                                        }
                                    }
                                } else {
                                    value = new ArrayConstructor(array);
                                }
                                this.value = value;
                            };

                            Attribute.prototype.clone = function(copyValue) {
                                var ret = new Attribute(this.name, this.type, this.size, this.semantic);
                                // FIXME
                                if (copyValue) {
                                    console.warn('todo');
                                }
                                return ret;
                            };

                            function AttributeBuffer(name, type, buffer, size, semantic) {
                                this.name = name;
                                this.type = type;
                                this.buffer = buffer;
                                this.size = size;
                                this.semantic = semantic;

                                // To be set in mesh
                                // symbol in the shader
                                this.symbol = '';

                                // Needs remove flag
                                this.needsRemove = false;
                            }

                            function IndicesBuffer(buffer) {
                                this.buffer = buffer;
                                this.count = 0;
                            }

                            /**
                             * @constructor qtek.Geometry
                             * @extends qtek.core.Base
                             */
                            var Geometry = core_Base.extend(function() {
                                    return /** @lends qtek.Geometry# */ {
                                        /**
                                         * Attributes of geometry. Including:
                                         *  + `position`
                                         *  + `texcoord0`
                                         *  + `texcoord1`
                                         *  + `normal`
                                         *  + `tangent`
                                         *  + `color`
                                         *  + `weight`
                                         *  + `joint`
                                         *  + `barycentric`
                                         * @type {Object}
                                         */
                                        attributes: {
                                            position: new Attribute('position', 'float', 3, 'POSITION'),
                                            texcoord0: new Attribute('texcoord0', 'float', 2, 'TEXCOORD_0'),
                                            texcoord1: new Attribute('texcoord1', 'float', 2, 'TEXCOORD_1'),
                                            normal: new Attribute('normal', 'float', 3, 'NORMAL'),
                                            tangent: new Attribute('tangent', 'float', 4, 'TANGENT'),
                                            color: new Attribute('color', 'float', 4, 'COLOR'),
                                            // Skinning attributes
                                            // Each vertex can be bind to 4 bones, because the
                                            // sum of weights is 1, so the weights is stored in vec3 and the last
                                            // can be calculated by 1-w.x-w.y-w.z
                                            weight: new Attribute('weight', 'float', 3, 'WEIGHT'),
                                            joint: new Attribute('joint', 'float', 4, 'JOINT'),
                                            // For wireframe display
                                            // http://codeflow.org/entries/2012/aug/02/easy-wireframe-display-with-barycentric-coordinates/
                                            barycentric: new Attribute('barycentric', 'float', 3, null),
                                        },
                                        /**
                                         * Calculated bounding box of geometry.
                                         * @type {qtek.math.BoundingBox}
                                         */
                                        boundingBox: null,

                                        /**
                                         * Indices of geometry.
                                         * @type {Uint16Array|Uint32Array}
                                         */
                                        indices: null,

                                        /**
                                         * Is vertices data dynamically updated.
                                         * Attributes value can't be changed after first render if dyanmic is false.
                                         * @type {boolean}
                                         */
                                        dynamic: true,

                                        _enabledAttributes: null
                                    };
                                }, function() {
                                    // Use cache
                                    this._cache = new core_Cache();

                                    this._attributeList = Object.keys(this.attributes);
                                },
                                /** @lends qtek.Geometry.prototype */
                                {
                                    /**
                                     * Main attribute will be used to count vertex number
                                     * @type {string}
                                     */
                                    mainAttribute: 'position',
                                    /**
                                     * User defined picking algorithm instead of default
                                     * triangle ray intersection
                                     * x, y are NDC.
                                     * ```typescript
                                     * (x, y, renderer, camera, renderable, out) => boolean
                                     * ```
                                     * @type {?Function}
                                     */
                                    pick: null,

                                    /**
                                     * User defined ray picking algorithm instead of default
                                     * triangle ray intersection
                                     * ```typescript
                                     * (ray: qtek.math.Ray, renderable: qtek.Renderable, out: Array) => boolean
                                     * ```
                                     * @type {?Function}
                                     */
                                    pickByRay: null,

                                    /**
                                     * Update boundingBox of Geometry
                                     */
                                    updateBoundingBox: function() {
                                        var bbox = this.boundingBox;
                                        if (!bbox) {
                                            bbox = this.boundingBox = new math_BoundingBox();
                                        }
                                        var posArr = this.attributes.position.value;
                                        if (posArr && posArr.length) {
                                            var min = bbox.min;
                                            var max = bbox.max;
                                            var minArr = min._array;
                                            var maxArr = max._array;
                                            Geometry_vec3.set(minArr, posArr[0], posArr[1], posArr[2]);
                                            Geometry_vec3.set(maxArr, posArr[0], posArr[1], posArr[2]);
                                            for (var i = 3; i < posArr.length;) {
                                                var x = posArr[i++];
                                                var y = posArr[i++];
                                                var z = posArr[i++];
                                                if (x < minArr[0]) { minArr[0] = x; }
                                                if (y < minArr[1]) { minArr[1] = y; }
                                                if (z < minArr[2]) { minArr[2] = z; }

                                                if (x > maxArr[0]) { maxArr[0] = x; }
                                                if (y > maxArr[1]) { maxArr[1] = y; }
                                                if (z > maxArr[2]) { maxArr[2] = z; }
                                            }
                                            min._dirty = true;
                                            max._dirty = true;
                                        }
                                    },
                                    /**
                                     * Mark attributes and indices in geometry needs to update.
                                     */
                                    dirty: function() {
                                        var enabledAttributes = this.getEnabledAttributes();
                                        for (var i = 0; i < enabledAttributes.length; i++) {
                                            this.dirtyAttribute(enabledAttributes[i]);
                                        }
                                        this.dirtyIndices();
                                        this._enabledAttributes = null;
                                    },
                                    /**
                                     * Mark the indices needs to update.
                                     */
                                    dirtyIndices: function() {
                                        this._cache.dirtyAll('indices');
                                    },
                                    /**
                                     * Mark the attributes needs to update.
                                     * @param {string} [attrName]
                                     */
                                    dirtyAttribute: function(attrName) {
                                        this._cache.dirtyAll(makeAttrKey(attrName));
                                        this._cache.dirtyAll('attributes');
                                    },
                                    /**
                                     * Get indices of triangle at given index.
                                     * @param {number} idx
                                     * @param {Array.<number>} out
                                     * @return {Array.<number>}
                                     */
                                    getTriangleIndices: function(idx, out) {
                                        if (idx < this.triangleCount && idx >= 0) {
                                            if (!out) {
                                                out = vec3Create();
                                            }
                                            var indices = this.indices;
                                            out[0] = indices[idx * 3];
                                            out[1] = indices[idx * 3 + 1];
                                            out[2] = indices[idx * 3 + 2];
                                            return out;
                                        }
                                    },

                                    /**
                                     * Set indices of triangle at given index.
                                     * @param {number} idx
                                     * @param {Array.<number>} arr
                                     */
                                    setTriangleIndices: function(idx, arr) {
                                        var indices = this.indices;
                                        indices[idx * 3] = arr[0];
                                        indices[idx * 3 + 1] = arr[1];
                                        indices[idx * 3 + 2] = arr[2];
                                    },

                                    isUseIndices: function() {
                                        return !!this.indices;
                                    },

                                    /**
                                     * Initialize indices from an array.
                                     * @param {Array} array 
                                     */
                                    initIndicesFromArray: function(array) {
                                        var value;
                                        var ArrayConstructor = this.vertexCount > 0xffff ?
                                            core_vendor.Uint32Array : core_vendor.Uint16Array;
                                        // Convert 2d array to flat
                                        if (array[0] && (array[0].length)) {
                                            var n = 0;
                                            var size = 3;

                                            value = new ArrayConstructor(array.length * size);
                                            for (var i = 0; i < array.length; i++) {
                                                for (var j = 0; j < size; j++) {
                                                    value[n++] = array[i][j];
                                                }
                                            }
                                        } else {
                                            value = new ArrayConstructor(array);
                                        }

                                        this.indices = value;
                                    },
                                    /**
                                     * Create a new attribute
                                     * @param {string} name
                                     * @param {string} type
                                     * @param {number} size
                                     * @param {string} [semantic]
                                     */
                                    createAttribute: function(name, type, size, semantic) {
                                        var attrib = new Attribute(name, type, size, semantic);
                                        if (this.attributes[name]) {
                                            this.removeAttribute(name);
                                        }
                                        this.attributes[name] = attrib;
                                        this._attributeList.push(name);
                                        return attrib;
                                    },
                                    /**
                                     * Remove attribute
                                     * @param {string} name
                                     */
                                    removeAttribute: function(name) {
                                        var attributeList = this._attributeList;
                                        var idx = attributeList.indexOf(name);
                                        if (idx >= 0) {
                                            attributeList.splice(idx, 1);
                                            delete this.attributes[name];
                                            return true;
                                        }
                                        return false;
                                    },

                                    /**
                                     * Get attribute
                                     * @param {string} name
                                     * @return {qtek.Geometry.Attribute}
                                     */
                                    getAttribute: function(name) {
                                        return this.attribute[name];
                                    },

                                    /**
                                     * Get enabled attributes name list
                                     * Attribute which has the same vertex number with position is treated as a enabled attribute
                                     * @return {string[]}
                                     */
                                    getEnabledAttributes: function() {
                                        var enabledAttributes = this._enabledAttributes;
                                        var attributeList = this._attributeList;
                                        // Cache
                                        if (enabledAttributes) {
                                            return enabledAttributes;
                                        }

                                        var result = [];
                                        var nVertex = this.vertexCount;

                                        for (var i = 0; i < attributeList.length; i++) {
                                            var name = attributeList[i];
                                            var attrib = this.attributes[name];
                                            if (attrib.value) {
                                                if (attrib.value.length === nVertex * attrib.size) {
                                                    result.push(name);
                                                }
                                            }
                                        }

                                        this._enabledAttributes = result;

                                        return result;
                                    },

                                    getBufferChunks: function(renderer) {
                                        var cache = this._cache;
                                        cache.use(renderer.__GUID__);
                                        var isAttributesDirty = cache.isDirty('attributes');
                                        var isIndicesDirty = cache.isDirty('indices');
                                        if (isAttributesDirty || isIndicesDirty) {
                                            this._updateBuffer(renderer.gl, isAttributesDirty, isIndicesDirty);
                                            var enabledAttributes = this.getEnabledAttributes();
                                            for (var i = 0; i < enabledAttributes.length; i++) {
                                                cache.fresh(makeAttrKey(enabledAttributes[i]));
                                            }
                                            cache.fresh('attributes');
                                            cache.fresh('indices');
                                        }
                                        return cache.get('chunks');
                                    },

                                    _updateBuffer: function(_gl, isAttributesDirty, isIndicesDirty) {
                                        var cache = this._cache;
                                        var chunks = cache.get('chunks');
                                        var firstUpdate = false;
                                        if (!chunks) {
                                            chunks = [];
                                            // Intialize
                                            chunks[0] = {
                                                attributeBuffers: [],
                                                indicesBuffer: null
                                            };
                                            cache.put('chunks', chunks);
                                            firstUpdate = true;
                                        }

                                        var chunk = chunks[0];
                                        var attributeBuffers = chunk.attributeBuffers;
                                        var indicesBuffer = chunk.indicesBuffer;

                                        if (isAttributesDirty || firstUpdate) {
                                            var attributeList = this.getEnabledAttributes();

                                            var attributeBufferMap = {};
                                            if (!firstUpdate) {
                                                for (var i = 0; i < attributeBuffers.length; i++) {
                                                    attributeBufferMap[attributeBuffers[i].name] = attributeBuffers[i];
                                                }
                                            }
                                            // FIXME If some attributes removed
                                            for (var k = 0; k < attributeList.length; k++) {
                                                var name = attributeList[k];
                                                var attribute = this.attributes[name];

                                                var bufferInfo;

                                                if (!firstUpdate) {
                                                    bufferInfo = attributeBufferMap[name];
                                                }
                                                var buffer;
                                                if (bufferInfo) {
                                                    buffer = bufferInfo.buffer;
                                                } else {
                                                    buffer = _gl.createBuffer();
                                                }
                                                if (cache.isDirty(makeAttrKey(name))) {
                                                    // Only update when they are dirty.
                                                    // TODO: Use BufferSubData?
                                                    _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);
                                                    _gl.bufferData(_gl.ARRAY_BUFFER, attribute.value, this.dynamic ? glenum.DYNAMIC_DRAW : glenum.STATIC_DRAW);
                                                }

                                                attributeBuffers[k] = new AttributeBuffer(name, attribute.type, buffer, attribute.size, attribute.semantic);
                                            }
                                            // Remove unused attributes buffers.
                                            // PENDING
                                            for (var i = k; i < attributeBuffers.length; i++) {
                                                _gl.deleteBuffer(attributeBuffers[i].buffer);
                                            }
                                            attributeBuffers.length = k;

                                        }

                                        if (this.isUseIndices() && (isIndicesDirty || firstUpdate)) {
                                            if (!indicesBuffer) {
                                                indicesBuffer = new IndicesBuffer(_gl.createBuffer());
                                                chunk.indicesBuffer = indicesBuffer;
                                            }
                                            indicesBuffer.count = this.indices.length;
                                            _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, indicesBuffer.buffer);
                                            _gl.bufferData(_gl.ELEMENT_ARRAY_BUFFER, this.indices, this.dynamic ? glenum.DYNAMIC_DRAW : glenum.STATIC_DRAW);
                                        }
                                    },

                                    /**
                                     * Generate normals per vertex.
                                     */
                                    generateVertexNormals: function() {
                                        if (!this.vertexCount) {
                                            return;
                                        }

                                        var indices = this.indices;
                                        var attributes = this.attributes;
                                        var positions = attributes.position.value;
                                        var normals = attributes.normal.value;

                                        if (!normals || normals.length !== positions.length) {
                                            normals = attributes.normal.value = new core_vendor.Float32Array(positions.length);
                                        } else {
                                            // Reset
                                            for (var i = 0; i < normals.length; i++) {
                                                normals[i] = 0;
                                            }
                                        }

                                        var p1 = vec3Create();
                                        var p2 = vec3Create();
                                        var p3 = vec3Create();

                                        var v21 = vec3Create();
                                        var v32 = vec3Create();

                                        var n = vec3Create();

                                        var len = indices ? indices.length : this.vertexCount;
                                        var i1, i2, i3;
                                        for (var f = 0; f < len;) {
                                            if (indices) {
                                                i1 = indices[f++];
                                                i2 = indices[f++];
                                                i3 = indices[f++];
                                            } else {
                                                i1 = f++;
                                                i2 = f++;
                                                i3 = f++;
                                            }

                                            Geometry_vec3Set(p1, positions[i1 * 3], positions[i1 * 3 + 1], positions[i1 * 3 + 2]);
                                            Geometry_vec3Set(p2, positions[i2 * 3], positions[i2 * 3 + 1], positions[i2 * 3 + 2]);
                                            Geometry_vec3Set(p3, positions[i3 * 3], positions[i3 * 3 + 1], positions[i3 * 3 + 2]);

                                            Geometry_vec3.sub(v21, p1, p2);
                                            Geometry_vec3.sub(v32, p2, p3);
                                            Geometry_vec3.cross(n, v21, v32);
                                            // Already be weighted by the triangle area
                                            for (var i = 0; i < 3; i++) {
                                                normals[i1 * 3 + i] = normals[i1 * 3 + i] + n[i];
                                                normals[i2 * 3 + i] = normals[i2 * 3 + i] + n[i];
                                                normals[i3 * 3 + i] = normals[i3 * 3 + i] + n[i];
                                            }
                                        }

                                        for (var i = 0; i < normals.length;) {
                                            Geometry_vec3Set(n, normals[i], normals[i + 1], normals[i + 2]);
                                            Geometry_vec3.normalize(n, n);
                                            normals[i++] = n[0];
                                            normals[i++] = n[1];
                                            normals[i++] = n[2];
                                        }
                                        this.dirty();
                                    },

                                    /**
                                     * Generate normals per face.
                                     */
                                    generateFaceNormals: function() {
                                        if (!this.vertexCount) {
                                            return;
                                        }

                                        if (!this.isUniqueVertex()) {
                                            this.generateUniqueVertex();
                                        }

                                        var indices = this.indices;
                                        var attributes = this.attributes;
                                        var positions = attributes.position.value;
                                        var normals = attributes.normal.value;

                                        var p1 = vec3Create();
                                        var p2 = vec3Create();
                                        var p3 = vec3Create();

                                        var v21 = vec3Create();
                                        var v32 = vec3Create();
                                        var n = vec3Create();

                                        if (!normals) {
                                            normals = attributes.normal.value = new Float32Array(positions.length);
                                        }
                                        var len = indices ? indices.length : this.vertexCount;
                                        var i1, i2, i3;
                                        for (var f = 0; f < len;) {
                                            if (indices) {
                                                i1 = indices[f++];
                                                i2 = indices[f++];
                                                i3 = indices[f++];
                                            } else {
                                                i1 = f++;
                                                i2 = f++;
                                                i3 = f++;
                                            }

                                            Geometry_vec3Set(p1, positions[i1 * 3], positions[i1 * 3 + 1], positions[i1 * 3 + 2]);
                                            Geometry_vec3Set(p2, positions[i2 * 3], positions[i2 * 3 + 1], positions[i2 * 3 + 2]);
                                            Geometry_vec3Set(p3, positions[i3 * 3], positions[i3 * 3 + 1], positions[i3 * 3 + 2]);

                                            Geometry_vec3.sub(v21, p1, p2);
                                            Geometry_vec3.sub(v32, p2, p3);
                                            Geometry_vec3.cross(n, v21, v32);

                                            Geometry_vec3.normalize(n, n);

                                            for (var i = 0; i < 3; i++) {
                                                normals[i1 * 3 + i] = n[i];
                                                normals[i2 * 3 + i] = n[i];
                                                normals[i3 * 3 + i] = n[i];
                                            }
                                        }
                                        this.dirty();
                                    },

                                    /**
                                     * Generate tangents attributes.
                                     */
                                    generateTangents: function() {
                                        if (!this.vertexCount) {
                                            return;
                                        }

                                        var nVertex = this.vertexCount;
                                        var attributes = this.attributes;
                                        if (!attributes.tangent.value) {
                                            attributes.tangent.value = new Float32Array(nVertex * 4);
                                        }
                                        var texcoords = attributes.texcoord0.value;
                                        var positions = attributes.position.value;
                                        var tangents = attributes.tangent.value;
                                        var normals = attributes.normal.value;

                                        if (!texcoords) {
                                            console.warn('Geometry without texcoords can\'t generate tangents.');
                                            return;
                                        }

                                        var tan1 = [];
                                        var tan2 = [];
                                        for (var i = 0; i < nVertex; i++) {
                                            tan1[i] = [0.0, 0.0, 0.0];
                                            tan2[i] = [0.0, 0.0, 0.0];
                                        }

                                        var sdir = [0.0, 0.0, 0.0];
                                        var tdir = [0.0, 0.0, 0.0];
                                        var indices = this.indices;

                                        var len = indices ? indices.length : this.vertexCount;
                                        var i1, i2, i3;
                                        for (var i = 0; i < len;) {
                                            if (indices) {
                                                i1 = indices[i++];
                                                i2 = indices[i++];
                                                i3 = indices[i++];
                                            } else {
                                                i1 = i++;
                                                i2 = i++;
                                                i3 = i++;
                                            }

                                            var st1s = texcoords[i1 * 2],
                                                st2s = texcoords[i2 * 2],
                                                st3s = texcoords[i3 * 2],
                                                st1t = texcoords[i1 * 2 + 1],
                                                st2t = texcoords[i2 * 2 + 1],
                                                st3t = texcoords[i3 * 2 + 1],

                                                p1x = positions[i1 * 3],
                                                p2x = positions[i2 * 3],
                                                p3x = positions[i3 * 3],
                                                p1y = positions[i1 * 3 + 1],
                                                p2y = positions[i2 * 3 + 1],
                                                p3y = positions[i3 * 3 + 1],
                                                p1z = positions[i1 * 3 + 2],
                                                p2z = positions[i2 * 3 + 2],
                                                p3z = positions[i3 * 3 + 2];

                                            var x1 = p2x - p1x,
                                                x2 = p3x - p1x,
                                                y1 = p2y - p1y,
                                                y2 = p3y - p1y,
                                                z1 = p2z - p1z,
                                                z2 = p3z - p1z;

                                            var s1 = st2s - st1s,
                                                s2 = st3s - st1s,
                                                t1 = st2t - st1t,
                                                t2 = st3t - st1t;

                                            var r = 1.0 / (s1 * t2 - t1 * s2);
                                            sdir[0] = (t2 * x1 - t1 * x2) * r;
                                            sdir[1] = (t2 * y1 - t1 * y2) * r;
                                            sdir[2] = (t2 * z1 - t1 * z2) * r;

                                            tdir[0] = (s1 * x2 - s2 * x1) * r;
                                            tdir[1] = (s1 * y2 - s2 * y1) * r;
                                            tdir[2] = (s1 * z2 - s2 * z1) * r;

                                            vec3Add(tan1[i1], tan1[i1], sdir);
                                            vec3Add(tan1[i2], tan1[i2], sdir);
                                            vec3Add(tan1[i3], tan1[i3], sdir);
                                            vec3Add(tan2[i1], tan2[i1], tdir);
                                            vec3Add(tan2[i2], tan2[i2], tdir);
                                            vec3Add(tan2[i3], tan2[i3], tdir);
                                        }
                                        var tmp = vec3Create();
                                        var nCrossT = vec3Create();
                                        var n = vec3Create();
                                        for (var i = 0; i < nVertex; i++) {
                                            n[0] = normals[i * 3];
                                            n[1] = normals[i * 3 + 1];
                                            n[2] = normals[i * 3 + 2];
                                            var t = tan1[i];

                                            // Gram-Schmidt orthogonalize
                                            Geometry_vec3.scale(tmp, n, Geometry_vec3.dot(n, t));
                                            Geometry_vec3.sub(tmp, t, tmp);
                                            Geometry_vec3.normalize(tmp, tmp);
                                            // Calculate handedness.
                                            Geometry_vec3.cross(nCrossT, n, t);
                                            tangents[i * 4] = tmp[0];
                                            tangents[i * 4 + 1] = tmp[1];
                                            tangents[i * 4 + 2] = tmp[2];
                                            // PENDING can config ?
                                            tangents[i * 4 + 3] = Geometry_vec3.dot(nCrossT, tan2[i]) < 0.0 ? -1.0 : 1.0;
                                        }
                                        this.dirty();
                                    },

                                    /**
                                     * If vertices are not shared by different indices.
                                     */
                                    isUniqueVertex: function() {
                                        if (this.isUseIndices()) {
                                            return this.vertexCount === this.indices.length;
                                        } else {
                                            return true;
                                        }
                                    },
                                    /**
                                     * Create a unique vertex for each index.
                                     */
                                    generateUniqueVertex: function() {
                                        if (!this.vertexCount || !this.indices) {
                                            return;
                                        }

                                        if (this.indices.length > 0xffff) {
                                            this.indices = new core_vendor.Uint32Array(this.indices);
                                        }

                                        var attributes = this.attributes;
                                        var indices = this.indices;

                                        var attributeNameList = this.getEnabledAttributes();

                                        var oldAttrValues = {};
                                        for (var a = 0; a < attributeNameList.length; a++) {
                                            var name = attributeNameList[a];
                                            oldAttrValues[name] = attributes[name].value;
                                            attributes[name].init(this.indices.length);
                                        }

                                        var cursor = 0;
                                        for (var i = 0; i < indices.length; i++) {
                                            var ii = indices[i];
                                            for (var a = 0; a < attributeNameList.length; a++) {
                                                var name = attributeNameList[a];
                                                var array = attributes[name].value;
                                                var size = attributes[name].size;

                                                for (var k = 0; k < size; k++) {
                                                    array[cursor * size + k] = oldAttrValues[name][ii * size + k];
                                                }
                                            }
                                            indices[i] = cursor;
                                            cursor++;
                                        }

                                        this.dirty();
                                    },

                                    /**
                                     * Generate barycentric coordinates for wireframe draw.
                                     */
                                    generateBarycentric: function() {
                                        if (!this.vertexCount) {
                                            return;
                                        }

                                        if (!this.isUniqueVertex()) {
                                            this.generateUniqueVertex();
                                        }

                                        var attributes = this.attributes;
                                        var array = attributes.barycentric.value;
                                        var indices = this.indices;
                                        // Already existed;
                                        if (array && array.length === indices.length * 3) {
                                            return;
                                        }
                                        array = attributes.barycentric.value = new Float32Array(indices.length * 3);

                                        for (var i = 0; i < (indices ? indices.length : this.vertexCount / 3);) {
                                            for (var j = 0; j < 3; j++) {
                                                var ii = indices ? indices[i++] : (i * 3 + j);
                                                array[ii * 3 + j] = 1;
                                            }
                                        }
                                        this.dirty();
                                    },

                                    /**
                                     * Apply transform to geometry attributes.
                                     * @param {qtek.math.Matrix4} matrix
                                     */
                                    applyTransform: function(matrix) {

                                        var attributes = this.attributes;
                                        var positions = attributes.position.value;
                                        var normals = attributes.normal.value;
                                        var tangents = attributes.tangent.value;

                                        matrix = matrix._array;
                                        // Normal Matrix
                                        var inverseTransposeMatrix = Geometry_mat4.create();
                                        Geometry_mat4.invert(inverseTransposeMatrix, matrix);
                                        Geometry_mat4.transpose(inverseTransposeMatrix, inverseTransposeMatrix);

                                        var vec3TransformMat4 = Geometry_vec3.transformMat4;
                                        var vec3ForEach = Geometry_vec3.forEach;
                                        vec3ForEach(positions, 3, 0, null, vec3TransformMat4, matrix);
                                        if (normals) {
                                            vec3ForEach(normals, 3, 0, null, vec3TransformMat4, inverseTransposeMatrix);
                                        }
                                        if (tangents) {
                                            vec3ForEach(tangents, 4, 0, null, vec3TransformMat4, inverseTransposeMatrix);
                                        }

                                        if (this.boundingBox) {
                                            this.updateBoundingBox();
                                        }
                                    },
                                    /**
                                     * Dispose geometry data in GL context.
                                     * @param {qtek.Renderer} renderer
                                     */
                                    dispose: function(renderer) {

                                        var cache = this._cache;

                                        cache.use(renderer.__GUID__);
                                        var chunks = cache.get('chunks');
                                        if (chunks) {
                                            for (var c = 0; c < chunks.length; c++) {
                                                var chunk = chunks[c];

                                                for (var k = 0; k < chunk.attributeBuffers.length; k++) {
                                                    var attribs = chunk.attributeBuffers[k];
                                                    renderer.gl.deleteBuffer(attribs.buffer);
                                                }
                                            }
                                        }
                                        cache.deleteContext(renderer.__GUID__);
                                    }

                                });

                            if (Object.defineProperty) {
                                /**
                                 * @name qtek.Geometry#vertexCount
                                 * @type {number}
                                 * @readOnly
                                 */
                                Object.defineProperty(Geometry.prototype, 'vertexCount', {

                                    enumerable: false,

                                    get: function() {
                                        var mainAttribute = this.attributes[this.mainAttribute];
                                        if (!mainAttribute || !mainAttribute.value) {
                                            return 0;
                                        }
                                        return mainAttribute.value.length / mainAttribute.size;
                                    }
                                });
                                /**
                                 * @name qtek.Geometry#triangleCount
                                 * @type {number}
                                 * @readOnly
                                 */
                                Object.defineProperty(Geometry.prototype, 'triangleCount', {

                                    enumerable: false,

                                    get: function() {
                                        var indices = this.indices;
                                        if (!indices) {
                                            return 0;
                                        } else {
                                            return indices.length / 3;
                                        }
                                    }
                                });
                            }

                            Geometry.STATIC_DRAW = glenum.STATIC_DRAW;
                            Geometry.DYNAMIC_DRAW = glenum.DYNAMIC_DRAW;
                            Geometry.STREAM_DRAW = glenum.STREAM_DRAW;

                            Geometry.AttributeBuffer = AttributeBuffer;
                            Geometry.IndicesBuffer = IndicesBuffer;

                            Geometry.Attribute = Attribute;

                            /* harmony default export */
                            var src_Geometry = (Geometry);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/Light.js


                            /**
                             * @constructor qtek.Light
                             * @extends qtek.Node
                             */
                            var Light = src_Node.extend(function() {
                                    return /** @lends qtek.Light# */ {
                                        /**
                                         * Light RGB color
                                         * @type {number[]}
                                         */
                                        color: [1, 1, 1],

                                        /**
                                         * Light intensity
                                         * @type {number}
                                         */
                                        intensity: 1.0,

                                        // Config for shadow map
                                        /**
                                         * If light cast shadow
                                         * @type {boolean}
                                         */
                                        castShadow: true,

                                        /**
                                         * Shadow map size
                                         * @type {number}
                                         */
                                        shadowResolution: 512,

                                        /**
                                         * Light group, shader with same `lightGroup` will be affected
                                         *
                                         * Only useful in forward rendering
                                         * @type {number}
                                         */
                                        group: 0
                                    };
                                },
                                /** @lends qtek.Light.prototype. */
                                {
                                    /**
                                     * Light type
                                     * @type {string}
                                     * @memberOf qtek.Light#
                                     */
                                    type: '',

                                    /**
                                     * @return {qtek.Light}
                                     * @memberOf qtek.Light.prototype
                                     */
                                    clone: function() {
                                        var light = src_Node.prototype.clone.call(this);
                                        light.color = Array.prototype.slice.call(this.color);
                                        light.intensity = this.intensity;
                                        light.castShadow = this.castShadow;
                                        light.shadowResolution = this.shadowResolution;

                                        return light;
                                    }
                                });

                            /* harmony default export */
                            var src_Light = (Light);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/Scene.js




                            /**
                             * @constructor qtek.Scene
                             * @extends qtek.Node
                             */
                            var Scene = src_Node.extend(function() {
                                    return /** @lends qtek.Scene# */ {
                                        /**
                                         * Global material of scene
                                         * @type {qtek.Material}
                                         */
                                        material: null,

                                        /**
                                         * @type {boolean}
                                         */
                                        autoUpdate: true,

                                        /**
                                         * Opaque renderable list, it will be updated automatically
                                         * @type {qtek.Renderable[]}
                                         * @readonly
                                         */
                                        opaqueQueue: [],

                                        /**
                                         * Opaque renderable list, it will be updated automatically
                                         * @type {qtek.Renderable[]}
                                         * @readonly
                                         */
                                        transparentQueue: [],

                                        lights: [],


                                        /**
                                         * Scene bounding box in view space.
                                         * Used when camera needs to adujst the near and far plane automatically
                                         * so that the view frustum contains the visible objects as tightly as possible.
                                         * Notice:
                                         *  It is updated after rendering (in the step of frustum culling passingly). So may be not so accurate, but saves a lot of calculation
                                         *
                                         * @type {qtek.math.BoundingBox}
                                         */
                                        viewBoundingBoxLastFrame: new math_BoundingBox(),

                                        // Properties to save the light information in the scene
                                        // Will be set in the render function
                                        _lightUniforms: {},

                                        _lightNumber: {
                                            // groupId: {
                                            // POINT_LIGHT: 0,
                                            // DIRECTIONAL_LIGHT: 0,
                                            // SPOT_LIGHT: 0,
                                            // AMBIENT_LIGHT: 0,
                                            // AMBIENT_SH_LIGHT: 0
                                            // }
                                        },

                                        _opaqueObjectCount: 0,
                                        _transparentObjectCount: 0,

                                        _nodeRepository: {},

                                    };
                                }, function() {
                                    this._scene = this;
                                },
                                /** @lends qtek.Scene.prototype. */
                                {
                                    /**
                                     * Add node to scene
                                     * @param {Node} node
                                     */
                                    addToScene: function(node) {
                                        if (node.name) {
                                            this._nodeRepository[node.name] = node;
                                        }
                                    },

                                    /**
                                     * Remove node from scene
                                     * @param {Node} node
                                     */
                                    removeFromScene: function(node) {
                                        if (node.name) {
                                            delete this._nodeRepository[node.name];
                                        }
                                    },

                                    /**
                                     * Get node by name
                                     * @param  {string} name
                                     * @return {Node}
                                     * @DEPRECATED
                                     */
                                    getNode: function(name) {
                                        return this._nodeRepository[name];
                                    },

                                    /**
                                     * Clone a new scene node recursively, including material, skeleton.
                                     * Shader and geometry instances will not been cloned
                                     * @param  {qtek.Node} node
                                     * @return {qtek.Node}
                                     */
                                    cloneNode: function(node) {
                                        var newNode = node.clone();
                                        var materialsMap = {};

                                        var cloneSkeleton = function(current, currentNew) {
                                            if (current.skeleton) {
                                                currentNew.skeleton = current.skeleton.clone(node, newNode);
                                                currentNew.joints = current.joints.slice();
                                            }
                                            if (current.material) {
                                                materialsMap[current.material.__GUID__] = {
                                                    oldMat: current.material
                                                };
                                            }
                                            for (var i = 0; i < current._children.length; i++) {
                                                cloneSkeleton(current._children[i], currentNew._children[i]);
                                            }
                                        };

                                        cloneSkeleton(node, newNode);

                                        for (var guid in materialsMap) {
                                            materialsMap[guid].newMat = materialsMap[guid].oldMat.clone();
                                        }

                                        // Replace material
                                        newNode.traverse(function(current) {
                                            if (current.material) {
                                                current.material = materialsMap[current.material.__GUID__].newMat;
                                            }
                                        });

                                        return newNode;
                                    },


                                    /**
                                     * Scene update
                                     * @param  {boolean} force
                                     * @param  {boolean} notUpdateLights
                                     *         Useful in deferred pipeline
                                     */
                                    update: function(force, notUpdateLights) {
                                        if (!(this.autoUpdate || force)) {
                                            return;
                                        }
                                        src_Node.prototype.update.call(this, force);

                                        var lights = this.lights;
                                        var sceneMaterialTransparent = this.material && this.material.transparent;

                                        this._opaqueObjectCount = 0;
                                        this._transparentObjectCount = 0;

                                        lights.length = 0;

                                        this._updateRenderQueue(this, sceneMaterialTransparent);

                                        this.opaqueQueue.length = this._opaqueObjectCount;
                                        this.transparentQueue.length = this._transparentObjectCount;

                                        // reset
                                        if (!notUpdateLights) {
                                            var lightNumber = this._lightNumber;
                                            // Reset light numbers
                                            for (var group in lightNumber) {
                                                for (var type in lightNumber[group]) {
                                                    lightNumber[group][type] = 0;
                                                }
                                            }
                                            for (var i = 0; i < lights.length; i++) {
                                                var light = lights[i];
                                                var group = light.group;
                                                if (!lightNumber[group]) {
                                                    lightNumber[group] = {};
                                                }
                                                // User can use any type of light
                                                lightNumber[group][light.type] = lightNumber[group][light.type] || 0;
                                                lightNumber[group][light.type]++;
                                            }
                                            // PENDING Remove unused group?

                                            this._updateLightUniforms();
                                        }
                                    },

                                    // Traverse the scene and add the renderable
                                    // object to the render queue
                                    _updateRenderQueue: function(parent, sceneMaterialTransparent) {
                                        if (parent.invisible) {
                                            return;
                                        }

                                        for (var i = 0; i < parent._children.length; i++) {
                                            var child = parent._children[i];

                                            if (child instanceof src_Light) {
                                                this.lights.push(child);
                                            }
                                            if (child.isRenderable()) {
                                                if (child.material.transparent || sceneMaterialTransparent) {
                                                    this.transparentQueue[this._transparentObjectCount++] = child;
                                                } else {
                                                    this.opaqueQueue[this._opaqueObjectCount++] = child;
                                                }
                                            }
                                            if (child._children.length > 0) {
                                                this._updateRenderQueue(child);
                                            }
                                        }
                                    },

                                    _updateLightUniforms: function() {
                                        var lights = this.lights;
                                        // Put the light cast shadow before the light not cast shadow
                                        lights.sort(lightSortFunc);

                                        var lightUniforms = this._lightUniforms;
                                        for (var group in lightUniforms) {
                                            for (var symbol in lightUniforms[group]) {
                                                lightUniforms[group][symbol].value.length = 0;
                                            }
                                        }
                                        for (var i = 0; i < lights.length; i++) {

                                            var light = lights[i];
                                            var group = light.group;

                                            for (var symbol in light.uniformTemplates) {

                                                var uniformTpl = light.uniformTemplates[symbol];
                                                if (!lightUniforms[group]) {
                                                    lightUniforms[group] = {};
                                                }
                                                if (!lightUniforms[group][symbol]) {
                                                    lightUniforms[group][symbol] = {
                                                        type: '',
                                                        value: []
                                                    };
                                                }
                                                var value = uniformTpl.value(light);
                                                var lu = lightUniforms[group][symbol];
                                                lu.type = uniformTpl.type + 'v';
                                                switch (uniformTpl.type) {
                                                    case '1i':
                                                    case '1f':
                                                    case 't':
                                                        lu.value.push(value);
                                                        break;
                                                    case '2f':
                                                    case '3f':
                                                    case '4f':
                                                        for (var j = 0; j < value.length; j++) {
                                                            lu.value.push(value[j]);
                                                        }
                                                        break;
                                                    default:
                                                        console.error('Unkown light uniform type ' + uniformTpl.type);
                                                }
                                            }
                                        }
                                    },

                                    /**
                                     * Determine if light group of the shader is different from scene's
                                     * Used to determine whether to update shader and scene's uniforms in Renderer.render
                                     * @param {Shader} shader
                                     * @returns {Boolean}
                                     */
                                    isShaderLightNumberChanged: function(shader) {
                                        var group = shader.lightGroup;
                                        // PENDING Performance
                                        for (var type in this._lightNumber[group]) {
                                            if (this._lightNumber[group][type] !== shader.lightNumber[type]) {
                                                return true;
                                            }
                                        }
                                        for (var type in shader.lightNumber) {
                                            if (this._lightNumber[group][type] !== shader.lightNumber[type]) {
                                                return true;
                                            }
                                        }
                                        return false;
                                    },

                                    /**
                                     * Set shader's light group with scene's
                                     * @param {Shader} shader
                                     */
                                    setShaderLightNumber: function(shader) {
                                        var group = shader.lightGroup;
                                        for (var type in this._lightNumber[group]) {
                                            shader.lightNumber[type] = this._lightNumber[group][type];
                                        }
                                        shader.dirty();
                                    },

                                    setLightUniforms: function(shader, renderer) {
                                        var group = shader.lightGroup;
                                        for (var symbol in this._lightUniforms[group]) {
                                            var lu = this._lightUniforms[group][symbol];
                                            if (lu.type === 'tv') {
                                                for (var i = 0; i < lu.value.length; i++) {
                                                    var texture = lu.value[i];
                                                    var slot = shader.currentTextureSlot();
                                                    var result = shader.setUniform(renderer.gl, '1i', symbol, slot);
                                                    if (result) {
                                                        shader.takeCurrentTextureSlot(renderer, texture);
                                                    }
                                                }
                                            } else {
                                                shader.setUniform(renderer.gl, lu.type, symbol, lu.value);
                                            }
                                        }
                                    },

                                    /**
                                     * Dispose self, clear all the scene objects
                                     * But resources of gl like texuture, shader will not be disposed.
                                     * Mostly you should use disposeScene method in Renderer to do dispose.
                                     */
                                    dispose: function() {
                                        this.material = null;
                                        this.opaqueQueue = [];
                                        this.transparentQueue = [];

                                        this.lights = [];

                                        this._lightUniforms = {};

                                        this._lightNumber = {};
                                        this._nodeRepository = {};
                                    }
                                });

                            function lightSortFunc(a, b) {
                                if (b.castShadow && !a.castShadow) {
                                    return true;
                                }
                            }

                            /* harmony default export */
                            var src_Scene = (Scene);

                            // EXTERNAL MODULE: ./node_modules/zrender/lib/core/LRU.js
                            var LRU = __webpack_require__(6);
                            var LRU_default = /*#__PURE__*/ __webpack_require__.n(LRU);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/TextureCube.js




                            var TextureCube_isPowerOfTwo = math_util.isPowerOfTwo;

                            var targetList = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];

                            /**
                             * @constructor qtek.TextureCube
                             * @extends qtek.Texture
                             *
                             * @example
                             *     ...
                             *     var mat = new qtek.Material({
                             *         shader: qtek.shader.library.get('qtek.phong', 'environmentMap')
                             *     });
                             *     var envMap = new qtek.TextureCube();
                             *     envMap.load({
                             *         'px': 'assets/textures/sky/px.jpg',
                             *         'nx': 'assets/textures/sky/nx.jpg'
                             *         'py': 'assets/textures/sky/py.jpg'
                             *         'ny': 'assets/textures/sky/ny.jpg'
                             *         'pz': 'assets/textures/sky/pz.jpg'
                             *         'nz': 'assets/textures/sky/nz.jpg'
                             *     });
                             *     mat.set('environmentMap', envMap);
                             *     ...
                             *     envMap.success(function () {
                             *         // Wait for the sky texture loaded
                             *         animation.on('frame', function (frameTime) {
                             *             renderer.render(scene, camera);
                             *         });
                             *     });
                             */
                            var TextureCube = src_Texture.extend(function() {
                                return /** @lends qtek.TextureCube# */ {
                                    /**
                                     * @type {Object}
                                     * @property {?HTMLImageElement|HTMLCanvasElemnet} px
                                     * @property {?HTMLImageElement|HTMLCanvasElemnet} nx
                                     * @property {?HTMLImageElement|HTMLCanvasElemnet} py
                                     * @property {?HTMLImageElement|HTMLCanvasElemnet} ny
                                     * @property {?HTMLImageElement|HTMLCanvasElemnet} pz
                                     * @property {?HTMLImageElement|HTMLCanvasElemnet} nz
                                     */
                                    image: {
                                        px: null,
                                        nx: null,
                                        py: null,
                                        ny: null,
                                        pz: null,
                                        nz: null
                                    },
                                    /**
                                     * Pixels data of each side. Will be ignored if images are set.
                                     * @type {Object}
                                     * @property {?Uint8Array} px
                                     * @property {?Uint8Array} nx
                                     * @property {?Uint8Array} py
                                     * @property {?Uint8Array} ny
                                     * @property {?Uint8Array} pz
                                     * @property {?Uint8Array} nz
                                     */
                                    pixels: {
                                        px: null,
                                        nx: null,
                                        py: null,
                                        ny: null,
                                        pz: null,
                                        nz: null
                                    },

                                    /**
                                     * @type {Array.<Object>}
                                     */
                                    mipmaps: []
                                };
                            }, {
                                update: function(renderer) {
                                    var _gl = renderer.gl;
                                    _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, this._cache.get('webgl_texture'));

                                    this.updateCommon(renderer);

                                    var glFormat = this.format;
                                    var glType = this.type;

                                    _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_WRAP_S, this.getAvailableWrapS());
                                    _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_WRAP_T, this.getAvailableWrapT());

                                    _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_MAG_FILTER, this.getAvailableMagFilter());
                                    _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_MIN_FILTER, this.getAvailableMinFilter());

                                    var anisotropicExt = renderer.getGLExtension('EXT_texture_filter_anisotropic');
                                    if (anisotropicExt && this.anisotropic > 1) {
                                        _gl.texParameterf(_gl.TEXTURE_CUBE_MAP, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, this.anisotropic);
                                    }

                                    // Fallback to float type if browser don't have half float extension
                                    if (glType === 36193) {
                                        var halfFloatExt = renderer.getGLExtension('OES_texture_half_float');
                                        if (!halfFloatExt) {
                                            glType = glenum.FLOAT;
                                        }
                                    }

                                    if (this.mipmaps.length) {
                                        var width = this.width;
                                        var height = this.height;
                                        for (var i = 0; i < this.mipmaps.length; i++) {
                                            var mipmap = this.mipmaps[i];
                                            this._updateTextureData(_gl, mipmap, i, width, height, glFormat, glType);
                                            width /= 2;
                                            height /= 2;
                                        }
                                    } else {
                                        this._updateTextureData(_gl, this, 0, this.width, this.height, glFormat, glType);

                                        if (!this.NPOT && this.useMipmap) {
                                            _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);
                                        }
                                    }

                                    _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, null);
                                },

                                _updateTextureData: function(_gl, data, level, width, height, glFormat, glType) {
                                    for (var i = 0; i < 6; i++) {
                                        var target = targetList[i];
                                        var img = data.image && data.image[target];
                                        if (img) {
                                            _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level, glFormat, glFormat, glType, img);
                                        } else {
                                            _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level, glFormat, width, height, 0, glFormat, glType, data.pixels && data.pixels[target]);
                                        }
                                    }
                                },

                                /**
                                 * @param  {qtek.Renderer} renderer
                                 * @memberOf qtek.TextureCube.prototype
                                 */
                                generateMipmap: function(renderer) {
                                    var _gl = renderer.gl;
                                    if (this.useMipmap && !this.NPOT) {
                                        _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, this._cache.get('webgl_texture'));
                                        _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);
                                    }
                                },

                                bind: function(renderer) {
                                    renderer.gl.bindTexture(renderer.gl.TEXTURE_CUBE_MAP, this.getWebGLTexture(renderer));
                                },

                                unbind: function(renderer) {
                                    renderer.gl.bindTexture(renderer.gl.TEXTURE_CUBE_MAP, null);
                                },

                                // Overwrite the isPowerOfTwo method
                                isPowerOfTwo: function() {
                                    if (this.image.px) {
                                        return TextureCube_isPowerOfTwo(this.image.px.width) &&
                                            TextureCube_isPowerOfTwo(this.image.px.height);
                                    } else {
                                        return TextureCube_isPowerOfTwo(this.width) &&
                                            TextureCube_isPowerOfTwo(this.height);
                                    }
                                },

                                isRenderable: function() {
                                    if (this.image.px) {
                                        return isImageRenderable(this.image.px) &&
                                            isImageRenderable(this.image.nx) &&
                                            isImageRenderable(this.image.py) &&
                                            isImageRenderable(this.image.ny) &&
                                            isImageRenderable(this.image.pz) &&
                                            isImageRenderable(this.image.nz);
                                    } else {
                                        return !!(this.width && this.height);
                                    }
                                },

                                load: function(imageList, crossOrigin) {
                                    var loading = 0;
                                    var self = this;
                                    core_util.each(imageList, function(src, target) {
                                        var image = new Image();
                                        if (crossOrigin) {
                                            image.crossOrigin = crossOrigin;
                                        }
                                        image.onload = function() {
                                            loading--;
                                            if (loading === 0) {
                                                self.dirty();
                                                self.trigger('success', self);
                                            }
                                            image.onload = null;
                                        };
                                        image.onerror = function() {
                                            loading--;
                                            image.onerror = null;
                                        };

                                        loading++;
                                        image.src = src;
                                        self.image[target] = image;
                                    });

                                    return this;
                                }
                            });

                            Object.defineProperty(TextureCube.prototype, 'width', {
                                get: function() {
                                    if (this.image && this.image.px) {
                                        return this.image.px.width;
                                    }
                                    return this._width;
                                },
                                set: function(value) {
                                    if (this.image && this.image.px) {
                                        console.warn('Texture from image can\'t set width');
                                    } else {
                                        if (this._width !== value) {
                                            this.dirty();
                                        }
                                        this._width = value;
                                    }
                                }
                            });
                            Object.defineProperty(TextureCube.prototype, 'height', {
                                get: function() {
                                    if (this.image && this.image.px) {
                                        return this.image.px.height;
                                    }
                                    return this._height;
                                },
                                set: function(value) {
                                    if (this.image && this.image.px) {
                                        console.warn('Texture from image can\'t set height');
                                    } else {
                                        if (this._height !== value) {
                                            this.dirty();
                                        }
                                        this._height = value;
                                    }
                                }
                            });

                            function isImageRenderable(image) {
                                return image.nodeName === 'CANVAS' ||
                                    image.nodeName === 'VIDEO' ||
                                    image.complete;
                            }

                            /* harmony default export */
                            var src_TextureCube = (TextureCube);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/core/request.js
                            function get(options) {

                                var xhr = new XMLHttpRequest();

                                xhr.open('get', options.url);
                                // With response type set browser can get and put binary data
                                // https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Sending_and_Receiving_Binary_Data
                                // Default is text, and it can be set
                                // arraybuffer, blob, document, json, text
                                xhr.responseType = options.responseType || 'text';

                                if (options.onprogress) {
                                    //https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Using_XMLHttpRequest
                                    xhr.onprogress = function(e) {
                                        if (e.lengthComputable) {
                                            var percent = e.loaded / e.total;
                                            options.onprogress(percent, e.loaded, e.total);
                                        } else {
                                            options.onprogress(null);
                                        }
                                    };
                                }
                                xhr.onload = function(e) {
                                    if (xhr.status >= 400) {
                                        options.onerror && options.onerror();
                                    } else {
                                        options.onload && options.onload(xhr.response);
                                    }
                                };
                                if (options.onerror) {
                                    xhr.onerror = options.onerror;
                                }
                                xhr.send(null);
                            }

                            /* harmony default export */
                            var request = ({
                                get: get
                            });

                            // CONCATENATED MODULE: ./node_modules/qtek/src/math/Plane.js


                            var Plane_vec3 = glmatrix_default.a.vec3;
                            var Plane_mat4 = glmatrix_default.a.mat4;
                            var vec4 = glmatrix_default.a.vec4;

                            /**
                             * @constructor
                             * @alias qtek.math.Plane
                             * @param {qtek.math.Vector3} [normal]
                             * @param {number} [distance]
                             */
                            var Plane = function(normal, distance) {
                                /**
                                 * Normal of the plane
                                 * @type {qtek.math.Vector3}
                                 */
                                this.normal = normal || new math_Vector3(0, 1, 0);

                                /**
                                 * Constant of the plane equation, used as distance to the origin
                                 * @type {number}
                                 */
                                this.distance = distance || 0;
                            };

                            Plane.prototype = {

                                constructor: Plane,

                                /**
                                 * Distance from given point to plane
                                 * @param  {qtek.math.Vector3} point
                                 * @return {number}
                                 */
                                distanceToPoint: function(point) {
                                    return Plane_vec3.dot(point._array, this.normal._array) - this.distance;
                                },

                                /**
                                 * Calculate the projection on the plane of point
                                 * @param  {qtek.math.Vector3} point
                                 * @param  {qtek.math.Vector3} out
                                 * @return {qtek.math.Vector3}
                                 */
                                projectPoint: function(point, out) {
                                    if (!out) {
                                        out = new math_Vector3();
                                    }
                                    var d = this.distanceToPoint(point);
                                    Plane_vec3.scaleAndAdd(out._array, point._array, this.normal._array, -d);
                                    out._dirty = true;
                                    return out;
                                },

                                /**
                                 * Normalize the plane's normal and calculate distance
                                 */
                                normalize: function() {
                                    var invLen = 1 / Plane_vec3.len(this.normal._array);
                                    Plane_vec3.scale(this.normal._array, invLen);
                                    this.distance *= invLen;
                                },

                                /**
                                 * If the plane intersect a frustum
                                 * @param  {qtek.math.Frustum} Frustum
                                 * @return {boolean}
                                 */
                                intersectFrustum: function(frustum) {
                                    // Check if all coords of frustum is on plane all under plane
                                    var coords = frustum.vertices;
                                    var normal = this.normal._array;
                                    var onPlane = Plane_vec3.dot(coords[0]._array, normal) > this.distance;
                                    for (var i = 1; i < 8; i++) {
                                        if ((Plane_vec3.dot(coords[i]._array, normal) > this.distance) != onPlane) {
                                            return true;
                                        }
                                    }
                                },

                                /**
                                 * Calculate the intersection point between plane and a given line
                                 * @method
                                 * @param {qtek.math.Vector3} start start point of line
                                 * @param {qtek.math.Vector3} end end point of line
                                 * @param {qtek.math.Vector3} [out]
                                 * @return {qtek.math.Vector3}
                                 */
                                intersectLine: (function() {
                                    var rd = Plane_vec3.create();
                                    return function(start, end, out) {
                                        var d0 = this.distanceToPoint(start);
                                        var d1 = this.distanceToPoint(end);
                                        if ((d0 > 0 && d1 > 0) || (d0 < 0 && d1 < 0)) {
                                            return null;
                                        }
                                        // Ray intersection
                                        var pn = this.normal._array;
                                        var d = this.distance;
                                        var ro = start._array;
                                        // direction
                                        Plane_vec3.sub(rd, end._array, start._array);
                                        Plane_vec3.normalize(rd, rd);

                                        var divider = Plane_vec3.dot(pn, rd);
                                        // ray is parallel to the plane
                                        if (divider === 0) {
                                            return null;
                                        }
                                        if (!out) {
                                            out = new math_Vector3();
                                        }
                                        var t = (Plane_vec3.dot(pn, ro) - d) / divider;
                                        Plane_vec3.scaleAndAdd(out._array, ro, rd, -t);
                                        out._dirty = true;
                                        return out;
                                    };
                                })(),

                                /**
                                 * Apply an affine transform matrix to plane
                                 * @method
                                 * @return {qtek.math.Matrix4}
                                 */
                                applyTransform: (function() {
                                    var inverseTranspose = Plane_mat4.create();
                                    var normalv4 = vec4.create();
                                    var pointv4 = vec4.create();
                                    pointv4[3] = 1;
                                    return function(m4) {
                                        m4 = m4._array;
                                        // Transform point on plane
                                        Plane_vec3.scale(pointv4, this.normal._array, this.distance);
                                        vec4.transformMat4(pointv4, pointv4, m4);
                                        this.distance = Plane_vec3.dot(pointv4, this.normal._array);
                                        // Transform plane normal
                                        Plane_mat4.invert(inverseTranspose, m4);
                                        Plane_mat4.transpose(inverseTranspose, inverseTranspose);
                                        normalv4[3] = 0;
                                        Plane_vec3.copy(normalv4, this.normal._array);
                                        vec4.transformMat4(normalv4, normalv4, inverseTranspose);
                                        Plane_vec3.copy(this.normal._array, normalv4);
                                    };
                                })(),

                                /**
                                 * Copy from another plane
                                 * @param  {qtek.math.Vector3} plane
                                 */
                                copy: function(plane) {
                                    Plane_vec3.copy(this.normal._array, plane.normal._array);
                                    this.normal._dirty = true;
                                    this.distance = plane.distance;
                                },

                                /**
                                 * Clone a new plane
                                 * @return {qtek.math.Plane}
                                 */
                                clone: function() {
                                    var plane = new Plane();
                                    plane.copy(this);
                                    return plane;
                                }
                            };

                            /* harmony default export */
                            var math_Plane = (Plane);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/math/Frustum.js





                            var Frustum_vec3 = glmatrix_default.a.vec3;

                            var Frustum_vec3Set = Frustum_vec3.set;
                            var Frustum_vec3Copy = Frustum_vec3.copy;
                            var vec3TranformMat4 = Frustum_vec3.transformMat4;
                            var mathMin = Math.min;
                            var mathMax = Math.max;
                            /**
                             * @constructor
                             * @alias qtek.math.Frustum
                             */
                            var Frustum = function() {

                                /**
                                 * Eight planes to enclose the frustum
                                 * @type {qtek.math.Plane[]}
                                 */
                                this.planes = [];

                                for (var i = 0; i < 6; i++) {
                                    this.planes.push(new math_Plane());
                                }

                                /**
                                 * Bounding box of frustum
                                 * @type {qtek.math.BoundingBox}
                                 */
                                this.boundingBox = new math_BoundingBox();

                                /**
                                 * Eight vertices of frustum
                                 * @type {Float32Array[]}
                                 */
                                this.vertices = [];
                                for (var i = 0; i < 8; i++) {
                                    this.vertices[i] = Frustum_vec3.fromValues(0, 0, 0);
                                }
                            };

                            Frustum.prototype = {

                                // http://web.archive.org/web/20120531231005/http://crazyjoke.free.fr/doc/3D/plane%20extraction.pdf
                                /**
                                 * Set frustum from a projection matrix
                                 * @param {qtek.math.Matrix4} projectionMatrix
                                 */
                                setFromProjection: function(projectionMatrix) {

                                    var planes = this.planes;
                                    var m = projectionMatrix._array;
                                    var m0 = m[0],
                                        m1 = m[1],
                                        m2 = m[2],
                                        m3 = m[3];
                                    var m4 = m[4],
                                        m5 = m[5],
                                        m6 = m[6],
                                        m7 = m[7];
                                    var m8 = m[8],
                                        m9 = m[9],
                                        m10 = m[10],
                                        m11 = m[11];
                                    var m12 = m[12],
                                        m13 = m[13],
                                        m14 = m[14],
                                        m15 = m[15];

                                    // Update planes
                                    Frustum_vec3Set(planes[0].normal._array, m3 - m0, m7 - m4, m11 - m8);
                                    planes[0].distance = -(m15 - m12);
                                    planes[0].normalize();

                                    Frustum_vec3Set(planes[1].normal._array, m3 + m0, m7 + m4, m11 + m8);
                                    planes[1].distance = -(m15 + m12);
                                    planes[1].normalize();

                                    Frustum_vec3Set(planes[2].normal._array, m3 + m1, m7 + m5, m11 + m9);
                                    planes[2].distance = -(m15 + m13);
                                    planes[2].normalize();

                                    Frustum_vec3Set(planes[3].normal._array, m3 - m1, m7 - m5, m11 - m9);
                                    planes[3].distance = -(m15 - m13);
                                    planes[3].normalize();

                                    Frustum_vec3Set(planes[4].normal._array, m3 - m2, m7 - m6, m11 - m10);
                                    planes[4].distance = -(m15 - m14);
                                    planes[4].normalize();

                                    Frustum_vec3Set(planes[5].normal._array, m3 + m2, m7 + m6, m11 + m10);
                                    planes[5].distance = -(m15 + m14);
                                    planes[5].normalize();

                                    // Perspective projection
                                    var boundingBox = this.boundingBox;
                                    if (m15 === 0) {
                                        var aspect = m5 / m0;
                                        var zNear = -m14 / (m10 - 1);
                                        var zFar = -m14 / (m10 + 1);
                                        var farY = -zFar / m5;
                                        var nearY = -zNear / m5;
                                        // Update bounding box
                                        boundingBox.min.set(-farY * aspect, -farY, zFar);
                                        boundingBox.max.set(farY * aspect, farY, zNear);
                                        // update vertices
                                        var vertices = this.vertices;
                                        //--- min z
                                        // min x
                                        Frustum_vec3Set(vertices[0], -farY * aspect, -farY, zFar);
                                        Frustum_vec3Set(vertices[1], -farY * aspect, farY, zFar);
                                        // max x
                                        Frustum_vec3Set(vertices[2], farY * aspect, -farY, zFar);
                                        Frustum_vec3Set(vertices[3], farY * aspect, farY, zFar);
                                        //-- max z
                                        Frustum_vec3Set(vertices[4], -nearY * aspect, -nearY, zNear);
                                        Frustum_vec3Set(vertices[5], -nearY * aspect, nearY, zNear);
                                        Frustum_vec3Set(vertices[6], nearY * aspect, -nearY, zNear);
                                        Frustum_vec3Set(vertices[7], nearY * aspect, nearY, zNear);
                                    } else { // Orthographic projection
                                        var left = (-1 - m12) / m0;
                                        var right = (1 - m12) / m0;
                                        var top = (1 - m13) / m5;
                                        var bottom = (-1 - m13) / m5;
                                        var near = (-1 - m14) / m10;
                                        var far = (1 - m14) / m10;


                                        boundingBox.min.set(Math.min(left, right), Math.min(bottom, top), Math.min(far, near));
                                        boundingBox.max.set(Math.max(right, left), Math.max(top, bottom), Math.max(near, far));

                                        var min = boundingBox.min._array;
                                        var max = boundingBox.max._array;
                                        var vertices = this.vertices;
                                        //--- min z
                                        // min x
                                        Frustum_vec3Set(vertices[0], min[0], min[1], min[2]);
                                        Frustum_vec3Set(vertices[1], min[0], max[1], min[2]);
                                        // max x
                                        Frustum_vec3Set(vertices[2], max[0], min[1], min[2]);
                                        Frustum_vec3Set(vertices[3], max[0], max[1], min[2]);
                                        //-- max z
                                        Frustum_vec3Set(vertices[4], min[0], min[1], max[2]);
                                        Frustum_vec3Set(vertices[5], min[0], max[1], max[2]);
                                        Frustum_vec3Set(vertices[6], max[0], min[1], max[2]);
                                        Frustum_vec3Set(vertices[7], max[0], max[1], max[2]);
                                    }
                                },

                                /**
                                 * Apply a affine transform matrix and set to the given bounding box
                                 * @method
                                 * @param {qtek.math.BoundingBox}
                                 * @param {qtek.math.Matrix4}
                                 * @return {qtek.math.BoundingBox}
                                 */
                                getTransformedBoundingBox: (function() {

                                    var tmpVec3 = Frustum_vec3.create();

                                    return function(bbox, matrix) {
                                        var vertices = this.vertices;

                                        var m4 = matrix._array;
                                        var min = bbox.min;
                                        var max = bbox.max;
                                        var minArr = min._array;
                                        var maxArr = max._array;
                                        var v = vertices[0];
                                        vec3TranformMat4(tmpVec3, v, m4);
                                        Frustum_vec3Copy(minArr, tmpVec3);
                                        Frustum_vec3Copy(maxArr, tmpVec3);

                                        for (var i = 1; i < 8; i++) {
                                            v = vertices[i];
                                            vec3TranformMat4(tmpVec3, v, m4);

                                            minArr[0] = mathMin(tmpVec3[0], minArr[0]);
                                            minArr[1] = mathMin(tmpVec3[1], minArr[1]);
                                            minArr[2] = mathMin(tmpVec3[2], minArr[2]);

                                            maxArr[0] = mathMax(tmpVec3[0], maxArr[0]);
                                            maxArr[1] = mathMax(tmpVec3[1], maxArr[1]);
                                            maxArr[2] = mathMax(tmpVec3[2], maxArr[2]);
                                        }

                                        min._dirty = true;
                                        max._dirty = true;

                                        return bbox;
                                    };
                                })()
                            };
                            /* harmony default export */
                            var math_Frustum = (Frustum);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/Camera.js






                            var Camera_vec3 = glmatrix_default.a.vec3;
                            var Camera_vec4 = glmatrix_default.a.vec4;

                            /**
                             * @constructor qtek.Camera
                             * @extends qtek.Node
                             */
                            var Camera = src_Node.extend(function() {
                                    return /** @lends qtek.Camera# */ {
                                        /**
                                         * Camera projection matrix
                                         * @type {qtek.math.Matrix4}
                                         */
                                        projectionMatrix: new math_Matrix4(),

                                        /**
                                         * Inverse of camera projection matrix
                                         * @type {qtek.math.Matrix4}
                                         */
                                        invProjectionMatrix: new math_Matrix4(),

                                        /**
                                         * View matrix, equal to inverse of camera's world matrix
                                         * @type {qtek.math.Matrix4}
                                         */
                                        viewMatrix: new math_Matrix4(),

                                        /**
                                         * Camera frustum in view space
                                         * @type {qtek.math.Frustum}
                                         */
                                        frustum: new math_Frustum()
                                    };
                                }, function() {
                                    this.update(true);
                                },
                                /** @lends qtek.Camera.prototype */
                                {

                                    update: function(force) {
                                        src_Node.prototype.update.call(this, force);
                                        math_Matrix4.invert(this.viewMatrix, this.worldTransform);

                                        this.updateProjectionMatrix();
                                        math_Matrix4.invert(this.invProjectionMatrix, this.projectionMatrix);

                                        this.frustum.setFromProjection(this.projectionMatrix);
                                    },

                                    /**
                                     * Set camera view matrix
                                     */
                                    setViewMatrix: function(viewMatrix) {
                                        math_Matrix4.copy(this.viewMatrix, viewMatrix);
                                        math_Matrix4.invert(this.worldTransform, viewMatrix);
                                        this.decomposeWorldTransform();
                                    },

                                    /**
                                     * Decompose camera projection matrix
                                     */
                                    decomposeProjectionMatrix: function() {},

                                    /**
                                     * Set camera projection matrix
                                     * @param {qtek.math.Matrix4} projectionMatrix
                                     */
                                    setProjectionMatrix: function(projectionMatrix) {
                                        math_Matrix4.copy(this.projectionMatrix, projectionMatrix);
                                        math_Matrix4.invert(this.invProjectionMatrix, projectionMatrix);
                                        this.decomposeProjectionMatrix();
                                    },
                                    /**
                                     * Update projection matrix, called after update
                                     */
                                    updateProjectionMatrix: function() {},

                                    /**
                                     * Cast a picking ray from camera near plane to far plane
                                     * @method
                                     * @param {qtek.math.Vector2} ndc
                                     * @param {qtek.math.Ray} [out]
                                     * @return {qtek.math.Ray}
                                     */
                                    castRay: (function() {
                                        var v4 = Camera_vec4.create();
                                        return function(ndc, out) {
                                            var ray = out !== undefined ? out : new math_Ray();
                                            var x = ndc._array[0];
                                            var y = ndc._array[1];
                                            Camera_vec4.set(v4, x, y, -1, 1);
                                            Camera_vec4.transformMat4(v4, v4, this.invProjectionMatrix._array);
                                            Camera_vec4.transformMat4(v4, v4, this.worldTransform._array);
                                            Camera_vec3.scale(ray.origin._array, v4, 1 / v4[3]);

                                            Camera_vec4.set(v4, x, y, 1, 1);
                                            Camera_vec4.transformMat4(v4, v4, this.invProjectionMatrix._array);
                                            Camera_vec4.transformMat4(v4, v4, this.worldTransform._array);
                                            Camera_vec3.scale(v4, v4, 1 / v4[3]);
                                            Camera_vec3.sub(ray.direction._array, v4, ray.origin._array);

                                            Camera_vec3.normalize(ray.direction._array, ray.direction._array);
                                            ray.direction._dirty = true;
                                            ray.origin._dirty = true;

                                            return ray;
                                        };
                                    })()

                                    /**
                                     * @method
                                     * @name clone
                                     * @return {qtek.Camera}
                                     * @memberOf qtek.Camera.prototype
                                     */
                                });

                            /* harmony default export */
                            var src_Camera = (Camera);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/camera/Perspective.js


                            /**
                             * @constructor qtek.camera.Perspective
                             * @extends qtek.Camera
                             */
                            var Perspective = src_Camera.extend(
                                /** @lends qtek.camera.Perspective# */
                                {
                                    /**
                                     * Vertical field of view in radians
                                     * @type {number}
                                     */
                                    fov: 50,
                                    /**
                                     * Aspect ratio, typically viewport width / height
                                     * @type {number}
                                     */
                                    aspect: 1,
                                    /**
                                     * Near bound of the frustum
                                     * @type {number}
                                     */
                                    near: 0.1,
                                    /**
                                     * Far bound of the frustum
                                     * @type {number}
                                     */
                                    far: 2000
                                },
                                /** @lends qtek.camera.Perspective.prototype */
                                {

                                    updateProjectionMatrix: function() {
                                        var rad = this.fov / 180 * Math.PI;
                                        this.projectionMatrix.perspective(rad, this.aspect, this.near, this.far);
                                    },
                                    decomposeProjectionMatrix: function() {
                                        var m = this.projectionMatrix._array;
                                        var rad = Math.atan(1 / m[5]) * 2;
                                        this.fov = rad / Math.PI * 180;
                                        this.aspect = m[5] / m[0];
                                        this.near = m[14] / (m[10] - 1);
                                        this.far = m[14] / (m[10] + 1);
                                    },
                                    /**
                                     * @return {qtek.camera.Perspective}
                                     */
                                    clone: function() {
                                        var camera = src_Camera.prototype.clone.call(this);
                                        camera.fov = this.fov;
                                        camera.aspect = this.aspect;
                                        camera.near = this.near;
                                        camera.far = this.far;

                                        return camera;
                                    }
                                });

                            /* harmony default export */
                            var camera_Perspective = (Perspective);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/FrameBuffer.js






                            var KEY_FRAMEBUFFER = 'framebuffer';
                            var KEY_RENDERBUFFER = 'renderbuffer';
                            var KEY_RENDERBUFFER_WIDTH = KEY_RENDERBUFFER + '_width';
                            var KEY_RENDERBUFFER_HEIGHT = KEY_RENDERBUFFER + '_height';
                            var KEY_RENDERBUFFER_ATTACHED = KEY_RENDERBUFFER + '_attached';
                            var KEY_DEPTHTEXTURE_ATTACHED = 'depthtexture_attached';

                            var GL_FRAMEBUFFER = glenum.FRAMEBUFFER;
                            var GL_RENDERBUFFER = glenum.RENDERBUFFER;
                            var GL_DEPTH_ATTACHMENT = glenum.DEPTH_ATTACHMENT;
                            var GL_COLOR_ATTACHMENT0 = glenum.COLOR_ATTACHMENT0;
                            /**
                             * @constructor qtek.FrameBuffer
                             * @extends qtek.core.Base
                             */
                            var FrameBuffer = core_Base.extend(
                                /** @lends qtek.FrameBuffer# */
                                {
                                    /**
                                     * If use depth buffer
                                     * @type {boolean}
                                     */
                                    depthBuffer: true,

                                    /**
                                     * @type {Object}
                                     */
                                    viewport: null,

                                    _width: 0,
                                    _height: 0,

                                    _textures: null,

                                    _boundRenderer: null,
                                },
                                function() {
                                    // Use cache
                                    this._cache = new core_Cache();

                                    this._textures = {};
                                },

                                /**@lends qtek.FrameBuffer.prototype. */
                                {
                                    /**
                                     * Get attached texture width
                                     * {number}
                                     */
                                    // FIXME Can't use before #bind
                                    getTextureWidth: function() {
                                        return this._width;
                                    },

                                    /**
                                     * Get attached texture height
                                     * {number}
                                     */
                                    getTextureHeight: function() {
                                        return this._height;
                                    },

                                    /**
                                     * Bind the framebuffer to given renderer before rendering
                                     * @param  {qtek.Renderer} renderer
                                     */
                                    bind: function(renderer) {

                                        if (renderer.__currentFrameBuffer) {
                                            // Already bound
                                            if (renderer.__currentFrameBuffer === this) {
                                                return;
                                            }

                                            console.warn('Renderer already bound with another framebuffer. Unbind it first');
                                        }
                                        renderer.__currentFrameBuffer = this;

                                        var _gl = renderer.gl;

                                        _gl.bindFramebuffer(GL_FRAMEBUFFER, this._getFrameBufferGL(renderer));
                                        this._boundRenderer = renderer;
                                        var cache = this._cache;

                                        cache.put('viewport', renderer.viewport);

                                        var hasTextureAttached = false;
                                        var width;
                                        var height;
                                        for (var attachment in this._textures) {
                                            hasTextureAttached = true;
                                            var obj = this._textures[attachment];
                                            if (obj) {
                                                // TODO Do width, height checking, make sure size are same
                                                width = obj.texture.width;
                                                height = obj.texture.height;
                                                // Attach textures
                                                this._doAttach(renderer, obj.texture, attachment, obj.target);
                                            }
                                        }

                                        this._width = width;
                                        this._height = height;

                                        if (!hasTextureAttached && this.depthBuffer) {
                                            console.error('Must attach texture before bind, or renderbuffer may have incorrect width and height.')
                                        }

                                        if (this.viewport) {
                                            renderer.setViewport(this.viewport);
                                        } else {
                                            renderer.setViewport(0, 0, width, height, 1);
                                        }

                                        var attachedTextures = cache.get('attached_textures');
                                        if (attachedTextures) {
                                            for (var attachment in attachedTextures) {
                                                if (!this._textures[attachment]) {
                                                    var target = attachedTextures[attachment];
                                                    this._doDetach(_gl, attachment, target);
                                                }
                                            }
                                        }
                                        if (!cache.get(KEY_DEPTHTEXTURE_ATTACHED) && this.depthBuffer) {
                                            // Create a new render buffer
                                            if (cache.miss(KEY_RENDERBUFFER)) {
                                                cache.put(KEY_RENDERBUFFER, _gl.createRenderbuffer());
                                            }
                                            var renderbuffer = cache.get(KEY_RENDERBUFFER);

                                            if (width !== cache.get(KEY_RENDERBUFFER_WIDTH) ||
                                                height !== cache.get(KEY_RENDERBUFFER_HEIGHT)) {
                                                _gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer);
                                                _gl.renderbufferStorage(GL_RENDERBUFFER, _gl.DEPTH_COMPONENT16, width, height);
                                                cache.put(KEY_RENDERBUFFER_WIDTH, width);
                                                cache.put(KEY_RENDERBUFFER_HEIGHT, height);
                                                _gl.bindRenderbuffer(GL_RENDERBUFFER, null);
                                            }
                                            if (!cache.get(KEY_RENDERBUFFER_ATTACHED)) {
                                                _gl.framebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, renderbuffer);
                                                cache.put(KEY_RENDERBUFFER_ATTACHED, true);
                                            }
                                        }
                                    },

                                    /**
                                     * Unbind the frame buffer after rendering
                                     * @param  {qtek.Renderer} renderer
                                     */
                                    unbind: function(renderer) {
                                        // Remove status record on renderer
                                        renderer.__currentFrameBuffer = null;

                                        var _gl = renderer.gl;

                                        _gl.bindFramebuffer(GL_FRAMEBUFFER, null);
                                        this._boundRenderer = null;

                                        this._cache.use(renderer.__GUID__);
                                        var viewport = this._cache.get('viewport');
                                        // Reset viewport;
                                        if (viewport) {
                                            renderer.setViewport(viewport);
                                        }

                                        this.updateMipmap(renderer);
                                    },

                                    // Because the data of texture is changed over time,
                                    // Here update the mipmaps of texture each time after rendered;
                                    updateMipmap: function(renderer) {
                                        var _gl = renderer.gl;
                                        for (var attachment in this._textures) {
                                            var obj = this._textures[attachment];
                                            if (obj) {
                                                var texture = obj.texture;
                                                // FIXME some texture format can't generate mipmap
                                                if (!texture.NPOT && texture.useMipmap &&
                                                    texture.minFilter === src_Texture.LINEAR_MIPMAP_LINEAR) {
                                                    var target = texture instanceof src_TextureCube ? glenum.TEXTURE_CUBE_MAP : glenum.TEXTURE_2D;
                                                    _gl.bindTexture(target, texture.getWebGLTexture(renderer));
                                                    _gl.generateMipmap(target);
                                                    _gl.bindTexture(target, null);
                                                }
                                            }
                                        }
                                    },


                                    // 0x8CD5, 36053, FRAMEBUFFER_COMPLETE
                                    // 0x8CD6, 36054, FRAMEBUFFER_INCOMPLETE_ATTACHMENT
                                    // 0x8CD7, 36055, FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
                                    // 0x8CD9, 36057, FRAMEBUFFER_INCOMPLETE_DIMENSIONS
                                    // 0x8CDD, 36061, FRAMEBUFFER_UNSUPPORTED
                                    checkStatus: function(_gl) {
                                        return _gl.checkFramebufferStatus(GL_FRAMEBUFFER);
                                    },

                                    _getFrameBufferGL: function(renderer) {
                                        var cache = this._cache;
                                        cache.use(renderer.__GUID__);

                                        if (cache.miss(KEY_FRAMEBUFFER)) {
                                            cache.put(KEY_FRAMEBUFFER, renderer.gl.createFramebuffer());
                                        }

                                        return cache.get(KEY_FRAMEBUFFER);
                                    },

                                    /**
                                     * Attach a texture(RTT) to the framebuffer
                                     * @param  {qtek.Texture} texture
                                     * @param  {number} [attachment=gl.COLOR_ATTACHMENT0]
                                     * @param  {number} [target=gl.TEXTURE_2D]
                                     */
                                    attach: function(texture, attachment, target) {

                                        if (!texture.width) {
                                            throw new Error('The texture attached to color buffer is not a valid.');
                                        }
                                        // TODO width and height check

                                        // If the depth_texture extension is enabled, developers
                                        // Can attach a depth texture to the depth buffer
                                        // http://blog.tojicode.com/2012/07/using-webgldepthtexture.html
                                        attachment = attachment || GL_COLOR_ATTACHMENT0;
                                        target = target || glenum.TEXTURE_2D;

                                        var boundRenderer = this._boundRenderer;
                                        var _gl = boundRenderer && boundRenderer.gl;
                                        var attachedTextures;

                                        if (_gl) {
                                            var cache = this._cache;
                                            cache.use(boundRenderer.__GUID__);
                                            attachedTextures = cache.get('attached_textures');
                                        }

                                        // Check if texture attached
                                        var previous = this._textures[attachment];
                                        if (previous && previous.target === target &&
                                            previous.texture === texture &&
                                            (attachedTextures && attachedTextures[attachment] != null)
                                        ) {
                                            return;
                                        }

                                        var canAttach = true;
                                        if (boundRenderer) {
                                            canAttach = this._doAttach(boundRenderer, texture, attachment, target);
                                            // Set viewport again incase attached to different size textures.
                                            if (!this.viewport) {
                                                boundRenderer.setViewport(0, 0, texture.width, texture.height, 1);
                                            }
                                        }

                                        if (canAttach) {
                                            this._textures[attachment] = this._textures[attachment] || {};
                                            this._textures[attachment].texture = texture;
                                            this._textures[attachment].target = target;
                                        }
                                    },

                                    _doAttach: function(renderer, texture, attachment, target) {
                                        var _gl = renderer.gl;
                                        // Make sure texture is always updated
                                        // Because texture width or height may be changed and in this we can't be notified
                                        // FIXME awkward;
                                        var webglTexture = texture.getWebGLTexture(renderer);
                                        // Assume cache has been used.
                                        var attachedTextures = this._cache.get('attached_textures');
                                        if (attachedTextures && attachedTextures[attachment]) {
                                            var obj = attachedTextures[attachment];
                                            // Check if texture and target not changed
                                            if (obj.texture === texture && obj.target === target) {
                                                return;
                                            }
                                        }
                                        attachment = +attachment;

                                        var canAttach = true;
                                        if (attachment === GL_DEPTH_ATTACHMENT || attachment === glenum.DEPTH_STENCIL_ATTACHMENT) {
                                            var extension = renderer.getGLExtension('WEBGL_depth_texture');

                                            if (!extension) {
                                                console.error('Depth texture is not supported by the browser');
                                                canAttach = false;
                                            }
                                            if (texture.format !== glenum.DEPTH_COMPONENT &&
                                                texture.format !== glenum.DEPTH_STENCIL
                                            ) {
                                                console.error('The texture attached to depth buffer is not a valid.');
                                                canAttach = false;
                                            }

                                            // Dispose render buffer created previous
                                            if (canAttach) {
                                                var renderbuffer = this._cache.get(KEY_RENDERBUFFER);
                                                if (renderbuffer) {
                                                    _gl.framebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, null);
                                                    _gl.deleteRenderbuffer(renderbuffer);
                                                    this._cache.put(KEY_RENDERBUFFER, false);
                                                }

                                                this._cache.put(KEY_RENDERBUFFER_ATTACHED, false);
                                                this._cache.put(KEY_DEPTHTEXTURE_ATTACHED, true);
                                            }
                                        }

                                        // Mipmap level can only be 0
                                        _gl.framebufferTexture2D(GL_FRAMEBUFFER, attachment, target, webglTexture, 0);

                                        if (!attachedTextures) {
                                            attachedTextures = {};
                                            this._cache.put('attached_textures', attachedTextures);
                                        }
                                        attachedTextures[attachment] = attachedTextures[attachment] || {};
                                        attachedTextures[attachment].texture = texture;
                                        attachedTextures[attachment].target = target;

                                        return canAttach;
                                    },

                                    _doDetach: function(_gl, attachment, target) {
                                        // Detach a texture from framebuffer
                                        // https://github.com/KhronosGroup/WebGL/blob/master/conformance-suites/1.0.0/conformance/framebuffer-test.html#L145
                                        _gl.framebufferTexture2D(GL_FRAMEBUFFER, attachment, target, null, 0);

                                        // Assume cache has been used.
                                        var attachedTextures = this._cache.get('attached_textures');
                                        if (attachedTextures && attachedTextures[attachment]) {
                                            attachedTextures[attachment] = null;
                                        }

                                        if (attachment === GL_DEPTH_ATTACHMENT || attachment === glenum.DEPTH_STENCIL_ATTACHMENT) {
                                            this._cache.put(KEY_DEPTHTEXTURE_ATTACHED, false);
                                        }
                                    },

                                    /**
                                     * Detach a texture
                                     * @param  {number} [attachment=gl.COLOR_ATTACHMENT0]
                                     * @param  {number} [target=gl.TEXTURE_2D]
                                     */
                                    detach: function(attachment, target) {
                                        // TODO depth extension check ?
                                        this._textures[attachment] = null;
                                        if (this._boundRenderer) {
                                            var cache = this._cache;
                                            cache.use(this._boundRenderer.__GUID__);
                                            this._doDetach(this._boundRenderer.gl, attachment, target);
                                        }
                                    },
                                    /**
                                     * Dispose
                                     * @param  {WebGLRenderingContext} _gl
                                     */
                                    dispose: function(renderer) {

                                        var _gl = renderer.gl;
                                        var cache = this._cache;

                                        cache.use(renderer.__GUID__);

                                        var renderBuffer = cache.get(KEY_RENDERBUFFER);
                                        if (renderBuffer) {
                                            _gl.deleteRenderbuffer(renderBuffer);
                                        }
                                        var frameBuffer = cache.get(KEY_FRAMEBUFFER);
                                        if (frameBuffer) {
                                            _gl.deleteFramebuffer(frameBuffer);
                                        }
                                        cache.deleteContext(renderer.__GUID__);

                                        // Clear cache for reusing
                                        this._textures = {};

                                    }
                                });

                            FrameBuffer.DEPTH_ATTACHMENT = GL_DEPTH_ATTACHMENT;
                            FrameBuffer.COLOR_ATTACHMENT0 = GL_COLOR_ATTACHMENT0;
                            FrameBuffer.STENCIL_ATTACHMENT = glenum.STENCIL_ATTACHMENT;
                            FrameBuffer.DEPTH_STENCIL_ATTACHMENT = glenum.DEPTH_STENCIL_ATTACHMENT;

                            /* harmony default export */
                            var src_FrameBuffer = (FrameBuffer);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/prePass/EnvironmentMap.js





                            var targets = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];

                            /**
                             * Pass rendering scene to a environment cube map
                             *
                             * @constructor qtek.prePass.EnvironmentMap
                             * @extends qtek.core.Base
                             * @example
                             *     // Example of car reflection
                             *     var envMap = new qtek.TextureCube({
                             *         width: 256,
                             *         height: 256
                             *     });
                             *     var envPass = new qtek.prePass.EnvironmentMap({
                             *         position: car.position,
                             *         texture: envMap
                             *     });
                             *     var carBody = car.getChildByName('body');
                             *     carBody.material.shader.enableTexture('environmentMap');
                             *     carBody.material.set('environmentMap', envMap);
                             *     ...
                             *     animation.on('frame', function(frameTime) {
                             *         envPass.render(renderer, scene);
                             *         renderer.render(scene, camera);
                             *     });
                             */
                            var EnvironmentMapPass = core_Base.extend(function() {
                                var ret = {
                                    /**
                                     * Camera position
                                     * @type {qtek.math.Vector3}
                                     * @memberOf qtek.prePass.EnvironmentMap#
                                     */
                                    position: new math_Vector3(),
                                    /**
                                     * Camera far plane
                                     * @type {number}
                                     * @memberOf qtek.prePass.EnvironmentMap#
                                     */
                                    far: 1000,
                                    /**
                                     * Camera near plane
                                     * @type {number}
                                     * @memberOf qtek.prePass.EnvironmentMap#
                                     */
                                    near: 0.1,
                                    /**
                                     * Environment cube map
                                     * @type {qtek.TextureCube}
                                     * @memberOf qtek.prePass.EnvironmentMap#
                                     */
                                    texture: null,

                                    /**
                                     * Used if you wan't have shadow in environment map
                                     * @type {qtek.prePass.ShadowMap}
                                     */
                                    shadowMapPass: null,
                                };
                                var cameras = ret._cameras = {
                                    px: new camera_Perspective({ fov: 90 }),
                                    nx: new camera_Perspective({ fov: 90 }),
                                    py: new camera_Perspective({ fov: 90 }),
                                    ny: new camera_Perspective({ fov: 90 }),
                                    pz: new camera_Perspective({ fov: 90 }),
                                    nz: new camera_Perspective({ fov: 90 })
                                };
                                cameras.px.lookAt(math_Vector3.POSITIVE_X, math_Vector3.NEGATIVE_Y);
                                cameras.nx.lookAt(math_Vector3.NEGATIVE_X, math_Vector3.NEGATIVE_Y);
                                cameras.py.lookAt(math_Vector3.POSITIVE_Y, math_Vector3.POSITIVE_Z);
                                cameras.ny.lookAt(math_Vector3.NEGATIVE_Y, math_Vector3.NEGATIVE_Z);
                                cameras.pz.lookAt(math_Vector3.POSITIVE_Z, math_Vector3.NEGATIVE_Y);
                                cameras.nz.lookAt(math_Vector3.NEGATIVE_Z, math_Vector3.NEGATIVE_Y);

                                // FIXME In windows, use one framebuffer only renders one side of cubemap
                                ret._frameBuffer = new src_FrameBuffer()

                                return ret;
                            }, {
                                /**
                                 * @param  {string} target
                                 * @return  {qtek.Camera}
                                 */
                                getCamera: function(target) {
                                    return this._cameras[target];
                                },
                                /**
                                 * @param  {qtek.Renderer} renderer
                                 * @param  {qtek.Scene} scene
                                 * @param  {boolean} [notUpdateScene=false]
                                 */
                                render: function(renderer, scene, notUpdateScene) {
                                    var _gl = renderer.gl;
                                    if (!notUpdateScene) {
                                        scene.update();
                                    }
                                    // Tweak fov
                                    // http://the-witness.net/news/2012/02/seamless-cube-map-filtering/
                                    var n = this.texture.width;
                                    var fov = 2 * Math.atan(n / (n - 0.5)) / Math.PI * 180;

                                    for (var i = 0; i < 6; i++) {
                                        var target = targets[i];
                                        var camera = this._cameras[target];
                                        math_Vector3.copy(camera.position, this.position);

                                        camera.far = this.far;
                                        camera.near = this.near;
                                        camera.fov = fov;

                                        if (this.shadowMapPass) {
                                            camera.update();

                                            // update boundingBoxLastFrame
                                            var bbox = scene.getBoundingBox();
                                            bbox.applyTransform(camera.viewMatrix);
                                            scene.viewBoundingBoxLastFrame.copy(bbox);

                                            this.shadowMapPass.render(renderer, scene, camera, true);
                                        }
                                        this._frameBuffer.attach(
                                            this.texture, _gl.COLOR_ATTACHMENT0,
                                            _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i
                                        );
                                        this._frameBuffer.bind(renderer);
                                        renderer.render(scene, camera, true);
                                        this._frameBuffer.unbind(renderer);
                                    }
                                },
                                /**
                                 * @param  {qtek.Renderer} renderer
                                 */
                                dispose: function(renderer) {
                                    this._frameBuffer.dispose(renderer);
                                }
                            });

                            /* harmony default export */
                            var EnvironmentMap = (EnvironmentMapPass);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/geometry/Sphere.js



                            /**
                             * @constructor qtek.geometry.Sphere
                             * @extends qtek.Geometry
                             * @param {Object} [opt]
                             * @param {number} [widthSegments]
                             * @param {number} [heightSegments]
                             * @param {number} [phiStart]
                             * @param {number} [phiLength]
                             * @param {number} [thetaStart]
                             * @param {number} [thetaLength]
                             * @param {number} [radius]
                             */
                            var Sphere = src_Geometry.extend(
                                /** @lends qtek.geometry.Sphere# */
                                {
                                    dynamic: false,
                                    /**
                                     * @type {number}
                                     */
                                    widthSegments: 20,
                                    /**
                                     * @type {number}
                                     */
                                    heightSegments: 20,

                                    /**
                                     * @type {number}
                                     */
                                    phiStart: 0,
                                    /**
                                     * @type {number}
                                     */
                                    phiLength: Math.PI * 2,

                                    /**
                                     * @type {number}
                                     */
                                    thetaStart: 0,
                                    /**
                                     * @type {number}
                                     */
                                    thetaLength: Math.PI,

                                    /**
                                     * @type {number}
                                     */
                                    radius: 1

                                },
                                function() {
                                    this.build();
                                },
                                /** @lends qtek.geometry.Sphere.prototype */
                                {
                                    /**
                                     * Build sphere geometry
                                     */
                                    build: function() {
                                        var heightSegments = this.heightSegments;
                                        var widthSegments = this.widthSegments;

                                        var positionAttr = this.attributes.position;
                                        var texcoordAttr = this.attributes.texcoord0;
                                        var normalAttr = this.attributes.normal;

                                        var vertexCount = (widthSegments + 1) * (heightSegments + 1);
                                        positionAttr.init(vertexCount);
                                        texcoordAttr.init(vertexCount);
                                        normalAttr.init(vertexCount);

                                        var IndicesCtor = vertexCount > 0xffff ? Uint32Array : Uint16Array;
                                        var indices = this.indices = new IndicesCtor(widthSegments * heightSegments * 6);

                                        var x, y, z,
                                            u, v,
                                            i, j;

                                        var radius = this.radius;
                                        var phiStart = this.phiStart;
                                        var phiLength = this.phiLength;
                                        var thetaStart = this.thetaStart;
                                        var thetaLength = this.thetaLength;
                                        var radius = this.radius;

                                        var pos = [];
                                        var uv = [];
                                        var offset = 0;
                                        var divider = 1 / radius;
                                        for (j = 0; j <= heightSegments; j++) {
                                            for (i = 0; i <= widthSegments; i++) {
                                                u = i / widthSegments;
                                                v = j / heightSegments;

                                                // X axis is inverted so texture can be mapped from left to right
                                                x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
                                                y = radius * Math.cos(thetaStart + v * thetaLength);
                                                z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);

                                                pos[0] = x;
                                                pos[1] = y;
                                                pos[2] = z;
                                                uv[0] = u;
                                                uv[1] = v;
                                                positionAttr.set(offset, pos);
                                                texcoordAttr.set(offset, uv);
                                                pos[0] *= divider;
                                                pos[1] *= divider;
                                                pos[2] *= divider;
                                                normalAttr.set(offset, pos);
                                                offset++;
                                            }
                                        }

                                        var i1, i2, i3, i4;

                                        var len = widthSegments + 1;

                                        var n = 0;
                                        for (j = 0; j < heightSegments; j++) {
                                            for (i = 0; i < widthSegments; i++) {
                                                i2 = j * len + i;
                                                i1 = (j * len + i + 1);
                                                i4 = (j + 1) * len + i + 1;
                                                i3 = (j + 1) * len + i;

                                                indices[n++] = i1;
                                                indices[n++] = i2;
                                                indices[n++] = i4;

                                                indices[n++] = i2;
                                                indices[n++] = i3;
                                                indices[n++] = i4;
                                            }
                                        }

                                        this.boundingBox = new math_BoundingBox();
                                        this.boundingBox.max.set(radius, radius, radius);
                                        this.boundingBox.min.set(-radius, -radius, -radius);
                                    }
                                });

                            /* harmony default export */
                            var geometry_Sphere = (Sphere);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/shader/source/basic.glsl.js
                            /* harmony default export */
                            var basic_glsl = ("@export qtek.basic.vertex\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform vec2 uvRepeat : [1.0, 1.0];\nuniform vec2 uvOffset : [0.0, 0.0];\nattribute vec2 texcoord : TEXCOORD_0;\nattribute vec3 position : POSITION;\nattribute vec3 barycentric;\n@import qtek.chunk.skinning_header\nvarying vec2 v_Texcoord;\nvarying vec3 v_Barycentric;\nvoid main()\n{\n    vec3 skinnedPosition = position;\n#ifdef SKINNING\n    @import qtek.chunk.skin_matrix\n    skinnedPosition = (skinMatrixWS * vec4(position, 1.0)).xyz;\n#endif\n    v_Texcoord = texcoord * uvRepeat + uvOffset;\n    v_Barycentric = barycentric;\n    gl_Position = worldViewProjection * vec4(skinnedPosition, 1.0);\n}\n@end\n@export qtek.basic.fragment\nvarying vec2 v_Texcoord;\nuniform sampler2D diffuseMap;\nuniform vec3 color : [1.0, 1.0, 1.0];\nuniform vec3 emission : [0.0, 0.0, 0.0];\nuniform float alpha : 1.0;\n#ifdef ALPHA_TEST\nuniform float alphaCutoff: 0.9;\n#endif\nuniform float lineWidth : 0.0;\nuniform vec4 lineColor : [0.0, 0.0, 0.0, 0.6];\nvarying vec3 v_Barycentric;\n@import qtek.util.edge_factor\n@import qtek.util.rgbm\n@import qtek.util.srgb\nvoid main()\n{\n#ifdef RENDER_TEXCOORD\n    gl_FragColor = vec4(v_Texcoord, 1.0, 1.0);\n    return;\n#endif\n    gl_FragColor = vec4(color, alpha);\n#ifdef DIFFUSEMAP_ENABLED\n    vec4 tex = decodeHDR(texture2D(diffuseMap, v_Texcoord));\n#ifdef SRGB_DECODE\n    tex = sRGBToLinear(tex);\n#endif\n#if defined(DIFFUSEMAP_ALPHA_ALPHA)\n    gl_FragColor.a = tex.a;\n#endif\n    gl_FragColor.rgb *= tex.rgb;\n#endif\n    gl_FragColor.rgb += emission;\n    if( lineWidth > 0.)\n    {\n        gl_FragColor.rgb = mix(gl_FragColor.rgb, lineColor.rgb, (1.0 - edgeFactor(lineWidth)) * lineColor.a);\n    }\n#ifdef GAMMA_ENCODE\n    gl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(1 / 2.2));\n#endif\n#ifdef ALPHA_TEST\n    if (gl_FragColor.a < alphaCutoff) {\n        discard;\n    }\n#endif\n    gl_FragColor = encodeHDR(gl_FragColor);\n}\n@end");

                            // CONCATENATED MODULE: ./node_modules/qtek/src/plugin/Skydome.js






                            src_Shader.import(basic_glsl);
                            /**
                             * @constructor qtek.plugin.Skydome
                             *
                             * @example
                             *     var skyTex = new qtek.Texture2D();
                             *     skyTex.load('assets/textures/sky.jpg');
                             *     var skydome = new qtek.plugin.Skydome({
                             *         scene: scene
                             *     });
                             *     skydome.material.set('diffuseMap', skyTex);
                             */
                            var Skydome = src_Mesh.extend(function() {

                                var skydomeShader = new src_Shader({
                                    vertex: src_Shader.source('qtek.basic.vertex'),
                                    fragment: src_Shader.source('qtek.basic.fragment')
                                });
                                skydomeShader.enableTexture('diffuseMap');

                                var material = new src_Material({
                                    shader: skydomeShader,
                                    depthMask: false
                                });

                                return {
                                    /**
                                     * @type {qtek.Scene}
                                     * @memberOf qtek.plugin.Skydome#
                                     */
                                    scene: null,

                                    geometry: new geometry_Sphere({
                                        widthSegments: 30,
                                        heightSegments: 30,
                                        // thetaLength: Math.PI / 2
                                    }),

                                    material: material,

                                    environmentMap: null,

                                    culling: false
                                };
                            }, function() {
                                var scene = this.scene;
                                if (scene) {
                                    this.attachScene(scene);
                                }

                                if (this.environmentMap) {
                                    this.setEnvironmentMap(this.environmentMap);
                                }
                            }, {
                                /**
                                 * Attach the skybox to the scene
                                 * @param  {qtek.Scene} scene
                                 * @memberOf qtek.plugin.Skydome.prototype
                                 */
                                attachScene: function(scene) {
                                    if (this.scene) {
                                        this.detachScene();
                                    }
                                    this.scene = scene;
                                    scene.on('beforerender', this._beforeRenderScene, this);
                                },
                                /**
                                 * Detach from scene
                                 * @memberOf qtek.plugin.Skydome.prototype
                                 */
                                detachScene: function() {
                                    if (this.scene) {
                                        this.scene.off('beforerender', this._beforeRenderScene);
                                    }
                                    this.scene = null;
                                },

                                _beforeRenderScene: function(renderer, scene, camera) {
                                    this.position.copy(camera.getWorldPosition());
                                    this.update();
                                    renderer.renderQueue([this], camera);
                                },

                                setEnvironmentMap: function(envMap) {
                                    this.material.set('diffuseMap', envMap);
                                },

                                getEnvironmentMap: function() {
                                    return this.material.get('diffuseMap');
                                },

                                dispose: function(renderer) {
                                    this.detachScene();
                                    this.geometry.dispose(renderer);
                                    this.material.dispose(renderer);
                                }
                            });

                            /* harmony default export */
                            var plugin_Skydome = (Skydome);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/util/dds.js




                            // http://msdn.microsoft.com/en-us/library/windows/desktop/bb943991(v=vs.85).aspx
                            // https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js
                            var DDS_MAGIC = 0x20534444;

                            var DDSD_CAPS = 0x1;
                            var DDSD_HEIGHT = 0x2;
                            var DDSD_WIDTH = 0x4;
                            var DDSD_PITCH = 0x8;
                            var DDSD_PIXELFORMAT = 0x1000;
                            var DDSD_MIPMAPCOUNT = 0x20000;
                            var DDSD_LINEARSIZE = 0x80000;
                            var DDSD_DEPTH = 0x800000;

                            var DDSCAPS_COMPLEX = 0x8;
                            var DDSCAPS_MIPMAP = 0x400000;
                            var DDSCAPS_TEXTURE = 0x1000;

                            var DDSCAPS2_CUBEMAP = 0x200;
                            var DDSCAPS2_CUBEMAP_POSITIVEX = 0x400;
                            var DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800;
                            var DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000;
                            var DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000;
                            var DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000;
                            var DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000;
                            var DDSCAPS2_VOLUME = 0x200000;

                            var DDPF_ALPHAPIXELS = 0x1;
                            var DDPF_ALPHA = 0x2;
                            var DDPF_FOURCC = 0x4;
                            var DDPF_RGB = 0x40;
                            var DDPF_YUV = 0x200;
                            var DDPF_LUMINANCE = 0x20000;

                            function fourCCToInt32(value) {
                                return value.charCodeAt(0) +
                                    (value.charCodeAt(1) << 8) +
                                    (value.charCodeAt(2) << 16) +
                                    (value.charCodeAt(3) << 24);
                            }

                            function int32ToFourCC(value) {
                                return String.fromCharCode(
                                    value & 0xff,
                                    (value >> 8) & 0xff,
                                    (value >> 16) & 0xff,
                                    (value >> 24) & 0xff
                                );
                            }

                            var headerLengthInt = 31; // The header length in 32 bit ints

                            var FOURCC_DXT1 = fourCCToInt32('DXT1');
                            var FOURCC_DXT3 = fourCCToInt32('DXT3');
                            var FOURCC_DXT5 = fourCCToInt32('DXT5');
                            // Offsets into the header array
                            var off_magic = 0;

                            var off_size = 1;
                            var off_flags = 2;
                            var off_height = 3;
                            var off_width = 4;

                            var off_mipmapCount = 7;

                            var off_pfFlags = 20;
                            var off_pfFourCC = 21;

                            var off_caps = 27;
                            var off_caps2 = 28;
                            var off_caps3 = 29;
                            var off_caps4 = 30;

                            var dds_ret = {
                                parse: function(arrayBuffer, out) {
                                    var header = new Int32Array(arrayBuffer, 0, headerLengthInt);
                                    if (header[off_magic] !== DDS_MAGIC) {
                                        return null;
                                    }
                                    if (!header(off_pfFlags) & DDPF_FOURCC) {
                                        return null;
                                    }

                                    var fourCC = header(off_pfFourCC);
                                    var width = header[off_width];
                                    var height = header[off_height];
                                    var isCubeMap = header[off_caps2] & DDSCAPS2_CUBEMAP;
                                    var hasMipmap = header[off_flags] & DDSD_MIPMAPCOUNT;
                                    var blockBytes, internalFormat;
                                    switch (fourCC) {
                                        case FOURCC_DXT1:
                                            blockBytes = 8;
                                            internalFormat = src_Texture.COMPRESSED_RGB_S3TC_DXT1_EXT;
                                            break;
                                        case FOURCC_DXT3:
                                            blockBytes = 16;
                                            internalFormat = src_Texture.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                                            break;
                                        case FOURCC_DXT5:
                                            blockBytes = 16;
                                            internalFormat = src_Texture.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                                            break;
                                        default:
                                            return null;
                                    }
                                    var dataOffset = header[off_size] + 4;
                                    // TODO: Suppose all face are existed
                                    var faceNumber = isCubeMap ? 6 : 1;
                                    var mipmapCount = 1;
                                    if (hasMipmap) {
                                        mipmapCount = Math.max(1, header[off_mipmapCount]);
                                    }

                                    var textures = [];
                                    for (var f = 0; f < faceNumber; f++) {
                                        var _width = width;
                                        var _height = height;
                                        textures[f] = new src_Texture2D({
                                            width: _width,
                                            height: _height,
                                            format: internalFormat
                                        });
                                        var mipmaps = [];
                                        for (var i = 0; i < mipmapCount; i++) {
                                            var dataLength = Math.max(4, _width) / 4 * Math.max(4, _height) / 4 * blockBytes;
                                            var byteArray = new Uint8Array(arrayBuffer, dataOffset, dataLength);

                                            dataOffset += dataLength;
                                            _width *= 0.5;
                                            _height *= 0.5;
                                            mipmaps[i] = byteArray;
                                        }
                                        textures[f].pixels = mipmaps[0];
                                        if (hasMipmap) {
                                            textures[f].mipmaps = mipmaps;
                                        }
                                    }
                                    // TODO
                                    // return isCubeMap ? textures : textures[0];
                                    if (out) {
                                        out.width = textures[0].width;
                                        out.height = textures[0].height;
                                        out.format = textures[0].format;
                                        out.pixels = textures[0].pixels;
                                        out.mipmaps = textures[0].mipmaps;
                                    } else {
                                        return textures[0];
                                    }
                                }
                            };

                            /* harmony default export */
                            var dds = (dds_ret);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/util/hdr.js


                            var toChar = String.fromCharCode;

                            var MINELEN = 8;
                            var MAXELEN = 0x7fff;

                            function rgbe2float(rgbe, buffer, offset, exposure) {
                                if (rgbe[3] > 0) {
                                    var f = Math.pow(2.0, rgbe[3] - 128 - 8 + exposure);
                                    buffer[offset + 0] = rgbe[0] * f;
                                    buffer[offset + 1] = rgbe[1] * f;
                                    buffer[offset + 2] = rgbe[2] * f;
                                } else {
                                    buffer[offset + 0] = 0;
                                    buffer[offset + 1] = 0;
                                    buffer[offset + 2] = 0;
                                }
                                buffer[offset + 3] = 1.0;
                                return buffer;
                            }

                            function uint82string(array, offset, size) {
                                var str = '';
                                for (var i = offset; i < size; i++) {
                                    str += toChar(array[i]);
                                }
                                return str;
                            }

                            function copyrgbe(s, t) {
                                t[0] = s[0];
                                t[1] = s[1];
                                t[2] = s[2];
                                t[3] = s[3];
                            }

                            // TODO : check
                            function oldReadColors(scan, buffer, offset, xmax) {
                                var rshift = 0,
                                    x = 0,
                                    len = xmax;
                                while (len > 0) {
                                    scan[x][0] = buffer[offset++];
                                    scan[x][1] = buffer[offset++];
                                    scan[x][2] = buffer[offset++];
                                    scan[x][3] = buffer[offset++];
                                    if (scan[x][0] === 1 && scan[x][1] === 1 && scan[x][2] === 1) {
                                        // exp is count of repeated pixels
                                        for (var i = (scan[x][3] << rshift) >>> 0; i > 0; i--) {
                                            copyrgbe(scan[x - 1], scan[x]);
                                            x++;
                                            len--;
                                        }
                                        rshift += 8;
                                    } else {
                                        x++;
                                        len--;
                                        rshift = 0;
                                    }
                                }
                                return offset;
                            }

                            function readColors(scan, buffer, offset, xmax) {
                                if ((xmax < MINELEN) | (xmax > MAXELEN)) {
                                    return oldReadColors(scan, buffer, offset, xmax);
                                }
                                var i = buffer[offset++];
                                if (i != 2) {
                                    return oldReadColors(scan, buffer, offset - 1, xmax);
                                }
                                scan[0][1] = buffer[offset++];
                                scan[0][2] = buffer[offset++];

                                i = buffer[offset++];
                                if ((((scan[0][2] << 8) >>> 0) | i) >>> 0 !== xmax) {
                                    return null;
                                }
                                for (var i = 0; i < 4; i++) {
                                    for (var x = 0; x < xmax;) {
                                        var code = buffer[offset++];
                                        if (code > 128) {
                                            code = (code & 127) >>> 0;
                                            var val = buffer[offset++];
                                            while (code--) {
                                                scan[x++][i] = val;
                                            }
                                        } else {
                                            while (code--) {
                                                scan[x++][i] = buffer[offset++];
                                            }
                                        }
                                    }
                                }
                                return offset;
                            }


                            var hdr_ret = {
                                // http://www.graphics.cornell.edu/~bjw/rgbe.html
                                // Blender source
                                // http://radsite.lbl.gov/radiance/refer/Notes/picture_format.html
                                parseRGBE: function(arrayBuffer, texture, exposure) {
                                    if (exposure == null) {
                                        exposure = 0;
                                    }
                                    var data = new Uint8Array(arrayBuffer);
                                    var size = data.length;
                                    if (uint82string(data, 0, 2) !== '#?') {
                                        return;
                                    }
                                    // find empty line, next line is resolution info
                                    for (var i = 2; i < size; i++) {
                                        if (toChar(data[i]) === '\n' && toChar(data[i + 1]) === '\n') {
                                            break;
                                        }
                                    }
                                    if (i >= size) { // not found
                                        return;
                                    }
                                    // find resolution info line
                                    i += 2;
                                    var str = '';
                                    for (; i < size; i++) {
                                        var _char = toChar(data[i]);
                                        if (_char === '\n') {
                                            break;
                                        }
                                        str += _char;
                                    }
                                    // -Y M +X N
                                    var tmp = str.split(' ');
                                    var height = parseInt(tmp[1]);
                                    var width = parseInt(tmp[3]);
                                    if (!width || !height) {
                                        return;
                                    }

                                    // read and decode actual data
                                    var offset = i + 1;
                                    var scanline = [];
                                    // memzero
                                    for (var x = 0; x < width; x++) {
                                        scanline[x] = [];
                                        for (var j = 0; j < 4; j++) {
                                            scanline[x][j] = 0;
                                        }
                                    }
                                    var pixels = new Float32Array(width * height * 4);
                                    var offset2 = 0;
                                    for (var y = 0; y < height; y++) {
                                        var offset = readColors(scanline, data, offset, width);
                                        if (!offset) {
                                            return null;
                                        }
                                        for (var x = 0; x < width; x++) {
                                            rgbe2float(scanline[x], pixels, offset2, exposure);
                                            offset2 += 4;
                                        }
                                    }

                                    if (!texture) {
                                        texture = new src_Texture2D();
                                    }
                                    texture.width = width;
                                    texture.height = height;
                                    texture.pixels = pixels;
                                    // HALF_FLOAT can't use Float32Array
                                    texture.type = src_Texture.FLOAT;
                                    return texture;
                                },

                                parseRGBEFromPNG: function(png) {

                                }
                            };

                            /* harmony default export */
                            var hdr = (hdr_ret);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/util/texture.js










                            /**
                             * @alias qtek.util.texture
                             */
                            var textureUtil = {
                                /**
                                 * @param  {string|object} path
                                 * @param  {object} [option]
                                 * @param  {Function} [onsuccess]
                                 * @param  {Function} [onerror]
                                 * @return {qtek.Texture}
                                 */
                                loadTexture: function(path, option, onsuccess, onerror) {
                                    var texture;
                                    if (typeof(option) === 'function') {
                                        onsuccess = option;
                                        onerror = onsuccess;
                                        option = {};
                                    } else {
                                        option = option || {};
                                    }
                                    if (typeof(path) === 'string') {
                                        if (path.match(/.hdr$/) || option.fileType === 'hdr') {
                                            texture = new src_Texture2D({
                                                width: 0,
                                                height: 0
                                            });
                                            textureUtil._fetchTexture(
                                                path,
                                                function(data) {
                                                    hdr.parseRGBE(data, texture, option.exposure);
                                                    texture.dirty();
                                                    onsuccess && onsuccess(texture);
                                                },
                                                onerror
                                            );
                                            return texture;
                                        } else if (path.match(/.dds$/) || option.fileType === 'dds') {
                                            texture = new src_Texture2D({
                                                width: 0,
                                                height: 0
                                            });
                                            textureUtil._fetchTexture(
                                                path,
                                                function(data) {
                                                    dds.parse(data, texture);
                                                    texture.dirty();
                                                    onsuccess && onsuccess(texture);
                                                },
                                                onerror
                                            );
                                        } else {
                                            texture = new src_Texture2D();
                                            texture.load(path);
                                            texture.success(onsuccess);
                                            texture.error(onerror);
                                        }
                                    } else if (typeof(path) == 'object' && typeof(path.px) !== 'undefined') {
                                        var texture = new src_TextureCube();
                                        texture.load(path);
                                        texture.success(onsuccess);
                                        texture.error(onerror);
                                    }
                                    return texture;
                                },

                                /**
                                 * Load a panorama texture and render it to a cube map
                                 * @param  {qtek.Renderer} renderer
                                 * @param  {string} path
                                 * @param  {qtek.TextureCube} cubeMap
                                 * @param  {object} [option]
                                 * @param  {boolean} [option.encodeRGBM]
                                 * @param  {number} [option.exposure]
                                 * @param  {Function} [onsuccess]
                                 * @param  {Function} [onerror]
                                 */
                                loadPanorama: function(renderer, path, cubeMap, option, onsuccess, onerror) {
                                    var self = this;

                                    if (typeof(option) === 'function') {
                                        onsuccess = option;
                                        onerror = onsuccess;
                                        option = {};
                                    } else {
                                        option = option || {};
                                    }

                                    textureUtil.loadTexture(path, option, function(texture) {
                                        // PENDING
                                        texture.flipY = option.flipY || false;
                                        self.panoramaToCubeMap(renderer, texture, cubeMap, option);
                                        texture.dispose(renderer);
                                        onsuccess && onsuccess(cubeMap);
                                    }, onerror);
                                },

                                /**
                                 * Render a panorama texture to a cube map
                                 * @param  {qtek.Renderer} renderer
                                 * @param  {qtek.Texture2D} panoramaMap
                                 * @param  {qtek.TextureCube} cubeMap
                                 * @param  {Object} option
                                 * @param  {boolean} [option.encodeRGBM]
                                 */
                                panoramaToCubeMap: function(renderer, panoramaMap, cubeMap, option) {
                                    var environmentMapPass = new EnvironmentMap();
                                    var skydome = new plugin_Skydome({
                                        scene: new src_Scene()
                                    });
                                    skydome.material.set('diffuseMap', panoramaMap);

                                    option = option || {};
                                    if (option.encodeRGBM) {
                                        skydome.material.shader.define('fragment', 'RGBM_ENCODE');
                                    }

                                    environmentMapPass.texture = cubeMap;
                                    environmentMapPass.render(renderer, skydome.scene);
                                    environmentMapPass.texture = null;
                                    environmentMapPass.dispose(renderer);
                                    return cubeMap;
                                },

                                /**
                                 * Convert height map to normal map
                                 * @param {HTMLImageElement|HTMLCanvasElement} image
                                 * @param {boolean} [checkBump=false]
                                 * @return {HTMLCanvasElement}
                                 */
                                heightToNormal: function(image, checkBump) {
                                    var canvas = document.createElement('canvas');
                                    var width = canvas.width = image.width;
                                    var height = canvas.height = image.height;
                                    var ctx = canvas.getContext('2d');
                                    ctx.drawImage(image, 0, 0, width, height);
                                    checkBump = checkBump || false;
                                    var srcData = ctx.getImageData(0, 0, width, height);
                                    var dstData = ctx.createImageData(width, height);
                                    for (var i = 0; i < srcData.data.length; i += 4) {
                                        if (checkBump) {
                                            var r = srcData.data[i];
                                            var g = srcData.data[i + 1];
                                            var b = srcData.data[i + 2];
                                            var diff = Math.abs(r - g) + Math.abs(g - b);
                                            if (diff > 20) {
                                                console.warn('Given image is not a height map');
                                                return image;
                                            }
                                        }
                                        // Modified from http://mrdoob.com/lab/javascript/height2normal/
                                        var x1, y1, x2, y2;
                                        if (i % (width * 4) === 0) {
                                            // left edge
                                            x1 = srcData.data[i];
                                            x2 = srcData.data[i + 4];
                                        } else if (i % (width * 4) === (width - 1) * 4) {
                                            // right edge
                                            x1 = srcData.data[i - 4];
                                            x2 = srcData.data[i];
                                        } else {
                                            x1 = srcData.data[i - 4];
                                            x2 = srcData.data[i + 4];
                                        }

                                        if (i < width * 4) {
                                            // top edge
                                            y1 = srcData.data[i];
                                            y2 = srcData.data[i + width * 4];
                                        } else if (i > width * (height - 1) * 4) {
                                            // bottom edge
                                            y1 = srcData.data[i - width * 4];
                                            y2 = srcData.data[i];
                                        } else {
                                            y1 = srcData.data[i - width * 4];
                                            y2 = srcData.data[i + width * 4];
                                        }

                                        dstData.data[i] = (x1 - x2) + 127;
                                        dstData.data[i + 1] = (y1 - y2) + 127;
                                        dstData.data[i + 2] = 255;
                                        dstData.data[i + 3] = 255;
                                    }
                                    ctx.putImageData(dstData, 0, 0);
                                    return canvas;
                                },

                                /**
                                 * Convert height map to normal map
                                 * @param {HTMLImageElement|HTMLCanvasElement} image
                                 * @param {boolean} [checkBump=false]
                                 * @param {number} [threshold=20]
                                 * @return {HTMLCanvasElement}
                                 */
                                isHeightImage: function(img, downScaleSize, threshold) {
                                    if (!img || !img.width || !img.height) {
                                        return false;
                                    }

                                    var canvas = document.createElement('canvas');
                                    var ctx = canvas.getContext('2d');
                                    var size = downScaleSize || 32;
                                    threshold = threshold || 20;
                                    canvas.width = canvas.height = size;
                                    ctx.drawImage(img, 0, 0, size, size);
                                    var srcData = ctx.getImageData(0, 0, size, size);
                                    for (var i = 0; i < srcData.data.length; i += 4) {
                                        var r = srcData.data[i];
                                        var g = srcData.data[i + 1];
                                        var b = srcData.data[i + 2];
                                        var diff = Math.abs(r - g) + Math.abs(g - b);
                                        if (diff > threshold) {
                                            return false;
                                        }
                                    }
                                    return true;
                                },

                                _fetchTexture: function(path, onsuccess, onerror) {
                                    request.get({
                                        url: path,
                                        responseType: 'arraybuffer',
                                        onload: onsuccess,
                                        onerror: onerror
                                    });
                                },

                                /**
                                 * Create a chessboard texture
                                 * @param  {number} [size]
                                 * @param  {number} [unitSize]
                                 * @param  {string} [color1]
                                 * @param  {string} [color2]
                                 * @return {qtek.Texture2D}
                                 */
                                createChessboard: function(size, unitSize, color1, color2) {
                                    size = size || 512;
                                    unitSize = unitSize || 64;
                                    color1 = color1 || 'black';
                                    color2 = color2 || 'white';

                                    var repeat = Math.ceil(size / unitSize);

                                    var canvas = document.createElement('canvas');
                                    canvas.width = size;
                                    canvas.height = size;
                                    var ctx = canvas.getContext('2d');
                                    ctx.fillStyle = color2;
                                    ctx.fillRect(0, 0, size, size);

                                    ctx.fillStyle = color1;
                                    for (var i = 0; i < repeat; i++) {
                                        for (var j = 0; j < repeat; j++) {
                                            var isFill = j % 2 ? (i % 2) : (i % 2 - 1);
                                            if (isFill) {
                                                ctx.fillRect(i * unitSize, j * unitSize, unitSize, unitSize);
                                            }
                                        }
                                    }

                                    var texture = new src_Texture2D({
                                        image: canvas,
                                        anisotropic: 8
                                    });

                                    return texture;
                                },

                                /**
                                 * Create a blank pure color 1x1 texture
                                 * @param  {string} color
                                 * @return {qtek.Texture2D}
                                 */
                                createBlank: function(color) {
                                    var canvas = document.createElement('canvas');
                                    canvas.width = 1;
                                    canvas.height = 1;
                                    var ctx = canvas.getContext('2d');
                                    ctx.fillStyle = color;
                                    ctx.fillRect(0, 0, 1, 1);

                                    var texture = new src_Texture2D({
                                        image: canvas
                                    });

                                    return texture;
                                }
                            };

                            /* harmony default export */
                            var util_texture = (textureUtil);

                            // CONCATENATED MODULE: ./src/util/EChartsSurface.js
                            /**
                             * Surface texture in the 3D scene.
                             * Provide management and rendering of zrender shapes and groups
                             *
                             * @module echarts-gl/util/EChartsSurface
                             * @author Yi Shen(http://github.com/pissang)
                             */





                            var events = ['mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout', 'click', 'dblclick', 'contextmenu'];

                            function makeHandlerName(eventName) {
                                return '_on' + eventName;
                            }
                            /**
                             * @constructor
                             * @alias echarts-gl/util/EChartsSurface
                             * @param {module:echarts~ECharts} chart
                             */
                            var EChartsSurface = function(chart) {
                                var self = this;
                                this._texture = new src_Texture2D({
                                    anisotropic: 32,
                                    flipY: false,

                                    surface: this,

                                    dispose: function(renderer) {
                                        self.dispose();
                                        src_Texture2D.prototype.dispose.call(this, renderer);
                                    }
                                });

                                events.forEach(function(eventName) {
                                    this[makeHandlerName(eventName)] = function(eveObj) {
                                        if (!eveObj.triangle) {
                                            return;
                                        }
                                        this._meshes.forEach(function(mesh) {
                                            this.dispatchEvent(eventName, mesh, eveObj.triangle, eveObj.point);
                                        }, this);
                                    };
                                }, this);

                                this._meshes = [];

                                if (chart) {
                                    this.setECharts(chart);
                                }

                                // Texture updated callback;
                                this.onupdate = null;
                            };

                            EChartsSurface.prototype = {

                                constructor: EChartsSurface,

                                getTexture: function() {
                                    return this._texture;
                                },

                                setECharts: function(chart) {
                                    this._chart = chart;

                                    var canvas = chart.getDom();
                                    if (!(canvas instanceof HTMLCanvasElement)) {
                                        console.error('ECharts must init on canvas if it is used as texture.');
                                        // Use an empty canvas
                                        canvas = document.createElement('canvas');
                                    } else {
                                        var self = this;
                                        // Wrap refreshImmediately
                                        var zr = chart.getZr();
                                        var oldRefreshImmediately = zr.__oldRefreshImmediately || zr.refreshImmediately;
                                        zr.refreshImmediately = function() {
                                            oldRefreshImmediately.call(this);
                                            self._texture.dirty();

                                            self.onupdate && self.onupdate();
                                        };
                                        zr.__oldRefreshImmediately = oldRefreshImmediately;
                                    }

                                    this._texture.image = canvas;
                                    this._texture.dirty();
                                    this.onupdate && this.onupdate();
                                },

                                /**
                                 * @method
                                 * @param {qtek.Mesh} attachedMesh
                                 * @param {Array.<number>} triangle Triangle indices
                                 * @param {qtek.math.Vector3} point
                                 */
                                dispatchEvent: (function() {

                                    var p0 = new math_Vector3();
                                    var p1 = new math_Vector3();
                                    var p2 = new math_Vector3();
                                    var uv0 = new math_Vector2();
                                    var uv1 = new math_Vector2();
                                    var uv2 = new math_Vector2();
                                    var uv = new math_Vector2();

                                    var vCross = new math_Vector3();

                                    return function(eventName, attachedMesh, triangle, point) {
                                        var geo = attachedMesh.geometry;
                                        var position = geo.attributes.position;
                                        var texcoord = geo.attributes.texcoord0;
                                        var dot = math_Vector3.dot;
                                        var cross = math_Vector3.cross;

                                        position.get(triangle[0], p0._array);
                                        position.get(triangle[1], p1._array);
                                        position.get(triangle[2], p2._array);
                                        texcoord.get(triangle[0], uv0._array);
                                        texcoord.get(triangle[1], uv1._array);
                                        texcoord.get(triangle[2], uv2._array);

                                        cross(vCross, p1, p2);
                                        var det = dot(p0, vCross);
                                        var t = dot(point, vCross) / det;
                                        cross(vCross, p2, p0);
                                        var u = dot(point, vCross) / det;
                                        cross(vCross, p0, p1);
                                        var v = dot(point, vCross) / det;

                                        math_Vector2.scale(uv, uv0, t);
                                        math_Vector2.scaleAndAdd(uv, uv, uv1, u);
                                        math_Vector2.scaleAndAdd(uv, uv, uv2, v);

                                        var x = uv.x * this._chart.getWidth();
                                        var y = uv.y * this._chart.getHeight();
                                        this._chart.getZr().handler.dispatch(eventName, {
                                            zrX: x,
                                            zrY: y
                                        });
                                    };
                                })(),

                                attachToMesh: function(mesh) {
                                    if (this._meshes.indexOf(mesh) >= 0) {
                                        return;
                                    }

                                    events.forEach(function(eventName) {
                                        mesh.on(eventName, this[makeHandlerName(eventName)], this);
                                    }, this);

                                    this._meshes.push(mesh);
                                },

                                detachFromMesh: function(mesh) {
                                    var idx = this._meshes.indexOf(mesh);
                                    if (idx >= 0) {
                                        this._meshes.splice(idx, 1);
                                    }

                                    events.forEach(function(eventName) {
                                        mesh.off(eventName, this[makeHandlerName(eventName)]);
                                    }, this);
                                },

                                dispose: function() {
                                    this._meshes.forEach(function(mesh) {
                                        this.detachFromMesh(mesh);
                                    }, this);
                                }
                            };

                            /* harmony default export */
                            var util_EChartsSurface = (EChartsSurface);
                            // CONCATENATED MODULE: ./node_modules/qtek/src/camera/Orthographic.js

                            /**
                             * @constructor qtek.camera.Orthographic
                             * @extends qtek.Camera
                             */
                            var Orthographic = src_Camera.extend(
                                /** @lends qtek.camera.Orthographic# */
                                {
                                    /**
                                     * @type {number}
                                     */
                                    left: -1,
                                    /**
                                     * @type {number}
                                     */
                                    right: 1,
                                    /**
                                     * @type {number}
                                     */
                                    near: -1,
                                    /**
                                     * @type {number}
                                     */
                                    far: 1,
                                    /**
                                     * @type {number}
                                     */
                                    top: 1,
                                    /**
                                     * @type {number}
                                     */
                                    bottom: -1
                                },
                                /** @lends qtek.camera.Orthographic.prototype */
                                {

                                    updateProjectionMatrix: function() {
                                        this.projectionMatrix.ortho(this.left, this.right, this.bottom, this.top, this.near, this.far);
                                    },

                                    decomposeProjectionMatrix: function() {
                                        var m = this.projectionMatrix._array;
                                        this.left = (-1 - m[12]) / m[0];
                                        this.right = (1 - m[12]) / m[0];
                                        this.top = (1 - m[13]) / m[5];
                                        this.bottom = (-1 - m[13]) / m[5];
                                        this.near = -(-1 - m[14]) / m[10];
                                        this.far = -(1 - m[14]) / m[10];
                                    },
                                    /**
                                     * @return {qtek.camera.Orthographic}
                                     */
                                    clone: function() {
                                        var camera = src_Camera.prototype.clone.call(this);
                                        camera.left = this.left;
                                        camera.right = this.right;
                                        camera.near = this.near;
                                        camera.far = this.far;
                                        camera.top = this.top;
                                        camera.bottom = this.bottom;

                                        return camera;
                                    }
                                });

                            /* harmony default export */
                            var camera_Orthographic = (Orthographic);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/geometry/Plane.js



                            /**
                             * @constructor qtek.geometry.Plane
                             * @extends qtek.Geometry
                             * @param {Object} [opt]
                             * @param {number} [opt.widthSegments]
                             * @param {number} [opt.heightSegments]
                             */
                            var Plane_Plane = src_Geometry.extend(
                                /** @lends qtek.geometry.Plane# */
                                {
                                    dynamic: false,
                                    /**
                                     * @type {number}
                                     */
                                    widthSegments: 1,
                                    /**
                                     * @type {number}
                                     */
                                    heightSegments: 1
                                },
                                function() {
                                    this.build();
                                },
                                /** @lends qtek.geometry.Plane.prototype */
                                {
                                    /**
                                     * Build plane geometry
                                     */
                                    build: function() {
                                        var heightSegments = this.heightSegments;
                                        var widthSegments = this.widthSegments;
                                        var attributes = this.attributes;
                                        var positions = [];
                                        var texcoords = [];
                                        var normals = [];
                                        var faces = [];

                                        for (var y = 0; y <= heightSegments; y++) {
                                            var t = y / heightSegments;
                                            for (var x = 0; x <= widthSegments; x++) {
                                                var s = x / widthSegments;

                                                positions.push([2 * s - 1, 2 * t - 1, 0]);
                                                if (texcoords) {
                                                    texcoords.push([s, t]);
                                                }
                                                if (normals) {
                                                    normals.push([0, 0, 1]);
                                                }
                                                if (x < widthSegments && y < heightSegments) {
                                                    var i = x + y * (widthSegments + 1);
                                                    faces.push([i, i + 1, i + widthSegments + 1]);
                                                    faces.push([i + widthSegments + 1, i + 1, i + widthSegments + 2]);
                                                }
                                            }
                                        }

                                        attributes.position.fromArray(positions);
                                        attributes.texcoord0.fromArray(texcoords);
                                        attributes.normal.fromArray(normals);

                                        this.initIndicesFromArray(faces);

                                        this.boundingBox = new math_BoundingBox();
                                        this.boundingBox.min.set(-1, -1, 0);
                                        this.boundingBox.max.set(1, 1, 0);
                                    }
                                });

                            /* harmony default export */
                            var geometry_Plane = (Plane_Plane);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/shader/source/compositor/vertex.glsl.js
                            /* harmony default export */
                            var vertex_glsl = ("\n@export qtek.compositor.vertex\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nattribute vec3 position : POSITION;\nattribute vec2 texcoord : TEXCOORD_0;\nvarying vec2 v_Texcoord;\nvoid main()\n{\n    v_Texcoord = texcoord;\n    gl_Position = worldViewProjection * vec4(position, 1.0);\n}\n@end");

                            // CONCATENATED MODULE: ./node_modules/qtek/src/compositor/Pass.js









                            src_Shader['import'](vertex_glsl);

                            var planeGeo = new geometry_Plane();
                            var Pass_mesh = new src_Mesh({
                                geometry: planeGeo,
                                frustumCulling: false
                            });
                            var Pass_camera = new camera_Orthographic();

                            /**
                             * @constructor qtek.compositor.Pass
                             * @extends qtek.core.Base
                             */
                            var Pass = core_Base.extend(function() {
                                    return /** @lends qtek.compositor.Pass# */ {
                                        /**
                                         * Fragment shader string
                                         * @type {string}
                                         */
                                        // PENDING shader or fragment ?
                                        fragment: '',

                                        /**
                                         * @type {Object}
                                         */
                                        outputs: null,

                                        /**
                                         * @type {qtek.Material}
                                         */
                                        material: null,

                                        /**
                                         * @type {Boolean}
                                         */
                                        blendWithPrevious: false,

                                        /**
                                         * @type {Boolean}
                                         */
                                        clearColor: false,

                                        /**
                                         * @type {Boolean}
                                         */
                                        clearDepth: true
                                    };
                                }, function() {

                                    var shader = new src_Shader({
                                        vertex: src_Shader.source('qtek.compositor.vertex'),
                                        fragment: this.fragment
                                    });
                                    var material = new src_Material({
                                        shader: shader
                                    });
                                    shader.enableTexturesAll();

                                    this.material = material;

                                },
                                /** @lends qtek.compositor.Pass.prototype */
                                {
                                    /**
                                     * @param {string} name
                                     * @param {} value
                                     */
                                    setUniform: function(name, value) {
                                        var uniform = this.material.uniforms[name];
                                        if (uniform) {
                                            uniform.value = value;
                                        }
                                    },
                                    /**
                                     * @param  {string} name
                                     * @return {}
                                     */
                                    getUniform: function(name) {
                                        var uniform = this.material.uniforms[name];
                                        if (uniform) {
                                            return uniform.value;
                                        }
                                    },
                                    /**
                                     * @param  {qtek.Texture} texture
                                     * @param  {number} attachment
                                     */
                                    attachOutput: function(texture, attachment) {
                                        if (!this.outputs) {
                                            this.outputs = {};
                                        }
                                        attachment = attachment || glenum.COLOR_ATTACHMENT0;
                                        this.outputs[attachment] = texture;
                                    },
                                    /**
                                     * @param  {qtek.Texture} texture
                                     */
                                    detachOutput: function(texture) {
                                        for (var attachment in this.outputs) {
                                            if (this.outputs[attachment] === texture) {
                                                this.outputs[attachment] = null;
                                            }
                                        }
                                    },

                                    bind: function(renderer, frameBuffer) {

                                        if (this.outputs) {
                                            for (var attachment in this.outputs) {
                                                var texture = this.outputs[attachment];
                                                if (texture) {
                                                    frameBuffer.attach(texture, attachment);
                                                }
                                            }
                                        }

                                        if (frameBuffer) {
                                            frameBuffer.bind(renderer);
                                        }
                                    },

                                    unbind: function(renderer, frameBuffer) {
                                        frameBuffer.unbind(renderer);
                                    },
                                    /**
                                     * @param  {qtek.Renderer} renderer
                                     * @param  {qtek.FrameBuffer} [frameBuffer]
                                     */
                                    render: function(renderer, frameBuffer) {

                                        var _gl = renderer.gl;

                                        if (frameBuffer) {
                                            this.bind(renderer, frameBuffer);
                                            // MRT Support in chrome
                                            // https://www.khronos.org/registry/webgl/sdk/tests/conformance/extensions/ext-draw-buffers.html
                                            var ext = renderer.getGLExtension('EXT_draw_buffers');
                                            if (ext && this.outputs) {
                                                var bufs = [];
                                                for (var attachment in this.outputs) {
                                                    attachment = +attachment;
                                                    if (attachment >= _gl.COLOR_ATTACHMENT0 && attachment <= _gl.COLOR_ATTACHMENT0 + 8) {
                                                        bufs.push(attachment);
                                                    }
                                                }
                                                ext.drawBuffersEXT(bufs);
                                            }
                                        }

                                        this.trigger('beforerender', this, renderer);

                                        // FIXME Don't clear in each pass in default, let the color overwrite the buffer
                                        // FIXME pixels may be discard
                                        var clearBit = this.clearDepth ? _gl.DEPTH_BUFFER_BIT : 0;
                                        _gl.depthMask(true);
                                        if (this.clearColor) {
                                            clearBit = clearBit | _gl.COLOR_BUFFER_BIT;
                                            _gl.colorMask(true, true, true, true);
                                            var cc = this.clearColor;
                                            if (Array.isArray(cc)) {
                                                _gl.clearColor(cc[0], cc[1], cc[2], cc[3]);
                                            }
                                        }
                                        _gl.clear(clearBit);

                                        if (this.blendWithPrevious) {
                                            // Blend with previous rendered scene in the final output
                                            // FIXME Configure blend.
                                            // FIXME It will cause screen blink？
                                            _gl.enable(_gl.BLEND);
                                            this.material.transparent = true;
                                        } else {
                                            _gl.disable(_gl.BLEND);
                                            this.material.transparent = false;
                                        }

                                        this.renderQuad(renderer);

                                        this.trigger('afterrender', this, renderer);

                                        if (frameBuffer) {
                                            this.unbind(renderer, frameBuffer);
                                        }
                                    },

                                    /**
                                     * Simply do quad rendering
                                     */
                                    renderQuad: function(renderer) {
                                        Pass_mesh.material = this.material;
                                        renderer.renderQueue([Pass_mesh], Pass_camera);
                                    },

                                    /**
                                     * @param  {qtek.Renderer} renderer
                                     */
                                    dispose: function(renderer) {
                                        this.material.dispose(renderer);
                                    }
                                });

                            /* harmony default export */
                            var compositor_Pass = (Pass);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/geometry/Cube.js







                            var planeMatrix = new math_Matrix4();

                            /**
                             * @constructor qtek.geometry.Cube
                             * @extends qtek.Geometry
                             * @param {Object} [opt]
                             * @param {number} [opt.widthSegments]
                             * @param {number} [opt.heightSegments]
                             * @param {number} [opt.depthSegments]
                             * @param {boolean} [opt.inside]
                             */
                            var Cube = src_Geometry.extend(
                                /**@lends qtek.geometry.Cube# */
                                {
                                    dynamic: false,
                                    /**
                                     * @type {number}
                                     */
                                    widthSegments: 1,
                                    /**
                                     * @type {number}
                                     */
                                    heightSegments: 1,
                                    /**
                                     * @type {number}
                                     */
                                    depthSegments: 1,
                                    /**
                                     * @type {boolean}
                                     */
                                    inside: false
                                },
                                function() {
                                    this.build();
                                },
                                /** @lends qtek.geometry.Cube.prototype */
                                {
                                    /**
                                     * Build cube geometry
                                     */
                                    build: function() {

                                        var planes = {
                                            'px': createPlane('px', this.depthSegments, this.heightSegments),
                                            'nx': createPlane('nx', this.depthSegments, this.heightSegments),
                                            'py': createPlane('py', this.widthSegments, this.depthSegments),
                                            'ny': createPlane('ny', this.widthSegments, this.depthSegments),
                                            'pz': createPlane('pz', this.widthSegments, this.heightSegments),
                                            'nz': createPlane('nz', this.widthSegments, this.heightSegments),
                                        };

                                        var attrList = ['position', 'texcoord0', 'normal'];
                                        var vertexNumber = 0;
                                        var faceNumber = 0;
                                        for (var pos in planes) {
                                            vertexNumber += planes[pos].vertexCount;
                                            faceNumber += planes[pos].indices.length;
                                        }
                                        for (var k = 0; k < attrList.length; k++) {
                                            this.attributes[attrList[k]].init(vertexNumber);
                                        }
                                        this.indices = new core_vendor.Uint16Array(faceNumber);
                                        var faceOffset = 0;
                                        var vertexOffset = 0;
                                        for (var pos in planes) {
                                            var plane = planes[pos];
                                            for (var k = 0; k < attrList.length; k++) {
                                                var attrName = attrList[k];
                                                var attrArray = plane.attributes[attrName].value;
                                                var attrSize = plane.attributes[attrName].size;
                                                var isNormal = attrName === 'normal';
                                                for (var i = 0; i < attrArray.length; i++) {
                                                    var value = attrArray[i];
                                                    if (this.inside && isNormal) {
                                                        value = -value;
                                                    }
                                                    this.attributes[attrName].value[i + attrSize * vertexOffset] = value;
                                                }
                                            }
                                            for (var i = 0; i < plane.indices.length; i++) {
                                                this.indices[i + faceOffset] = vertexOffset + plane.indices[i];
                                            }
                                            faceOffset += plane.indices.length;
                                            vertexOffset += plane.vertexCount;
                                        }

                                        this.boundingBox = new math_BoundingBox();
                                        this.boundingBox.max.set(1, 1, 1);
                                        this.boundingBox.min.set(-1, -1, -1);
                                    }
                                });

                            function createPlane(pos, widthSegments, heightSegments) {

                                planeMatrix.identity();

                                var plane = new geometry_Plane({
                                    widthSegments: widthSegments,
                                    heightSegments: heightSegments
                                });

                                switch (pos) {
                                    case 'px':
                                        math_Matrix4.translate(planeMatrix, planeMatrix, math_Vector3.POSITIVE_X);
                                        math_Matrix4.rotateY(planeMatrix, planeMatrix, Math.PI / 2);
                                        break;
                                    case 'nx':
                                        math_Matrix4.translate(planeMatrix, planeMatrix, math_Vector3.NEGATIVE_X);
                                        math_Matrix4.rotateY(planeMatrix, planeMatrix, -Math.PI / 2);
                                        break;
                                    case 'py':
                                        math_Matrix4.translate(planeMatrix, planeMatrix, math_Vector3.POSITIVE_Y);
                                        math_Matrix4.rotateX(planeMatrix, planeMatrix, -Math.PI / 2);
                                        break;
                                    case 'ny':
                                        math_Matrix4.translate(planeMatrix, planeMatrix, math_Vector3.NEGATIVE_Y);
                                        math_Matrix4.rotateX(planeMatrix, planeMatrix, Math.PI / 2);
                                        break;
                                    case 'pz':
                                        math_Matrix4.translate(planeMatrix, planeMatrix, math_Vector3.POSITIVE_Z);
                                        break;
                                    case 'nz':
                                        math_Matrix4.translate(planeMatrix, planeMatrix, math_Vector3.NEGATIVE_Z);
                                        math_Matrix4.rotateY(planeMatrix, planeMatrix, Math.PI);
                                        break;
                                }
                                plane.applyTransform(planeMatrix);
                                return plane;
                            }

                            /* harmony default export */
                            var geometry_Cube = (Cube);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/shader/source/skybox.glsl.js
                            /* harmony default export */
                            var skybox_glsl = ("@export qtek.skybox.vertex\nuniform mat4 world : WORLD;\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nattribute vec3 position : POSITION;\nvarying vec3 v_WorldPosition;\nvoid main()\n{\n    v_WorldPosition = (world * vec4(position, 1.0)).xyz;\n    gl_Position = worldViewProjection * vec4(position, 1.0);\n}\n@end\n@export qtek.skybox.fragment\nuniform mat4 viewInverse : VIEWINVERSE;\nuniform samplerCube environmentMap;\nuniform float lod: 0.0;\nvarying vec3 v_WorldPosition;\n@import qtek.util.rgbm\nvoid main()\n{\n    vec3 eyePos = viewInverse[3].xyz;\n    vec3 viewDirection = normalize(v_WorldPosition - eyePos);\n    vec3 tex = decodeHDR(textureCubeLodEXT(environmentMap, viewDirection, lod)).rgb;\n#ifdef SRGB_DECODE\n    tex.rgb = pow(tex.rgb, vec3(2.2));\n#endif\n    gl_FragColor = encodeHDR(vec4(tex, 1.0));\n}\n@end");

                            // CONCATENATED MODULE: ./node_modules/qtek/src/plugin/Skybox.js
                            // TODO Should not derived from mesh?






                            src_Shader.import(skybox_glsl);
                            /**
                             * @constructor qtek.plugin.Skybox
                             *
                             * @example
                             *     var skyTex = new qtek.TextureCube();
                             *     skyTex.load({
                             *         'px': 'assets/textures/sky/px.jpg',
                             *         'nx': 'assets/textures/sky/nx.jpg'
                             *         'py': 'assets/textures/sky/py.jpg'
                             *         'ny': 'assets/textures/sky/ny.jpg'
                             *         'pz': 'assets/textures/sky/pz.jpg'
                             *         'nz': 'assets/textures/sky/nz.jpg'
                             *     });
                             *     var skybox = new qtek.plugin.Skybox({
                             *         scene: scene
                             *     });
                             *     skybox.material.set('environmentMap', skyTex);
                             */
                            var Skybox = src_Mesh.extend(function() {

                                var skyboxShader = new src_Shader({
                                    vertex: src_Shader.source('qtek.skybox.vertex'),
                                    fragment: src_Shader.source('qtek.skybox.fragment')
                                });
                                var material = new src_Material({
                                    shader: skyboxShader,
                                    depthMask: false
                                });

                                return {
                                    /**
                                     * @type {qtek.Scene}
                                     * @memberOf qtek.plugin.Skybox.prototype
                                     */
                                    scene: null,

                                    geometry: new geometry_Cube(),

                                    material: material,

                                    environmentMap: null,

                                    culling: false
                                };
                            }, function() {
                                var scene = this.scene;
                                if (scene) {
                                    this.attachScene(scene);
                                }
                                if (this.environmentMap) {
                                    this.setEnvironmentMap(this.environmentMap);
                                }
                            }, {
                                /**
                                 * Attach the skybox to the scene
                                 * @param  {qtek.Scene} scene
                                 * @memberOf qtek.plugin.Skybox.prototype
                                 */
                                attachScene: function(scene) {
                                    if (this.scene) {
                                        this.detachScene();
                                    }
                                    this.scene = scene;
                                    scene.on('beforerender', this._beforeRenderScene, this);
                                },
                                /**
                                 * Detach from scene
                                 * @memberOf qtek.plugin.Skybox.prototype
                                 */
                                detachScene: function() {
                                    if (this.scene) {
                                        this.scene.off('beforerender', this._beforeRenderScene);
                                    }
                                    this.scene = null;
                                },

                                /**
                                 * Dispose skybox
                                 * @param  {qtek.Renderer} renderer
                                 */
                                dispose: function(renderer) {
                                    this.detachScene();
                                    this.geometry.dispose(renderer);
                                    this.material.dispose(renderer);
                                },

                                setEnvironmentMap: function(envMap) {
                                    this.material.set('environmentMap', envMap);
                                },

                                getEnvironmentMap: function() {
                                    return this.material.get('environmentMap');
                                },

                                _beforeRenderScene: function(renderer, scene, camera) {
                                    this.renderSkybox(renderer, camera);
                                },

                                renderSkybox: function(renderer, camera) {
                                    this.position.copy(camera.getWorldPosition());
                                    this.update();
                                    // Don't remember to disable blend
                                    renderer.gl.disable(renderer.gl.BLEND);
                                    renderer.renderQueue([this], camera);
                                }
                            });

                            /* harmony default export */
                            var plugin_Skybox = (Skybox);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/util/shader/integrateBRDF.glsl.js
                            /* harmony default export */
                            var integrateBRDF_glsl = ("#define SAMPLE_NUMBER 1024\n#define PI 3.14159265358979\nuniform sampler2D normalDistribution;\nuniform vec2 viewportSize : [512, 256];\nconst vec3 N = vec3(0.0, 0.0, 1.0);\nconst float fSampleNumber = float(SAMPLE_NUMBER);\nvec3 importanceSampleNormal(float i, float roughness, vec3 N) {\n    vec3 H = texture2D(normalDistribution, vec2(roughness, i)).rgb;\n    vec3 upVector = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n    vec3 tangentX = normalize(cross(upVector, N));\n    vec3 tangentY = cross(N, tangentX);\n    return tangentX * H.x + tangentY * H.y + N * H.z;\n}\nfloat G_Smith(float roughness, float NoV, float NoL) {\n    float k = roughness * roughness / 2.0;\n    float G1V = NoV / (NoV * (1.0 - k) + k);\n    float G1L = NoL / (NoL * (1.0 - k) + k);\n    return G1L * G1V;\n}\nvoid main() {\n    vec2 uv = gl_FragCoord.xy / viewportSize;\n    float NoV = uv.x;\n    float roughness = uv.y;\n    vec3 V;\n    V.x = sqrt(1.0 - NoV * NoV);\n    V.y = 0.0;\n    V.z = NoV;\n    float A = 0.0;\n    float B = 0.0;\n    for (int i = 0; i < SAMPLE_NUMBER; i++) {\n        vec3 H = importanceSampleNormal(float(i) / fSampleNumber, roughness, N);\n        vec3 L = reflect(-V, H);\n        float NoL = clamp(L.z, 0.0, 1.0);\n        float NoH = clamp(H.z, 0.0, 1.0);\n        float VoH = clamp(dot(V, H), 0.0, 1.0);\n        if (NoL > 0.0) {\n            float G = G_Smith(roughness, NoV, NoL);\n            float G_Vis = G * VoH / (NoH * NoV);\n            float Fc = pow(1.0 - VoH, 5.0);\n            A += (1.0 - Fc) * G_Vis;\n            B += Fc * G_Vis;\n        }\n    }\n    gl_FragColor = vec4(vec2(A, B) / fSampleNumber, 0.0, 1.0);\n}\n");

                            // CONCATENATED MODULE: ./node_modules/qtek/src/util/shader/prefilter.glsl.js
                            /* harmony default export */
                            var prefilter_glsl = ("#define SAMPLE_NUMBER 1024\n#define PI 3.14159265358979\nuniform mat4 viewInverse : VIEWINVERSE;\nuniform samplerCube environmentMap;\nuniform sampler2D normalDistribution;\nuniform float roughness : 0.5;\nvarying vec2 v_Texcoord;\nvarying vec3 v_WorldPosition;\nconst float fSampleNumber = float(SAMPLE_NUMBER);\n@import qtek.util.rgbm\nvec3 importanceSampleNormal(float i, float roughness, vec3 N) {\n    vec3 H = texture2D(normalDistribution, vec2(roughness, i)).rgb;\n    vec3 upVector = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n    vec3 tangentX = normalize(cross(upVector, N));\n    vec3 tangentY = cross(N, tangentX);\n    return tangentX * H.x + tangentY * H.y + N * H.z;\n}\nvoid main() {\n    vec3 eyePos = viewInverse[3].xyz;\n    vec3 V = normalize(v_WorldPosition - eyePos);\n    vec3 N = V;\n    vec3 R = V;\n    vec3 prefilteredColor = vec3(0.0);\n    float totalWeight = 0.0;\n    for (int i = 0; i < SAMPLE_NUMBER; i++) {\n        vec3 H = importanceSampleNormal(float(i) / fSampleNumber, roughness, N);\n        vec3 L = reflect(-V, H);\n        float NoL = clamp(dot(N, L), 0.0, 1.0);\n        if (NoL > 0.0) {\n            prefilteredColor += decodeHDR(textureCube(environmentMap, L)).rgb * NoL;\n            totalWeight += NoL;\n        }\n    }\n    gl_FragColor = encodeHDR(vec4(prefilteredColor / totalWeight, 1.0));\n}\n");

                            // CONCATENATED MODULE: ./node_modules/qtek/src/util/cubemap.js
                            // Cubemap prefilter utility
                            // http://www.unrealengine.com/files/downloads/2013SiggraphPresentationsNotes.pdf
                            // http://http.developer.nvidia.com/GPUGems3/gpugems3_ch20.html
















                            var cubemapUtil = {};

                            var cubemap_targets = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];

                            /**
                             * @name qtek.util.cubemap.prefilterEnvironmentMap
                             * @param  {qtek.Renderer} renderer
                             * @param  {qtek.Texture} envMap
                             * @param  {Object} [textureOpts]
                             * @param  {number} [textureOpts.width=64]
                             * @param  {number} [textureOpts.height=64]
                             * @param  {number} [textureOpts.type]
                             * @param  {boolean} [textureOpts.encodeRGBM=false]
                             * @param  {boolean} [textureOpts.decodeRGBM=false]
                             * @param  {qtek.Texture2D} [normalDistribution]
                             * @param  {qtek.Texture2D} [brdfLookup]
                             */
                            cubemapUtil.prefilterEnvironmentMap = function(
                                renderer, envMap, textureOpts, normalDistribution, brdfLookup
                            ) {
                                // Not create other renderer, it is easy having issue of cross reference of resources like framebuffer
                                // PENDING preserveDrawingBuffer?
                                if (!brdfLookup || !normalDistribution) {
                                    normalDistribution = cubemapUtil.generateNormalDistribution();
                                    brdfLookup = cubemapUtil.integrateBRDF(renderer, normalDistribution);
                                }
                                textureOpts = textureOpts || {};

                                var width = textureOpts.width || 64;
                                var height = textureOpts.height || 64;

                                var textureType = textureOpts.type || envMap.type;

                                // Use same type with given envMap
                                var prefilteredCubeMap = new src_TextureCube({
                                    width: width,
                                    height: height,
                                    type: textureType,
                                    flipY: false,
                                    mipmaps: []
                                });

                                if (!prefilteredCubeMap.isPowerOfTwo()) {
                                    console.warn('Width and height must be power of two to enable mipmap.');
                                }

                                var size = Math.min(width, height);
                                var mipmapNum = Math.log(size) / Math.log(2) + 1;

                                var prefilterMaterial = new src_Material({
                                    shader: new src_Shader({
                                        vertex: src_Shader.source('qtek.skybox.vertex'),
                                        fragment: prefilter_glsl
                                    })
                                });
                                prefilterMaterial.set('normalDistribution', normalDistribution);

                                textureOpts.encodeRGBM && prefilterMaterial.shader.define('fragment', 'RGBM_ENCODE');
                                textureOpts.decodeRGBM && prefilterMaterial.shader.define('fragment', 'RGBM_DECODE');

                                var dummyScene = new src_Scene();
                                var skyEnv;

                                if (envMap instanceof src_Texture2D) {
                                    // Convert panorama to cubemap
                                    var envCubemap = new src_TextureCube({
                                        width: width,
                                        height: height,
                                        // FIXME FLOAT type will cause GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT error on iOS
                                        type: textureType === src_Texture.FLOAT ?
                                            src_Texture.HALF_FLOAT : textureType
                                    });
                                    util_texture.panoramaToCubeMap(renderer, envMap, envCubemap, {
                                        // PENDING encodeRGBM so it can be decoded as RGBM
                                        encodeRGBM: textureOpts.decodeRGBM
                                    });
                                    envMap = envCubemap;
                                }
                                skyEnv = new plugin_Skybox({
                                    scene: dummyScene,
                                    material: prefilterMaterial
                                });
                                skyEnv.material.set('environmentMap', envMap);

                                var envMapPass = new EnvironmentMap({
                                    texture: prefilteredCubeMap
                                });

                                // Force to be UNSIGNED_BYTE
                                if (textureOpts.encodeRGBM) {
                                    textureType = prefilteredCubeMap.type = src_Texture.UNSIGNED_BYTE;
                                }

                                var renderTargetTmp = new src_Texture2D({
                                    width: width,
                                    height: height,
                                    type: textureType
                                });
                                var frameBuffer = new src_FrameBuffer({
                                    depthBuffer: false
                                });
                                var ArrayCtor = core_vendor[textureType === src_Texture.UNSIGNED_BYTE ? 'Uint8Array' : 'Float32Array'];
                                for (var i = 0; i < mipmapNum; i++) {
                                    prefilteredCubeMap.mipmaps[i] = {
                                        pixels: {}
                                    };
                                    skyEnv.material.set('roughness', i / (cubemap_targets.length - 1));

                                    // Tweak fov
                                    // http://the-witness.net/news/2012/02/seamless-cube-map-filtering/
                                    var n = renderTargetTmp.width;
                                    var fov = 2 * Math.atan(n / (n - 0.5)) / Math.PI * 180;

                                    for (var j = 0; j < cubemap_targets.length; j++) {
                                        var pixels = new ArrayCtor(renderTargetTmp.width * renderTargetTmp.height * 4);
                                        frameBuffer.attach(renderTargetTmp);
                                        frameBuffer.bind(renderer);

                                        var camera = envMapPass.getCamera(cubemap_targets[j]);
                                        camera.fov = fov;
                                        renderer.render(dummyScene, camera);
                                        renderer.gl.readPixels(
                                            0, 0, renderTargetTmp.width, renderTargetTmp.height,
                                            src_Texture.RGBA, textureType, pixels
                                        );

                                        // var canvas = document.createElement('canvas');
                                        // var ctx = canvas.getContext('2d');
                                        // canvas.width = renderTargetTmp.width;
                                        // canvas.height = renderTargetTmp.height;
                                        // var imageData = ctx.createImageData(renderTargetTmp.width, renderTargetTmp.height);
                                        // for (var k = 0; k < pixels.length; k++) {
                                        //     imageData.data[k] = pixels[k];
                                        // }
                                        // ctx.putImageData(imageData, 0, 0);
                                        // document.body.appendChild(canvas);

                                        frameBuffer.unbind(renderer);
                                        prefilteredCubeMap.mipmaps[i].pixels[cubemap_targets[j]] = pixels;
                                    }

                                    renderTargetTmp.width /= 2;
                                    renderTargetTmp.height /= 2;
                                    renderTargetTmp.dirty();
                                }

                                frameBuffer.dispose(renderer);
                                renderTargetTmp.dispose(renderer);
                                skyEnv.dispose(renderer);
                                // Remove gpu resource allucated in renderer
                                normalDistribution.dispose(renderer);

                                // renderer.dispose();

                                return {
                                    environmentMap: prefilteredCubeMap,
                                    brdfLookup: brdfLookup,
                                    normalDistribution: normalDistribution,
                                    maxMipmapLevel: mipmapNum
                                };
                            };

                            cubemapUtil.integrateBRDF = function(renderer, normalDistribution) {
                                normalDistribution = normalDistribution || cubemapUtil.generateNormalDistribution();
                                var framebuffer = new src_FrameBuffer({
                                    depthBuffer: false
                                });
                                var pass = new compositor_Pass({
                                    fragment: integrateBRDF_glsl
                                });

                                var texture = new src_Texture2D({
                                    width: 512,
                                    height: 256,
                                    type: src_Texture.HALF_FLOAT,
                                    minFilter: src_Texture.NEAREST,
                                    magFilter: src_Texture.NEAREST,
                                    useMipmap: false
                                });
                                pass.setUniform('normalDistribution', normalDistribution);
                                pass.setUniform('viewportSize', [512, 256]);
                                pass.attachOutput(texture);
                                pass.render(renderer, framebuffer);

                                // FIXME Only chrome and firefox can readPixels with float type.
                                // framebuffer.bind(renderer);
                                // var pixels = new Float32Array(512 * 256 * 4);
                                // renderer.gl.readPixels(
                                //     0, 0, texture.width, texture.height,
                                //     Texture.RGBA, Texture.FLOAT, pixels
                                // );
                                // texture.pixels = pixels;
                                // texture.flipY = false;
                                // texture.dirty();
                                // framebuffer.unbind(renderer);

                                framebuffer.dispose(renderer);

                                return texture;
                            };

                            cubemapUtil.generateNormalDistribution = function(roughnessLevels, sampleSize) {

                                // http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
                                // GLSL not support bit operation, use lookup instead
                                // V -> i / N, U -> roughness
                                var roughnessLevels = roughnessLevels || 256;
                                var sampleSize = sampleSize || 1024;

                                var normalDistribution = new src_Texture2D({
                                    width: roughnessLevels,
                                    height: sampleSize,
                                    type: src_Texture.FLOAT,
                                    minFilter: src_Texture.NEAREST,
                                    magFilter: src_Texture.NEAREST,
                                    useMipmap: false
                                });
                                var pixels = new Float32Array(sampleSize * roughnessLevels * 4);
                                for (var i = 0; i < sampleSize; i++) {
                                    var x = i / sampleSize;
                                    // http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
                                    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators
                                    // http://stackoverflow.com/questions/1908492/unsigned-integer-in-javascript
                                    // http://stackoverflow.com/questions/1822350/what-is-the-javascript-operator-and-how-do-you-use-it
                                    var y = (i << 16 | i >>> 16) >>> 0;
                                    y = ((y & 1431655765) << 1 | (y & 2863311530) >>> 1) >>> 0;
                                    y = ((y & 858993459) << 2 | (y & 3435973836) >>> 2) >>> 0;
                                    y = ((y & 252645135) << 4 | (y & 4042322160) >>> 4) >>> 0;
                                    y = (((y & 16711935) << 8 | (y & 4278255360) >>> 8) >>> 0) / 4294967296;

                                    for (var j = 0; j < roughnessLevels; j++) {
                                        var roughness = j / roughnessLevels;
                                        var a = roughness * roughness;
                                        var phi = 2.0 * Math.PI * x;
                                        // CDF
                                        var cosTheta = Math.sqrt((1 - y) / (1 + (a * a - 1.0) * y));
                                        var sinTheta = Math.sqrt(1.0 - cosTheta * cosTheta);
                                        var offset = (i * roughnessLevels + j) * 4;
                                        pixels[offset] = sinTheta * Math.cos(phi);
                                        pixels[offset + 1] = sinTheta * Math.sin(phi);
                                        pixels[offset + 2] = cosTheta;
                                        pixels[offset + 3] = 1.0;
                                    }
                                }
                                normalDistribution.pixels = pixels;

                                return normalDistribution;
                            };

                            /* harmony default export */
                            var util_cubemap = (cubemapUtil);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/light/AmbientCubemap.js
                            // https://docs.unrealengine.com/latest/INT/Engine/Rendering/LightingAndShadows/AmbientCubemap/



                            /**
                             * Ambient cubemap light provides specular parts of Image Based Lighting.
                             * Which is a basic requirement for Physically Based Rendering
                             * @constructor qtek.light.AmbientCubemap
                             * @extends qtek.Light
                             */
                            var AmbientCubemapLight = src_Light.extend({

                                /**
                                 * @type {qtek.TextureCube}
                                 */
                                cubemap: null,

                                // TODO
                                // range: 100,

                                castShadow: false,

                                _normalDistribution: null,
                                _brdfLookup: null

                            }, {

                                type: 'AMBIENT_CUBEMAP_LIGHT',

                                /**
                                 * Do prefitering the cubemap
                                 * @param {qtek.Renderer} renderer
                                 * @param {number} [size=32]
                                 */
                                prefilter: function(renderer, size) {
                                    if (!this._brdfLookup) {
                                        this._normalDistribution = util_cubemap.generateNormalDistribution();
                                        this._brdfLookup = util_cubemap.integrateBRDF(renderer, this._normalDistribution);
                                    }
                                    var cubemap = this.cubemap;
                                    if (cubemap.__prefiltered) {
                                        return;
                                    }

                                    var result = util_cubemap.prefilterEnvironmentMap(
                                        renderer, cubemap, {
                                            encodeRGBM: true,
                                            width: size,
                                            height: size
                                        }, this._normalDistribution, this._brdfLookup
                                    );
                                    this.cubemap = result.environmentMap;
                                    this.cubemap.__prefiltered = true;

                                    cubemap.dispose(renderer);
                                },

                                uniformTemplates: {
                                    ambientCubemapLightColor: {
                                        type: '3f',
                                        value: function(instance) {
                                            var color = instance.color;
                                            var intensity = instance.intensity;
                                            return [color[0] * intensity, color[1] * intensity, color[2] * intensity];
                                        }
                                    },

                                    ambientCubemapLightCubemap: {
                                        type: 't',
                                        value: function(instance) {
                                            return instance.cubemap;
                                        }
                                    },

                                    ambientCubemapLightBRDFLookup: {
                                        type: 't',
                                        value: function(instance) {
                                            return instance._brdfLookup;
                                        }
                                    }
                                }
                                /**
                                 * @method
                                 * @name clone
                                 * @return {qtek.light.AmbientCubemap}
                                 * @memberOf qtek.light.AmbientCubemap.prototype
                                 */
                            });

                            /* harmony default export */
                            var AmbientCubemap = (AmbientCubemapLight);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/light/AmbientSH.js



                            /**
                             * Spherical Harmonic Ambient Light
                             * @constructor qtek.light.AmbientSH
                             * @extends qtek.Light
                             */
                            var AmbientSHLight = src_Light.extend({

                                castShadow: false,


                                /**
                                 * Spherical Harmonic Coefficients
                                 * @type {Array.<number>}
                                 */
                                coefficients: [],

                            }, function() {
                                this._coefficientsTmpArr = new core_vendor.Float32Array(9 * 3);
                            }, {

                                type: 'AMBIENT_SH_LIGHT',

                                uniformTemplates: {
                                    ambientSHLightColor: {
                                        type: '3f',
                                        value: function(instance) {
                                            var color = instance.color;
                                            var intensity = instance.intensity;
                                            return [color[0] * intensity, color[1] * intensity, color[2] * intensity];
                                        }
                                    },

                                    ambientSHLightCoefficients: {
                                        type: '3f',
                                        value: function(instance) {
                                            var coefficientsTmpArr = instance._coefficientsTmpArr;
                                            for (var i = 0; i < instance.coefficients.length; i++) {
                                                coefficientsTmpArr[i] = instance.coefficients[i];
                                            }
                                            return coefficientsTmpArr;
                                        }
                                    }
                                }
                                /**
                                 * @method
                                 * @name clone
                                 * @return {qtek.light.Ambient}
                                 * @memberOf qtek.light.Ambient.prototype
                                 */
                            });

                            /* harmony default export */
                            var AmbientSH = (AmbientSHLight);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/util/shader/projectEnvMap.glsl.js
                            /* harmony default export */
                            var projectEnvMap_glsl = ("uniform samplerCube environmentMap;\nvarying vec2 v_Texcoord;\n#define TEXTURE_SIZE 16\nmat3 front = mat3(\n     1.0,  0.0,  0.0,\n     0.0,  1.0,  0.0,\n     0.0,  0.0,  1.0\n);\nmat3 back = mat3(\n    -1.0,  0.0,  0.0,\n     0.0,  1.0,  0.0,\n     0.0,  0.0, -1.0\n);\nmat3 left = mat3(\n     0.0,  0.0, -1.0,\n     0.0,  1.0,  0.0,\n     1.0,  0.0,  0.0\n);\nmat3 right = mat3(\n     0.0,  0.0,  1.0,\n     0.0,  1.0,  0.0,\n    -1.0,  0.0,  0.0\n);\nmat3 up = mat3(\n     1.0,  0.0,  0.0,\n     0.0,  0.0,  1.0,\n     0.0, -1.0,  0.0\n);\nmat3 down = mat3(\n     1.0,  0.0,  0.0,\n     0.0,  0.0, -1.0,\n     0.0,  1.0,  0.0\n);\nfloat harmonics(vec3 normal){\n    int index = int(gl_FragCoord.x);\n    float x = normal.x;\n    float y = normal.y;\n    float z = normal.z;\n    if(index==0){\n        return 1.0;\n    }\n    else if(index==1){\n        return x;\n    }\n    else if(index==2){\n        return y;\n    }\n    else if(index==3){\n        return z;\n    }\n    else if(index==4){\n        return x*z;\n    }\n    else if(index==5){\n        return y*z;\n    }\n    else if(index==6){\n        return x*y;\n    }\n    else if(index==7){\n        return 3.0*z*z - 1.0;\n    }\n    else{\n        return x*x - y*y;\n    }\n}\nvec3 sampleSide(mat3 rot)\n{\n    vec3 result = vec3(0.0);\n    float divider = 0.0;\n    for (int i = 0; i < TEXTURE_SIZE * TEXTURE_SIZE; i++) {\n        float x = mod(float(i), float(TEXTURE_SIZE));\n        float y = float(i / TEXTURE_SIZE);\n        vec2 sidecoord = ((vec2(x, y) + vec2(0.5, 0.5)) / vec2(TEXTURE_SIZE)) * 2.0 - 1.0;\n        vec3 normal = normalize(vec3(sidecoord, -1.0));\n        vec3 fetchNormal = rot * normal;\n        vec3 texel = textureCube(environmentMap, fetchNormal).rgb;\n        result += harmonics(fetchNormal) * texel * -normal.z;\n        divider += -normal.z;\n    }\n    return result / divider;\n}\nvoid main()\n{\n    vec3 result = (\n        sampleSide(front) +\n        sampleSide(back) +\n        sampleSide(left) +\n        sampleSide(right) +\n        sampleSide(up) +\n        sampleSide(down)\n    ) / 6.0;\n    gl_FragColor = vec4(result, 1.0);\n}");

                            // CONCATENATED MODULE: ./node_modules/qtek/src/util/sh.js
                            // Spherical Harmonic Helpers










                            var sh_vec3 = glmatrix_default.a.vec3;
                            var sh = {};



                            var sh_targets = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];

                            // Project on gpu, but needs browser to support readPixels as Float32Array.
                            function projectEnvironmentMapGPU(renderer, envMap) {
                                var shTexture = new src_Texture2D({
                                    width: 9,
                                    height: 1,
                                    type: src_Texture.FLOAT
                                });
                                var pass = new compositor_Pass({
                                    fragment: projectEnvMap_glsl
                                });
                                pass.material.shader.define('fragment', 'TEXTURE_SIZE', envMap.width);
                                pass.setUniform('environmentMap', envMap);

                                var framebuffer = new src_FrameBuffer();
                                framebuffer.attach(shTexture);
                                pass.render(renderer, framebuffer);

                                framebuffer.bind(renderer);
                                // TODO Only chrome and firefox support Float32Array
                                var pixels = new core_vendor.Float32Array(9 * 4);
                                renderer.gl.readPixels(0, 0, 9, 1, src_Texture.RGBA, src_Texture.FLOAT, pixels);

                                var coeff = new core_vendor.Float32Array(9 * 3);
                                for (var i = 0; i < 9; i++) {
                                    coeff[i * 3] = pixels[i * 4];
                                    coeff[i * 3 + 1] = pixels[i * 4 + 1];
                                    coeff[i * 3 + 2] = pixels[i * 4 + 2];
                                }
                                framebuffer.unbind(renderer);

                                framebuffer.dispose(renderer);
                                pass.dispose(renderer);
                                return coeff;
                            }

                            function harmonics(normal, index) {
                                var x = normal[0];
                                var y = normal[1];
                                var z = normal[2];

                                if (index === 0) {
                                    return 1.0;
                                } else if (index === 1) {
                                    return x;
                                } else if (index === 2) {
                                    return y;
                                } else if (index === 3) {
                                    return z;
                                } else if (index === 4) {
                                    return x * z;
                                } else if (index === 5) {
                                    return y * z;
                                } else if (index === 6) {
                                    return x * y;
                                } else if (index === 7) {
                                    return 3.0 * z * z - 1.0;
                                } else {
                                    return x * x - y * y;
                                }
                            }

                            var normalTransform = {
                                px: [2, 1, 0, -1, -1, 1],
                                nx: [2, 1, 0, 1, -1, -1],
                                py: [0, 2, 1, 1, -1, -1],
                                ny: [0, 2, 1, 1, 1, 1],
                                pz: [0, 1, 2, -1, -1, -1],
                                nz: [0, 1, 2, 1, -1, 1]
                            };

                            // Project on cpu.
                            function projectEnvironmentMapCPU(renderer, cubePixels, width, height) {
                                var coeff = new core_vendor.Float32Array(9 * 3);
                                var normal = sh_vec3.create();
                                var texel = sh_vec3.create();
                                var fetchNormal = sh_vec3.create();
                                for (var m = 0; m < 9; m++) {
                                    var result = sh_vec3.create();
                                    for (var k = 0; k < sh_targets.length; k++) {
                                        var pixels = cubePixels[sh_targets[k]];

                                        var sideResult = sh_vec3.create();
                                        var divider = 0;
                                        var i = 0;
                                        var transform = normalTransform[sh_targets[k]];
                                        for (var y = 0; y < height; y++) {
                                            for (var x = 0; x < width; x++) {

                                                normal[0] = x / (width - 1.0) * 2.0 - 1.0;
                                                // TODO Flip y?
                                                normal[1] = y / (height - 1.0) * 2.0 - 1.0;
                                                normal[2] = -1.0;
                                                sh_vec3.normalize(normal, normal);

                                                fetchNormal[0] = normal[transform[0]] * transform[3];
                                                fetchNormal[1] = normal[transform[1]] * transform[4];
                                                fetchNormal[2] = normal[transform[2]] * transform[5];

                                                texel[0] = pixels[i++] / 255;
                                                texel[1] = pixels[i++] / 255;
                                                texel[2] = pixels[i++] / 255;
                                                // RGBM Decode
                                                var scale = pixels[i++] / 255 * 51.5;
                                                texel[0] *= scale;
                                                texel[1] *= scale;
                                                texel[2] *= scale;

                                                sh_vec3.scaleAndAdd(sideResult, sideResult, texel, harmonics(fetchNormal, m) * -normal[2]);
                                                // -normal.z equals cos(theta) of Lambertian
                                                divider += -normal[2];
                                            }
                                        }
                                        sh_vec3.scaleAndAdd(result, result, sideResult, 1 / divider);
                                    }

                                    coeff[m * 3] = result[0] / 6.0;
                                    coeff[m * 3 + 1] = result[1] / 6.0;
                                    coeff[m * 3 + 2] = result[2] / 6.0;
                                }
                                return coeff;
                            }

                            /**
                             * @param  {qtek.Renderer} renderer
                             * @param  {qtek.Texture} envMap
                             * @param  {Object} [textureOpts]
                             * @param  {Object} [textureOpts.lod]
                             * @param  {boolean} [textureOpts.decodeRGBM]
                             */
                            sh.projectEnvironmentMap = function(renderer, envMap, opts) {

                                // TODO sRGB

                                opts = opts || {};
                                opts.lod = opts.lod || 0;

                                var skybox;
                                var dummyScene = new src_Scene();
                                var size = 64;
                                if (envMap instanceof src_Texture2D) {
                                    skybox = new plugin_Skydome({
                                        scene: dummyScene,
                                        environmentMap: envMap
                                    });
                                } else {
                                    size = (envMap.image && envMap.image.px) ? envMap.image.px.width : envMap.width;
                                    skybox = new plugin_Skybox({
                                        scene: dummyScene,
                                        environmentMap: envMap
                                    });
                                }
                                // Convert to rgbm
                                var width = Math.ceil(size / Math.pow(2, opts.lod));
                                var height = Math.ceil(size / Math.pow(2, opts.lod));
                                var rgbmTexture = new src_Texture2D({
                                    width: width,
                                    height: height
                                });
                                var framebuffer = new src_FrameBuffer();
                                skybox.material.shader.define('fragment', 'RGBM_ENCODE');
                                if (opts.decodeRGBM) {
                                    skybox.material.shader.define('fragment', 'RGBM_DECODE');
                                }
                                skybox.material.set('lod', opts.lod);
                                var envMapPass = new EnvironmentMap({
                                    texture: rgbmTexture
                                });
                                var cubePixels = {};
                                for (var i = 0; i < sh_targets.length; i++) {
                                    cubePixels[sh_targets[i]] = new Uint8Array(width * height * 4);
                                    var camera = envMapPass.getCamera(sh_targets[i]);
                                    camera.fov = 90;
                                    framebuffer.attach(rgbmTexture);
                                    framebuffer.bind(renderer);
                                    renderer.render(dummyScene, camera);
                                    renderer.gl.readPixels(
                                        0, 0, width, height,
                                        src_Texture.RGBA, src_Texture.UNSIGNED_BYTE, cubePixels[sh_targets[i]]
                                    );
                                    framebuffer.unbind(renderer);
                                }

                                skybox.dispose(renderer);
                                framebuffer.dispose(renderer);
                                rgbmTexture.dispose(renderer);

                                return projectEnvironmentMapCPU(renderer, cubePixels, width, height);
                            };

                            /* harmony default export */
                            var util_sh = (sh);

                            // CONCATENATED MODULE: ./src/util/retrieve.js


                            var retrieve = {

                                firstNotNull: function() {
                                    for (var i = 0, len = arguments.length; i < len; i++) {
                                        if (arguments[i] != null) {
                                            return arguments[i];
                                        }
                                    }
                                },

                                /**
                                 * @param {module:echarts/data/List} data
                                 * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name
                                 *                         each of which can be Array or primary type.
                                 * @return {number|Array.<number>} dataIndex If not found, return undefined/null.
                                 */
                                queryDataIndex: function(data, payload) {
                                    if (payload.dataIndexInside != null) {
                                        return payload.dataIndexInside;
                                    } else if (payload.dataIndex != null) {
                                        return external__echarts__default.a.util.isArray(payload.dataIndex) ?
                                            external__echarts__default.a.util.map(payload.dataIndex, function(value) {
                                                return data.indexOfRawIndex(value);
                                            }) :
                                            data.indexOfRawIndex(payload.dataIndex);
                                    } else if (payload.name != null) {
                                        return external__echarts__default.a.util.isArray(payload.name) ?
                                            external__echarts__default.a.util.map(payload.name, function(value) {
                                                return data.indexOfName(value);
                                            }) :
                                            data.indexOfName(payload.name);
                                    }
                                }
                            };

                            /* harmony default export */
                            var util_retrieve = (retrieve);
                            // CONCATENATED MODULE: ./node_modules/qtek/src/light/Ambient.js


                            /**
                             * @constructor qtek.light.Ambient
                             * @extends qtek.Light
                             */
                            var AmbientLight = src_Light.extend({

                                castShadow: false

                            }, {

                                type: 'AMBIENT_LIGHT',

                                uniformTemplates: {
                                    ambientLightColor: {
                                        type: '3f',
                                        value: function(instance) {
                                            var color = instance.color;
                                            var intensity = instance.intensity;
                                            return [color[0] * intensity, color[1] * intensity, color[2] * intensity];
                                        }
                                    }
                                }
                                /**
                                 * @method
                                 * @name clone
                                 * @return {qtek.light.Ambient}
                                 * @memberOf qtek.light.Ambient.prototype
                                 */
                            });

                            /* harmony default export */
                            var Ambient = (AmbientLight);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/light/Directional.js



                            /**
                             * @constructor qtek.light.Directional
                             * @extends qtek.Light
                             *
                             * @example
                             *     var light = new qtek.light.Directional({
                             *         intensity: 0.5,
                             *         color: [1.0, 0.0, 0.0]
                             *     });
                             *     light.position.set(10, 10, 10);
                             *     light.lookAt(qtek.math.Vector3.ZERO);
                             *     scene.add(light);
                             */
                            var DirectionalLight = src_Light.extend(
                                /** @lends qtek.light.Directional# */
                                {
                                    /**
                                     * @type {number}
                                     */
                                    shadowBias: 0.001,
                                    /**
                                     * @type {number}
                                     */
                                    shadowSlopeScale: 2.0,
                                    /**
                                     * Shadow cascade.
                                     * Use PSSM technique when it is larger than 1 and have a unique directional light in scene.
                                     * @type {number}
                                     */
                                    shadowCascade: 1,

                                    /**
                                     * Available when shadowCascade is larger than 1 and have a unique directional light in scene.
                                     * @type {number}
                                     */
                                    cascadeSplitLogFactor: 0.2
                                }, {

                                    type: 'DIRECTIONAL_LIGHT',

                                    uniformTemplates: {
                                        directionalLightDirection: {
                                            type: '3f',
                                            value: function(instance) {
                                                instance.__dir = instance.__dir || new math_Vector3();
                                                // Direction is target to eye
                                                return instance.__dir.copy(instance.worldTransform.z).normalize().negate()._array;
                                            }
                                        },
                                        directionalLightColor: {
                                            type: '3f',
                                            value: function(instance) {
                                                var color = instance.color;
                                                var intensity = instance.intensity;
                                                return [color[0] * intensity, color[1] * intensity, color[2] * intensity];
                                            }
                                        }
                                    },
                                    /**
                                     * @return {qtek.light.Directional}
                                     * @memberOf qtek.light.Directional.prototype
                                     */
                                    clone: function() {
                                        var light = src_Light.prototype.clone.call(this);
                                        light.shadowBias = this.shadowBias;
                                        light.shadowSlopeScale = this.shadowSlopeScale;
                                        return light;
                                    }
                                });

                            /* harmony default export */
                            var Directional = (DirectionalLight);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/light/Point.js


                            /**
                             * @constructor qtek.light.Point
                             * @extends qtek.Light
                             */
                            var PointLight = src_Light.extend(
                                /** @lends qtek.light.Point# */
                                {
                                    /**
                                     * @type {number}
                                     */
                                    range: 100,

                                    /**
                                     * @type {number}
                                     */
                                    castShadow: false
                                }, {

                                    type: 'POINT_LIGHT',

                                    uniformTemplates: {
                                        pointLightPosition: {
                                            type: '3f',
                                            value: function(instance) {
                                                return instance.getWorldPosition()._array;
                                            }
                                        },
                                        pointLightRange: {
                                            type: '1f',
                                            value: function(instance) {
                                                return instance.range;
                                            }
                                        },
                                        pointLightColor: {
                                            type: '3f',
                                            value: function(instance) {
                                                var color = instance.color,
                                                    intensity = instance.intensity;
                                                return [color[0] * intensity, color[1] * intensity, color[2] * intensity];
                                            }
                                        }
                                    },
                                    /**
                                     * @return {qtek.light.Point}
                                     * @memberOf qtek.light.Point.prototype
                                     */
                                    clone: function() {
                                        var light = src_Light.prototype.clone.call(this);
                                        light.range = this.range;
                                        return light;
                                    }
                                });

                            /* harmony default export */
                            var Point = (PointLight);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/light/Spot.js



                            /**
                             * @constructor qtek.light.Spot
                             * @extends qtek.Light
                             */
                            var SpotLight = src_Light.extend(
                                /**@lends qtek.light.Spot */
                                {
                                    /**
                                     * @type {number}
                                     */
                                    range: 20,
                                    /**
                                     * @type {number}
                                     */
                                    umbraAngle: 30,
                                    /**
                                     * @type {number}
                                     */
                                    penumbraAngle: 45,
                                    /**
                                     * @type {number}
                                     */
                                    falloffFactor: 2.0,
                                    /**
                                     * @type {number}
                                     */
                                    shadowBias: 0.0002,
                                    /**
                                     * @type {number}
                                     */
                                    shadowSlopeScale: 2.0
                                }, {

                                    type: 'SPOT_LIGHT',

                                    uniformTemplates: {
                                        spotLightPosition: {
                                            type: '3f',
                                            value: function(instance) {
                                                return instance.getWorldPosition()._array;
                                            }
                                        },
                                        spotLightRange: {
                                            type: '1f',
                                            value: function(instance) {
                                                return instance.range;
                                            }
                                        },
                                        spotLightUmbraAngleCosine: {
                                            type: '1f',
                                            value: function(instance) {
                                                return Math.cos(instance.umbraAngle * Math.PI / 180);
                                            }
                                        },
                                        spotLightPenumbraAngleCosine: {
                                            type: '1f',
                                            value: function(instance) {
                                                return Math.cos(instance.penumbraAngle * Math.PI / 180);
                                            }
                                        },
                                        spotLightFalloffFactor: {
                                            type: '1f',
                                            value: function(instance) {
                                                return instance.falloffFactor;
                                            }
                                        },
                                        spotLightDirection: {
                                            type: '3f',
                                            value: function(instance) {
                                                instance.__dir = instance.__dir || new math_Vector3();
                                                // Direction is target to eye
                                                return instance.__dir.copy(instance.worldTransform.z).negate()._array;
                                            }
                                        },
                                        spotLightColor: {
                                            type: '3f',
                                            value: function(instance) {
                                                var color = instance.color;
                                                var intensity = instance.intensity;
                                                return [color[0] * intensity, color[1] * intensity, color[2] * intensity];
                                            }
                                        }
                                    },
                                    /**
                                     * @return {qtek.light.Spot}
                                     * @memberOf qtek.light.Spot.prototype
                                     */
                                    clone: function() {
                                        var light = src_Light.prototype.clone.call(this);
                                        light.range = this.range;
                                        light.umbraAngle = this.umbraAngle;
                                        light.penumbraAngle = this.penumbraAngle;
                                        light.falloffFactor = this.falloffFactor;
                                        light.shadowBias = this.shadowBias;
                                        light.shadowSlopeScale = this.shadowSlopeScale;
                                        return light;
                                    }
                                });

                            /* harmony default export */
                            var Spot = (SpotLight);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/math/Vector4.js

                            var Vector4_vec4 = glmatrix_default.a.vec4;

                            /**
                             * @constructor
                             * @alias qtek.math.Vector4
                             * @param {number} x
                             * @param {number} y
                             * @param {number} z
                             * @param {number} w
                             */
                            var Vector4 = function(x, y, z, w) {

                                x = x || 0;
                                y = y || 0;
                                z = z || 0;
                                w = w || 0;

                                /**
                                 * Storage of Vector4, read and write of x, y, z, w will change the values in _array
                                 * All methods also operate on the _array instead of x, y, z, w components
                                 * @name _array
                                 * @type {Float32Array}
                                 */
                                this._array = Vector4_vec4.fromValues(x, y, z, w);

                                /**
                                 * Dirty flag is used by the Node to determine
                                 * if the matrix is updated to latest
                                 * @name _dirty
                                 * @type {boolean}
                                 */
                                this._dirty = true;
                            };

                            Vector4.prototype = {

                                constructor: Vector4,

                                /**
                                 * Add b to self
                                 * @param  {qtek.math.Vector4} b
                                 * @return {qtek.math.Vector4}
                                 */
                                add: function(b) {
                                    Vector4_vec4.add(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Set x, y and z components
                                 * @param  {number}  x
                                 * @param  {number}  y
                                 * @param  {number}  z
                                 * @param  {number}  w
                                 * @return {qtek.math.Vector4}
                                 */
                                set: function(x, y, z, w) {
                                    this._array[0] = x;
                                    this._array[1] = y;
                                    this._array[2] = z;
                                    this._array[3] = w;
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Set x, y, z and w components from array
                                 * @param  {Float32Array|number[]} arr
                                 * @return {qtek.math.Vector4}
                                 */
                                setArray: function(arr) {
                                    this._array[0] = arr[0];
                                    this._array[1] = arr[1];
                                    this._array[2] = arr[2];
                                    this._array[3] = arr[3];

                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Clone a new Vector4
                                 * @return {qtek.math.Vector4}
                                 */
                                clone: function() {
                                    return new Vector4(this.x, this.y, this.z, this.w);
                                },

                                /**
                                 * Copy from b
                                 * @param  {qtek.math.Vector4} b
                                 * @return {qtek.math.Vector4}
                                 */
                                copy: function(b) {
                                    Vector4_vec4.copy(this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Alias for distance
                                 * @param  {qtek.math.Vector4} b
                                 * @return {number}
                                 */
                                dist: function(b) {
                                    return Vector4_vec4.dist(this._array, b._array);
                                },

                                /**
                                 * Distance between self and b
                                 * @param  {qtek.math.Vector4} b
                                 * @return {number}
                                 */
                                distance: function(b) {
                                    return Vector4_vec4.distance(this._array, b._array);
                                },

                                /**
                                 * Alias for divide
                                 * @param  {qtek.math.Vector4} b
                                 * @return {qtek.math.Vector4}
                                 */
                                div: function(b) {
                                    Vector4_vec4.div(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Divide self by b
                                 * @param  {qtek.math.Vector4} b
                                 * @return {qtek.math.Vector4}
                                 */
                                divide: function(b) {
                                    Vector4_vec4.divide(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Dot product of self and b
                                 * @param  {qtek.math.Vector4} b
                                 * @return {number}
                                 */
                                dot: function(b) {
                                    return Vector4_vec4.dot(this._array, b._array);
                                },

                                /**
                                 * Alias of length
                                 * @return {number}
                                 */
                                len: function() {
                                    return Vector4_vec4.len(this._array);
                                },

                                /**
                                 * Calculate the length
                                 * @return {number}
                                 */
                                length: function() {
                                    return Vector4_vec4.length(this._array);
                                },
                                /**
                                 * Linear interpolation between a and b
                                 * @param  {qtek.math.Vector4} a
                                 * @param  {qtek.math.Vector4} b
                                 * @param  {number}  t
                                 * @return {qtek.math.Vector4}
                                 */
                                lerp: function(a, b, t) {
                                    Vector4_vec4.lerp(this._array, a._array, b._array, t);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Minimum of self and b
                                 * @param  {qtek.math.Vector4} b
                                 * @return {qtek.math.Vector4}
                                 */
                                min: function(b) {
                                    Vector4_vec4.min(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Maximum of self and b
                                 * @param  {qtek.math.Vector4} b
                                 * @return {qtek.math.Vector4}
                                 */
                                max: function(b) {
                                    Vector4_vec4.max(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Alias for multiply
                                 * @param  {qtek.math.Vector4} b
                                 * @return {qtek.math.Vector4}
                                 */
                                mul: function(b) {
                                    Vector4_vec4.mul(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Mutiply self and b
                                 * @param  {qtek.math.Vector4} b
                                 * @return {qtek.math.Vector4}
                                 */
                                multiply: function(b) {
                                    Vector4_vec4.multiply(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Negate self
                                 * @return {qtek.math.Vector4}
                                 */
                                negate: function() {
                                    Vector4_vec4.negate(this._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Normalize self
                                 * @return {qtek.math.Vector4}
                                 */
                                normalize: function() {
                                    Vector4_vec4.normalize(this._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Generate random x, y, z, w components with a given scale
                                 * @param  {number} scale
                                 * @return {qtek.math.Vector4}
                                 */
                                random: function(scale) {
                                    Vector4_vec4.random(this._array, scale);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Scale self
                                 * @param  {number}  scale
                                 * @return {qtek.math.Vector4}
                                 */
                                scale: function(s) {
                                    Vector4_vec4.scale(this._array, this._array, s);
                                    this._dirty = true;
                                    return this;
                                },
                                /**
                                 * Scale b and add to self
                                 * @param  {qtek.math.Vector4} b
                                 * @param  {number}  scale
                                 * @return {qtek.math.Vector4}
                                 */
                                scaleAndAdd: function(b, s) {
                                    Vector4_vec4.scaleAndAdd(this._array, this._array, b._array, s);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Alias for squaredDistance
                                 * @param  {qtek.math.Vector4} b
                                 * @return {number}
                                 */
                                sqrDist: function(b) {
                                    return Vector4_vec4.sqrDist(this._array, b._array);
                                },

                                /**
                                 * Squared distance between self and b
                                 * @param  {qtek.math.Vector4} b
                                 * @return {number}
                                 */
                                squaredDistance: function(b) {
                                    return Vector4_vec4.squaredDistance(this._array, b._array);
                                },

                                /**
                                 * Alias for squaredLength
                                 * @return {number}
                                 */
                                sqrLen: function() {
                                    return Vector4_vec4.sqrLen(this._array);
                                },

                                /**
                                 * Squared length of self
                                 * @return {number}
                                 */
                                squaredLength: function() {
                                    return Vector4_vec4.squaredLength(this._array);
                                },

                                /**
                                 * Alias for subtract
                                 * @param  {qtek.math.Vector4} b
                                 * @return {qtek.math.Vector4}
                                 */
                                sub: function(b) {
                                    Vector4_vec4.sub(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Subtract b from self
                                 * @param  {qtek.math.Vector4} b
                                 * @return {qtek.math.Vector4}
                                 */
                                subtract: function(b) {
                                    Vector4_vec4.subtract(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Transform self with a Matrix4 m
                                 * @param  {qtek.math.Matrix4} m
                                 * @return {qtek.math.Vector4}
                                 */
                                transformMat4: function(m) {
                                    Vector4_vec4.transformMat4(this._array, this._array, m._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Transform self with a Quaternion q
                                 * @param  {qtek.math.Quaternion} q
                                 * @return {qtek.math.Vector4}
                                 */
                                transformQuat: function(q) {
                                    Vector4_vec4.transformQuat(this._array, this._array, q._array);
                                    this._dirty = true;
                                    return this;
                                },

                                toString: function() {
                                    return '[' + Array.prototype.join.call(this._array, ',') + ']';
                                },

                                toArray: function() {
                                    return Array.prototype.slice.call(this._array);
                                }
                            };

                            var Vector4_defineProperty = Object.defineProperty;
                            // Getter and Setter
                            if (Vector4_defineProperty) {

                                var Vector4_proto = Vector4.prototype;
                                /**
                                 * @name x
                                 * @type {number}
                                 * @memberOf qtek.math.Vector4
                                 * @instance
                                 */
                                Vector4_defineProperty(Vector4_proto, 'x', {
                                    get: function() {
                                        return this._array[0];
                                    },
                                    set: function(value) {
                                        this._array[0] = value;
                                        this._dirty = true;
                                    }
                                });

                                /**
                                 * @name y
                                 * @type {number}
                                 * @memberOf qtek.math.Vector4
                                 * @instance
                                 */
                                Vector4_defineProperty(Vector4_proto, 'y', {
                                    get: function() {
                                        return this._array[1];
                                    },
                                    set: function(value) {
                                        this._array[1] = value;
                                        this._dirty = true;
                                    }
                                });

                                /**
                                 * @name z
                                 * @type {number}
                                 * @memberOf qtek.math.Vector4
                                 * @instance
                                 */
                                Vector4_defineProperty(Vector4_proto, 'z', {
                                    get: function() {
                                        return this._array[2];
                                    },
                                    set: function(value) {
                                        this._array[2] = value;
                                        this._dirty = true;
                                    }
                                });

                                /**
                                 * @name w
                                 * @type {number}
                                 * @memberOf qtek.math.Vector4
                                 * @instance
                                 */
                                Vector4_defineProperty(Vector4_proto, 'w', {
                                    get: function() {
                                        return this._array[3];
                                    },
                                    set: function(value) {
                                        this._array[3] = value;
                                        this._dirty = true;
                                    }
                                });
                            }

                            // Supply methods that are not in place

                            /**
                             * @param  {qtek.math.Vector4} out
                             * @param  {qtek.math.Vector4} a
                             * @param  {qtek.math.Vector4} b
                             * @return {qtek.math.Vector4}
                             */
                            Vector4.add = function(out, a, b) {
                                Vector4_vec4.add(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Vector4} out
                             * @param  {number}  x
                             * @param  {number}  y
                             * @param  {number}  z
                             * @return {qtek.math.Vector4}
                             */
                            Vector4.set = function(out, x, y, z, w) {
                                Vector4_vec4.set(out._array, x, y, z, w);
                                out._dirty = true;
                            };

                            /**
                             * @param  {qtek.math.Vector4} out
                             * @param  {qtek.math.Vector4} b
                             * @return {qtek.math.Vector4}
                             */
                            Vector4.copy = function(out, b) {
                                Vector4_vec4.copy(out._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Vector4} a
                             * @param  {qtek.math.Vector4} b
                             * @return {number}
                             */
                            Vector4.dist = function(a, b) {
                                return Vector4_vec4.distance(a._array, b._array);
                            };

                            /**
                             * @method
                             * @param  {qtek.math.Vector4} a
                             * @param  {qtek.math.Vector4} b
                             * @return {number}
                             */
                            Vector4.distance = Vector4.dist;

                            /**
                             * @param  {qtek.math.Vector4} out
                             * @param  {qtek.math.Vector4} a
                             * @param  {qtek.math.Vector4} b
                             * @return {qtek.math.Vector4}
                             */
                            Vector4.div = function(out, a, b) {
                                Vector4_vec4.divide(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @method
                             * @param  {qtek.math.Vector4} out
                             * @param  {qtek.math.Vector4} a
                             * @param  {qtek.math.Vector4} b
                             * @return {qtek.math.Vector4}
                             */
                            Vector4.divide = Vector4.div;

                            /**
                             * @param  {qtek.math.Vector4} a
                             * @param  {qtek.math.Vector4} b
                             * @return {number}
                             */
                            Vector4.dot = function(a, b) {
                                return Vector4_vec4.dot(a._array, b._array);
                            };

                            /**
                             * @param  {qtek.math.Vector4} a
                             * @return {number}
                             */
                            Vector4.len = function(b) {
                                return Vector4_vec4.length(b._array);
                            };

                            // Vector4.length = Vector4.len;

                            /**
                             * @param  {qtek.math.Vector4} out
                             * @param  {qtek.math.Vector4} a
                             * @param  {qtek.math.Vector4} b
                             * @param  {number}  t
                             * @return {qtek.math.Vector4}
                             */
                            Vector4.lerp = function(out, a, b, t) {
                                Vector4_vec4.lerp(out._array, a._array, b._array, t);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Vector4} out
                             * @param  {qtek.math.Vector4} a
                             * @param  {qtek.math.Vector4} b
                             * @return {qtek.math.Vector4}
                             */
                            Vector4.min = function(out, a, b) {
                                Vector4_vec4.min(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Vector4} out
                             * @param  {qtek.math.Vector4} a
                             * @param  {qtek.math.Vector4} b
                             * @return {qtek.math.Vector4}
                             */
                            Vector4.max = function(out, a, b) {
                                Vector4_vec4.max(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Vector4} out
                             * @param  {qtek.math.Vector4} a
                             * @param  {qtek.math.Vector4} b
                             * @return {qtek.math.Vector4}
                             */
                            Vector4.mul = function(out, a, b) {
                                Vector4_vec4.multiply(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @method
                             * @param  {qtek.math.Vector4} out
                             * @param  {qtek.math.Vector4} a
                             * @param  {qtek.math.Vector4} b
                             * @return {qtek.math.Vector4}
                             */
                            Vector4.multiply = Vector4.mul;

                            /**
                             * @param  {qtek.math.Vector4} out
                             * @param  {qtek.math.Vector4} a
                             * @return {qtek.math.Vector4}
                             */
                            Vector4.negate = function(out, a) {
                                Vector4_vec4.negate(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Vector4} out
                             * @param  {qtek.math.Vector4} a
                             * @return {qtek.math.Vector4}
                             */
                            Vector4.normalize = function(out, a) {
                                Vector4_vec4.normalize(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Vector4} out
                             * @param  {number}  scale
                             * @return {qtek.math.Vector4}
                             */
                            Vector4.random = function(out, scale) {
                                Vector4_vec4.random(out._array, scale);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Vector4} out
                             * @param  {qtek.math.Vector4} a
                             * @param  {number}  scale
                             * @return {qtek.math.Vector4}
                             */
                            Vector4.scale = function(out, a, scale) {
                                Vector4_vec4.scale(out._array, a._array, scale);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Vector4} out
                             * @param  {qtek.math.Vector4} a
                             * @param  {qtek.math.Vector4} b
                             * @param  {number}  scale
                             * @return {qtek.math.Vector4}
                             */
                            Vector4.scaleAndAdd = function(out, a, b, scale) {
                                Vector4_vec4.scaleAndAdd(out._array, a._array, b._array, scale);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Vector4} a
                             * @param  {qtek.math.Vector4} b
                             * @return {number}
                             */
                            Vector4.sqrDist = function(a, b) {
                                return Vector4_vec4.sqrDist(a._array, b._array);
                            };

                            /**
                             * @method
                             * @param  {qtek.math.Vector4} a
                             * @param  {qtek.math.Vector4} b
                             * @return {number}
                             */
                            Vector4.squaredDistance = Vector4.sqrDist;

                            /**
                             * @param  {qtek.math.Vector4} a
                             * @return {number}
                             */
                            Vector4.sqrLen = function(a) {
                                return Vector4_vec4.sqrLen(a._array);
                            };
                            /**
                             * @method
                             * @param  {qtek.math.Vector4} a
                             * @return {number}
                             */
                            Vector4.squaredLength = Vector4.sqrLen;

                            /**
                             * @param  {qtek.math.Vector4} out
                             * @param  {qtek.math.Vector4} a
                             * @param  {qtek.math.Vector4} b
                             * @return {qtek.math.Vector4}
                             */
                            Vector4.sub = function(out, a, b) {
                                Vector4_vec4.subtract(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @method
                             * @param  {qtek.math.Vector4} out
                             * @param  {qtek.math.Vector4} a
                             * @param  {qtek.math.Vector4} b
                             * @return {qtek.math.Vector4}
                             */
                            Vector4.subtract = Vector4.sub;

                            /**
                             * @param  {qtek.math.Vector4} out
                             * @param  {qtek.math.Vector4} a
                             * @param  {qtek.math.Matrix4} m
                             * @return {qtek.math.Vector4}
                             */
                            Vector4.transformMat4 = function(out, a, m) {
                                Vector4_vec4.transformMat4(out._array, a._array, m._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Vector4} out
                             * @param  {qtek.math.Vector4} a
                             * @param  {qtek.math.Quaternion} q
                             * @return {qtek.math.Vector4}
                             */
                            Vector4.transformQuat = function(out, a, q) {
                                Vector4_vec4.transformQuat(out._array, a._array, q._array);
                                out._dirty = true;
                                return out;
                            };

                            /* harmony default export */
                            var math_Vector4 = (Vector4);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/math/Matrix2.js

                            var Matrix2_mat2 = glmatrix_default.a.mat2;

                            /**
                             * @constructor
                             * @alias qtek.math.Matrix2
                             */
                            var Matrix2 = function() {

                                /**
                                 * Storage of Matrix2
                                 * @name _array
                                 * @type {Float32Array}
                                 */
                                this._array = Matrix2_mat2.create();

                                /**
                                 * @name _dirty
                                 * @type {boolean}
                                 */
                                this._dirty = true;
                            };

                            Matrix2.prototype = {

                                constructor: Matrix2,

                                /**
                                 * Set components from array
                                 * @param  {Float32Array|number[]} arr
                                 */
                                setArray: function(arr) {
                                    for (var i = 0; i < this._array.length; i++) {
                                        this._array[i] = arr[i];
                                    }
                                    this._dirty = true;
                                    return this;
                                },
                                /**
                                 * Clone a new Matrix2
                                 * @return {qtek.math.Matrix2}
                                 */
                                clone: function() {
                                    return (new Matrix2()).copy(this);
                                },

                                /**
                                 * Copy from b
                                 * @param  {qtek.math.Matrix2} b
                                 * @return {qtek.math.Matrix2}
                                 */
                                copy: function(b) {
                                    Matrix2_mat2.copy(this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Calculate the adjugate of self, in-place
                                 * @return {qtek.math.Matrix2}
                                 */
                                adjoint: function() {
                                    Matrix2_mat2.adjoint(this._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Calculate matrix determinant
                                 * @return {number}
                                 */
                                determinant: function() {
                                    return Matrix2_mat2.determinant(this._array);
                                },

                                /**
                                 * Set to a identity matrix
                                 * @return {qtek.math.Matrix2}
                                 */
                                identity: function() {
                                    Matrix2_mat2.identity(this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Invert self
                                 * @return {qtek.math.Matrix2}
                                 */
                                invert: function() {
                                    Matrix2_mat2.invert(this._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Alias for mutiply
                                 * @param  {qtek.math.Matrix2} b
                                 * @return {qtek.math.Matrix2}
                                 */
                                mul: function(b) {
                                    Matrix2_mat2.mul(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Alias for multiplyLeft
                                 * @param  {qtek.math.Matrix2} a
                                 * @return {qtek.math.Matrix2}
                                 */
                                mulLeft: function(a) {
                                    Matrix2_mat2.mul(this._array, a._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Multiply self and b
                                 * @param  {qtek.math.Matrix2} b
                                 * @return {qtek.math.Matrix2}
                                 */
                                multiply: function(b) {
                                    Matrix2_mat2.multiply(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Multiply a and self, a is on the left
                                 * @param  {qtek.math.Matrix2} a
                                 * @return {qtek.math.Matrix2}
                                 */
                                multiplyLeft: function(a) {
                                    Matrix2_mat2.multiply(this._array, a._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Rotate self by a given radian
                                 * @param  {number}   rad
                                 * @return {qtek.math.Matrix2}
                                 */
                                rotate: function(rad) {
                                    Matrix2_mat2.rotate(this._array, this._array, rad);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Scale self by s
                                 * @param  {qtek.math.Vector2}  s
                                 * @return {qtek.math.Matrix2}
                                 */
                                scale: function(v) {
                                    Matrix2_mat2.scale(this._array, this._array, v._array);
                                    this._dirty = true;
                                    return this;
                                },
                                /**
                                 * Transpose self, in-place.
                                 * @return {qtek.math.Matrix2}
                                 */
                                transpose: function() {
                                    Matrix2_mat2.transpose(this._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                toString: function() {
                                    return '[' + Array.prototype.join.call(this._array, ',') + ']';
                                },

                                toArray: function() {
                                    return Array.prototype.slice.call(this._array);
                                }
                            };

                            /**
                             * @param  {Matrix2} out
                             * @param  {Matrix2} a
                             * @return {Matrix2}
                             */
                            Matrix2.adjoint = function(out, a) {
                                Matrix2_mat2.adjoint(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix2} out
                             * @param  {qtek.math.Matrix2} a
                             * @return {qtek.math.Matrix2}
                             */
                            Matrix2.copy = function(out, a) {
                                Matrix2_mat2.copy(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix2} a
                             * @return {number}
                             */
                            Matrix2.determinant = function(a) {
                                return Matrix2_mat2.determinant(a._array);
                            };

                            /**
                             * @param  {qtek.math.Matrix2} out
                             * @return {qtek.math.Matrix2}
                             */
                            Matrix2.identity = function(out) {
                                Matrix2_mat2.identity(out._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix2} out
                             * @param  {qtek.math.Matrix2} a
                             * @return {qtek.math.Matrix2}
                             */
                            Matrix2.invert = function(out, a) {
                                Matrix2_mat2.invert(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix2} out
                             * @param  {qtek.math.Matrix2} a
                             * @param  {qtek.math.Matrix2} b
                             * @return {qtek.math.Matrix2}
                             */
                            Matrix2.mul = function(out, a, b) {
                                Matrix2_mat2.mul(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @method
                             * @param  {qtek.math.Matrix2} out
                             * @param  {qtek.math.Matrix2} a
                             * @param  {qtek.math.Matrix2} b
                             * @return {qtek.math.Matrix2}
                             */
                            Matrix2.multiply = Matrix2.mul;

                            /**
                             * @param  {qtek.math.Matrix2} out
                             * @param  {qtek.math.Matrix2} a
                             * @param  {number}   rad
                             * @return {qtek.math.Matrix2}
                             */
                            Matrix2.rotate = function(out, a, rad) {
                                Matrix2_mat2.rotate(out._array, a._array, rad);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix2} out
                             * @param  {qtek.math.Matrix2} a
                             * @param  {qtek.math.Vector2}  v
                             * @return {qtek.math.Matrix2}
                             */
                            Matrix2.scale = function(out, a, v) {
                                Matrix2_mat2.scale(out._array, a._array, v._array);
                                out._dirty = true;
                                return out;
                            };
                            /**
                             * @param  {Matrix2} out
                             * @param  {Matrix2} a
                             * @return {Matrix2}
                             */
                            Matrix2.transpose = function(out, a) {
                                Matrix2_mat2.transpose(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /* harmony default export */
                            var math_Matrix2 = (Matrix2);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/math/Matrix2d.js

                            var mat2d = glmatrix_default.a.mat2d;

                            /**
                             * @constructor
                             * @alias qtek.math.Matrix2d
                             */
                            var Matrix2d = function() {
                                /**
                                 * Storage of Matrix2d
                                 * @name _array
                                 * @type {Float32Array}
                                 */
                                this._array = mat2d.create();

                                /**
                                 * @name _dirty
                                 * @type {boolean}
                                 */
                                this._dirty = true;
                            };

                            Matrix2d.prototype = {

                                constructor: Matrix2d,

                                /**
                                 * Set components from array
                                 * @param  {Float32Array|number[]} arr
                                 */
                                setArray: function(arr) {
                                    for (var i = 0; i < this._array.length; i++) {
                                        this._array[i] = arr[i];
                                    }
                                    this._dirty = true;
                                    return this;
                                },
                                /**
                                 * Clone a new Matrix2d
                                 * @return {qtek.math.Matrix2d}
                                 */
                                clone: function() {
                                    return (new Matrix2d()).copy(this);
                                },

                                /**
                                 * Copy from b
                                 * @param  {qtek.math.Matrix2d} b
                                 * @return {qtek.math.Matrix2d}
                                 */
                                copy: function(b) {
                                    mat2d.copy(this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Calculate matrix determinant
                                 * @return {number}
                                 */
                                determinant: function() {
                                    return mat2d.determinant(this._array);
                                },

                                /**
                                 * Set to a identity matrix
                                 * @return {qtek.math.Matrix2d}
                                 */
                                identity: function() {
                                    mat2d.identity(this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Invert self
                                 * @return {qtek.math.Matrix2d}
                                 */
                                invert: function() {
                                    mat2d.invert(this._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Alias for mutiply
                                 * @param  {qtek.math.Matrix2d} b
                                 * @return {qtek.math.Matrix2d}
                                 */
                                mul: function(b) {
                                    mat2d.mul(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Alias for multiplyLeft
                                 * @param  {qtek.math.Matrix2d} a
                                 * @return {qtek.math.Matrix2d}
                                 */
                                mulLeft: function(b) {
                                    mat2d.mul(this._array, b._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Multiply self and b
                                 * @param  {qtek.math.Matrix2d} b
                                 * @return {qtek.math.Matrix2d}
                                 */
                                multiply: function(b) {
                                    mat2d.multiply(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Multiply a and self, a is on the left
                                 * @param  {qtek.math.Matrix2d} a
                                 * @return {qtek.math.Matrix2d}
                                 */
                                multiplyLeft: function(b) {
                                    mat2d.multiply(this._array, b._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Rotate self by a given radian
                                 * @param  {number}   rad
                                 * @return {qtek.math.Matrix2d}
                                 */
                                rotate: function(rad) {
                                    mat2d.rotate(this._array, this._array, rad);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Scale self by s
                                 * @param  {qtek.math.Vector2}  s
                                 * @return {qtek.math.Matrix2d}
                                 */
                                scale: function(s) {
                                    mat2d.scale(this._array, this._array, s._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Translate self by v
                                 * @param  {qtek.math.Vector2}  v
                                 * @return {qtek.math.Matrix2d}
                                 */
                                translate: function(v) {
                                    mat2d.translate(this._array, this._array, v._array);
                                    this._dirty = true;
                                    return this;
                                },

                                toString: function() {
                                    return '[' + Array.prototype.join.call(this._array, ',') + ']';
                                },

                                toArray: function() {
                                    return Array.prototype.slice.call(this._array);
                                }
                            };

                            /**
                             * @param  {qtek.math.Matrix2d} out
                             * @param  {qtek.math.Matrix2d} a
                             * @return {qtek.math.Matrix2d}
                             */
                            Matrix2d.copy = function(out, a) {
                                mat2d.copy(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix2d} a
                             * @return {number}
                             */
                            Matrix2d.determinant = function(a) {
                                return mat2d.determinant(a._array);
                            };

                            /**
                             * @param  {qtek.math.Matrix2d} out
                             * @return {qtek.math.Matrix2d}
                             */
                            Matrix2d.identity = function(out) {
                                mat2d.identity(out._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix2d} out
                             * @param  {qtek.math.Matrix2d} a
                             * @return {qtek.math.Matrix2d}
                             */
                            Matrix2d.invert = function(out, a) {
                                mat2d.invert(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix2d} out
                             * @param  {qtek.math.Matrix2d} a
                             * @param  {qtek.math.Matrix2d} b
                             * @return {qtek.math.Matrix2d}
                             */
                            Matrix2d.mul = function(out, a, b) {
                                mat2d.mul(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @method
                             * @param  {qtek.math.Matrix2d} out
                             * @param  {qtek.math.Matrix2d} a
                             * @param  {qtek.math.Matrix2d} b
                             * @return {qtek.math.Matrix2d}
                             */
                            Matrix2d.multiply = Matrix2d.mul;

                            /**
                             * @param  {qtek.math.Matrix2d} out
                             * @param  {qtek.math.Matrix2d} a
                             * @param  {number}   rad
                             * @return {qtek.math.Matrix2d}
                             */
                            Matrix2d.rotate = function(out, a, rad) {
                                mat2d.rotate(out._array, a._array, rad);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix2d} out
                             * @param  {qtek.math.Matrix2d} a
                             * @param  {qtek.math.Vector2}  v
                             * @return {qtek.math.Matrix2d}
                             */
                            Matrix2d.scale = function(out, a, v) {
                                mat2d.scale(out._array, a._array, v._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix2d} out
                             * @param  {qtek.math.Matrix2d} a
                             * @param  {qtek.math.Vector2}  v
                             * @return {qtek.math.Matrix2d}
                             */
                            Matrix2d.translate = function(out, a, v) {
                                mat2d.translate(out._array, a._array, v._array);
                                out._dirty = true;
                                return out;
                            };

                            /* harmony default export */
                            var math_Matrix2d = (Matrix2d);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/math/Matrix3.js

                            var Matrix3_mat3 = glmatrix_default.a.mat3;

                            /**
                             * @constructor
                             * @alias qtek.math.Matrix3
                             */
                            var Matrix3 = function() {

                                /**
                                 * Storage of Matrix3
                                 * @name _array
                                 * @type {Float32Array}
                                 */
                                this._array = Matrix3_mat3.create();

                                /**
                                 * @name _dirty
                                 * @type {boolean}
                                 */
                                this._dirty = true;
                            };

                            Matrix3.prototype = {

                                constructor: Matrix3,

                                /**
                                 * Set components from array
                                 * @param  {Float32Array|number[]} arr
                                 */
                                setArray: function(arr) {
                                    for (var i = 0; i < this._array.length; i++) {
                                        this._array[i] = arr[i];
                                    }
                                    this._dirty = true;
                                    return this;
                                },
                                /**
                                 * Calculate the adjugate of self, in-place
                                 * @return {qtek.math.Matrix3}
                                 */
                                adjoint: function() {
                                    Matrix3_mat3.adjoint(this._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Clone a new Matrix3
                                 * @return {qtek.math.Matrix3}
                                 */
                                clone: function() {
                                    return (new Matrix3()).copy(this);
                                },

                                /**
                                 * Copy from b
                                 * @param  {qtek.math.Matrix3} b
                                 * @return {qtek.math.Matrix3}
                                 */
                                copy: function(b) {
                                    Matrix3_mat3.copy(this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Calculate matrix determinant
                                 * @return {number}
                                 */
                                determinant: function() {
                                    return Matrix3_mat3.determinant(this._array);
                                },

                                /**
                                 * Copy the values from Matrix2d a
                                 * @param  {qtek.math.Matrix2d} a
                                 * @return {qtek.math.Matrix3}
                                 */
                                fromMat2d: function(a) {
                                    Matrix3_mat3.fromMat2d(this._array, a._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Copies the upper-left 3x3 values of Matrix4
                                 * @param  {qtek.math.Matrix4} a
                                 * @return {qtek.math.Matrix3}
                                 */
                                fromMat4: function(a) {
                                    Matrix3_mat3.fromMat4(this._array, a._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Calculates a rotation matrix from the given quaternion
                                 * @param  {qtek.math.Quaternion} q
                                 * @return {qtek.math.Matrix3}
                                 */
                                fromQuat: function(q) {
                                    Matrix3_mat3.fromQuat(this._array, q._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Set to a identity matrix
                                 * @return {qtek.math.Matrix3}
                                 */
                                identity: function() {
                                    Matrix3_mat3.identity(this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Invert self
                                 * @return {qtek.math.Matrix3}
                                 */
                                invert: function() {
                                    Matrix3_mat3.invert(this._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Alias for mutiply
                                 * @param  {qtek.math.Matrix3} b
                                 * @return {qtek.math.Matrix3}
                                 */
                                mul: function(b) {
                                    Matrix3_mat3.mul(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Alias for multiplyLeft
                                 * @param  {qtek.math.Matrix3} a
                                 * @return {qtek.math.Matrix3}
                                 */
                                mulLeft: function(a) {
                                    Matrix3_mat3.mul(this._array, a._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Multiply self and b
                                 * @param  {qtek.math.Matrix3} b
                                 * @return {qtek.math.Matrix3}
                                 */
                                multiply: function(b) {
                                    Matrix3_mat3.multiply(this._array, this._array, b._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Multiply a and self, a is on the left
                                 * @param  {qtek.math.Matrix3} a
                                 * @return {qtek.math.Matrix3}
                                 */
                                multiplyLeft: function(a) {
                                    Matrix3_mat3.multiply(this._array, a._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Rotate self by a given radian
                                 * @param  {number}   rad
                                 * @return {qtek.math.Matrix3}
                                 */
                                rotate: function(rad) {
                                    Matrix3_mat3.rotate(this._array, this._array, rad);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Scale self by s
                                 * @param  {qtek.math.Vector2}  s
                                 * @return {qtek.math.Matrix3}
                                 */
                                scale: function(v) {
                                    Matrix3_mat3.scale(this._array, this._array, v._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Translate self by v
                                 * @param  {qtek.math.Vector2}  v
                                 * @return {qtek.math.Matrix3}
                                 */
                                translate: function(v) {
                                    Matrix3_mat3.translate(this._array, this._array, v._array);
                                    this._dirty = true;
                                    return this;
                                },
                                /**
                                 * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
                                 * @param {qtek.math.Matrix4} a
                                 */
                                normalFromMat4: function(a) {
                                    Matrix3_mat3.normalFromMat4(this._array, a._array);
                                    this._dirty = true;
                                    return this;
                                },

                                /**
                                 * Transpose self, in-place.
                                 * @return {qtek.math.Matrix2}
                                 */
                                transpose: function() {
                                    Matrix3_mat3.transpose(this._array, this._array);
                                    this._dirty = true;
                                    return this;
                                },

                                toString: function() {
                                    return '[' + Array.prototype.join.call(this._array, ',') + ']';
                                },

                                toArray: function() {
                                    return Array.prototype.slice.call(this._array);
                                }
                            };
                            /**
                             * @param  {qtek.math.Matrix3} out
                             * @param  {qtek.math.Matrix3} a
                             * @return {qtek.math.Matrix3}
                             */
                            Matrix3.adjoint = function(out, a) {
                                Matrix3_mat3.adjoint(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix3} out
                             * @param  {qtek.math.Matrix3} a
                             * @return {qtek.math.Matrix3}
                             */
                            Matrix3.copy = function(out, a) {
                                Matrix3_mat3.copy(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix3} a
                             * @return {number}
                             */
                            Matrix3.determinant = function(a) {
                                return Matrix3_mat3.determinant(a._array);
                            };

                            /**
                             * @param  {qtek.math.Matrix3} out
                             * @return {qtek.math.Matrix3}
                             */
                            Matrix3.identity = function(out) {
                                Matrix3_mat3.identity(out._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix3} out
                             * @param  {qtek.math.Matrix3} a
                             * @return {qtek.math.Matrix3}
                             */
                            Matrix3.invert = function(out, a) {
                                Matrix3_mat3.invert(out._array, a._array);
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix3} out
                             * @param  {qtek.math.Matrix3} a
                             * @param  {qtek.math.Matrix3} b
                             * @return {qtek.math.Matrix3}
                             */
                            Matrix3.mul = function(out, a, b) {
                                Matrix3_mat3.mul(out._array, a._array, b._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @method
                             * @param  {qtek.math.Matrix3} out
                             * @param  {qtek.math.Matrix3} a
                             * @param  {qtek.math.Matrix3} b
                             * @return {qtek.math.Matrix3}
                             */
                            Matrix3.multiply = Matrix3.mul;

                            /**
                             * @param  {qtek.math.Matrix3}  out
                             * @param  {qtek.math.Matrix2d} a
                             * @return {qtek.math.Matrix3}
                             */
                            Matrix3.fromMat2d = function(out, a) {
                                Matrix3_mat3.fromMat2d(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix3} out
                             * @param  {qtek.math.Matrix4} a
                             * @return {qtek.math.Matrix3}
                             */
                            Matrix3.fromMat4 = function(out, a) {
                                Matrix3_mat3.fromMat4(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix3}    out
                             * @param  {qtek.math.Quaternion} a
                             * @return {qtek.math.Matrix3}
                             */
                            Matrix3.fromQuat = function(out, q) {
                                Matrix3_mat3.fromQuat(out._array, q._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix3} out
                             * @param  {qtek.math.Matrix4} a
                             * @return {qtek.math.Matrix3}
                             */
                            Matrix3.normalFromMat4 = function(out, a) {
                                Matrix3_mat3.normalFromMat4(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix3} out
                             * @param  {qtek.math.Matrix3} a
                             * @param  {number}  rad
                             * @return {qtek.math.Matrix3}
                             */
                            Matrix3.rotate = function(out, a, rad) {
                                Matrix3_mat3.rotate(out._array, a._array, rad);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix3} out
                             * @param  {qtek.math.Matrix3} a
                             * @param  {qtek.math.Vector2} v
                             * @return {qtek.math.Matrix3}
                             */
                            Matrix3.scale = function(out, a, v) {
                                Matrix3_mat3.scale(out._array, a._array, v._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix3} out
                             * @param  {qtek.math.Matrix3} a
                             * @return {qtek.math.Matrix3}
                             */
                            Matrix3.transpose = function(out, a) {
                                Matrix3_mat3.transpose(out._array, a._array);
                                out._dirty = true;
                                return out;
                            };

                            /**
                             * @param  {qtek.math.Matrix3} out
                             * @param  {qtek.math.Matrix3} a
                             * @param  {qtek.math.Vector2} v
                             * @return {qtek.math.Matrix3}
                             */
                            Matrix3.translate = function(out, a, v) {
                                Matrix3_mat3.translate(out._array, a._array, v._array);
                                out._dirty = true;
                                return out;
                            };

                            /* harmony default export */
                            var math_Matrix3 = (Matrix3);

                            // EXTERNAL MODULE: ./node_modules/zrender/lib/animation/Animator.js
                            var Animator = __webpack_require__(10);
                            var Animator_default = /*#__PURE__*/ __webpack_require__.n(Animator);

                            // CONCATENATED MODULE: ./src/util/animatableMixin.js


                            var animatableMixin = {

                                _animators: null,

                                getAnimators: function() {
                                    this._animators = this._animators || [];

                                    return this._animators;
                                },

                                animate: function(path, opts) {
                                    this._animators = this._animators || [];

                                    var el = this;

                                    var target;

                                    if (path) {
                                        var pathSplitted = path.split('.');
                                        var prop = el;
                                        for (var i = 0, l = pathSplitted.length; i < l; i++) {
                                            if (!prop) {
                                                continue;
                                            }
                                            prop = prop[pathSplitted[i]];
                                        }
                                        if (prop) {
                                            target = prop;
                                        }
                                    } else {
                                        target = el;
                                    }
                                    if (target == null) {
                                        throw new Error('Target ' + path + ' not exists');
                                    }

                                    var animators = this._animators;

                                    var animator = new Animator_default.a(target, opts);
                                    var self = this;
                                    animator.during(function() {
                                        if (self.__zr) {
                                            self.__zr.refresh();
                                        }
                                    }).done(function() {
                                        var idx = animators.indexOf(animator);
                                        if (idx >= 0) {
                                            animators.splice(idx, 1);
                                        }
                                    });
                                    animators.push(animator);

                                    if (this.__zr) {
                                        this.__zr.animation.addAnimator(animator);
                                    }

                                    return animator;
                                },

                                stopAnimation: function(forwardToLast) {
                                    this._animators = this._animators || [];

                                    var animators = this._animators;
                                    var len = animators.length;
                                    for (var i = 0; i < len; i++) {
                                        animators[i].stop(forwardToLast);
                                    }
                                    animators.length = 0;

                                    return this;
                                },

                                addAnimatorsToZr: function(zr) {
                                    if (this._animators) {
                                        for (var i = 0; i < this._animators.length; i++) {
                                            zr.animation.addAnimator(this._animators[i]);
                                        }
                                    }
                                },

                                removeAnimatorsFromZr: function(zr) {
                                    if (this._animators) {
                                        for (var i = 0; i < this._animators.length; i++) {
                                            zr.animation.removeAnimator(this._animators[i]);
                                        }
                                    }
                                }
                            };

                            /* harmony default export */
                            var util_animatableMixin = (animatableMixin);
                            // CONCATENATED MODULE: ./node_modules/qtek/src/shader/source/util.glsl.js
                            /* harmony default export */
                            var util_glsl = ("\n@export qtek.util.rand\nhighp float rand(vec2 uv) {\n    const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n    highp float dt = dot(uv.xy, vec2(a,b)), sn = mod(dt, 3.141592653589793);\n    return fract(sin(sn) * c);\n}\n@end\n@export qtek.util.calculate_attenuation\nuniform float attenuationFactor : 5.0;\nfloat lightAttenuation(float dist, float range)\n{\n    float attenuation = 1.0;\n    attenuation = dist*dist/(range*range+1.0);\n    float att_s = attenuationFactor;\n    attenuation = 1.0/(attenuation*att_s+1.0);\n    att_s = 1.0/(att_s+1.0);\n    attenuation = attenuation - att_s;\n    attenuation /= 1.0 - att_s;\n    return clamp(attenuation, 0.0, 1.0);\n}\n@end\n@export qtek.util.edge_factor\nfloat edgeFactor(float width)\n{\n    vec3 d = fwidth(v_Barycentric);\n    vec3 a3 = smoothstep(vec3(0.0), d * width, v_Barycentric);\n    return min(min(a3.x, a3.y), a3.z);\n}\n@end\n@export qtek.util.encode_float\nvec4 encodeFloat(const in float depth)\n{\n    const vec4 bitShifts = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);\n    const vec4 bit_mask  = vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);\n    vec4 res = fract(depth * bitShifts);\n    res -= res.xxyz * bit_mask;\n    return res;\n}\n@end\n@export qtek.util.decode_float\nfloat decodeFloat(const in vec4 color)\n{\n    const vec4 bitShifts = vec4(1.0/(256.0*256.0*256.0), 1.0/(256.0*256.0), 1.0/256.0, 1.0);\n    return dot(color, bitShifts);\n}\n@end\n@export qtek.util.float\n@import qtek.util.encode_float\n@import qtek.util.decode_float\n@end\n@export qtek.util.rgbm_decode\nvec3 RGBMDecode(vec4 rgbm, float range) {\n  return range * rgbm.rgb * rgbm.a;\n}\n@end\n@export qtek.util.rgbm_encode\nvec4 RGBMEncode(vec3 color, float range) {\n    if (dot(color, color) == 0.0) {\n        return vec4(0.0);\n    }\n    vec4 rgbm;\n    color /= range;\n    rgbm.a = clamp(max(max(color.r, color.g), max(color.b, 1e-6)), 0.0, 1.0);\n    rgbm.a = ceil(rgbm.a * 255.0) / 255.0;\n    rgbm.rgb = color / rgbm.a;\n    return rgbm;\n}\n@end\n@export qtek.util.rgbm\n@import qtek.util.rgbm_decode\n@import qtek.util.rgbm_encode\nvec4 decodeHDR(vec4 color)\n{\n#if defined(RGBM_DECODE) || defined(RGBM)\n    return vec4(RGBMDecode(color, 51.5), 1.0);\n#else\n    return color;\n#endif\n}\nvec4 encodeHDR(vec4 color)\n{\n#if defined(RGBM_ENCODE) || defined(RGBM)\n    return RGBMEncode(color.xyz, 51.5);\n#else\n    return color;\n#endif\n}\n@end\n@export qtek.util.srgb\nvec4 sRGBToLinear(in vec4 value) {\n    return vec4(mix(pow(value.rgb * 0.9478672986 + vec3(0.0521327014), vec3(2.4)), value.rgb * 0.0773993808, vec3(lessThanEqual(value.rgb, vec3(0.04045)))), value.w);\n}\nvec4 linearTosRGB(in vec4 value) {\n    return vec4(mix(pow(value.rgb, vec3(0.41666)) * 1.055 - vec3(0.055), value.rgb * 12.92, vec3(lessThanEqual(value.rgb, vec3(0.0031308)))), value.w);\n}\n@end\n@export qtek.chunk.skinning_header\n#ifdef SKINNING\nattribute vec3 weight : WEIGHT;\nattribute vec4 joint : JOINT;\n#ifdef USE_SKIN_MATRICES_TEXTURE\nuniform sampler2D skinMatricesTexture;\nuniform float skinMatricesTextureSize: unconfigurable;\nmat4 getSkinMatrix(float idx) {\n    float j = idx * 4.0;\n    float x = mod(j, skinMatricesTextureSize);\n    float y = floor(j / skinMatricesTextureSize) + 0.5;\n    vec2 scale = vec2(skinMatricesTextureSize);\n    return mat4(\n        texture2D(skinMatricesTexture, vec2(x + 0.5, y) / scale),\n        texture2D(skinMatricesTexture, vec2(x + 1.5, y) / scale),\n        texture2D(skinMatricesTexture, vec2(x + 2.5, y) / scale),\n        texture2D(skinMatricesTexture, vec2(x + 3.5, y) / scale)\n    );\n}\n#else\nuniform mat4 skinMatrix[JOINT_COUNT] : SKIN_MATRIX;\nmat4 getSkinMatrix(float idx) {\n    return skinMatrix[int(idx)];\n}\n#endif\n#endif\n@end\n@export qtek.chunk.skin_matrix\nmat4 skinMatrixWS = getSkinMatrix(joint.x) * weight.x;\nif (weight.y > 1e-4)\n{\n    skinMatrixWS += getSkinMatrix(joint.y) * weight.y;\n}\nif (weight.z > 1e-4)\n{\n    skinMatrixWS += getSkinMatrix(joint.z) * weight.z;\n}\nfloat weightW = 1.0-weight.x-weight.y-weight.z;\nif (weightW > 1e-4)\n{\n    skinMatrixWS += getSkinMatrix(joint.w) * weightW;\n}\n@end\n@export qtek.util.parallax_correct\nvec3 parallaxCorrect(in vec3 dir, in vec3 pos, in vec3 boxMin, in vec3 boxMax) {\n    vec3 first = (boxMax - pos) / dir;\n    vec3 second = (boxMin - pos) / dir;\n    vec3 further = max(first, second);\n    float dist = min(further.x, min(further.y, further.z));\n    vec3 fixedPos = pos + dir * dist;\n    vec3 boxCenter = (boxMax + boxMin) * 0.5;\n    return normalize(fixedPos - boxCenter);\n}\n@end\n@export qtek.util.clamp_sample\nvec4 clampSample(const in sampler2D texture, const in vec2 coord)\n{\n#ifdef STEREO\n    float eye = step(0.5, coord.x) * 0.5;\n    vec2 coordClamped = clamp(coord, vec2(eye, 0.0), vec2(0.5 + eye, 1.0));\n#else\n    vec2 coordClamped = clamp(coord, vec2(0.0), vec2(1.0));\n#endif\n    return texture2D(texture, coordClamped);\n}\n@end");

                            // CONCATENATED MODULE: ./src/util/shader/common.glsl.js
                            /* harmony default export */
                            var common_glsl = ("\n@export ecgl.common.transformUniforms\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform mat4 worldInverseTranspose : WORLDINVERSETRANSPOSE;\nuniform mat4 world : WORLD;\n@end\n\n@export ecgl.common.attributes\nattribute vec3 position : POSITION;\nattribute vec2 texcoord : TEXCOORD_0;\nattribute vec3 normal : NORMAL;\n@end\n\n@export ecgl.common.uv.header\nuniform vec2 uvRepeat : [1.0, 1.0];\nuniform vec2 uvOffset : [0.0, 0.0];\nuniform vec2 detailUvRepeat : [1.0, 1.0];\nuniform vec2 detailUvOffset : [0.0, 0.0];\n\nvarying vec2 v_Texcoord;\nvarying vec2 v_DetailTexcoord;\n@end\n\n@export ecgl.common.uv.main\nv_Texcoord = texcoord * uvRepeat + uvOffset;\nv_DetailTexcoord = texcoord * detailUvRepeat + detailUvOffset;\n@end\n\n@export ecgl.common.uv.fragmentHeader\nvarying vec2 v_Texcoord;\nvarying vec2 v_DetailTexcoord;\n@end\n\n\n@export ecgl.common.albedo.main\n\n vec4 albedoTexel = vec4(1.0);\n#ifdef DIFFUSEMAP_ENABLED\n albedoTexel = texture2D(diffuseMap, v_Texcoord);\n #ifdef SRGB_DECODE\n albedoTexel = sRGBToLinear(albedoTexel);\n #endif\n#endif\n\n#ifdef DETAILMAP_ENABLED\n vec4 detailTexel = texture2D(detailMap, v_DetailTexcoord);\n #ifdef SRGB_DECODE\n detailTexel = sRGBToLinear(detailTexel);\n #endif\n albedoTexel.rgb = mix(albedoTexel.rgb, detailTexel.rgb, detailTexel.a);\n albedoTexel.a = detailTexel.a + (1.0 - detailTexel.a) * albedoTexel.a;\n#endif\n\n@end\n\n@export ecgl.common.wireframe.vertexHeader\n\n#ifdef WIREFRAME_QUAD\nattribute vec4 barycentric;\nvarying vec4 v_Barycentric;\n#elif defined(WIREFRAME_TRIANGLE)\nattribute vec3 barycentric;\nvarying vec3 v_Barycentric;\n#endif\n\n@end\n\n@export ecgl.common.wireframe.vertexMain\n\n#if defined(WIREFRAME_QUAD) || defined(WIREFRAME_TRIANGLE)\n v_Barycentric = barycentric;\n#endif\n\n@end\n\n\n@export ecgl.common.wireframe.fragmentHeader\n\nuniform float wireframeLineWidth : 1;\nuniform vec4 wireframeLineColor: [0, 0, 0, 0.5];\n\n#ifdef WIREFRAME_QUAD\nvarying vec4 v_Barycentric;\nfloat edgeFactor () {\n vec4 d = fwidth(v_Barycentric);\n vec4 a4 = smoothstep(vec4(0.0), d * wireframeLineWidth, v_Barycentric);\n return min(min(min(a4.x, a4.y), a4.z), a4.w);\n}\n#elif defined(WIREFRAME_TRIANGLE)\nvarying vec3 v_Barycentric;\nfloat edgeFactor () {\n vec3 d = fwidth(v_Barycentric);\n vec3 a3 = smoothstep(vec3(0.0), d * wireframeLineWidth, v_Barycentric);\n return min(min(a3.x, a3.y), a3.z);\n}\n#endif\n\n@end\n\n\n@export ecgl.common.wireframe.fragmentMain\n\n#if defined(WIREFRAME_QUAD) || defined(WIREFRAME_TRIANGLE)\n if (wireframeLineWidth > 0.) {\n vec4 lineColor = wireframeLineColor;\n#ifdef SRGB_DECODE\n lineColor = sRGBToLinear(lineColor);\n#endif\n\n gl_FragColor.rgb = mix(gl_FragColor.rgb, lineColor.rgb, (1.0 - edgeFactor()) * lineColor.a);\n }\n#endif\n@end\n\n\n\n\n@export ecgl.common.bumpMap.header\n\n#ifdef BUMPMAP_ENABLED\nuniform sampler2D bumpMap;\nuniform float bumpScale : 1.0;\n\n\nvec3 bumpNormal(vec3 surfPos, vec3 surfNormal, vec3 baseNormal)\n{\n vec2 dSTdx = dFdx(v_Texcoord);\n vec2 dSTdy = dFdy(v_Texcoord);\n\n float Hll = bumpScale * texture2D(bumpMap, v_Texcoord).x;\n float dHx = bumpScale * texture2D(bumpMap, v_Texcoord + dSTdx).x - Hll;\n float dHy = bumpScale * texture2D(bumpMap, v_Texcoord + dSTdy).x - Hll;\n\n vec3 vSigmaX = dFdx(surfPos);\n vec3 vSigmaY = dFdy(surfPos);\n vec3 vN = surfNormal;\n\n vec3 R1 = cross(vSigmaY, vN);\n vec3 R2 = cross(vN, vSigmaX);\n\n float fDet = dot(vSigmaX, R1);\n\n vec3 vGrad = sign(fDet) * (dHx * R1 + dHy * R2);\n return normalize(abs(fDet) * baseNormal - vGrad);\n\n}\n#endif\n\n@end\n\n@export ecgl.common.normalMap.vertexHeader\n\n#ifdef NORMALMAP_ENABLED\nattribute vec4 tangent : TANGENT;\nvarying vec3 v_Tangent;\nvarying vec3 v_Bitangent;\n#endif\n\n@end\n\n@export ecgl.common.normalMap.vertexMain\n\n#ifdef NORMALMAP_ENABLED\n if (dot(tangent, tangent) > 0.0) {\n v_Tangent = normalize((worldInverseTranspose * vec4(tangent.xyz, 0.0)).xyz);\n v_Bitangent = normalize(cross(v_Normal, v_Tangent) * tangent.w);\n }\n#endif\n\n@end\n\n\n@export ecgl.common.normalMap.fragmentHeader\n\n#ifdef NORMALMAP_ENABLED\nuniform sampler2D normalMap;\nvarying vec3 v_Tangent;\nvarying vec3 v_Bitangent;\n#endif\n\n@end\n\n@export ecgl.common.normalMap.fragmentMain\n#ifdef NORMALMAP_ENABLED\n if (dot(v_Tangent, v_Tangent) > 0.0) {\n vec3 normalTexel = texture2D(normalMap, v_DetailTexcoord).xyz;\n if (dot(normalTexel, normalTexel) > 0.0) { N = normalTexel * 2.0 - 1.0;\n mat3 tbn = mat3(v_Tangent, v_Bitangent, v_Normal);\n N = normalize(tbn * N);\n }\n }\n#endif\n@end\n\n\n\n@export ecgl.common.vertexAnimation.header\n\n#ifdef VERTEX_ANIMATION\nattribute vec3 prevPosition;\nattribute vec3 prevNormal;\nuniform float percent;\n#endif\n\n@end\n\n@export ecgl.common.vertexAnimation.main\n\n#ifdef VERTEX_ANIMATION\n vec3 pos = mix(prevPosition, position, percent);\n vec3 norm = mix(prevNormal, normal, percent);\n#else\n vec3 pos = position;\n vec3 norm = normal;\n#endif\n\n@end\n\n\n@export ecgl.common.ssaoMap.header\n#ifdef SSAOMAP_ENABLED\nuniform sampler2D ssaoMap;\nuniform vec4 viewport : VIEWPORT;\n#endif\n@end\n\n@export ecgl.common.ssaoMap.main\n float ao = 1.0;\n#ifdef SSAOMAP_ENABLED\n ao = texture2D(ssaoMap, (gl_FragCoord.xy - viewport.xy) / viewport.zw).r;\n#endif\n@end\n\n\n\n\n@export ecgl.common.diffuseLayer.header\n\n#if (LAYER_DIFFUSEMAP_COUNT > 0)\nuniform float layerDiffuseIntensity[LAYER_DIFFUSEMAP_COUNT];\nuniform sampler2D layerDiffuseMap[LAYER_DIFFUSEMAP_COUNT];\n#endif\n\n@end\n\n@export ecgl.common.emissiveLayer.header\n\n#if (LAYER_EMISSIVEMAP_COUNT > 0)\nuniform float layerEmissionIntensity[LAYER_EMISSIVEMAP_COUNT];\nuniform sampler2D layerEmissiveMap[LAYER_EMISSIVEMAP_COUNT];\n#endif\n\n@end\n\n@export ecgl.common.layers.header\n@import ecgl.common.diffuseLayer.header\n@import ecgl.common.emissiveLayer.header\n@end\n\n@export ecgl.common.diffuseLayer.main\n\n#if (LAYER_DIFFUSEMAP_COUNT > 0)\n for (int _idx_ = 0; _idx_ < LAYER_DIFFUSEMAP_COUNT; _idx_++) {{\n float intensity = layerDiffuseIntensity[_idx_];\n vec4 texel2 = texture2D(layerDiffuseMap[_idx_], v_Texcoord);\n #ifdef SRGB_DECODE\n texel2 = sRGBToLinear(texel2);\n #endif\n albedoTexel.rgb = mix(albedoTexel.rgb, texel2.rgb * intensity, texel2.a);\n albedoTexel.a = texel2.a + (1.0 - texel2.a) * albedoTexel.a;\n }}\n#endif\n\n@end\n\n@export ecgl.common.emissiveLayer.main\n\n#if (LAYER_EMISSIVEMAP_COUNT > 0)\n for (int _idx_ = 0; _idx_ < LAYER_EMISSIVEMAP_COUNT; _idx_++)\n {{\n vec4 texel2 = texture2D(layerEmissiveMap[_idx_], v_Texcoord) * layerEmissionIntensity[_idx_];\n #ifdef SRGB_DECODE\n texel2 = sRGBToLinear(texel2);\n #endif\n float intensity = layerEmissionIntensity[_idx_];\n gl_FragColor.rgb += texel2.rgb * texel2.a * intensity;\n }}\n#endif\n\n@end\n");

                            // CONCATENATED MODULE: ./src/util/shader/color.glsl.js
                            /* harmony default export */
                            var color_glsl = ("@export ecgl.color.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\n@import ecgl.common.uv.header\n\nattribute vec2 texcoord : TEXCOORD_0;\nattribute vec3 position: POSITION;\n\n@import ecgl.common.wireframe.vertexHeader\n\n#ifdef VERTEX_COLOR\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n#endif\n\n#ifdef VERTEX_ANIMATION\nattribute vec3 prevPosition;\nuniform float percent : 1.0;\n#endif\n\nvoid main()\n{\n#ifdef VERTEX_ANIMATION\n vec3 pos = mix(prevPosition, position, percent);\n#else\n vec3 pos = position;\n#endif\n\n gl_Position = worldViewProjection * vec4(pos, 1.0);\n\n @import ecgl.common.uv.main\n\n#ifdef VERTEX_COLOR\n v_Color = a_Color;\n#endif\n\n @import ecgl.common.wireframe.vertexMain\n\n}\n\n@end\n\n@export ecgl.color.fragment\n\n#define LAYER_DIFFUSEMAP_COUNT 0\n#define LAYER_EMISSIVEMAP_COUNT 0\n\nuniform sampler2D diffuseMap;\nuniform sampler2D detailMap;\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\n#ifdef VERTEX_COLOR\nvarying vec4 v_Color;\n#endif\n\n@import ecgl.common.layers.header\n\n@import ecgl.common.uv.fragmentHeader\n\n@import ecgl.common.wireframe.fragmentHeader\n\n@import qtek.util.srgb\n\nvoid main()\n{\n#ifdef SRGB_DECODE\n gl_FragColor = sRGBToLinear(color);\n#else\n gl_FragColor = color;\n#endif\n\n#ifdef VERTEX_COLOR\n gl_FragColor *= v_Color;\n#endif\n\n @import ecgl.common.albedo.main\n\n @import ecgl.common.diffuseLayer.main\n\n gl_FragColor *= albedoTexel;\n\n @import ecgl.common.emissiveLayer.main\n\n @import ecgl.common.wireframe.fragmentMain\n\n}\n@end");

                            // CONCATENATED MODULE: ./src/util/shader/lambert.glsl.js
                            /* harmony default export */
                            var lambert_glsl = ("/**\n * http: */\n\n@export ecgl.lambert.vertex\n\n@import ecgl.common.transformUniforms\n\n@import ecgl.common.uv.header\n\n\n@import ecgl.common.attributes\n\n@import ecgl.common.wireframe.vertexHeader\n\n#ifdef VERTEX_COLOR\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n#endif\n\n\n@import ecgl.common.vertexAnimation.header\n\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nvoid main()\n{\n @import ecgl.common.uv.main\n\n @import ecgl.common.vertexAnimation.main\n\n\n gl_Position = worldViewProjection * vec4(pos, 1.0);\n\n v_Normal = normalize((worldInverseTranspose * vec4(norm, 0.0)).xyz);\n v_WorldPosition = (world * vec4(pos, 1.0)).xyz;\n\n#ifdef VERTEX_COLOR\n v_Color = a_Color;\n#endif\n\n @import ecgl.common.wireframe.vertexMain\n}\n\n@end\n\n\n@export ecgl.lambert.fragment\n\n#define LAYER_DIFFUSEMAP_COUNT 0\n#define LAYER_EMISSIVEMAP_COUNT 0\n\n#define NORMAL_UP_AXIS 1\n#define NORMAL_FRONT_AXIS 2\n\n@import ecgl.common.uv.fragmentHeader\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nuniform sampler2D diffuseMap;\nuniform sampler2D detailMap;\n\n@import ecgl.common.layers.header\n\nuniform float emissionIntensity: 1.0;\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nuniform mat4 viewInverse : VIEWINVERSE;\n\n#ifdef AMBIENT_LIGHT_COUNT\n@import qtek.header.ambient_light\n#endif\n#ifdef AMBIENT_SH_LIGHT_COUNT\n@import qtek.header.ambient_sh_light\n#endif\n\n#ifdef DIRECTIONAL_LIGHT_COUNT\n@import qtek.header.directional_light\n#endif\n\n#ifdef VERTEX_COLOR\nvarying vec4 v_Color;\n#endif\n\n\n@import ecgl.common.ssaoMap.header\n\n@import ecgl.common.bumpMap.header\n\n@import qtek.util.srgb\n\n@import ecgl.common.wireframe.fragmentHeader\n\n@import qtek.plugin.compute_shadow_map\n\nvoid main()\n{\n#ifdef SRGB_DECODE\n gl_FragColor = sRGBToLinear(color);\n#else\n gl_FragColor = color;\n#endif\n\n#ifdef VERTEX_COLOR\n #ifdef SRGB_DECODE\n gl_FragColor *= sRGBToLinear(v_Color);\n #else\n gl_FragColor *= v_Color;\n #endif\n#endif\n\n @import ecgl.common.albedo.main\n\n @import ecgl.common.diffuseLayer.main\n\n gl_FragColor *= albedoTexel;\n\n vec3 N = v_Normal;\n#ifdef DOUBLE_SIDED\n vec3 eyePos = viewInverse[3].xyz;\n vec3 V = normalize(eyePos - v_WorldPosition);\n\n if (dot(N, V) < 0.0) {\n N = -N;\n }\n#endif\n\n float ambientFactor = 1.0;\n\n#ifdef BUMPMAP_ENABLED\n N = bumpNormal(v_WorldPosition, v_Normal, N);\n ambientFactor = dot(v_Normal, N);\n#endif\n\n vec3 N2 = vec3(N.x, N[NORMAL_UP_AXIS], N[NORMAL_FRONT_AXIS]);\n\n vec3 diffuseColor = vec3(0.0, 0.0, 0.0);\n\n @import ecgl.common.ssaoMap.main\n\n#ifdef AMBIENT_LIGHT_COUNT\n for(int i = 0; i < AMBIENT_LIGHT_COUNT; i++)\n {\n diffuseColor += ambientLightColor[i] * ambientFactor * ao;\n }\n#endif\n#ifdef AMBIENT_SH_LIGHT_COUNT\n for(int _idx_ = 0; _idx_ < AMBIENT_SH_LIGHT_COUNT; _idx_++)\n {{\n diffuseColor += calcAmbientSHLight(_idx_, N2) * ambientSHLightColor[_idx_] * ao;\n }}\n#endif\n#ifdef DIRECTIONAL_LIGHT_COUNT\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n float shadowContribsDir[DIRECTIONAL_LIGHT_COUNT];\n if(shadowEnabled)\n {\n computeShadowOfDirectionalLights(v_WorldPosition, shadowContribsDir);\n }\n#endif\n for(int i = 0; i < DIRECTIONAL_LIGHT_COUNT; i++)\n {\n vec3 lightDirection = -directionalLightDirection[i];\n vec3 lightColor = directionalLightColor[i];\n\n float shadowContrib = 1.0;\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n if (shadowEnabled)\n {\n shadowContrib = shadowContribsDir[i];\n }\n#endif\n\n float ndl = dot(N, normalize(lightDirection)) * shadowContrib;\n\n diffuseColor += lightColor * clamp(ndl, 0.0, 1.0);\n }\n#endif\n\n gl_FragColor.rgb *= diffuseColor;\n\n @import ecgl.common.emissiveLayer.main\n\n @import ecgl.common.wireframe.fragmentMain\n}\n\n@end");

                            // CONCATENATED MODULE: ./src/util/shader/realistic.glsl.js
                            /* harmony default export */
                            var realistic_glsl = ("@export ecgl.realistic.vertex\n\n@import ecgl.common.transformUniforms\n\n@import ecgl.common.uv.header\n\n@import ecgl.common.attributes\n\n\n@import ecgl.common.wireframe.vertexHeader\n\n#ifdef VERTEX_COLOR\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n#endif\n\n#ifdef NORMALMAP_ENABLED\nattribute vec4 tangent : TANGENT;\nvarying vec3 v_Tangent;\nvarying vec3 v_Bitangent;\n#endif\n\n@import ecgl.common.vertexAnimation.header\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nvoid main()\n{\n\n @import ecgl.common.uv.main\n\n @import ecgl.common.vertexAnimation.main\n\n gl_Position = worldViewProjection * vec4(pos, 1.0);\n\n v_Normal = normalize((worldInverseTranspose * vec4(norm, 0.0)).xyz);\n v_WorldPosition = (world * vec4(pos, 1.0)).xyz;\n\n#ifdef VERTEX_COLOR\n v_Color = a_Color;\n#endif\n\n#ifdef NORMALMAP_ENABLED\n v_Tangent = normalize((worldInverseTranspose * vec4(tangent.xyz, 0.0)).xyz);\n v_Bitangent = normalize(cross(v_Normal, v_Tangent) * tangent.w);\n#endif\n\n @import ecgl.common.wireframe.vertexMain\n\n}\n\n@end\n\n\n\n@export ecgl.realistic.fragment\n\n#define LAYER_DIFFUSEMAP_COUNT 0\n#define LAYER_EMISSIVEMAP_COUNT 0\n#define PI 3.14159265358979\n#define ROUGHNESS_CHANEL 0\n#define METALNESS_CHANEL 1\n\n#define NORMAL_UP_AXIS 1\n#define NORMAL_FRONT_AXIS 2\n\n#ifdef VERTEX_COLOR\nvarying vec4 v_Color;\n#endif\n\n@import ecgl.common.uv.fragmentHeader\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nuniform sampler2D diffuseMap;\n\nuniform sampler2D detailMap;\nuniform sampler2D metalnessMap;\nuniform sampler2D roughnessMap;\n\n@import ecgl.common.layers.header\n\nuniform float emissionIntensity: 1.0;\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nuniform float metalness : 0.0;\nuniform float roughness : 0.5;\n\nuniform mat4 viewInverse : VIEWINVERSE;\n\n#ifdef AMBIENT_LIGHT_COUNT\n@import qtek.header.ambient_light\n#endif\n\n#ifdef AMBIENT_SH_LIGHT_COUNT\n@import qtek.header.ambient_sh_light\n#endif\n\n#ifdef AMBIENT_CUBEMAP_LIGHT_COUNT\n@import qtek.header.ambient_cubemap_light\n#endif\n\n#ifdef DIRECTIONAL_LIGHT_COUNT\n@import qtek.header.directional_light\n#endif\n\n@import ecgl.common.normalMap.fragmentHeader\n\n@import ecgl.common.ssaoMap.header\n\n@import ecgl.common.bumpMap.header\n\n@import qtek.util.srgb\n\n@import qtek.util.rgbm\n\n@import ecgl.common.wireframe.fragmentHeader\n\n@import qtek.plugin.compute_shadow_map\n\nvec3 F_Schlick(float ndv, vec3 spec) {\n return spec + (1.0 - spec) * pow(1.0 - ndv, 5.0);\n}\n\nfloat D_Phong(float g, float ndh) {\n float a = pow(8192.0, g);\n return (a + 2.0) / 8.0 * pow(ndh, a);\n}\n\nvoid main()\n{\n vec4 albedoColor = color;\n\n vec3 eyePos = viewInverse[3].xyz;\n vec3 V = normalize(eyePos - v_WorldPosition);\n#ifdef VERTEX_COLOR\n #ifdef SRGB_DECODE\n albedoColor *= sRGBToLinear(v_Color);\n #else\n albedoColor *= v_Color;\n #endif\n#endif\n\n @import ecgl.common.albedo.main\n\n @import ecgl.common.diffuseLayer.main\n\n albedoColor *= albedoTexel;\n\n float m = metalness;\n\n#ifdef METALNESSMAP_ENABLED\n float m2 = texture2D(metalnessMap, v_DetailTexcoord)[METALNESS_CHANEL];\n m = clamp(m2 + (m - 0.5) * 2.0, 0.0, 1.0);\n#endif\n\n vec3 baseColor = albedoColor.rgb;\n albedoColor.rgb = baseColor * (1.0 - m);\n vec3 specFactor = mix(vec3(0.04), baseColor, m);\n\n float g = 1.0 - roughness;\n\n#ifdef ROUGHNESSMAP_ENABLED\n float g2 = 1.0 - texture2D(roughnessMap, v_DetailTexcoord)[ROUGHNESS_CHANEL];\n g = clamp(g2 + (g - 0.5) * 2.0, 0.0, 1.0);\n#endif\n\n vec3 N = v_Normal;\n\n#ifdef DOUBLE_SIDED\n if (dot(N, V) < 0.0) {\n N = -N;\n }\n#endif\n\n float ambientFactor = 1.0;\n\n#ifdef BUMPMAP_ENABLED\n N = bumpNormal(v_WorldPosition, v_Normal, N);\n ambientFactor = dot(v_Normal, N);\n#endif\n\n@import ecgl.common.normalMap.fragmentMain\n\n vec3 N2 = vec3(N.x, N[NORMAL_UP_AXIS], N[NORMAL_FRONT_AXIS]);\n\n vec3 diffuseTerm = vec3(0.0);\n vec3 specularTerm = vec3(0.0);\n\n float ndv = clamp(dot(N, V), 0.0, 1.0);\n vec3 fresnelTerm = F_Schlick(ndv, specFactor);\n\n @import ecgl.common.ssaoMap.main\n\n#ifdef AMBIENT_LIGHT_COUNT\n for(int _idx_ = 0; _idx_ < AMBIENT_LIGHT_COUNT; _idx_++)\n {{\n diffuseTerm += ambientLightColor[_idx_] * ambientFactor * ao;\n }}\n#endif\n\n#ifdef AMBIENT_SH_LIGHT_COUNT\n for(int _idx_ = 0; _idx_ < AMBIENT_SH_LIGHT_COUNT; _idx_++)\n {{\n diffuseTerm += calcAmbientSHLight(_idx_, N2) * ambientSHLightColor[_idx_] * ao;\n }}\n#endif\n\n#ifdef DIRECTIONAL_LIGHT_COUNT\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n float shadowContribsDir[DIRECTIONAL_LIGHT_COUNT];\n if(shadowEnabled)\n {\n computeShadowOfDirectionalLights(v_WorldPosition, shadowContribsDir);\n }\n#endif\n for(int _idx_ = 0; _idx_ < DIRECTIONAL_LIGHT_COUNT; _idx_++)\n {{\n vec3 L = -directionalLightDirection[_idx_];\n vec3 lc = directionalLightColor[_idx_];\n\n vec3 H = normalize(L + V);\n float ndl = clamp(dot(N, normalize(L)), 0.0, 1.0);\n float ndh = clamp(dot(N, H), 0.0, 1.0);\n\n float shadowContrib = 1.0;\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n if (shadowEnabled)\n {\n shadowContrib = shadowContribsDir[_idx_];\n }\n#endif\n\n vec3 li = lc * ndl * shadowContrib;\n\n diffuseTerm += li;\n specularTerm += li * fresnelTerm * D_Phong(g, ndh);\n }}\n#endif\n\n\n#ifdef AMBIENT_CUBEMAP_LIGHT_COUNT\n vec3 L = reflect(-V, N);\n L = vec3(L.x, L[NORMAL_UP_AXIS], L[NORMAL_FRONT_AXIS]);\n float rough2 = clamp(1.0 - g, 0.0, 1.0);\n float bias2 = rough2 * 5.0;\n vec2 brdfParam2 = texture2D(ambientCubemapLightBRDFLookup[0], vec2(rough2, ndv)).xy;\n vec3 envWeight2 = specFactor * brdfParam2.x + brdfParam2.y;\n vec3 envTexel2;\n for(int _idx_ = 0; _idx_ < AMBIENT_CUBEMAP_LIGHT_COUNT; _idx_++)\n {{\n envTexel2 = RGBMDecode(textureCubeLodEXT(ambientCubemapLightCubemap[_idx_], L, bias2), 51.5);\n specularTerm += ambientCubemapLightColor[_idx_] * envTexel2 * envWeight2 * ao;\n }}\n#endif\n\n gl_FragColor.rgb = albedoColor.rgb * diffuseTerm + specularTerm;\n gl_FragColor.a = albedoColor.a;\n\n#ifdef SRGB_ENCODE\n gl_FragColor = linearTosRGB(gl_FragColor);\n#endif\n\n @import ecgl.common.emissiveLayer.main\n\n @import ecgl.common.wireframe.fragmentMain\n}\n\n@end");

                            // CONCATENATED MODULE: ./src/util/shader/hatching.glsl.js
                            /* harmony default export */
                            var hatching_glsl = ("@export ecgl.hatching.vertex\n\n@import ecgl.realistic.vertex\n\n@end\n\n\n@export ecgl.hatching.fragment\n\n#define NORMAL_UP_AXIS 1\n#define NORMAL_FRONT_AXIS 2\n\n@import ecgl.common.uv.fragmentHeader\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nuniform vec4 color : [0.0, 0.0, 0.0, 1.0];\nuniform vec4 paperColor : [1.0, 1.0, 1.0, 1.0];\n\nuniform mat4 viewInverse : VIEWINVERSE;\n\n#ifdef AMBIENT_LIGHT_COUNT\n@import qtek.header.ambient_light\n#endif\n#ifdef AMBIENT_SH_LIGHT_COUNT\n@import qtek.header.ambient_sh_light\n#endif\n\n#ifdef DIRECTIONAL_LIGHT_COUNT\n@import qtek.header.directional_light\n#endif\n\n#ifdef VERTEX_COLOR\nvarying vec4 v_Color;\n#endif\n\n\n@import ecgl.common.ssaoMap.header\n\n@import ecgl.common.bumpMap.header\n\n@import qtek.util.srgb\n\n@import ecgl.common.wireframe.fragmentHeader\n\n@import qtek.plugin.compute_shadow_map\n\nuniform sampler2D hatch1;\nuniform sampler2D hatch2;\nuniform sampler2D hatch3;\nuniform sampler2D hatch4;\nuniform sampler2D hatch5;\nuniform sampler2D hatch6;\n\nfloat shade(in float tone) {\n vec4 c = vec4(1. ,1., 1., 1.);\n float step = 1. / 6.;\n vec2 uv = v_DetailTexcoord;\n if (tone <= step / 2.0) {\n c = mix(vec4(0.), texture2D(hatch6, uv), 12. * tone);\n }\n else if (tone <= step) {\n c = mix(texture2D(hatch6, uv), texture2D(hatch5, uv), 6. * tone);\n }\n if(tone > step && tone <= 2. * step){\n c = mix(texture2D(hatch5, uv), texture2D(hatch4, uv) , 6. * (tone - step));\n }\n if(tone > 2. * step && tone <= 3. * step){\n c = mix(texture2D(hatch4, uv), texture2D(hatch3, uv), 6. * (tone - 2. * step));\n }\n if(tone > 3. * step && tone <= 4. * step){\n c = mix(texture2D(hatch3, uv), texture2D(hatch2, uv), 6. * (tone - 3. * step));\n }\n if(tone > 4. * step && tone <= 5. * step){\n c = mix(texture2D(hatch2, uv), texture2D(hatch1, uv), 6. * (tone - 4. * step));\n }\n if(tone > 5. * step){\n c = mix(texture2D(hatch1, uv), vec4(1.), 6. * (tone - 5. * step));\n }\n\n return c.r;\n}\n\nconst vec3 w = vec3(0.2125, 0.7154, 0.0721);\n\nvoid main()\n{\n#ifdef SRGB_DECODE\n vec4 inkColor = sRGBToLinear(color);\n#else\n vec4 inkColor = color;\n#endif\n\n#ifdef VERTEX_COLOR\n #ifdef SRGB_DECODE\n inkColor *= sRGBToLinear(v_Color);\n #else\n inkColor *= v_Color;\n #endif\n#endif\n\n vec3 N = v_Normal;\n#ifdef DOUBLE_SIDED\n vec3 eyePos = viewInverse[3].xyz;\n vec3 V = normalize(eyePos - v_WorldPosition);\n\n if (dot(N, V) < 0.0) {\n N = -N;\n }\n#endif\n\n float tone = 0.0;\n\n float ambientFactor = 1.0;\n\n#ifdef BUMPMAP_ENABLED\n N = bumpNormal(v_WorldPosition, v_Normal, N);\n ambientFactor = dot(v_Normal, N);\n#endif\n\n vec3 N2 = vec3(N.x, N[NORMAL_UP_AXIS], N[NORMAL_FRONT_AXIS]);\n \n @import ecgl.common.ssaoMap.main\n\n#ifdef AMBIENT_LIGHT_COUNT\n for(int i = 0; i < AMBIENT_LIGHT_COUNT; i++)\n {\n tone += dot(ambientLightColor[i], w) * ambientFactor * ao;\n }\n#endif\n#ifdef AMBIENT_SH_LIGHT_COUNT\n for(int _idx_ = 0; _idx_ < AMBIENT_SH_LIGHT_COUNT; _idx_++)\n {{\n tone += dot(calcAmbientSHLight(_idx_, N2) * ambientSHLightColor[_idx_], w) * ao;\n }}\n#endif\n#ifdef DIRECTIONAL_LIGHT_COUNT\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n float shadowContribsDir[DIRECTIONAL_LIGHT_COUNT];\n if(shadowEnabled)\n {\n computeShadowOfDirectionalLights(v_WorldPosition, shadowContribsDir);\n }\n#endif\n for(int i = 0; i < DIRECTIONAL_LIGHT_COUNT; i++)\n {\n vec3 lightDirection = -directionalLightDirection[i];\n float lightTone = dot(directionalLightColor[i], w);\n\n float shadowContrib = 1.0;\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n if (shadowEnabled)\n {\n shadowContrib = shadowContribsDir[i];\n }\n#endif\n\n float ndl = dot(N, normalize(lightDirection)) * shadowContrib;\n\n tone += lightTone * clamp(ndl, 0.0, 1.0);\n }\n#endif\n\n gl_FragColor = mix(inkColor, paperColor, shade(clamp(tone, 0.0, 1.0)));\n }\n@end\n");

                            // CONCATENATED MODULE: ./src/util/shader/shadow.glsl.js
                            /* harmony default export */
                            var shadow_glsl = ("@export ecgl.sm.depth.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\nattribute vec3 position : POSITION;\n\n#ifdef VERTEX_ANIMATION\nattribute vec3 prevPosition;\nuniform float percent : 1.0;\n#endif\n\nvarying vec4 v_ViewPosition;\n\nvoid main(){\n\n#ifdef VERTEX_ANIMATION\n vec3 pos = mix(prevPosition, position, percent);\n#else\n vec3 pos = position;\n#endif\n\n v_ViewPosition = worldViewProjection * vec4(pos, 1.0);\n gl_Position = v_ViewPosition;\n\n}\n@end\n\n\n\n@export ecgl.sm.depth.fragment\n\n@import qtek.sm.depth.fragment\n\n@end");

                            // CONCATENATED MODULE: ./src/util/graphicGL.js






























                            // Math

















                            // Some common shaders










                            external__echarts__default.a.util.extend(src_Node.prototype, util_animatableMixin);

                            src_Shader.import(util_glsl);
                            src_Shader.import(prez_glsl);
                            src_Shader.import(common_glsl);
                            src_Shader.import(color_glsl);
                            src_Shader.import(lambert_glsl);
                            src_Shader.import(realistic_glsl);
                            src_Shader.import(hatching_glsl);
                            src_Shader.import(shadow_glsl);

                            function isValueNone(value) {
                                return !value || value === 'none';
                            }

                            function isValueImage(value) {
                                return value instanceof HTMLCanvasElement ||
                                    value instanceof HTMLImageElement ||
                                    value instanceof Image;
                            }

                            function isECharts(value) {
                                return value.getZr && value.setOption;
                            }

                            // Overwrite addToScene and removeFromScene
                            var oldAddToScene = src_Scene.prototype.addToScene;
                            var oldRemoveFromScene = src_Scene.prototype.removeFromScene;

                            src_Scene.prototype.addToScene = function(node) {
                                oldAddToScene.call(this, node);

                                if (this.__zr) {
                                    var zr = this.__zr;
                                    node.traverse(function(child) {
                                        child.__zr = zr;
                                        if (child.addAnimatorsToZr) {
                                            child.addAnimatorsToZr(zr);
                                        }
                                    });
                                }
                            };

                            src_Scene.prototype.removeFromScene = function(node) {
                                oldRemoveFromScene.call(this, node);

                                node.traverse(function(child) {
                                    var zr = child.__zr;
                                    child.__zr = null;
                                    if (zr && child.removeAnimatorsFromZr) {
                                        child.removeAnimatorsFromZr(zr);
                                    }
                                });
                            };

                            /**
                             * @param {string} textureName
                             * @param {string|HTMLImageElement|HTMLCanvasElement} imgValue
                             * @param {module:echarts/ExtensionAPI} api
                             * @param {Object} [textureOpts]
                             */
                            src_Material.prototype.setTextureImage = function(textureName, imgValue, api, textureOpts) {
                                if (!this.shader) {
                                    return;
                                }

                                var zr = api.getZr();
                                var material = this;
                                var texture;
                                // disableTexture first
                                material.shader.disableTexture(textureName);
                                if (!isValueNone(imgValue)) {
                                    texture = graphicGL.loadTexture(imgValue, api, textureOpts, function(texture) {
                                        material.shader.enableTexture(textureName);
                                        zr && zr.refresh();
                                    });
                                    // Set texture immediately for other code to verify if have this texture.
                                    material.set(textureName, texture);
                                }

                                return texture;
                            };

                            var graphicGL = {};

                            graphicGL.Renderer = src_Renderer;

                            graphicGL.Node = src_Node;

                            graphicGL.Mesh = src_Mesh;

                            graphicGL.Shader = src_Shader;

                            graphicGL.Material = src_Material;

                            graphicGL.Texture = src_Texture;

                            graphicGL.Texture2D = src_Texture2D;

                            // Geometries
                            graphicGL.Geometry = src_Geometry;
                            graphicGL.SphereGeometry = geometry_Sphere;
                            graphicGL.PlaneGeometry = geometry_Plane;
                            graphicGL.CubeGeometry = geometry_Cube;

                            // Lights
                            graphicGL.AmbientLight = Ambient;
                            graphicGL.DirectionalLight = Directional;
                            graphicGL.PointLight = Point;
                            graphicGL.SpotLight = Spot;

                            // Cameras
                            graphicGL.PerspectiveCamera = camera_Perspective;
                            graphicGL.OrthographicCamera = camera_Orthographic;

                            // Math
                            graphicGL.Vector2 = math_Vector2;
                            graphicGL.Vector3 = math_Vector3;
                            graphicGL.Vector4 = math_Vector4;

                            graphicGL.Quaternion = math_Quaternion;

                            graphicGL.Matrix2 = math_Matrix2;
                            graphicGL.Matrix2d = math_Matrix2d;
                            graphicGL.Matrix3 = math_Matrix3;
                            graphicGL.Matrix4 = math_Matrix4;

                            graphicGL.Plane = math_Plane;
                            graphicGL.Ray = math_Ray;
                            graphicGL.BoundingBox = math_BoundingBox;
                            graphicGL.Frustum = math_Frustum;

                            // Texture utilities

                            var blankImage = util_texture.createBlank('rgba(255,255,255,0)').image;


                            function nearestPowerOfTwo(val) {
                                return Math.pow(2, Math.round(Math.log(val) / Math.LN2));
                            }

                            function convertTextureToPowerOfTwo(texture) {
                                if ((texture.wrapS === src_Texture.REPEAT || texture.wrapT === src_Texture.REPEAT) &&
                                    texture.image
                                ) {
                                    // var canvas = document.createElement('canvas');
                                    var width = nearestPowerOfTwo(texture.width);
                                    var height = nearestPowerOfTwo(texture.height);
                                    if (width !== texture.width || height !== texture.height) {
                                        var canvas = document.createElement('canvas');
                                        canvas.width = width;
                                        canvas.height = height;
                                        var ctx = canvas.getContext('2d');
                                        ctx.drawImage(texture.image, 0, 0, width, height);
                                        texture.image = canvas;
                                    }
                                }
                            }
                            /**
                             * @param {string|HTMLImageElement|HTMLCanvasElement} imgValue
                             * @param {module:echarts/ExtensionAPI} api
                             * @param {Object} [textureOpts]
                             * @param {Function} cb
                             */
                            // TODO Promise, test
                            graphicGL.loadTexture = function(imgValue, api, textureOpts, cb) {
                                if (typeof textureOpts === 'function') {
                                    cb = textureOpts;
                                    textureOpts = {};
                                }
                                textureOpts = textureOpts || {};

                                var keys = Object.keys(textureOpts).sort();
                                var prefix = '';
                                for (var i = 0; i < keys.length; i++) {
                                    prefix += keys[i] + '_' + textureOpts[keys[i]] + '_';
                                }

                                var textureCache = api.__textureCache = api.__textureCache || new LRU_default.a(20);

                                if (isECharts(imgValue)) {
                                    var id = imgValue.__textureid__;
                                    var textureObj = textureCache.get(prefix + id);
                                    if (!textureObj) {
                                        var surface = new util_EChartsSurface(imgValue);
                                        surface.onupdate = function() {
                                            api.getZr().refresh();
                                        };
                                        textureObj = {
                                            texture: surface.getTexture()
                                        };
                                        for (var i = 0; i < keys.length; i++) {
                                            textureObj.texture[keys[i]] = textureOpts[keys[i]];
                                        }
                                        id = imgValue.__textureid__ || '__ecgl_ec__' + textureObj.texture.__GUID__;
                                        imgValue.__textureid__ = id;
                                        textureCache.put(prefix + id, textureObj);
                                        cb && cb(textureObj.texture);
                                    } else {
                                        textureObj.texture.surface.setECharts(imgValue);

                                        cb && cb(textureObj.texture);
                                    }
                                    return textureObj.texture;
                                } else if (isValueImage(imgValue)) {
                                    var id = imgValue.__textureid__;
                                    var textureObj = textureCache.get(prefix + id);
                                    if (!textureObj) {
                                        textureObj = {
                                            texture: new graphicGL.Texture2D({
                                                image: imgValue
                                            })
                                        };
                                        for (var i = 0; i < keys.length; i++) {
                                            textureObj.texture[keys[i]] = textureOpts[keys[i]];
                                        }
                                        id = imgValue.__textureid__ || '__ecgl_image__' + textureObj.texture.__GUID__;
                                        imgValue.__textureid__ = id;
                                        textureCache.put(prefix + id, textureObj);

                                        convertTextureToPowerOfTwo(textureObj.texture);
                                        // TODO Next tick?
                                        cb && cb(textureObj.texture);
                                    }
                                    return textureObj.texture;
                                } else {
                                    var textureObj = textureCache.get(prefix + imgValue);
                                    if (textureObj) {
                                        if (textureObj.callbacks) {
                                            // Add to pending callbacks
                                            textureObj.callbacks.push(cb);
                                        } else {
                                            // TODO Next tick?
                                            cb && cb(textureObj.texture);
                                        }
                                    } else {
                                        // Maybe base64
                                        if (imgValue.match(/.hdr$|^data:application\/octet-stream/)) {
                                            textureObj = {
                                                callbacks: [cb]
                                            };
                                            var texture = util_texture.loadTexture(imgValue, {
                                                exposure: textureOpts.exposure,
                                                fileType: 'hdr'
                                            }, function() {
                                                texture.dirty();
                                                textureObj.callbacks.forEach(function(cb) {
                                                    cb && cb(texture);
                                                });
                                                textureObj.callbacks = null;
                                            });
                                            textureObj.texture = texture;
                                            textureCache.put(prefix + imgValue, textureObj);
                                        } else {
                                            var texture = new graphicGL.Texture2D({
                                                image: new Image()
                                            });
                                            for (var i = 0; i < keys.length; i++) {
                                                texture[keys[i]] = textureOpts[keys[i]];
                                            }

                                            textureObj = {
                                                texture: texture,
                                                callbacks: [cb]
                                            };
                                            var originalImage = texture.image;
                                            originalImage.onload = function() {
                                                texture.image = originalImage;
                                                convertTextureToPowerOfTwo(texture);

                                                texture.dirty();
                                                textureObj.callbacks.forEach(function(cb) {
                                                    cb && cb(texture);
                                                });
                                                textureObj.callbacks = null;
                                            };
                                            originalImage.src = imgValue;
                                            // Use blank image as place holder.
                                            texture.image = blankImage;

                                            textureCache.put(prefix + imgValue, textureObj);
                                        }
                                    }

                                    return textureObj.texture;
                                }
                            };

                            /**
                             * Create ambientCubemap and ambientSH light. respectively to have specular and diffuse light
                             * @return {Object} { specular, diffuse }
                             */
                            graphicGL.createAmbientCubemap = function(opt, renderer, api, cb) {
                                opt = opt || {};
                                var textureUrl = opt.texture;
                                var exposure = util_retrieve.firstNotNull(opt.exposure, 1.0);

                                var ambientCubemap = new AmbientCubemap({
                                    intensity: util_retrieve.firstNotNull(opt.specularIntensity, 1.0)
                                });
                                var ambientSH = new AmbientSH({
                                    intensity: util_retrieve.firstNotNull(opt.diffuseIntensity, 1.0),
                                    coefficients: [0.844, 0.712, 0.691, -0.037, 0.083, 0.167, 0.343, 0.288, 0.299, -0.041, -0.021, -0.009, -0.003, -0.041, -0.064, -0.011, -0.007, -0.004, -0.031, 0.034, 0.081, -0.060, -0.049, -0.060, 0.046, 0.056, 0.050]
                                });


                                ambientCubemap.cubemap = graphicGL.loadTexture(textureUrl, api, {
                                    exposure: exposure
                                }, function() {
                                    // TODO Performance when multiple view
                                    ambientCubemap.cubemap.flipY = false;
                                    ambientCubemap.prefilter(renderer, 32);
                                    ambientSH.coefficients = util_sh.projectEnvironmentMap(renderer, ambientCubemap.cubemap, {
                                        lod: 1
                                    });

                                    cb && cb();

                                    // TODO Refresh ?
                                });

                                return {
                                    specular: ambientCubemap,
                                    diffuse: ambientSH
                                };
                            };

                            /**
                             * Create a blank texture for placeholder
                             */
                            graphicGL.createBlankTexture = util_texture.createBlank;

                            /**
                             * If value is image
                             * @param {*}
                             * @return {boolean}
                             */
                            graphicGL.isImage = isValueImage;

                            graphicGL.additiveBlend = function(gl) {
                                gl.blendEquation(gl.FUNC_ADD);
                                gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
                            };

                            /**
                             * @param {string|Array.<number>} colorStr
                             * @param {Array.<number>} [rgba]
                             * @return {Array.<number>} rgba
                             */
                            graphicGL.parseColor = function(colorStr, rgba) {
                                if (colorStr instanceof Array) {
                                    if (!rgba) {
                                        rgba = [];
                                    }
                                    // Color has been parsed.
                                    rgba[0] = colorStr[0];
                                    rgba[1] = colorStr[1];
                                    rgba[2] = colorStr[2];
                                    if (colorStr.length > 3) {
                                        rgba[3] = colorStr[3];
                                    } else {
                                        rgba[3] = 1;
                                    }
                                    return rgba;
                                }

                                rgba = external__echarts__default.a.color.parse(colorStr || '#000', rgba) || [0, 0, 0, 0];
                                rgba[0] /= 255;
                                rgba[1] /= 255;
                                rgba[2] /= 255;
                                return rgba;
                            };

                            /**
                             * Convert alpha beta rotation to direction.
                             * @param {number} alpha
                             * @param {number} beta
                             * @return {Array.<number>}
                             */
                            graphicGL.directionFromAlphaBeta = function(alpha, beta) {
                                var theta = alpha / 180 * Math.PI + Math.PI / 2;
                                var phi = -beta / 180 * Math.PI + Math.PI / 2;

                                var dir = [];
                                var r = Math.sin(theta);
                                dir[0] = r * Math.cos(phi);
                                dir[1] = -Math.cos(theta);
                                dir[2] = r * Math.sin(phi);

                                return dir;
                            };
                            /**
                             * Get shadow resolution from shadowQuality configuration
                             */
                            graphicGL.getShadowResolution = function(shadowQuality) {
                                var shadowResolution = 1024;
                                switch (shadowQuality) {
                                    case 'low':
                                        shadowResolution = 512;
                                        break;
                                    case 'medium':
                                        break;
                                    case 'high':
                                        shadowResolution = 2048;
                                        break;
                                    case 'ultra':
                                        shadowResolution = 4096;
                                        break;
                                }
                                return shadowResolution;
                            };

                            /**
                             * Shading utilities
                             */
                            graphicGL.COMMON_SHADERS = ['lambert', 'color', 'realistic', 'hatching'];

                            /**
                             * Create shader including vertex and fragment
                             * @param {string} prefix.
                             */
                            graphicGL.createShader = function(prefix) {
                                var vertexShaderStr = src_Shader.source(prefix + '.vertex');
                                var fragmentShaderStr = src_Shader.source(prefix + '.fragment');
                                if (!vertexShaderStr) {
                                    console.error('Vertex shader of \'%s\' not exits', prefix);
                                }
                                if (!fragmentShaderStr) {
                                    console.error('Fragment shader of \'%s\' not exits', prefix);
                                }
                                return new src_Shader({
                                    name: prefix,
                                    vertex: vertexShaderStr,
                                    fragment: fragmentShaderStr
                                });
                            };
                            /**
                             * Set material from model.
                             * @param {qtek.Material} material
                             * @param {module:echarts/model/Model} model
                             * @param {module:echarts/ExtensionAPI} api
                             */
                            graphicGL.setMaterialFromModel = function(shading, material, model, api) {
                                var materialModel = model.getModel(shading + 'Material');
                                var detailTexture = materialModel.get('detailTexture');
                                var uvRepeat = util_retrieve.firstNotNull(materialModel.get('textureTiling'), 1.0);
                                var uvOffset = util_retrieve.firstNotNull(materialModel.get('textureOffset'), 0.0);
                                if (typeof uvRepeat === 'number') {
                                    uvRepeat = [uvRepeat, uvRepeat];
                                }
                                if (typeof uvOffset === 'number') {
                                    uvOffset = [uvOffset, uvOffset];
                                }
                                var repeatParam = (uvRepeat[0] > 1 || uvRepeat[1] > 1) ? graphicGL.Texture.REPEAT : graphicGL.Texture.CLAMP_TO_EDGE;
                                var textureOpt = {
                                    anisotropic: 8,
                                    wrapS: repeatParam,
                                    wrapT: repeatParam
                                };
                                if (shading === 'realistic') {
                                    var roughness = materialModel.get('roughness');
                                    var metalness = materialModel.get('metalness');
                                    if (metalness != null) {
                                        // Try to treat as a texture, TODO More check
                                        if (isNaN(metalness)) {
                                            material.setTextureImage('metalnessMap', metalness, api, textureOpt);
                                            metalness = util_retrieve.firstNotNull(materialModel.get('metalnessAdjust'), 0.5);
                                        }
                                    } else {
                                        // Default metalness.
                                        metalness = 0;
                                    }
                                    if (roughness != null) {
                                        // Try to treat as a texture, TODO More check
                                        if (isNaN(roughness)) {
                                            material.setTextureImage('roughnessMap', roughness, api, textureOpt);
                                            roughness = util_retrieve.firstNotNull(materialModel.get('roughnessAdjust'), 0.5);
                                        }
                                    } else {
                                        // Default roughness.
                                        roughness = 0.5;
                                    }
                                    var normalTextureVal = materialModel.get('normalTexture');
                                    material.setTextureImage('detailMap', detailTexture, api, textureOpt);
                                    material.setTextureImage('normalMap', normalTextureVal, api, textureOpt);
                                    material.set({
                                        roughness: roughness,
                                        metalness: metalness,
                                        detailUvRepeat: uvRepeat,
                                        detailUvOffset: uvOffset
                                    });
                                    // var normalTexture = material.get('normalMap');
                                    // if (normalTexture) {
                                    // PENDING
                                    // normalTexture.format = Texture.SRGB;
                                    // }
                                } else if (shading === 'lambert') {
                                    material.setTextureImage('detailMap', detailTexture, api, textureOpt);
                                    material.set({
                                        detailUvRepeat: uvRepeat,
                                        detailUvOffset: uvOffset
                                    });
                                } else if (shading === 'color') {
                                    material.setTextureImage('detailMap', detailTexture, api, textureOpt);
                                    material.set({
                                        detailUvRepeat: uvRepeat,
                                        detailUvOffset: uvOffset
                                    });
                                } else if (shading === 'hatching') {
                                    var tams = materialModel.get('hatchingTextures') || [];
                                    if (tams.length < 6) {
                                        if (true) {
                                            console.error('Invalid hatchingTextures.');
                                        }
                                    }
                                    for (var i = 0; i < 6; i++) {
                                        material.setTextureImage('hatch' + (i + 1), tams[i], api, {
                                            anisotropic: 8,
                                            wrapS: graphicGL.Texture.REPEAT,
                                            wrapT: graphicGL.Texture.REPEAT
                                        });
                                    }
                                    material.set({
                                        detailUvRepeat: uvRepeat,
                                        detailUvOffset: uvOffset
                                    });
                                }
                            };

                            graphicGL.updateVertexAnimation = function(
                                mappingAttributes, previousMesh, currentMesh, seriesModel
                            ) {
                                var enableAnimation = seriesModel.get('animation');
                                var duration = seriesModel.get('animationDurationUpdate');
                                var easing = seriesModel.get('animationEasingUpdate');
                                var shadowDepthMaterial = currentMesh.shadowDepthMaterial;

                                if (enableAnimation && previousMesh && duration > 0
                                    // Only animate when bar count are not changed
                                    &&
                                    previousMesh.geometry.vertexCount === currentMesh.geometry.vertexCount
                                ) {
                                    currentMesh.material.shader.define('vertex', 'VERTEX_ANIMATION');
                                    currentMesh.ignorePreZ = true;
                                    if (shadowDepthMaterial) {
                                        shadowDepthMaterial.shader.define('vertex', 'VERTEX_ANIMATION');
                                    }
                                    for (var i = 0; i < mappingAttributes.length; i++) {
                                        currentMesh.geometry.attributes[mappingAttributes[i][0]].value =
                                            previousMesh.geometry.attributes[mappingAttributes[i][1]].value;
                                    }
                                    currentMesh.geometry.dirty();
                                    currentMesh.__percent = 0;
                                    currentMesh.material.set('percent', 0);
                                    currentMesh.stopAnimation();
                                    currentMesh.animate()
                                        .when(duration, {
                                            __percent: 1
                                        })
                                        .during(function() {
                                            currentMesh.material.set('percent', currentMesh.__percent);
                                            if (shadowDepthMaterial) {
                                                shadowDepthMaterial.set('percent', currentMesh.__percent);
                                            }
                                        })
                                        .done(function() {
                                            currentMesh.ignorePreZ = false;
                                            currentMesh.material.shader.undefine('vertex', 'VERTEX_ANIMATION');
                                            if (shadowDepthMaterial) {
                                                shadowDepthMaterial.shader.undefine('vertex', 'VERTEX_ANIMATION');
                                            }
                                        })
                                        .start(easing);
                                } else {
                                    currentMesh.material.shader.undefine('vertex', 'VERTEX_ANIMATION');
                                    if (shadowDepthMaterial) {
                                        shadowDepthMaterial.shader.undefine('vertex', 'VERTEX_ANIMATION');
                                    }
                                }
                            };

                            /* harmony default export */
                            var util_graphicGL = (graphicGL);
                            // CONCATENATED MODULE: ./src/echarts-gl.js
                            /**
                             * echarts-gl
                             * Extension pack of ECharts providing 3d plots and globe visualization
                             *
                             * Copyright (c) 2014, echarts-gl
                             * All rights reserved.
                             *
                             * Redistribution and use in source and binary forms, with or without
                             * modification, are permitted provided that the following conditions are met:
                             *
                             * * Redistributions of source code must retain the above copyright notice, this
                             *   list of conditions and the following disclaimer.
                             *
                             * * Redistributions in binary form must reproduce the above copyright notice,
                             *   this list of conditions and the following disclaimer in the documentation
                             *   and/or other materials provided with the distribution.
                             *
                             * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                             * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                             * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                             * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                             * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                             * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                             * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                             * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                             * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                             * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                             */

                            /**
                             * @module echarts-gl
                             * @author Yi Shen(http://github.com/pissang)
                             */

                            // PENDING Use a single canvas as layer or use image element?
                            var echartsGl = {
                                version: '1.0.0-beta.6',
                                dependencies: {
                                    echarts: '3.8.5',
                                    qtek: '0.6.0'
                                }
                            };






                            // Version checking
                            var deps = echartsGl.dependencies;

                            function versionTooOldMsg(name) {
                                throw new Error(
                                    name + ' version is too old, needs ' + deps[name] + ' or higher'
                                );
                            }

                            function checkVersion(version, name) {
                                if ((version.replace('.', '') - 0) < (deps[name].replace('.', '') - 0)) {
                                    versionTooOldMsg(name);
                                }
                                console.log('Loaded ' + name + ', version ' + version);
                            }
                            checkVersion(version, 'qtek');
                            checkVersion(external__echarts__default.a.version, 'echarts');

                            function EChartsGL(zr) {
                                this._layers = {};

                                this._zr = zr;
                            }

                            EChartsGL.prototype.update = function(ecModel, api) {
                                var self = this;
                                var zr = api.getZr();

                                if (!zr.getWidth() || !zr.getHeight()) {
                                    console.warn('Dom has no width or height');
                                    return;
                                }

                                function getLayerGL(model) {
                                    var zlevel = model.get('zlevel');
                                    var layers = self._layers;
                                    var layerGL = layers[zlevel];
                                    if (!layerGL) {
                                        layerGL = layers[zlevel] = new core_LayerGL('gl-' + zlevel, zr);

                                        if (zr.painter.isSingleCanvas()) {
                                            layerGL.virtual = true;
                                            // If container is canvas, use image to represent LayerGL
                                            // FIXME Performance
                                            var img = new external__echarts__default.a.graphic.Image({
                                                z: 1e4,
                                                style: {
                                                    image: layerGL.renderer.canvas
                                                },
                                                silent: true
                                            });
                                            layerGL.__hostImage = img;

                                            zr.add(img);
                                        }

                                        zr.painter.insertLayer(zlevel, layerGL);
                                    }
                                    if (layerGL.__hostImage) {
                                        layerGL.__hostImage.setStyle({
                                            width: layerGL.renderer.getWidth(),
                                            height: layerGL.renderer.getHeight()
                                        });
                                    }

                                    return layerGL;
                                }

                                function setSilent(groupGL, silent) {
                                    if (groupGL) {
                                        groupGL.traverse(function(mesh) {
                                            if (mesh.isRenderable && mesh.isRenderable()) {
                                                mesh.ignorePicking = mesh.$ignorePicking != null ?
                                                    mesh.$ignorePicking : silent;
                                            }
                                        });
                                    }
                                }

                                for (var zlevel in this._layers) {
                                    this._layers[zlevel].removeViewsAll();
                                }

                                ecModel.eachComponent(function(componentType, componentModel) {
                                    if (componentType !== 'series') {
                                        var view = api.getViewOfComponentModel(componentModel);
                                        var coordSys = componentModel.coordinateSystem;
                                        // View with __ecgl__ flag is a echarts-gl component.
                                        if (view.__ecgl__) {
                                            var viewGL;
                                            if (coordSys) {
                                                if (!coordSys.viewGL) {
                                                    console.error('Can\'t find viewGL in coordinateSystem of component ' + componentModel.id);
                                                    return;
                                                }
                                                viewGL = coordSys.viewGL;
                                            } else {
                                                if (!componentModel.viewGL) {
                                                    console.error('Can\'t find viewGL of component ' + componentModel.id);
                                                    return;
                                                }
                                                viewGL = coordSys.viewGL;
                                            }

                                            var viewGL = coordSys.viewGL;
                                            var layerGL = getLayerGL(componentModel);

                                            layerGL.addView(viewGL);

                                            view.afterRender && view.afterRender(
                                                componentModel, ecModel, api, layerGL
                                            );

                                            setSilent(view.groupGL, componentModel.get('silent'));
                                        }
                                    }
                                });

                                ecModel.eachSeries(function(seriesModel) {
                                    var chartView = api.getViewOfSeriesModel(seriesModel);
                                    var coordSys = seriesModel.coordinateSystem;
                                    if (chartView.__ecgl__) {
                                        if ((coordSys && !coordSys.viewGL) && !chartView.viewGL) {
                                            console.error('Can\'t find viewGL of series ' + chartView.id);
                                            return;
                                        }
                                        var viewGL = (coordSys && coordSys.viewGL) || chartView.viewGL;
                                        // TODO Check zlevel not same with component of coordinate system ?
                                        var layerGL = getLayerGL(seriesModel);
                                        layerGL.addView(viewGL);

                                        chartView.afterRender && chartView.afterRender(
                                            seriesModel, ecModel, api, layerGL
                                        );

                                        setSilent(chartView.groupGL, seriesModel.get('silent'));
                                    }
                                });
                            };

                            // Hack original getRenderedCanvas. Will removed after new echarts released
                            // TODO
                            var oldInit = external__echarts__default.a.init;
                            external__echarts__default.a.init = function() {
                                var chart = oldInit.apply(this, arguments);
                                chart.getZr().painter.getRenderedCanvas = function(opts) {
                                    opts = opts || {};
                                    if (this._singleCanvas) {
                                        return this._layers[0].dom;
                                    }

                                    var canvas = document.createElement('canvas');
                                    var dpr = opts.pixelRatio || this.dpr;
                                    canvas.width = this.getWidth() * dpr;
                                    canvas.height = this.getHeight() * dpr;
                                    var ctx = canvas.getContext('2d');
                                    ctx.dpr = dpr;

                                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                                    if (opts.backgroundColor) {
                                        ctx.fillStyle = opts.backgroundColor;
                                        ctx.fillRect(0, 0, canvas.width, canvas.height);
                                    }

                                    var displayList = this.storage.getDisplayList(true);

                                    var scope = {};
                                    var zlevel;

                                    var self = this;

                                    function findAndDrawOtherLayer(smaller, larger) {
                                        var zlevelList = self._zlevelList;
                                        if (smaller == null) {
                                            smaller = -Infinity;
                                        }
                                        var intermediateLayer;
                                        for (var i = 0; i < zlevelList.length; i++) {
                                            var z = zlevelList[i];
                                            var layer = self._layers[z];
                                            if (!layer.__builtin__ && z > smaller && z < larger) {
                                                intermediateLayer = layer;
                                                break;
                                            }
                                        }
                                        if (intermediateLayer && intermediateLayer.renderToCanvas) {
                                            ctx.save();
                                            intermediateLayer.renderToCanvas(ctx);
                                            ctx.restore();
                                        }
                                    }
                                    var layer = {
                                        ctx: ctx
                                    };
                                    for (var i = 0; i < displayList.length; i++) {
                                        var el = displayList[i];

                                        if (el.zlevel !== zlevel) {
                                            findAndDrawOtherLayer(zlevel, el.zlevel);
                                            zlevel = el.zlevel;
                                        }
                                        this._doPaintEl(el, layer, true, scope);
                                    }

                                    findAndDrawOtherLayer(zlevel, Infinity);

                                    return canvas;
                                };
                                return chart;
                            };


                            external__echarts__default.a.registerPostUpdate(function(ecModel, api) {
                                var zr = api.getZr();

                                var egl = zr.__egl = zr.__egl || new EChartsGL(zr);

                                egl.update(ecModel, api);
                            });

                            external__echarts__default.a.registerPreprocessor(backwardCompat);

                            external__echarts__default.a.graphicGL = util_graphicGL;

                            /* harmony default export */
                            var echarts_gl = (EChartsGL);
                            // CONCATENATED MODULE: ./src/component/grid3D/axis3DDefault.js


                            var defaultOption = {
                                show: true,

                                grid3DIndex: 0,
                                // 反向坐标轴
                                inverse: false,

                                // 坐标轴名字
                                name: '',
                                // 坐标轴名字位置
                                nameLocation: 'middle',

                                nameTextStyle: {
                                    fontSize: 16
                                },
                                // 文字与轴线距离
                                nameGap: 20,

                                axisPointer: {},

                                axisLine: {},
                                // 坐标轴小标记
                                axisTick: {},
                                axisLabel: {},
                                // 分隔区域
                                splitArea: {}
                            };

                            var categoryAxis = external__echarts__default.a.util.merge({
                                // 类目起始和结束两端空白策略
                                boundaryGap: true,
                                // splitArea: {
                                // show: false
                                // },
                                // 坐标轴小标记
                                axisTick: {
                                    // If tick is align with label when boundaryGap is true
                                    // Default with axisTick
                                    alignWithLabel: false,
                                    interval: 'auto'
                                },
                                // 坐标轴文本标签，详见axis.axisLabel
                                axisLabel: {
                                    interval: 'auto'
                                },
                                axisPointer: {
                                    label: {
                                        show: false
                                    }
                                }
                            }, defaultOption);

                            var valueAxis = external__echarts__default.a.util.merge({
                                // 数值起始和结束两端空白策略
                                boundaryGap: [0, 0],
                                // 最小值, 设置成 'dataMin' 则从数据中计算最小值
                                // min: null,
                                // 最大值，设置成 'dataMax' 则从数据中计算最大值
                                // max: null,
                                // 脱离0值比例，放大聚焦到最终_min，_max区间
                                // scale: false,
                                // 分割段数，默认为5
                                splitNumber: 5,
                                // Minimum interval
                                // minInterval: null

                                axisPointer: {
                                    label: {}
                                }
                            }, defaultOption);

                            // FIXME
                            var timeAxis = external__echarts__default.a.util.defaults({
                                scale: true,
                                min: 'dataMin',
                                max: 'dataMax'
                            }, valueAxis);
                            var logAxis = external__echarts__default.a.util.defaults({
                                logBase: 10
                            }, valueAxis);
                            logAxis.scale = true;

                            /* harmony default export */
                            var axis3DDefault = ({
                                categoryAxis: categoryAxis,
                                valueAxis: valueAxis,
                                timeAxis: timeAxis,
                                logAxis: logAxis
                            });
                            // CONCATENATED MODULE: ./src/component/grid3D/createAxis3DModel.js



                            var AXIS_TYPES = ['value', 'category', 'time', 'log'];
                            /**
                             * Generate sub axis model class
                             * @param {string} dim 'x' 'y' 'radius' 'angle' 'parallel'
                             * @param {module:echarts/model/Component} BaseAxisModelClass
                             * @param {Function} axisTypeDefaulter
                             * @param {Object} [extraDefaultOption]
                             */
                            /* harmony default export */
                            var createAxis3DModel = (function(dim, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {

                                external__echarts__default.a.util.each(AXIS_TYPES, function(axisType) {

                                    BaseAxisModelClass.extend({

                                        type: dim + 'Axis3D.' + axisType,

                                        mergeDefaultAndTheme: function(option, ecModel) {

                                            var themeModel = ecModel.getTheme();
                                            external__echarts__default.a.util.merge(option, themeModel.get(axisType + 'Axis'));
                                            external__echarts__default.a.util.merge(option, this.getDefaultOption());

                                            option.type = axisTypeDefaulter(dim, option);
                                        },

                                        defaultOption: external__echarts__default.a.util.merge(
                                            external__echarts__default.a.util.clone(axis3DDefault[axisType + 'Axis']),
                                            extraDefaultOption || {},
                                            true
                                        )
                                    });
                                });

                                // TODO
                                BaseAxisModelClass.superClass.registerSubTypeDefaulter(
                                    dim + 'Axis3D',
                                    external__echarts__default.a.util.curry(axisTypeDefaulter, dim)
                                );
                            });;
                            // CONCATENATED MODULE: ./src/component/grid3D/Axis3DModel.js



                            var Axis3DModel = external__echarts__default.a.extendComponentModel({

                                type: 'cartesian3DAxis',

                                axis: null,

                                /**
                                 * @override
                                 */
                                getCoordSysModel: function() {
                                    return this.ecModel.queryComponents({
                                        mainType: 'grid3D',
                                        index: this.option.gridIndex,
                                        id: this.option.gridId
                                    })[0];
                                }
                            });

                            external__echarts__default.a.helper.mixinAxisModelCommonMethods(Axis3DModel);

                            function getAxisType(axisDim, option) {
                                // Default axis with data is category axis
                                return option.type || (option.data ? 'category' : 'value');
                            }

                            createAxis3DModel('x', Axis3DModel, getAxisType, {
                                name: 'X'
                            });
                            createAxis3DModel('y', Axis3DModel, getAxisType, {
                                name: 'Y'
                            });
                            createAxis3DModel('z', Axis3DModel, getAxisType, {
                                name: 'Z'
                            });
                            // CONCATENATED MODULE: ./src/component/common/componentViewControlMixin.js
                            /* harmony default export */
                            var componentViewControlMixin = ({
                                defaultOption: {

                                    viewControl: {
                                        // perspective, orthographic.
                                        // TODO Isometric
                                        projection: 'perspective',
                                        // If rotate on on init
                                        autoRotate: false,
                                        // cw or ccw
                                        autoRotateDirection: 'cw',
                                        // Degree per second
                                        autoRotateSpeed: 10,

                                        // Start rotating after still for a given time
                                        // default is 3 seconds
                                        autoRotateAfterStill: 3,

                                        // Rotate, zoom damping.
                                        damping: 0.8,
                                        // Sensitivities for operations.
                                        // Can be array to set x,y respectively
                                        rotateSensitivity: 1,
                                        zoomSensitivity: 1,
                                        // Can be array to set x,y respectively
                                        panSensitivity: 1,
                                        // Which mouse button do rotate or pan
                                        panMouseButton: 'middle',
                                        rotateMouseButton: 'left',

                                        // Distance to the target
                                        // Only available when camera is perspective.
                                        distance: 150,
                                        // Min distance mouse can zoom in
                                        minDistance: 40,
                                        // Max distance mouse can zoom out
                                        maxDistance: 400,

                                        // Size of viewing volume.
                                        // Only available when camera is orthographic
                                        orthographicSize: 150,
                                        maxOrthographicSize: 400,
                                        minOrthographicSize: 20,

                                        // Center view point
                                        center: [0, 0, 0],
                                        // Alpha angle for top-down rotation
                                        // Positive to rotate to top.
                                        alpha: 0,
                                        // beta angle for left-right rotation
                                        // Positive to rotate to right.
                                        beta: 0,

                                        minAlpha: -90,
                                        maxAlpha: 90

                                        // minBeta: -Infinity
                                        // maxBeta: -Infinity
                                    }
                                },

                                setView: function(opts) {
                                    opts = opts || {};
                                    this.option.viewControl = this.option.viewControl || {};
                                    if (opts.alpha != null) {
                                        this.option.viewControl.alpha = opts.alpha;
                                    }
                                    if (opts.beta != null) {
                                        this.option.viewControl.beta = opts.beta;
                                    }
                                    if (opts.distance != null) {
                                        this.option.viewControl.distance = opts.distance;
                                    }
                                    if (opts.center != null) {
                                        this.option.viewControl.center = opts.center;
                                    }
                                }
                            });
                            // CONCATENATED MODULE: ./src/component/common/componentPostEffectMixin.js
                            /* harmony default export */
                            var componentPostEffectMixin = ({
                                defaultOption: {
                                    // Post effect
                                    postEffect: {
                                        enable: false,

                                        bloom: {
                                            enable: true,
                                            intensity: 0.1
                                        },
                                        depthOfField: {
                                            enable: false,
                                            focalRange: 20,
                                            focalDistance: 50,
                                            blurRadius: 10,
                                            fstop: 2.8,
                                            quality: 'medium'
                                        },

                                        screenSpaceAmbientOcclusion: {
                                            enable: false,
                                            radius: 2,
                                            // low, medium, high, ultra
                                            quality: 'medium',
                                            intensity: 1
                                        },

                                        screenSpaceReflection: {
                                            enable: false,
                                            quality: 'medium',
                                            maxRoughness: 0.8
                                        },

                                        colorCorrection: {
                                            enable: true,

                                            exposure: 0,

                                            brightness: 0,

                                            contrast: 1,

                                            saturation: 1,

                                            lookupTexture: ''
                                        },

                                        edge: {
                                            enable: false
                                        },

                                        FXAA: {
                                            enable: false
                                        }
                                    },

                                    // Temporal super sampling when the picture is still.
                                    temporalSuperSampling: {
                                        // Only enabled when postEffect is enabled
                                        enable: 'auto'
                                    }
                                }
                            });
                            // CONCATENATED MODULE: ./src/component/common/componentLightMixin.js
                            /* harmony default export */
                            var componentLightMixin = ({
                                defaultOption: {
                                    // Light is available when material.shading is not color
                                    light: {
                                        // Main light
                                        main: {
                                            shadow: false,
                                            // low, medium, high, ultra
                                            shadowQuality: 'high',

                                            color: '#fff',
                                            intensity: 1,

                                            alpha: 0,
                                            beta: 0
                                        },
                                        ambient: {
                                            color: '#fff',
                                            intensity: 0.2
                                        },
                                        ambientCubemap: {
                                            // Panorama environment texture,
                                            // Support .hdr and commmon web formats.
                                            texture: null,
                                            // Available when texture is hdr.
                                            exposure: 1,
                                            // Intensity for diffuse term
                                            diffuseIntensity: 0.5,
                                            // Intensity for specular term, only available when shading is realastic
                                            specularIntensity: 0.5
                                        }
                                    }
                                }
                            });
                            // CONCATENATED MODULE: ./src/component/grid3D/Grid3DModel.js





                            var Grid3DModel = external__echarts__default.a.extendComponentModel({

                                type: 'grid3D',

                                dependencies: ['xAxis3D', 'yAxis3D', 'zAxis3D'],

                                defaultOption: {

                                    show: true,

                                    zlevel: -10,

                                    // Layout used for viewport
                                    left: 0,
                                    top: 0,
                                    width: '100%',
                                    height: '100%',

                                    environment: 'auto',

                                    // Dimension of grid3D
                                    boxWidth: 100,
                                    boxHeight: 100,
                                    boxDepth: 100,

                                    // Common axis options.
                                    axisPointer: {
                                        show: true,
                                        lineStyle: {
                                            color: 'rgba(0, 0, 0, 0.8)',
                                            width: 1
                                        },

                                        label: {
                                            show: true,
                                            // (dimValue: number, value: Array) => string
                                            formatter: null,

                                            // TODO, Consider boxWidth
                                            margin: 8,
                                            // backgroundColor: '#ffbd67',
                                            // borderColor: '#000',
                                            // borderWidth: 0,

                                            textStyle: {
                                                fontSize: 14,
                                                color: '#fff',
                                                backgroundColor: 'rgba(0,0,0,0.5)',
                                                padding: 3,
                                                borderRadius: 3
                                            }
                                        }
                                    },

                                    axisLine: {
                                        show: true,
                                        lineStyle: {
                                            color: '#333',
                                            width: 2,
                                            type: 'solid'
                                        }
                                    },

                                    axisTick: {
                                        show: true,
                                        inside: false,
                                        length: 3,
                                        lineStyle: {
                                            width: 1
                                        }
                                    },
                                    axisLabel: {
                                        show: true,
                                        inside: false,
                                        rotate: 0,
                                        margin: 8,
                                        textStyle: {
                                            fontSize: 12
                                        }
                                    },
                                    splitLine: {
                                        show: true,
                                        lineStyle: {
                                            color: ['#ccc'],
                                            width: 1,
                                            type: 'solid'
                                        }
                                    },
                                    splitArea: {
                                        show: false,
                                        areaStyle: {
                                            color: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)']
                                        }
                                    },

                                    // Light options
                                    light: {
                                        main: {
                                            // Alpha angle for top-down rotation
                                            // Positive to rotate to top.
                                            alpha: 30,
                                            // beta angle for left-right rotation
                                            // Positive to rotate to right.
                                            beta: 40
                                        },
                                        ambient: {
                                            intensity: 0.4
                                        }
                                    },

                                    viewControl: {
                                        // Small damping for precise control.
                                        // damping: 0.1,

                                        // Alpha angle for top-down rotation
                                        // Positive to rotate to top.
                                        alpha: 20,
                                        // beta angle for left-right rotation
                                        // Positive to rotate to right.
                                        beta: 40,

                                        autoRotate: false,

                                        // Distance to the surface of grid3D.
                                        distance: 200,

                                        // Min distance to the surface of grid3D
                                        minDistance: 40,
                                        // Max distance to the surface of grid3D
                                        maxDistance: 400
                                    }
                                }
                            });

                            external__echarts__default.a.util.merge(Grid3DModel.prototype, componentViewControlMixin);
                            external__echarts__default.a.util.merge(Grid3DModel.prototype, componentPostEffectMixin);
                            external__echarts__default.a.util.merge(Grid3DModel.prototype, componentLightMixin);

                            /* harmony default export */
                            var grid3D_Grid3DModel = (Grid3DModel);


                            // CONCATENATED MODULE: ./src/util/OrbitControl.js
                            /**
                             * Provide orbit control for 3D objects
                             *
                             * @module echarts-gl/util/OrbitControl
                             * @author Yi Shen(http://github.com/pissang)
                             */

                            // TODO Remove magic numbers on sensitivity





                            var firstNotNull = util_retrieve.firstNotNull;


                            var MOUSE_BUTTON_KEY_MAP = {
                                left: 0,
                                middle: 1,
                                right: 2
                            };

                            function convertToArray(val) {
                                if (!(val instanceof Array)) {
                                    val = [val, val];
                                }
                                return val;
                            }

                            /**
                             * @alias module:echarts-x/util/OrbitControl
                             */
                            var OrbitControl = core_Base.extend(function() {

                                return {
                                    /**
                                     * @type {module:zrender~ZRender}
                                     */
                                    zr: null,

                                    /**
                                     * @type {module:echarts-gl/core/ViewGL}
                                     */
                                    viewGL: null,

                                    /**
                                     * @type {qtek.math.Vector3}
                                     */
                                    _center: new math_Vector3(),

                                    /**
                                     * Minimum distance to the center
                                     * Only available when camera is perspective.
                                     * @type {number}
                                     * @default 0.5
                                     */
                                    minDistance: 0.5,

                                    /**
                                     * Maximum distance to the center
                                     * Only available when camera is perspective.
                                     * @type {number}
                                     * @default 2
                                     */
                                    maxDistance: 1.5,

                                    /**
                                     * Only available when camera is orthographic
                                     */
                                    maxOrthographicSize: 300,

                                    /**
                                     * Only available when camera is orthographic
                                     */
                                    minOrthographicSize: 30,

                                    /**
                                     * Minimum alpha rotation
                                     */
                                    minAlpha: -90,

                                    /**
                                     * Maximum alpha rotation
                                     */
                                    maxAlpha: 90,

                                    /**
                                     * Minimum beta rotation
                                     */
                                    minBeta: -Infinity,
                                    /**
                                     * Maximum beta rotation
                                     */
                                    maxBeta: Infinity,

                                    /**
                                     * Start auto rotating after still for the given time
                                     */
                                    autoRotateAfterStill: 0,

                                    /**
                                     * Direction of autoRotate. cw or ccw when looking top down.
                                     */
                                    autoRotateDirection: 'cw',

                                    /**
                                     * Degree per second
                                     */
                                    autoRotateSpeed: 60,

                                    /**
                                     * @param {number}
                                     */
                                    damping: 0.8,

                                    /**
                                     * @param {number}
                                     */
                                    rotateSensitivity: 1,

                                    /**
                                     * @param {number}
                                     */
                                    zoomSensitivity: 1,

                                    /**
                                     * @param {number}
                                     */
                                    panSensitivity: 1,

                                    panMouseButton: 'middle',
                                    rotateMouseButton: 'left',

                                    /**
                                     * Pan or rotate
                                     * @private
                                     * @type {String}
                                     */
                                    _mode: 'rotate',

                                    /**
                                     * @private
                                     * @type {qtek.Camera}
                                     */
                                    _camera: null,

                                    _needsUpdate: false,

                                    _rotating: false,

                                    // Rotation around yAxis in radian
                                    _phi: 0,
                                    // Rotation around xAxis in radian
                                    _theta: 0,

                                    _mouseX: 0,
                                    _mouseY: 0,

                                    _rotateVelocity: new math_Vector2(),

                                    _panVelocity: new math_Vector2(),

                                    _distance: 500,

                                    _zoomSpeed: 0,

                                    _stillTimeout: 0,

                                    _animators: []
                                };
                            }, function() {
                                // Each OrbitControl has it's own handler
                                ['_mouseDownHandler', '_mouseWheelHandler', '_mouseMoveHandler', '_mouseUpHandler',
                                    '_pinchHandler', '_contextMenuHandler', '_update'
                                ].forEach(function(hdlName) {
                                    this[hdlName] = this[hdlName].bind(this);
                                }, this);
                            }, {
                                /**
                                 * Initialize.
                                 * Mouse event binding
                                 */
                                init: function() {
                                    var zr = this.zr;

                                    if (zr) {
                                        zr.on('mousedown', this._mouseDownHandler);
                                        zr.on('globalout', this._mouseUpHandler);
                                        zr.on('mousewheel', this._mouseWheelHandler);
                                        zr.on('pinch', this._pinchHandler);

                                        zr.animation.on('frame', this._update);

                                        zr.dom.addEventListener('contextmenu', this._contextMenuHandler);
                                    }
                                },

                                /**
                                 * Dispose.
                                 * Mouse event unbinding
                                 */
                                dispose: function() {
                                    var zr = this.zr;

                                    if (zr) {
                                        zr.off('mousedown', this._mouseDownHandler);
                                        zr.off('mousemove', this._mouseMoveHandler);
                                        zr.off('mouseup', this._mouseUpHandler);
                                        zr.off('mousewheel', this._mouseWheelHandler);
                                        zr.off('pinch', this._pinchHandler);
                                        zr.off('globalout', this._mouseUpHandler);
                                        zr.dom.removeEventListener('contextmenu', this._contextMenuHandler);

                                        zr.animation.off('frame', this._update);
                                    }
                                    this.stopAllAnimation();
                                },

                                /**
                                 * Get distance
                                 * @return {number}
                                 */
                                getDistance: function() {
                                    return this._distance;
                                },

                                /**
                                 * Set distance
                                 * @param {number} distance
                                 */
                                setDistance: function(distance) {
                                    this._distance = distance;
                                    this._needsUpdate = true;
                                },

                                /**
                                 * Get size of orthographic viewing volume
                                 * @return {number}
                                 */
                                getOrthographicSize: function() {
                                    return this._orthoSize;
                                },

                                /**
                                 * Set size of orthographic viewing volume
                                 * @param {number} size
                                 */
                                setOrthographicSize: function(size) {
                                    this._orthoSize = size;
                                    this._needsUpdate = true;
                                },

                                /**
                                 * Get alpha rotation
                                 * Alpha angle for top-down rotation. Positive to rotate to top.
                                 *
                                 * Which means camera rotation around x axis.
                                 */
                                getAlpha: function() {
                                    return this._theta / Math.PI * 180;
                                },

                                /**
                                 * Get beta rotation
                                 * Beta angle for left-right rotation. Positive to rotate to right.
                                 *
                                 * Which means camera rotation around y axis.
                                 */
                                getBeta: function() {
                                    return -this._phi / Math.PI * 180;
                                },

                                /**
                                 * Get control center
                                 * @return {Array.<number>}
                                 */
                                getCenter: function() {
                                    return this._center.toArray();
                                },

                                /**
                                 * Set alpha rotation angle
                                 * @param {number} alpha
                                 */
                                setAlpha: function(alpha) {
                                    alpha = Math.max(Math.min(this.maxAlpha, alpha), this.minAlpha);

                                    this._theta = alpha / 180 * Math.PI;
                                    this._needsUpdate = true;
                                },

                                /**
                                 * Set beta rotation angle
                                 * @param {number} beta
                                 */
                                setBeta: function(beta) {
                                    beta = Math.max(Math.min(this.maxBeta, beta), this.minBeta);

                                    this._phi = -beta / 180 * Math.PI;
                                    this._needsUpdate = true;
                                },

                                /**
                                 * Set control center
                                 * @param {Array.<number>} center
                                 */
                                setCenter: function(centerArr) {
                                    this._center.setArray(centerArr);
                                },

                                /**
                                 * @param {module:echarts-gl/core/ViewGL} viewGL
                                 */
                                setViewGL: function(viewGL) {
                                    this.viewGL = viewGL;
                                },

                                /**
                                 * @return {qtek.Camera}
                                 */
                                getCamera: function() {
                                    return this.viewGL.camera;
                                },

                                setFromViewControlModel: function(viewControlModel, extraOpts) {
                                    extraOpts = extraOpts || {};
                                    var baseDistance = extraOpts.baseDistance || 0;
                                    var baseOrthoSize = extraOpts.baseOrthoSize || 1;

                                    var projection = viewControlModel.get('projection');
                                    if (projection !== 'perspective' && projection !== 'orthographic' && projection !== 'isometric') {
                                        if (true) {
                                            console.error('Unkown projection type %s, use perspective projection instead.', projection);
                                        }
                                        projection = 'perspective';
                                    }
                                    this._projection = projection;
                                    this.viewGL.setProjection(projection);

                                    var targetDistance = viewControlModel.get('distance') + baseDistance;
                                    var targetOrthographicSize = viewControlModel.get('orthographicSize') + baseOrthoSize;

                                    [
                                        ['damping', 0.8],
                                        ['autoRotate', false],
                                        ['autoRotateAfterStill', 3],
                                        ['autoRotateDirection', 'cw'],
                                        ['autoRotateSpeed', 10],
                                        ['minDistance', 30],
                                        ['maxDistance', 400],
                                        ['minOrthographicSize', 30],
                                        ['maxOrthographicSize', 300],
                                        ['minAlpha', -90],
                                        ['maxAlpha', 90],
                                        ['minBeta', -Infinity],
                                        ['maxBeta', Infinity],
                                        ['rotateSensitivity', 1],
                                        ['zoomSensitivity', 1],
                                        ['panSensitivity', 1],
                                        ['panMouseButton', 'left'],
                                        ['rotateMouseButton', 'middle'],
                                    ].forEach(function(prop) {
                                        this[prop[0]] = firstNotNull(viewControlModel.get(prop[0]), prop[1]);
                                    }, this);

                                    this.minDistance += baseDistance;
                                    this.maxDistance += baseDistance;
                                    this.minOrthographicSize += baseOrthoSize,
                                        this.maxOrthographicSize += baseOrthoSize;

                                    var ecModel = viewControlModel.ecModel;

                                    var animationOpts = {};
                                    ['animation', 'animationDurationUpdate', 'animationEasingUpdate'].forEach(function(key) {
                                        animationOpts[key] = firstNotNull(
                                            viewControlModel.get(key), ecModel && ecModel.get(key)
                                        );
                                    });

                                    var alpha = firstNotNull(extraOpts.alpha, viewControlModel.get('alpha')) || 0;
                                    var beta = firstNotNull(extraOpts.beta, viewControlModel.get('beta')) || 0;
                                    var center = firstNotNull(extraOpts.center, viewControlModel.get('center')) || [0, 0, 0];
                                    if (animationOpts.animation && animationOpts.animationDurationUpdate > 0 && this._notFirst) {
                                        this.animateTo({
                                            alpha: alpha,
                                            beta: beta,
                                            center: center,
                                            distance: targetDistance,
                                            targetOrthographicSize: targetOrthographicSize,
                                            easing: animationOpts.animationEasingUpdate,
                                            duration: animationOpts.animationDurationUpdate
                                        });
                                    } else {
                                        this.setDistance(targetDistance);
                                        this.setAlpha(alpha);
                                        this.setBeta(beta);
                                        this.setCenter(center);
                                        this.setOrthographicSize(targetOrthographicSize);
                                    }

                                    this._notFirst = true;

                                    this._validateProperties();
                                },

                                _validateProperties: function() {
                                    if (true) {
                                        if (MOUSE_BUTTON_KEY_MAP[this.panMouseButton] == null) {
                                            console.error('Unkown panMouseButton %s. It should be left|middle|right', this.panMouseButton);
                                        }
                                        if (MOUSE_BUTTON_KEY_MAP[this.rotateMouseButton] == null) {
                                            console.error('Unkown rotateMouseButton %s. It should be left|middle|right', this.rotateMouseButton);
                                        }
                                        if (this.autoRotateDirection !== 'cw' && this.autoRotateDirection !== 'ccw') {
                                            console.error('Unkown autoRotateDirection %s. It should be cw|ccw', this.autoRotateDirection);
                                        }
                                    }
                                },

                                /**
                                 * @param {Object} opts
                                 * @param {number} opts.distance
                                 * @param {number} opts.alpha
                                 * @param {number} opts.beta
                                 * @param {number} opts.orthographicSize
                                 * @param {number} [opts.duration=1000]
                                 * @param {number} [opts.easing='linear']
                                 */
                                animateTo: function(opts) {
                                    var zr = this.zr;
                                    var self = this;

                                    var obj = {};
                                    var target = {};

                                    if (opts.distance != null) {
                                        obj.distance = this.getDistance();
                                        target.distance = opts.distance;
                                    }
                                    if (opts.orthographicSize != null) {
                                        obj.orthographicSize = this.getOrthographicSize();
                                        target.orthographicSize = opts.orthographicSize;
                                    }
                                    if (opts.alpha != null) {
                                        obj.alpha = this.getAlpha();
                                        target.alpha = opts.alpha;
                                    }
                                    if (opts.beta != null) {
                                        obj.beta = this.getBeta();
                                        target.beta = opts.beta;
                                    }
                                    if (opts.center != null) {
                                        obj.center = this.getCenter();
                                        target.center = opts.center;
                                    }

                                    return this._addAnimator(
                                        zr.animation.animate(obj)
                                        .when(opts.duration || 1000, target)
                                        .during(function() {
                                            if (obj.alpha != null) {
                                                self.setAlpha(obj.alpha);
                                            }
                                            if (obj.beta != null) {
                                                self.setBeta(obj.beta);
                                            }
                                            if (obj.distance != null) {
                                                self.setDistance(obj.distance);
                                            }
                                            if (obj.center != null) {
                                                self.setCenter(obj.center);
                                            }
                                            if (obj.orthographicSize != null) {
                                                self.setOrthographicSize(obj.orthographicSize);
                                            }
                                            self._needsUpdate = true;
                                        })
                                    ).start(opts.easing || 'linear');
                                },

                                /**
                                 * Stop all animation
                                 */
                                stopAllAnimation: function() {
                                    for (var i = 0; i < this._animators.length; i++) {
                                        this._animators[i].stop();
                                    }
                                    this._animators.length = 0;
                                },

                                _isAnimating: function() {
                                    return this._animators.length > 0;
                                },
                                /**
                                 * Call update each frame
                                 * @param  {number} deltaTime Frame time
                                 */
                                _update: function(deltaTime) {

                                    if (this._rotating) {
                                        var radian = (this.autoRotateDirection === 'cw' ? 1 : -1) *
                                            this.autoRotateSpeed / 180 * Math.PI;
                                        this._phi -= radian * deltaTime / 1000;
                                        this._needsUpdate = true;
                                    } else if (this._rotateVelocity.len() > 0) {
                                        this._needsUpdate = true;
                                    }

                                    if (Math.abs(this._zoomSpeed) > 0.1 || this._panVelocity.len() > 0) {
                                        this._needsUpdate = true;
                                    }

                                    if (!this._needsUpdate) {
                                        return;
                                    }

                                    deltaTime = Math.min(deltaTime, 50);

                                    this._updateDistanceOrSize(deltaTime);

                                    this._updatePan(deltaTime);

                                    this._updateRotate(deltaTime);

                                    this._updateTransform();

                                    this.getCamera().update();

                                    this.zr && this.zr.refresh();

                                    this.trigger('update');

                                    this._needsUpdate = false;
                                },

                                _updateRotate: function(deltaTime) {
                                    var velocity = this._rotateVelocity;
                                    this._phi = velocity.y * deltaTime / 20 + this._phi;
                                    this._theta = velocity.x * deltaTime / 20 + this._theta;

                                    this.setAlpha(this.getAlpha());
                                    this.setBeta(this.getBeta());

                                    this._vectorDamping(velocity, Math.pow(this.damping, deltaTime / 16));
                                },

                                _updateDistanceOrSize: function(deltaTime) {
                                    if (this._projection === 'perspective') {
                                        this._setDistance(this._distance + this._zoomSpeed * deltaTime / 20);
                                    } else {
                                        this._setOrthoSize(this._orthoSize + this._zoomSpeed * deltaTime / 20);
                                    }

                                    this._zoomSpeed *= Math.pow(this.damping, deltaTime / 16);
                                },


                                _setDistance: function(distance) {
                                    this._distance = Math.max(Math.min(distance, this.maxDistance), this.minDistance);
                                },

                                _setOrthoSize: function(size) {
                                    this._orthoSize = Math.max(Math.min(size, this.maxOrthographicSize), this.minOrthographicSize);
                                    var camera = this.getCamera();
                                    var cameraHeight = this._orthoSize;
                                    var cameraWidth = cameraHeight / this.viewGL.viewport.height * this.viewGL.viewport.width;
                                    camera.left = -cameraWidth / 2;
                                    camera.right = cameraWidth / 2;
                                    camera.top = cameraHeight / 2;
                                    camera.bottom = -cameraHeight / 2;
                                },

                                _updatePan: function(deltaTime) {

                                    var velocity = this._panVelocity;
                                    var len = this._distance;

                                    var target = this.getCamera();
                                    var yAxis = target.worldTransform.y;
                                    var xAxis = target.worldTransform.x;

                                    // PENDING
                                    this._center
                                        .scaleAndAdd(xAxis, -velocity.x * len / 200)
                                        .scaleAndAdd(yAxis, -velocity.y * len / 200);

                                    this._vectorDamping(velocity, 0);
                                },

                                _updateTransform: function() {
                                    var camera = this.getCamera();

                                    var dir = new math_Vector3();
                                    var theta = this._theta + Math.PI / 2;
                                    var phi = this._phi + Math.PI / 2;
                                    var r = Math.sin(theta);

                                    dir.x = r * Math.cos(phi);
                                    dir.y = -Math.cos(theta);
                                    dir.z = r * Math.sin(phi);

                                    camera.position.copy(this._center).scaleAndAdd(dir, this._distance);
                                    camera.rotation.identity()
                                        // First around y, then around x
                                        .rotateY(-this._phi)
                                        .rotateX(-this._theta);
                                },

                                _startCountingStill: function() {
                                    clearTimeout(this._stillTimeout);

                                    var time = this.autoRotateAfterStill;
                                    var self = this;
                                    if (!isNaN(time) && time > 0) {
                                        this._stillTimeout = setTimeout(function() {
                                            self._rotating = true;
                                        }, time * 1000);
                                    }
                                },

                                _vectorDamping: function(v, damping) {
                                    var speed = v.len();
                                    speed = speed * damping;
                                    if (speed < 1e-4) {
                                        speed = 0;
                                    }
                                    v.normalize().scale(speed);
                                },

                                _decomposeTransform: function() {
                                    if (!this.getCamera()) {
                                        return;
                                    }

                                    // FIXME euler order......
                                    // FIXME alpha is not certain when beta is 90 or -90
                                    var euler = new math_Vector3();
                                    euler.eulerFromQuat(
                                        this.getCamera().rotation.normalize(), 'ZYX'
                                    );

                                    this._theta = -euler.x;
                                    this._phi = -euler.y;

                                    this.setBeta(this.getBeta());
                                    this.setAlpha(this.getAlpha());

                                    // Is perspective
                                    if (this.getCamera().aspect) {
                                        this._setDistance(this.getCamera().position.dist(this._center));
                                    } else {
                                        this._setOrthoSize(this.getCamera().top - this.getCamera().bottom);
                                    }
                                },

                                _mouseDownHandler: function(e) {
                                    if (e.target) {
                                        // If mouseon some zrender element.
                                        return;
                                    }
                                    if (this._isAnimating()) {
                                        return;
                                    }

                                    var x = e.offsetX;
                                    var y = e.offsetY;
                                    if (this.viewGL && !this.viewGL.containPoint(x, y)) {
                                        return;
                                    }

                                    this.zr.on('mousemove', this._mouseMoveHandler);
                                    this.zr.on('mouseup', this._mouseUpHandler);

                                    if (e.event.targetTouches) {
                                        if (e.event.targetTouches.length === 1) {
                                            this._mode = 'rotate';
                                        }
                                    } else {
                                        if (e.event.button === MOUSE_BUTTON_KEY_MAP[this.rotateMouseButton]) {
                                            this._mode = 'rotate';
                                        } else if (e.event.button === MOUSE_BUTTON_KEY_MAP[this.panMouseButton]) {
                                            this._mode = 'pan';
                                        } else {
                                            this._mode = '';
                                        }
                                    }

                                    // Reset rotate velocity
                                    this._rotateVelocity.set(0, 0);
                                    this._rotating = false;
                                    if (this.autoRotate) {
                                        this._startCountingStill();
                                    }

                                    this._mouseX = e.offsetX;
                                    this._mouseY = e.offsetY;
                                },

                                _mouseMoveHandler: function(e) {
                                    if (e.target && e.target.__isGLToZRProxy) {
                                        return;
                                    }

                                    if (this._isAnimating()) {
                                        return;
                                    }

                                    var panSensitivity = convertToArray(this.panSensitivity);
                                    var rotateSensitivity = convertToArray(this.rotateSensitivity);

                                    if (this._mode === 'rotate') {
                                        this._rotateVelocity.y = (e.offsetX - this._mouseX) / this.zr.getHeight() * 2 * rotateSensitivity[0];
                                        this._rotateVelocity.x = (e.offsetY - this._mouseY) / this.zr.getWidth() * 2 * rotateSensitivity[1];
                                    } else if (this._mode === 'pan') {
                                        this._panVelocity.x = (e.offsetX - this._mouseX) / this.zr.getWidth() * panSensitivity[0] * 400;
                                        this._panVelocity.y = (-e.offsetY + this._mouseY) / this.zr.getHeight() * panSensitivity[1] * 400;
                                    }


                                    this._mouseX = e.offsetX;
                                    this._mouseY = e.offsetY;

                                    e.event.preventDefault();
                                },

                                _mouseWheelHandler: function(e) {
                                    if (this._isAnimating()) {
                                        return;
                                    }
                                    var delta = e.event.wheelDelta // Webkit
                                        ||
                                        -e.event.detail; // Firefox
                                    this._zoomHandler(e, delta);
                                },

                                _pinchHandler: function(e) {
                                    if (this._isAnimating()) {
                                        return;
                                    }
                                    this._zoomHandler(e, e.pinchScale > 1 ? 1 : -1);
                                    // Not rotate when pinch
                                    this._mode = '';
                                },

                                _zoomHandler: function(e, delta) {
                                    if (delta === 0) {
                                        return;
                                    }

                                    var x = e.offsetX;
                                    var y = e.offsetY;
                                    if (this.viewGL && !this.viewGL.containPoint(x, y)) {
                                        return;
                                    }

                                    var speed;
                                    if (this._projection === 'perspective') {
                                        speed = Math.max(Math.max(Math.min(
                                            this._distance - this.minDistance,
                                            this.maxDistance - this._distance
                                        )) / 20, 0.5);
                                    } else {
                                        speed = Math.max(Math.max(Math.min(
                                            this._orthoSize - this.minOrthographicSize,
                                            this.maxOrthographicSize - this._orthoSize
                                        )) / 20, 0.5);
                                    }
                                    this._zoomSpeed = (delta > 0 ? -1 : 1) * speed * this.zoomSensitivity;

                                    this._rotating = false;

                                    if (this.autoRotate && this._mode === 'rotate') {
                                        this._startCountingStill();
                                    }

                                    e.event.preventDefault();
                                },

                                _mouseUpHandler: function() {
                                    this.zr.off('mousemove', this._mouseMoveHandler);
                                    this.zr.off('mouseup', this._mouseUpHandler);
                                },

                                _isRightMouseButtonUsed: function() {
                                    return this.rotateMouseButton === 'right' ||
                                        this.panMouseButton === 'right';
                                },

                                _contextMenuHandler: function(e) {
                                    if (this._isRightMouseButtonUsed()) {
                                        e.preventDefault();
                                    }
                                },

                                _addAnimator: function(animator) {
                                    var animators = this._animators;
                                    animators.push(animator);
                                    animator.done(function() {
                                        var idx = animators.indexOf(animator);
                                        if (idx >= 0) {
                                            animators.splice(idx, 1);
                                        }
                                    });
                                    return animator;
                                }
                            });

                            /**
                             * If auto rotate the target
                             * @type {boolean}
                             * @default false
                             */
                            Object.defineProperty(OrbitControl.prototype, 'autoRotate', {
                                get: function(val) {
                                    return this._autoRotate;
                                },
                                set: function(val) {
                                    this._autoRotate = val;
                                    this._rotating = val;
                                }
                            });


                            /* harmony default export */
                            var util_OrbitControl = (OrbitControl);
                            // CONCATENATED MODULE: ./src/util/geometry/dynamicConvertMixin.js
                            /* harmony default export */
                            var dynamicConvertMixin = ({
                                convertToDynamicArray: function(clear) {
                                    if (clear) {
                                        this.resetOffset();
                                    }
                                    var attributes = this.attributes;
                                    for (var name in attributes) {
                                        if (clear || !attributes[name].value) {
                                            attributes[name].value = [];
                                        } else {
                                            attributes[name].value = Array.prototype.slice.call(attributes[name].value);
                                        }
                                    }
                                    if (clear || !this.indices) {
                                        this.indices = [];
                                    } else {
                                        this.indices = Array.prototype.slice.call(this.indices);
                                    }
                                },

                                convertToTypedArray: function() {
                                    var attributes = this.attributes;
                                    for (var name in attributes) {
                                        if (attributes[name].value && attributes[name].value.length > 0) {
                                            attributes[name].value = new Float32Array(attributes[name].value);
                                        } else {
                                            attributes[name].value = null;
                                        }
                                    }
                                    if (this.indices && this.indices.length > 0) {
                                        this.indices = this.vertexCount > 0xffff ? new Uint32Array(this.indices) : new Uint16Array(this.indices);
                                    }

                                    this.dirty();
                                }
                            });
                            // CONCATENATED MODULE: ./src/util/geometry/Lines3D.js
                            /**
                             * Lines geometry
                             * Use screen space projected lines lineWidth > MAX_LINE_WIDTH
                             * https://mattdesl.svbtle.com/drawing-lines-is-hard
                             * @module echarts-gl/util/geometry/LinesGeometry
                             * @author Yi Shen(http://github.com/pissang)
                             */





                            var Lines3D_vec3 = glmatrix_default.a.vec3;

                            // var CURVE_RECURSION_LIMIT = 8;
                            // var CURVE_COLLINEAR_EPSILON = 40;

                            var sampleLinePoints = [
                                [0, 0],
                                [1, 1]
                            ];
                            /**
                             * @constructor
                             * @alias module:echarts-gl/util/geometry/LinesGeometry
                             * @extends qtek.Geometry
                             */

                            var LinesGeometry = src_Geometry.extend(function() {
                                    return {

                                        segmentScale: 1,

                                        dynamic: true,
                                        /**
                                         * Need to use mesh to expand lines if lineWidth > MAX_LINE_WIDTH
                                         */
                                        useNativeLine: true,

                                        attributes: {
                                            position: new src_Geometry.Attribute('position', 'float', 3, 'POSITION'),
                                            positionPrev: new src_Geometry.Attribute('positionPrev', 'float', 3),
                                            positionNext: new src_Geometry.Attribute('positionNext', 'float', 3),
                                            prevPositionPrev: new src_Geometry.Attribute('prevPositionPrev', 'float', 3),
                                            prevPosition: new src_Geometry.Attribute('prevPosition', 'float', 3),
                                            prevPositionNext: new src_Geometry.Attribute('prevPositionNext', 'float', 3),
                                            offset: new src_Geometry.Attribute('offset', 'float', 1),
                                            color: new src_Geometry.Attribute('color', 'float', 4, 'COLOR')
                                        }
                                    };
                                },
                                /** @lends module: echarts-gl/util/geometry/LinesGeometry.prototype */
                                {

                                    /**
                                     * Reset offset
                                     */
                                    resetOffset: function() {
                                        this._vertexOffset = 0;
                                        this._triangleOffset = 0;

                                        this._itemVertexOffsets = [];
                                    },

                                    /**
                                     * @param {number} nVertex
                                     */
                                    setVertexCount: function(nVertex) {
                                        var attributes = this.attributes;
                                        if (this.vertexCount !== nVertex) {
                                            attributes.position.init(nVertex);
                                            attributes.color.init(nVertex);

                                            if (!this.useNativeLine) {
                                                attributes.positionPrev.init(nVertex);
                                                attributes.positionNext.init(nVertex);
                                                attributes.offset.init(nVertex);
                                            }

                                            if (nVertex > 0xffff) {
                                                if (this.indices instanceof Uint16Array) {
                                                    this.indices = new Uint32Array(this.indices);
                                                }
                                            } else {
                                                if (this.indices instanceof Uint32Array) {
                                                    this.indices = new Uint16Array(this.indices);
                                                }
                                            }
                                        }
                                    },

                                    /**
                                     * @param {number} nTriangle
                                     */
                                    setTriangleCount: function(nTriangle) {
                                        if (this.triangleCount !== nTriangle) {
                                            if (nTriangle === 0) {
                                                this.indices = null;
                                            } else {
                                                this.indices = this.vertexCount > 0xffff ? new Uint32Array(nTriangle * 3) : new Uint16Array(nTriangle * 3);
                                            }
                                        }
                                    },

                                    _getCubicCurveApproxStep: function(p0, p1, p2, p3) {
                                        var len = Lines3D_vec3.dist(p0, p1) + Lines3D_vec3.dist(p2, p1) + Lines3D_vec3.dist(p3, p2);
                                        var step = 1 / (len + 1) * this.segmentScale;
                                        return step;
                                    },

                                    /**
                                     * Get vertex count of cubic curve
                                     * @param {Array.<number>} p0
                                     * @param {Array.<number>} p1
                                     * @param {Array.<number>} p2
                                     * @param {Array.<number>} p3
                                     * @return number
                                     */
                                    getCubicCurveVertexCount: function(p0, p1, p2, p3) {
                                        var step = this._getCubicCurveApproxStep(p0, p1, p2, p3);
                                        var segCount = Math.ceil(1 / step);
                                        if (!this.useNativeLine) {
                                            return segCount * 2 + 2;
                                        } else {
                                            return segCount * 2;
                                        }
                                    },

                                    /**
                                     * Get face count of cubic curve
                                     * @param {Array.<number>} p0
                                     * @param {Array.<number>} p1
                                     * @param {Array.<number>} p2
                                     * @param {Array.<number>} p3
                                     * @return number
                                     */
                                    getCubicCurveTriangleCount: function(p0, p1, p2, p3) {
                                        var step = this._getCubicCurveApproxStep(p0, p1, p2, p3);
                                        var segCount = Math.ceil(1 / step);
                                        if (!this.useNativeLine) {
                                            return segCount * 2;
                                        } else {
                                            return 0;
                                        }
                                    },

                                    /**
                                     * Get vertex count of line
                                     * @return {number}
                                     */
                                    getLineVertexCount: function() {
                                        return this.getPolylineVertexCount(sampleLinePoints);
                                    },

                                    /**
                                     * Get face count of line
                                     * @return {number}
                                     */
                                    getLineTriangleCount: function() {
                                        return this.getPolylineTriangleCount(sampleLinePoints);
                                    },

                                    getPolylineVertexCount: function(points) {
                                        var is2DArray = typeof points[0] !== 'number';
                                        var pointsLen = is2DArray ? points.length : (points.length / 3);
                                        return !this.useNativeLine ? ((pointsLen - 1) * 2 + 2) : (pointsLen - 1) * 2;
                                    },

                                    getPolylineTriangleCount: function(points) {
                                        var is2DArray = typeof points[0] !== 'number';
                                        var pointsLen = is2DArray ? points.length : (points.length / 3);
                                        return !this.useNativeLine ? Math.max(pointsLen - 1, 0) * 2 : 0;
                                    },

                                    /**
                                     * Add a cubic curve
                                     * @param {Array.<number>} p0
                                     * @param {Array.<number>} p1
                                     * @param {Array.<number>} p2
                                     * @param {Array.<number>} p3
                                     * @param {Array.<number>} color
                                     * @param {number} [lineWidth=1]
                                     */
                                    addCubicCurve: function(p0, p1, p2, p3, color, lineWidth) {
                                        if (lineWidth == null) {
                                            lineWidth = 1;
                                        }
                                        // incremental interpolation
                                        // http://antigrain.com/research/bezier_interpolation/index.html#PAGE_BEZIER_INTERPOLATION
                                        var x0 = p0[0],
                                            y0 = p0[1],
                                            z0 = p0[2];
                                        var x1 = p1[0],
                                            y1 = p1[1],
                                            z1 = p1[2];
                                        var x2 = p2[0],
                                            y2 = p2[1],
                                            z2 = p2[2];
                                        var x3 = p3[0],
                                            y3 = p3[1],
                                            z3 = p3[2];

                                        var step = this._getCubicCurveApproxStep(p0, p1, p2, p3);

                                        var step2 = step * step;
                                        var step3 = step2 * step;

                                        var pre1 = 3.0 * step;
                                        var pre2 = 3.0 * step2;
                                        var pre4 = 6.0 * step2;
                                        var pre5 = 6.0 * step3;

                                        var tmp1x = x0 - x1 * 2.0 + x2;
                                        var tmp1y = y0 - y1 * 2.0 + y2;
                                        var tmp1z = z0 - z1 * 2.0 + z2;

                                        var tmp2x = (x1 - x2) * 3.0 - x0 + x3;
                                        var tmp2y = (y1 - y2) * 3.0 - y0 + y3;
                                        var tmp2z = (z1 - z2) * 3.0 - z0 + z3;

                                        var fx = x0;
                                        var fy = y0;
                                        var fz = z0;

                                        var dfx = (x1 - x0) * pre1 + tmp1x * pre2 + tmp2x * step3;
                                        var dfy = (y1 - y0) * pre1 + tmp1y * pre2 + tmp2y * step3;
                                        var dfz = (z1 - z0) * pre1 + tmp1z * pre2 + tmp2z * step3;

                                        var ddfx = tmp1x * pre4 + tmp2x * pre5;
                                        var ddfy = tmp1y * pre4 + tmp2y * pre5;
                                        var ddfz = tmp1z * pre4 + tmp2z * pre5;

                                        var dddfx = tmp2x * pre5;
                                        var dddfy = tmp2y * pre5;
                                        var dddfz = tmp2z * pre5;

                                        var t = 0;

                                        var k = 0;
                                        var segCount = Math.ceil(1 / step);

                                        var points = new Float32Array((segCount + 1) * 3);
                                        var points = [];
                                        var offset = 0;
                                        for (var k = 0; k < segCount + 1; k++) {
                                            points[offset++] = fx;
                                            points[offset++] = fy;
                                            points[offset++] = fz;

                                            fx += dfx;
                                            fy += dfy;
                                            fz += dfz;
                                            dfx += ddfx;
                                            dfy += ddfy;
                                            dfz += ddfz;
                                            ddfx += dddfx;
                                            ddfy += dddfy;
                                            ddfz += dddfz;
                                            t += step;

                                            if (t > 1) {
                                                fx = dfx > 0 ? Math.min(fx, x3) : Math.max(fx, x3);
                                                fy = dfy > 0 ? Math.min(fy, y3) : Math.max(fy, y3);
                                                fz = dfz > 0 ? Math.min(fz, z3) : Math.max(fz, z3);
                                            }
                                        }

                                        return this.addPolyline(points, color, lineWidth, false);
                                    },

                                    /**
                                     * Add a straight line
                                     * @param {Array.<number>} p0
                                     * @param {Array.<number>} p1
                                     * @param {Array.<number>} color
                                     * @param {number} [lineWidth=1]
                                     */
                                    addLine: function(p0, p1, color, lineWidth) {
                                        return this.addPolyline([p0, p1], color, lineWidth, false);
                                    },

                                    /**
                                     * Add a straight line
                                     * @param {Array.<Array> | Array.<number>} points
                                     * @param {Array.<number> | Array.<Array>} color
                                     * @param {number} [lineWidth=1]
                                     * @param {boolean} [notSharingColor=false]
                                     */
                                    addPolyline: function(points, color, lineWidth, notSharingColor) {
                                        if (!points.length) {
                                            return;
                                        }

                                        this._itemVertexOffsets.push(this._vertexOffset);

                                        var is2DArray = typeof points[0] !== 'number';
                                        var positionAttr = this.attributes.position;
                                        var positionPrevAttr = this.attributes.positionPrev;
                                        var positionNextAttr = this.attributes.positionNext;
                                        var colorAttr = this.attributes.color;
                                        var offsetAttr = this.attributes.offset;
                                        var indices = this.indices;

                                        var vertexOffset = this._vertexOffset;
                                        var pointCount = is2DArray ? points.length : points.length / 3;
                                        var iterCount = pointCount;
                                        var point;
                                        var pointColor;
                                        if (pointCount < 2) {
                                            return;
                                        }

                                        if (lineWidth == null) {
                                            lineWidth = 1;
                                        }
                                        lineWidth = Math.max(lineWidth, 0.01);

                                        for (var k = 0; k < iterCount; k++) {
                                            if (is2DArray) {
                                                point = points[k];
                                                if (notSharingColor) {
                                                    pointColor = color[k];
                                                } else {
                                                    pointColor = color;
                                                }
                                            } else {
                                                var k3 = k * 3;
                                                point = point || [];
                                                point[0] = points[k3];
                                                point[1] = points[k3 + 1];
                                                point[2] = points[k3 + 2];

                                                if (notSharingColor) {
                                                    var k4 = k * 4;
                                                    pointColor = pointColor || [];
                                                    pointColor[0] = color[k4];
                                                    pointColor[1] = color[k4 + 1];
                                                    pointColor[2] = color[k4 + 2];
                                                    pointColor[3] = color[k4 + 3];
                                                } else {
                                                    pointColor = color;
                                                }
                                            }
                                            if (!this.useNativeLine) {
                                                if (k < iterCount - 1) {
                                                    // Set to next two points
                                                    positionPrevAttr.set(vertexOffset + 2, point);
                                                    positionPrevAttr.set(vertexOffset + 3, point);
                                                }
                                                if (k > 0) {
                                                    // Set to previous two points
                                                    positionNextAttr.set(vertexOffset - 2, point);
                                                    positionNextAttr.set(vertexOffset - 1, point);
                                                }

                                                positionAttr.set(vertexOffset, point);
                                                positionAttr.set(vertexOffset + 1, point);

                                                colorAttr.set(vertexOffset, pointColor);
                                                colorAttr.set(vertexOffset + 1, pointColor);

                                                offsetAttr.set(vertexOffset, lineWidth / 2);
                                                offsetAttr.set(vertexOffset + 1, -lineWidth / 2);

                                                vertexOffset += 2;
                                            } else {
                                                if (k > 1) {
                                                    positionAttr.copy(vertexOffset, vertexOffset - 1);
                                                    colorAttr.copy(vertexOffset, vertexOffset - 1);
                                                    vertexOffset++;
                                                }
                                            }

                                            if (!this.useNativeLine) {
                                                if (k > 0) {
                                                    var idx3 = this._triangleOffset * 3;
                                                    var indices = this.indices;
                                                    // 0-----2
                                                    // 1-----3
                                                    // 0->1->2, 1->3->2
                                                    indices[idx3] = vertexOffset - 4;
                                                    indices[idx3 + 1] = vertexOffset - 3;
                                                    indices[idx3 + 2] = vertexOffset - 2;

                                                    indices[idx3 + 3] = vertexOffset - 3;
                                                    indices[idx3 + 4] = vertexOffset - 1;
                                                    indices[idx3 + 5] = vertexOffset - 2;

                                                    this._triangleOffset += 2;
                                                }
                                            } else {
                                                colorAttr.set(vertexOffset, pointColor);
                                                positionAttr.set(vertexOffset, point);
                                                vertexOffset++;
                                            }
                                        }
                                        if (!this.useNativeLine) {
                                            var start = this._vertexOffset;
                                            var end = this._vertexOffset + pointCount * 2;
                                            positionPrevAttr.copy(start, start + 2);
                                            positionPrevAttr.copy(start + 1, start + 3);
                                            positionNextAttr.copy(end - 1, end - 3);
                                            positionNextAttr.copy(end - 2, end - 4);
                                        }

                                        this._vertexOffset = vertexOffset;

                                        return this._vertexOffset;
                                    },

                                    /**
                                     * Set color of single line.
                                     */
                                    setItemColor: function(idx, color) {
                                        var startOffset = this._itemVertexOffsets[idx];
                                        var endOffset = idx < this._itemVertexOffsets.length - 1 ? this._itemVertexOffsets[idx + 1] : this._vertexOffset;

                                        for (var i = startOffset; i < endOffset; i++) {
                                            this.attributes.color.set(i, color);
                                        }
                                        this.dirty('color');
                                    },

                                    /**
                                     * @return {number}
                                     */
                                    currentTriangleOffset: function() {
                                        return this._triangleOffset;
                                    },

                                    /**
                                     * @return {number}
                                     */
                                    currentVertexOffset: function() {
                                        return this._vertexOffset;
                                    }
                                });

                            external__echarts__default.a.util.defaults(LinesGeometry.prototype, dynamicConvertMixin);

                            /* harmony default export */
                            var Lines3D = (LinesGeometry);
                            // CONCATENATED MODULE: ./src/util/ZRTextureAtlasSurface.js
                            /**
                             * Texture Atlas for the sprites.
                             * It uses zrender for 2d element management and rendering
                             * @module echarts-gl/util/ZRTextureAtlasSurface
                             */

                            // TODO Expand.



                            function ZRTextureAtlasSurfaceNode(zr, offsetX, offsetY, width, height, gap, dpr) {
                                this._zr = zr;

                                /**
                                 * Current cursor x
                                 * @type {number}
                                 * @private
                                 */
                                this._x = 0;

                                /**
                                 * Current cursor y
                                 * @type {number}
                                 */
                                this._y = 0;

                                this._rowHeight = 0;
                                /**
                                 * width without dpr.
                                 * @type {number}
                                 * @private
                                 */
                                this.width = width;

                                /**
                                 * height without dpr.
                                 * @type {number}
                                 * @private
                                 */
                                this.height = height;

                                /**
                                 * offsetX without dpr
                                 * @type {number}
                                 */
                                this.offsetX = offsetX;
                                /**
                                 * offsetY without dpr
                                 * @type {number}
                                 */
                                this.offsetY = offsetY;

                                this.dpr = dpr;

                                this.gap = gap;
                            }

                            ZRTextureAtlasSurfaceNode.prototype = {

                                    constructor: ZRTextureAtlasSurfaceNode,

                                    clear: function() {
                                        this._x = 0;
                                        this._y = 0;
                                        this._rowHeight = 0;
                                    },

                                    /**
                                     * Add shape to atlas
                                     * @param {module:zrender/graphic/Displayable} shape
                                     * @param {number} width
                                     * @param {number} height
                                     * @return {Array}
                                     */
                                    add: function(el, width, height) {
                                        // FIXME Text element not consider textAlign and textVerticalAlign.

                                        // TODO, inner text, shadow
                                        var rect = el.getBoundingRect();

                                        // FIXME aspect ratio
                                        if (width == null) {
                                            width = rect.width;
                                        }
                                        if (height == null) {
                                            height = rect.height;
                                        }
                                        width *= this.dpr;
                                        height *= this.dpr;

                                        this._fitElement(el, width, height);

                                        // var aspect = el.scale[1] / el.scale[0];
                                        // Adjust aspect ratio to make the text more clearly
                                        // FIXME If height > width, width is useless ?
                                        // width = height * aspect;
                                        // el.position[0] *= aspect;
                                        // el.scale[0] = el.scale[1];

                                        var x = this._x;
                                        var y = this._y;

                                        var canvasWidth = this.width * this.dpr;
                                        var canvasHeight = this.height * this.dpr;
                                        var gap = this.gap;

                                        if (x + width + gap > canvasWidth) {
                                            // Change a new row
                                            x = this._x = 0;
                                            y += this._rowHeight + gap;
                                            this._y = y;
                                            // Reset row height
                                            this._rowHeight = 0;
                                        }

                                        this._x += width + gap;

                                        this._rowHeight = Math.max(this._rowHeight, height);

                                        if (y + height + gap > canvasHeight) {
                                            // There is no space anymore
                                            return null;
                                        }

                                        // Shift the el
                                        el.position[0] += this.offsetX * this.dpr + x;
                                        el.position[1] += this.offsetY * this.dpr + y;

                                        this._zr.add(el);

                                        var coordsOffset = [
                                            this.offsetX / this.width,
                                            this.offsetY / this.height
                                        ];
                                        var coords = [
                                            [x / canvasWidth + coordsOffset[0], y / canvasHeight + coordsOffset[1]],
                                            [(x + width) / canvasWidth + coordsOffset[0], (y + height) / canvasHeight + coordsOffset[1]]
                                        ];

                                        return coords;
                                    },

                                    /**
                                     * Fit element size by correct its position and scaling
                                     * @param {module:zrender/graphic/Displayable} el
                                     * @param {number} spriteWidth
                                     * @param {number} spriteHeight
                                     */
                                    _fitElement: function(el, spriteWidth, spriteHeight) {
                                        // TODO, inner text, shadow
                                        var rect = el.getBoundingRect();

                                        var scaleX = spriteWidth / rect.width;
                                        var scaleY = spriteHeight / rect.height;
                                        el.position = [-rect.x * scaleX, -rect.y * scaleY];
                                        el.scale = [scaleX, scaleY];
                                        el.update();
                                    }
                                }
                                /**
                                 * constructor
                                 * @alias module:echarts-gl/util/ZRTextureAtlasSurface
                                 * @param {number} opt.width
                                 * @param {number} opt.height
                                 * @param {number} opt.devicePixelRatio
                                 * @param {number} opt.gap Gap for safe.
                                 * @param {Function} opt.onupdate
                                 */
                            function ZRTextureAtlasSurface(opt) {

                                opt = opt || {};
                                opt.width = opt.width || 512;
                                opt.height = opt.height || 512;
                                opt.devicePixelRatio = opt.devicePixelRatio || 1;
                                opt.gap = opt.gap == null ? 2 : opt.gap;

                                var canvas = document.createElement('canvas');
                                canvas.width = opt.width * opt.devicePixelRatio;
                                canvas.height = opt.height * opt.devicePixelRatio;

                                this._canvas = canvas;

                                this._texture = new src_Texture2D({
                                    image: canvas,
                                    flipY: false
                                });

                                var self = this;
                                /**
                                 * zrender instance in the Chart
                                 * @type {zrender~ZRender}
                                 */
                                this._zr = external__echarts__default.a.zrender.init(canvas);
                                var oldRefreshImmediately = this._zr.refreshImmediately;
                                this._zr.refreshImmediately = function() {
                                    oldRefreshImmediately.call(this);
                                    self._texture.dirty();
                                    self.onupdate && self.onupdate();
                                };

                                this._dpr = opt.devicePixelRatio;

                                /**
                                 * Texture coords map for each sprite image
                                 * @type {Object}
                                 */
                                this._coords = {};

                                this.onupdate = opt.onupdate;

                                this._gap = opt.gap;

                                // Left sub atlas.
                                this._textureAtlasNodes = [new ZRTextureAtlasSurfaceNode(
                                    this._zr, 0, 0, opt.width, opt.height, this._gap, this._dpr
                                )];

                                this._nodeWidth = opt.width;
                                this._nodeHeight = opt.height;

                                this._currentNodeIdx = 0;
                            }

                            ZRTextureAtlasSurface.prototype = {

                                /**
                                 * Clear the texture atlas
                                 */
                                clear: function() {

                                    for (var i = 0; i < this._textureAtlasNodes.length; i++) {
                                        this._textureAtlasNodes[i].clear();
                                    }

                                    this._currentNodeIdx = 0;

                                    this._zr.clear();
                                    this._coords = {};
                                },

                                /**
                                 * @return {number}
                                 */
                                getWidth: function() {
                                    return this._width;
                                },

                                /**
                                 * @return {number}
                                 */
                                getHeight: function() {
                                    return this._height;
                                },

                                /**
                                 * @return {number}
                                 */
                                getTexture: function() {
                                    return this._texture;
                                },

                                /**
                                 * @return {number}
                                 */
                                getDevicePixelRatio: function() {
                                    return this._dpr;
                                },

                                getZr: function() {
                                    return this._zr;
                                },

                                _getCurrentNode: function() {
                                    return this._textureAtlasNodes[this._currentNodeIdx];
                                },

                                _expand: function() {
                                    this._currentNodeIdx++;
                                    if (this._textureAtlasNodes[this._currentNodeIdx]) {
                                        // Use the node created previously.
                                        return this._textureAtlasNodes[this._currentNodeIdx];
                                    }

                                    var maxSize = 4096 / this._dpr;
                                    var textureAtlasNodes = this._textureAtlasNodes;
                                    var nodeLen = textureAtlasNodes.length;
                                    var offsetX = (nodeLen * this._nodeWidth) % maxSize;
                                    var offsetY = Math.floor(nodeLen * this._nodeWidth / maxSize) * this._nodeHeight;
                                    if (offsetY >= maxSize) {
                                        // Failed if image is too large.
                                        if (true) {
                                            console.error('Too much labels. Some will be ignored.');
                                        }
                                        return;
                                    }

                                    var width = (offsetX + this._nodeWidth) * this._dpr;
                                    var height = (offsetY + this._nodeHeight) * this._dpr;
                                    try {
                                        // Resize will error in node.
                                        this._zr.resize({
                                            width: width,
                                            height: height
                                        });
                                    } catch (e) {
                                        this._canvas.width = width;
                                        this._canvas.height = height;
                                    }

                                    var newNode = new ZRTextureAtlasSurfaceNode(
                                        this._zr, offsetX, offsetY, this._nodeWidth, this._nodeHeight, this._gap, this._dpr
                                    );
                                    this._textureAtlasNodes.push(newNode);

                                    return newNode;
                                },

                                add: function(el, width, height) {
                                    if (this._coords[el.id]) {
                                        if (true) {
                                            console.warn('Element already been add');
                                        }
                                        return this._coords[el.id];
                                    }
                                    var coords = this._getCurrentNode().add(el, width, height);
                                    if (!coords) {
                                        var newNode = this._expand();
                                        if (!newNode) {
                                            // To maximum
                                            return;
                                        }
                                        coords = newNode.add(el, width, height);
                                    }

                                    this._coords[el.id] = coords;

                                    return coords;
                                },

                                /**
                                 * Get coord scale after texture atlas is expanded.
                                 * @return {Array.<number>}
                                 */
                                getCoordsScale: function() {
                                    var dpr = this._dpr;
                                    return [this._nodeWidth / this._canvas.width * dpr, this._nodeHeight / this._canvas.height * dpr];
                                },

                                /**
                                 * Get texture coords of sprite image
                                 * @param  {string} id Image id
                                 * @return {Array}
                                 */
                                getCoords: function(id) {
                                    return this._coords[id];
                                }
                            };

                            /* harmony default export */
                            var util_ZRTextureAtlasSurface = (ZRTextureAtlasSurface);
                            // CONCATENATED MODULE: ./src/component/common/SceneHelper.js





                            function SceneHelper() {}

                            SceneHelper.prototype = {
                                constructor: SceneHelper,

                                setScene: function(scene) {
                                    this._scene = scene;

                                    if (this._skybox) {
                                        this._skybox.attachScene(this._scene);
                                    }
                                },

                                initLight: function(rootNode) {
                                    this._lightRoot = rootNode;
                                    /**
                                     * @type {qtek.light.Directional}
                                     */
                                    this.mainLight = new util_graphicGL.DirectionalLight({
                                        shadowBias: 0.005
                                    });

                                    /**
                                     * @type {qtek.light.Ambient}
                                     */
                                    this.ambientLight = new util_graphicGL.AmbientLight();

                                    rootNode.add(this.mainLight);
                                    rootNode.add(this.ambientLight);
                                },

                                dispose: function() {
                                    if (this._lightRoot) {
                                        this._lightRoot.remove(this.mainLight);
                                        this._lightRoot.remove(this.ambientLight);
                                    }
                                },

                                updateLight: function(componentModel) {

                                    var mainLight = this.mainLight;
                                    var ambientLight = this.ambientLight;

                                    var lightModel = componentModel.getModel('light');
                                    var mainLightModel = lightModel.getModel('main');
                                    var ambientLightModel = lightModel.getModel('ambient');

                                    mainLight.intensity = mainLightModel.get('intensity');
                                    ambientLight.intensity = ambientLightModel.get('intensity');
                                    mainLight.color = util_graphicGL.parseColor(mainLightModel.get('color')).slice(0, 3);
                                    ambientLight.color = util_graphicGL.parseColor(ambientLightModel.get('color')).slice(0, 3);

                                    var alpha = mainLightModel.get('alpha') || 0;
                                    var beta = mainLightModel.get('beta') || 0;
                                    mainLight.position.setArray(util_graphicGL.directionFromAlphaBeta(alpha, beta));
                                    mainLight.lookAt(util_graphicGL.Vector3.ZERO);

                                    mainLight.castShadow = mainLightModel.get('shadow');
                                    mainLight.shadowResolution = util_graphicGL.getShadowResolution(mainLightModel.get('shadowQuality'));
                                },

                                updateAmbientCubemap: function(renderer, componentModel, api) {
                                    var ambientCubemapModel = componentModel.getModel('light.ambientCubemap');

                                    var textureUrl = ambientCubemapModel.get('texture');
                                    if (textureUrl) {
                                        this._cubemapLightsCache = this._cubemapLightsCache || {};
                                        var lights = this._cubemapLightsCache[textureUrl];
                                        if (!lights) {
                                            var self = this;
                                            lights = this._cubemapLightsCache[textureUrl] = util_graphicGL.createAmbientCubemap(ambientCubemapModel.option, renderer, api, function() {
                                                // Use prefitered cubemap
                                                if (self._skybox instanceof plugin_Skybox) {
                                                    self._skybox.setEnvironmentMap(lights.specular.cubemap);
                                                }

                                                api.getZr().refresh();
                                            });
                                        }
                                        this._lightRoot.add(lights.diffuse);
                                        this._lightRoot.add(lights.specular);

                                        this._currentCubemapLights = lights;
                                    } else if (this._currentCubemapLights) {
                                        this._lightRoot.remove(this._currentCubemapLights.diffuse);
                                        this._lightRoot.remove(this._currentCubemapLights.specular);
                                        this._currentCubemapLights = null;
                                    }
                                },

                                updateSkybox: function(renderer, componentModel, api) {
                                    var environmentUrl = componentModel.get('environment');

                                    var self = this;

                                    function getSkybox() {
                                        if (!(self._skybox instanceof plugin_Skybox)) {
                                            if (self._skybox) {
                                                self._skybox.dispose(renderer);
                                            }
                                            self._skybox = new plugin_Skybox();
                                        }
                                        return self._skybox;
                                    }

                                    function getSkydome() {
                                        if (!(self._skybox instanceof plugin_Skydome)) {
                                            if (self._skybox) {
                                                self._skybox.dispose(renderer);
                                            }
                                            self._skybox = new plugin_Skydome();
                                        }
                                        return self._skybox;
                                    }

                                    if (environmentUrl && environmentUrl !== 'none') {
                                        if (environmentUrl === 'auto') {
                                            // Use environment in ambient cubemap
                                            if (this._currentCubemapLights) {
                                                var skybox = getSkybox();
                                                var cubemap = this._currentCubemapLights.specular.cubemap;
                                                skybox.setEnvironmentMap(cubemap);
                                                if (this._scene) {
                                                    skybox.attachScene(this._scene);
                                                }
                                                skybox.material.set('lod', 2);
                                            } else if (this._skybox) {
                                                this._skybox.detachScene();
                                            }
                                        }
                                        // Is gradient or color string
                                        else if ((typeof environmentUrl === 'object' && environmentUrl.colorStops) ||
                                            (typeof environmentUrl === 'string' && external__echarts__default.a.color.parse(environmentUrl))
                                        ) {
                                            var skydome = getSkydome();
                                            var texture = new util_graphicGL.Texture2D({
                                                anisotropic: 8,
                                                flipY: false
                                            });
                                            skydome.setEnvironmentMap(texture);
                                            var canvas = texture.image = document.createElement('canvas');
                                            canvas.width = canvas.height = 16;
                                            var ctx = canvas.getContext('2d');
                                            var rect = new external__echarts__default.a.graphic.Rect({
                                                shape: { x: 0, y: 0, width: 16, height: 16 },
                                                style: { fill: environmentUrl }
                                            });
                                            rect.brush(ctx);

                                            skydome.attachScene(this._scene);
                                        } else {
                                            // Panorama
                                            var skydome = getSkydome();
                                            var texture = util_graphicGL.loadTexture(environmentUrl, api, {
                                                anisotropic: 8,
                                                flipY: false
                                            });
                                            skydome.setEnvironmentMap(texture);

                                            skydome.attachScene(this._scene);
                                        }
                                    } else {
                                        if (this._skybox) {
                                            this._skybox.detachScene(this._scene);
                                        }
                                        this._skybox = null;
                                    }

                                    var coordSys = componentModel.coordinateSystem;
                                    if (this._skybox) {
                                        if (coordSys && coordSys.viewGL &&
                                            environmentUrl !== 'auto' &&
                                            !(environmentUrl.match && environmentUrl.match(/.hdr$/))
                                        ) {
                                            var srgbDefineMethod = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';
                                            this._skybox.material.shader[srgbDefineMethod]('fragment', 'SRGB_DECODE');
                                        } else {
                                            this._skybox.material.shader.undefine('fragment', 'SRGB_DECODE');
                                        }
                                        // var ambientCubemapUrl = environmentUrl === 'auto'
                                        //     ? componentModel.get('light.ambientCubemap.texture')
                                        //     : environmentUrl;
                                    }
                                }
                            };

                            /* harmony default export */
                            var common_SceneHelper = (SceneHelper);
                            // CONCATENATED MODULE: ./src/util/geometry/Quads.js
                            /**
                             * @module echarts-gl/util/geometry/QuadsGeometry
                             * @author Yi Shen(http://github.com/pissang)
                             */





                            var Quads_vec3 = glmatrix_default.a.vec3;

                            /**
                             * @constructor
                             * @alias module:echarts-gl/util/geometry/QuadsGeometry
                             * @extends qtek.Geometry
                             */

                            var QuadsGeometry = src_Geometry.extend(function() {
                                    return {

                                        segmentScale: 1,

                                        /**
                                         * Need to use mesh to expand lines if lineWidth > MAX_LINE_WIDTH
                                         */
                                        useNativeLine: true,

                                        attributes: {
                                            position: new src_Geometry.Attribute('position', 'float', 3, 'POSITION'),
                                            normal: new src_Geometry.Attribute('normal', 'float', 3, 'NORMAL'),
                                            color: new src_Geometry.Attribute('color', 'float', 4, 'COLOR')
                                        }
                                    };
                                },
                                /** @lends module: echarts-gl/util/geometry/QuadsGeometry.prototype */
                                {

                                    /**
                                     * Reset offset
                                     */
                                    resetOffset: function() {
                                        this._vertexOffset = 0;
                                        this._faceOffset = 0;
                                    },

                                    /**
                                     * @param {number} nQuad
                                     */
                                    setQuadCount: function(nQuad) {
                                        var attributes = this.attributes;
                                        var vertexCount = this.getQuadVertexCount() * nQuad;
                                        var triangleCount = this.getQuadTriangleCount() * nQuad;
                                        if (this.vertexCount !== vertexCount) {
                                            attributes.position.init(vertexCount);
                                            attributes.normal.init(vertexCount);
                                            attributes.color.init(vertexCount);
                                        }
                                        if (this.triangleCount !== triangleCount) {
                                            this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);
                                        }
                                    },

                                    getQuadVertexCount: function() {
                                        return 4;
                                    },

                                    getQuadTriangleCount: function() {
                                        return 2;
                                    },

                                    /**
                                     * Add a quad, which in following order:
                                     * 0-----1
                                     * 3-----2
                                     */
                                    addQuad: (function() {
                                        var a = Quads_vec3.create();
                                        var b = Quads_vec3.create();
                                        var normal = Quads_vec3.create();
                                        var indices = [0, 3, 1, 3, 2, 1];
                                        return function(coords, color) {
                                            var positionAttr = this.attributes.position;
                                            var normalAttr = this.attributes.normal;
                                            var colorAttr = this.attributes.color;

                                            Quads_vec3.sub(a, coords[1], coords[0]);
                                            Quads_vec3.sub(b, coords[2], coords[1]);
                                            Quads_vec3.cross(normal, a, b);
                                            Quads_vec3.normalize(normal, normal);

                                            for (var i = 0; i < 4; i++) {
                                                positionAttr.set(this._vertexOffset + i, coords[i]);
                                                colorAttr.set(this._vertexOffset + i, color);
                                                normalAttr.set(this._vertexOffset + i, normal);
                                            }
                                            var idx = this._faceOffset * 3;
                                            for (var i = 0; i < 6; i++) {
                                                this.indices[idx + i] = indices[i] + this._vertexOffset;
                                            }
                                            this._vertexOffset += 4;
                                            this._faceOffset += 2;
                                        };
                                    })()
                                });

                            external__echarts__default.a.util.defaults(QuadsGeometry.prototype, dynamicConvertMixin);

                            /* harmony default export */
                            var Quads = (QuadsGeometry);
                            // CONCATENATED MODULE: ./src/component/grid3D/ifIgnoreOnTick.js
                            function ifIgnoreOnTick(axis, i, interval) {
                                var rawTick;
                                var scale = axis.scale;
                                return scale.type === 'ordinal' &&
                                    (
                                        typeof interval === 'function' ?
                                        (
                                            rawTick = scale.getTicks()[i], !interval(rawTick, scale.getLabel(rawTick))
                                        ) :
                                        i % (interval + 1)
                                    );
                            };
                            // CONCATENATED MODULE: ./src/component/grid3D/Grid3DFace.js





                            var Grid3DFace_firstNotNull = util_retrieve.firstNotNull;


                            var dimIndicesMap = {
                                // Left to right
                                x: 0,
                                // Far to near
                                y: 2,
                                // Bottom to up
                                z: 1
                            };

                            function updateFacePlane(node, plane, otherAxis, dir) {
                                var coord = [0, 0, 0];
                                var distance = dir < 0 ? otherAxis.getExtentMin() : otherAxis.getExtentMax();
                                coord[dimIndicesMap[otherAxis.dim]] = distance;
                                node.position.setArray(coord);
                                node.rotation.identity();

                                // Negative distance because on the opposite of normal direction.
                                plane.distance = -Math.abs(distance);
                                plane.normal.set(0, 0, 0);
                                if (otherAxis.dim === 'x') {
                                    node.rotation.rotateY(dir * Math.PI / 2);
                                    plane.normal.x = -dir;
                                } else if (otherAxis.dim === 'z') {
                                    node.rotation.rotateX(-dir * Math.PI / 2);
                                    plane.normal.y = -dir;
                                } else {
                                    if (dir > 0) {
                                        node.rotation.rotateY(Math.PI);
                                    }
                                    plane.normal.z = -dir;
                                }
                            }


                            function Grid3DFace(faceInfo, linesMaterial, quadsMaterial) {
                                this.rootNode = new util_graphicGL.Node();

                                var linesMesh = new util_graphicGL.Mesh({
                                    geometry: new Lines3D({ useNativeLine: false }),
                                    material: linesMaterial,
                                    castShadow: false,
                                    ignorePicking: true,
                                    renderOrder: 1
                                });
                                var quadsMesh = new util_graphicGL.Mesh({
                                    geometry: new Quads(),
                                    material: quadsMaterial,
                                    castShadow: false,
                                    culling: false,
                                    ignorePicking: true,
                                    renderOrder: 0
                                });
                                // Quads are behind lines.
                                this.rootNode.add(quadsMesh);
                                this.rootNode.add(linesMesh);

                                this.faceInfo = faceInfo;
                                this.plane = new util_graphicGL.Plane();
                                this.linesMesh = linesMesh;
                                this.quadsMesh = quadsMesh;
                            }

                            Grid3DFace.prototype.update = function(labelIntervalFuncs, grid3DModel, ecModel, api) {
                                var cartesian = grid3DModel.coordinateSystem;
                                var axes = [
                                    cartesian.getAxis(this.faceInfo[0]),
                                    cartesian.getAxis(this.faceInfo[1])
                                ];
                                var lineGeometry = this.linesMesh.geometry;
                                var quadsGeometry = this.quadsMesh.geometry;

                                lineGeometry.convertToDynamicArray(true);
                                quadsGeometry.convertToDynamicArray(true);
                                this._updateSplitLines(lineGeometry, axes, grid3DModel, labelIntervalFuncs, api);
                                this._udpateSplitAreas(quadsGeometry, axes, grid3DModel, labelIntervalFuncs, api);
                                lineGeometry.convertToTypedArray();
                                quadsGeometry.convertToTypedArray();


                                var otherAxis = cartesian.getAxis(this.faceInfo[2]);
                                updateFacePlane(this.rootNode, this.plane, otherAxis, this.faceInfo[3]);
                            };

                            Grid3DFace.prototype._updateSplitLines = function(geometry, axes, grid3DModel, labelIntervalFuncs, api) {
                                var dpr = api.getDevicePixelRatio();
                                axes.forEach(function(axis, idx) {
                                    var axisModel = axis.model;
                                    var otherExtent = axes[1 - idx].getExtent();

                                    if (axis.scale.isBlank()) {
                                        return;
                                    }

                                    var splitLineModel = axisModel.getModel('splitLine', grid3DModel.getModel('splitLine'));
                                    // Render splitLines
                                    if (splitLineModel.get('show')) {
                                        var lineStyleModel = splitLineModel.getModel('lineStyle');
                                        var lineColors = lineStyleModel.get('color');
                                        var opacity = Grid3DFace_firstNotNull(lineStyleModel.get('opacity'), 1.0);
                                        var lineWidth = Grid3DFace_firstNotNull(lineStyleModel.get('width'), 1.0);
                                        // TODO Automatic interval
                                        var intervalFunc = splitLineModel.get('interval');
                                        if (intervalFunc == null || intervalFunc === 'auto') {
                                            intervalFunc = labelIntervalFuncs[axis.dim];
                                        }
                                        lineColors = external__echarts__default.a.util.isArray(lineColors) ? lineColors : [lineColors];

                                        var ticksCoords = axis.getTicksCoords();

                                        var count = 0;
                                        for (var i = 0; i < ticksCoords.length; i++) {
                                            if (ifIgnoreOnTick(axis, i, intervalFunc)) {
                                                continue;
                                            }
                                            var tickCoord = ticksCoords[i];
                                            var lineColor = util_graphicGL.parseColor(lineColors[count % lineColors.length]);
                                            lineColor[3] *= opacity;

                                            var p0 = [0, 0, 0];
                                            var p1 = [0, 0, 0];
                                            // 0 - x, 1 - y
                                            p0[idx] = p1[idx] = tickCoord;
                                            p0[1 - idx] = otherExtent[0];
                                            p1[1 - idx] = otherExtent[1];

                                            geometry.addLine(p0, p1, lineColor, lineWidth * dpr);

                                            count++;
                                        }
                                    }
                                });
                            };

                            Grid3DFace.prototype._udpateSplitAreas = function(geometry, axes, grid3DModel, labelIntervalFuncs, api) {
                                axes.forEach(function(axis, idx) {
                                    var axisModel = axis.model;
                                    var otherExtent = axes[1 - idx].getExtent();

                                    if (axis.scale.isBlank()) {
                                        return;
                                    }

                                    var splitAreaModel = axisModel.getModel('splitArea', grid3DModel.getModel('splitArea'));
                                    // Render splitAreas
                                    if (splitAreaModel.get('show')) {
                                        var areaStyleModel = splitAreaModel.getModel('areaStyle');
                                        var colors = areaStyleModel.get('color');
                                        var opacity = Grid3DFace_firstNotNull(areaStyleModel.get('opacity'), 1.0);
                                        // TODO Automatic interval
                                        var intervalFunc = splitAreaModel.get('interval');
                                        if (intervalFunc == null || intervalFunc === 'auto') {
                                            intervalFunc = labelIntervalFuncs[axis.dim];
                                        }

                                        colors = external__echarts__default.a.util.isArray(colors) ? colors : [colors];

                                        var ticksCoords = axis.getTicksCoords();

                                        var count = 0;
                                        var prevP0 = [0, 0, 0];
                                        var prevP1 = [0, 0, 0];
                                        // 0 - x, 1 - y
                                        for (var i = 0; i < ticksCoords.length; i++) {
                                            var tickCoord = ticksCoords[i];

                                            var p0 = [0, 0, 0];
                                            var p1 = [0, 0, 0];
                                            // 0 - x, 1 - y
                                            p0[idx] = p1[idx] = tickCoord;
                                            p0[1 - idx] = otherExtent[0];
                                            p1[1 - idx] = otherExtent[1];

                                            if (i === 0) {
                                                prevP0 = p0;
                                                prevP1 = p1;
                                                continue;
                                            }

                                            if (ifIgnoreOnTick(axis, i, intervalFunc)) {
                                                continue;
                                            }

                                            var color = util_graphicGL.parseColor(colors[count % colors.length]);
                                            color[3] *= opacity;
                                            geometry.addQuad([prevP0, p0, p1, prevP1], color);

                                            prevP0 = p0;
                                            prevP1 = p1;

                                            count++;
                                        }
                                    }
                                });
                            };

                            /* harmony default export */
                            var grid3D_Grid3DFace = (Grid3DFace);
                            // CONCATENATED MODULE: ./src/util/geometry/Sprites.js
                            /**
                             * Geometry collecting sprites
                             *
                             * @module echarts-gl/util/geometry/Sprites
                             * @author Yi Shen(https://github.com/pissang)
                             */




                            var squareTriangles = [
                                0, 1, 2, 0, 2, 3
                            ];

                            var SpritesGeometry = src_Geometry.extend(function() {
                                return {
                                    attributes: {
                                        position: new src_Geometry.Attribute('position', 'float', 3, 'POSITION'),
                                        texcoord: new src_Geometry.Attribute('texcoord', 'float', 2, 'TEXCOORD_0'),
                                        offset: new src_Geometry.Attribute('offset', 'float', 2),
                                        color: new src_Geometry.Attribute('color', 'float', 4, 'COLOR')
                                    }
                                };
                            }, {
                                resetOffset: function() {
                                    this._vertexOffset = 0;
                                    this._faceOffset = 0;
                                },
                                setSpriteCount: function(spriteCount) {
                                    this._spriteCount = spriteCount;

                                    var vertexCount = spriteCount * 4;
                                    var triangleCount = spriteCount * 2;

                                    if (this.vertexCount !== vertexCount) {
                                        this.attributes.position.init(vertexCount);
                                        this.attributes.offset.init(vertexCount);
                                        this.attributes.color.init(vertexCount);
                                    }
                                    if (this.triangleCount !== triangleCount) {
                                        this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);
                                    }
                                },

                                setSpriteAlign: function(spriteOffset, size, align, verticalAlign, margin) {
                                    if (align == null) {
                                        align = 'left';
                                    }
                                    if (verticalAlign == null) {
                                        verticalAlign = 'top';
                                    }

                                    var leftOffset, topOffset, rightOffset, bottomOffset;
                                    margin = margin || 0;
                                    switch (align) {
                                        case 'left':
                                            leftOffset = margin;
                                            rightOffset = size[0] + margin;
                                            break;
                                        case 'center':
                                        case 'middle':
                                            leftOffset = -size[0] / 2;
                                            rightOffset = size[0] / 2;
                                            break;
                                        case 'right':
                                            leftOffset = -size[0] - margin;
                                            rightOffset = -margin;
                                            break;
                                    }
                                    switch (verticalAlign) {
                                        case 'bottom':
                                            topOffset = margin;
                                            bottomOffset = size[1] + margin;
                                            break;
                                        case 'middle':
                                            topOffset = -size[1] / 2;
                                            bottomOffset = size[1] / 2;
                                            break;
                                        case 'top':
                                            topOffset = -size[1] - margin;
                                            bottomOffset = -margin;
                                            break;
                                    }
                                    // 3----2
                                    // 0----1
                                    var vertexOffset = spriteOffset * 4;
                                    var offsetAttr = this.attributes.offset;
                                    offsetAttr.set(vertexOffset, [leftOffset, bottomOffset]);
                                    offsetAttr.set(vertexOffset + 1, [rightOffset, bottomOffset]);
                                    offsetAttr.set(vertexOffset + 2, [rightOffset, topOffset]);
                                    offsetAttr.set(vertexOffset + 3, [leftOffset, topOffset]);
                                },
                                /**
                                 * Add sprite
                                 * @param {Array.<number>} position
                                 * @param {Array.<number>} size [width, height]
                                 * @param {Array.<Array>} coords [leftBottom, rightTop]
                                 * @param {string} [align='left'] 'left' 'center' 'right'
                                 * @param {string} [verticalAlign='top'] 'top' 'middle' 'bottom'
                                 * @param {number} [screenMargin=0]
                                 */
                                addSprite: function(position, size, coords, align, verticalAlign, screenMargin) {
                                    var vertexOffset = this._vertexOffset;
                                    this.setSprite(
                                        this._vertexOffset / 4, position, size, coords, align, verticalAlign, screenMargin
                                    )
                                    for (var i = 0; i < squareTriangles.length; i++) {
                                        this.indices[this._faceOffset * 3 + i] = squareTriangles[i] + vertexOffset;
                                    }
                                    this._faceOffset += 2;
                                    this._vertexOffset += 4;

                                    return vertexOffset / 4;
                                },

                                setSprite: function(spriteOffset, position, size, coords, align, verticalAlign, screenMargin) {
                                    var vertexOffset = spriteOffset * 4;

                                    var attributes = this.attributes;
                                    for (var i = 0; i < 4; i++) {
                                        attributes.position.set(vertexOffset + i, position);
                                    }
                                    // 3----2
                                    // 0----1
                                    var texcoordAttr = attributes.texcoord;

                                    texcoordAttr.set(vertexOffset, [coords[0][0], coords[0][1]]);
                                    texcoordAttr.set(vertexOffset + 1, [coords[1][0], coords[0][1]]);
                                    texcoordAttr.set(vertexOffset + 2, [coords[1][0], coords[1][1]]);
                                    texcoordAttr.set(vertexOffset + 3, [coords[0][0], coords[1][1]]);

                                    this.setSpriteAlign(spriteOffset, size, align, verticalAlign, screenMargin);
                                }
                            });

                            external__echarts__default.a.util.defaults(SpritesGeometry.prototype, dynamicConvertMixin);

                            /* harmony default export */
                            var Sprites = (SpritesGeometry);
                            // CONCATENATED MODULE: ./src/util/shader/labels.glsl.js
                            /* harmony default export */
                            var labels_glsl = ("@export ecgl.labels.vertex\n\nattribute vec3 position: POSITION;\nattribute vec2 texcoord: TEXCOORD_0;\nattribute vec2 offset;\n#ifdef VERTEX_COLOR\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n#endif\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform vec4 viewport : VIEWPORT;\n\nvarying vec2 v_Texcoord;\n\nvoid main()\n{\n vec4 proj = worldViewProjection * vec4(position, 1.0);\n\n vec2 screen = (proj.xy / abs(proj.w) + 1.0) * 0.5 * viewport.zw;\n\n screen += offset;\n\n proj.xy = (screen / viewport.zw - 0.5) * 2.0 * abs(proj.w);\n gl_Position = proj;\n#ifdef VERTEX_COLOR\n v_Color = a_Color;\n#endif\n v_Texcoord = texcoord;\n}\n@end\n\n\n@export ecgl.labels.fragment\n\nuniform vec3 color : [1.0, 1.0, 1.0];\nuniform float alpha : 1.0;\nuniform sampler2D textureAtlas;\nuniform vec2 uvScale: [1.0, 1.0];\n\n#ifdef VERTEX_COLOR\nvarying vec4 v_Color;\n#endif\nvarying float v_Miter;\n\nvarying vec2 v_Texcoord;\n\nvoid main()\n{\n gl_FragColor = vec4(color, alpha) * texture2D(textureAtlas, v_Texcoord * uvScale);\n#ifdef VERTEX_COLOR\n gl_FragColor *= v_Color;\n#endif\n}\n\n@end");

                            // CONCATENATED MODULE: ./src/util/mesh/LabelsMesh.js




                            util_graphicGL.Shader.import(labels_glsl);

                            /* harmony default export */
                            var LabelsMesh = (util_graphicGL.Mesh.extend(function() {
                                var geometry = new Sprites({
                                    dynamic: true
                                });
                                var material = new util_graphicGL.Material({
                                    shader: util_graphicGL.createShader('ecgl.labels'),
                                    transparent: true,
                                    depthMask: false
                                });

                                return {
                                    geometry: geometry,
                                    material: material,
                                    culling: false,
                                    castShadow: false,
                                    ignorePicking: true
                                };
                            }));
                            // CONCATENATED MODULE: ./src/component/grid3D/Grid3DAxis.js





                            var Grid3DAxis_firstNotNull = util_retrieve.firstNotNull;


                            var Grid3DAxis_dimIndicesMap = {
                                // Left to right
                                x: 0,
                                // Far to near
                                y: 2,
                                // Bottom to up
                                z: 1
                            };

                            function Grid3DAxis(dim, linesMaterial) {
                                var linesMesh = new util_graphicGL.Mesh({
                                    geometry: new Lines3D({ useNativeLine: false }),
                                    material: linesMaterial,
                                    castShadow: false,
                                    ignorePicking: true,
                                    renderOrder: 2
                                });
                                var axisLabelsMesh = new LabelsMesh();
                                axisLabelsMesh.material.depthMask = false;

                                var rootNode = new util_graphicGL.Node();
                                rootNode.add(linesMesh);
                                rootNode.add(axisLabelsMesh);

                                this.rootNode = rootNode;
                                this.dim = dim;

                                this.linesMesh = linesMesh;
                                this.labelsMesh = axisLabelsMesh;
                                this.axisLineCoords = null;
                                this.labelElements = [];
                            }

                            var Grid3DAxis_otherDim = {
                                x: 'y',
                                y: 'x',
                                z: 'y'
                            };
                            Grid3DAxis.prototype.update = function(
                                grid3DModel, labelIntervalFuncs, axisLabelSurface, api
                            ) {
                                var cartesian = grid3DModel.coordinateSystem;
                                var axis = cartesian.getAxis(this.dim);
                                var labelIntervalFunc = labelIntervalFuncs[this.dim];

                                var linesGeo = this.linesMesh.geometry;
                                var labelsGeo = this.labelsMesh.geometry;
                                linesGeo.convertToDynamicArray(true);
                                labelsGeo.convertToDynamicArray(true);
                                var axisModel = axis.model;
                                var extent = axis.getExtent();

                                var dpr = api.getDevicePixelRatio();
                                var axisLineModel = axisModel.getModel('axisLine', grid3DModel.getModel('axisLine'));
                                var axisTickModel = axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));
                                var axisLabelModel = axisModel.getModel('axisLabel', grid3DModel.getModel('axisLabel'));
                                var axisLineColor = axisLineModel.get('lineStyle.color');
                                // Render axisLine
                                if (axisLineModel.get('show')) {
                                    var axisLineStyleModel = axisLineModel.getModel('lineStyle');
                                    var p0 = [0, 0, 0];
                                    var p1 = [0, 0, 0];
                                    var idx = Grid3DAxis_dimIndicesMap[axis.dim];
                                    p0[idx] = extent[0];
                                    p1[idx] = extent[1];

                                    // Save some useful info.
                                    this.axisLineCoords = [p0, p1];

                                    var color = util_graphicGL.parseColor(axisLineColor);
                                    var lineWidth = Grid3DAxis_firstNotNull(axisLineStyleModel.get('width'), 1.0);
                                    var opacity = Grid3DAxis_firstNotNull(axisLineStyleModel.get('opacity'), 1.0);
                                    color[3] *= opacity;
                                    linesGeo.addLine(p0, p1, color, lineWidth * dpr);
                                }
                                // Render axis ticksCoords
                                if (axisTickModel.get('show')) {
                                    var lineStyleModel = axisTickModel.getModel('lineStyle');
                                    var lineColor = util_graphicGL.parseColor(
                                        Grid3DAxis_firstNotNull(lineStyleModel.get('color'), axisLineColor)
                                    );
                                    var lineWidth = Grid3DAxis_firstNotNull(lineStyleModel.get('width'), 1.0);
                                    lineColor[3] *= Grid3DAxis_firstNotNull(lineStyleModel.get('opacity'), 1.0);
                                    var ticksCoords = axis.getTicksCoords();
                                    // TODO Automatic interval
                                    var intervalFunc = axisTickModel.get('interval');
                                    if (intervalFunc == null || intervalFunc === 'auto') {
                                        intervalFunc = labelIntervalFunc;
                                    }
                                    var tickLength = axisTickModel.get('length');

                                    for (var i = 0; i < ticksCoords.length; i++) {
                                        if (ifIgnoreOnTick(axis, i, intervalFunc)) {
                                            continue;
                                        }
                                        var tickCoord = ticksCoords[i];

                                        var p0 = [0, 0, 0];
                                        var p1 = [0, 0, 0];
                                        var idx = Grid3DAxis_dimIndicesMap[axis.dim];
                                        var otherIdx = Grid3DAxis_dimIndicesMap[Grid3DAxis_otherDim[axis.dim]];
                                        // 0 : x, 1 : y
                                        p0[idx] = p1[idx] = tickCoord;
                                        p1[otherIdx] = tickLength;

                                        linesGeo.addLine(p0, p1, lineColor, lineWidth * dpr);
                                    }
                                }

                                this.labelElements = [];
                                var dpr = api.getDevicePixelRatio();
                                if (axisLabelModel.get('show')) {
                                    var labelsCoords = axis.getLabelsCoords();
                                    var categoryData = axisModel.get('data');
                                    // TODO Automatic interval
                                    var intervalFunc = labelIntervalFunc;

                                    var labelMargin = axisLabelModel.get('margin');

                                    var labels = axisModel.getFormattedLabels();
                                    var ticks = axis.scale.getTicks();
                                    for (var i = 0; i < labelsCoords.length; i++) {
                                        if (ifIgnoreOnTick(axis, i, intervalFunc)) {
                                            continue;
                                        }
                                        var tickCoord = labelsCoords[i];

                                        var p = [0, 0, 0];
                                        var idx = Grid3DAxis_dimIndicesMap[axis.dim];
                                        var otherIdx = Grid3DAxis_dimIndicesMap[Grid3DAxis_otherDim[axis.dim]];
                                        // 0 : x, 1 : y
                                        p[idx] = p[idx] = tickCoord;
                                        p[otherIdx] = labelMargin;

                                        var itemTextStyleModel = axisLabelModel;
                                        if (categoryData && categoryData[ticks[i]] && categoryData[ticks[i]].textStyle) {
                                            itemTextStyleModel = new external__echarts__default.a.Model(
                                                categoryData[ticks[i]].textStyle, axisLabelModel, axisModel.ecModel
                                            );
                                        }
                                        var textColor = Grid3DAxis_firstNotNull(itemTextStyleModel.get('color'), axisLineColor);

                                        var textEl = new external__echarts__default.a.graphic.Text();
                                        external__echarts__default.a.graphic.setTextStyle(textEl.style, itemTextStyleModel, {
                                            text: labels[i],
                                            textFill: typeof textColor === 'function' ?
                                                textColor(
                                                    // (1) In category axis with data zoom, tick is not the original
                                                    // index of axis.data. So tick should not be exposed to user
                                                    // in category axis.
                                                    // (2) Compatible with previous version, which always returns labelStr.
                                                    // But in interval scale labelStr is like '223,445', which maked
                                                    // user repalce ','. So we modify it to return original val but remain
                                                    // it as 'string' to avoid error in replacing.
                                                    axis.type === 'category' ? labels[i] : axis.type === 'value' ? ticks[i] + '' : ticks[i],
                                                    i
                                                ) :
                                                textColor,
                                            textVerticalAlign: 'top',
                                            textAlign: 'left'
                                        });
                                        var coords = axisLabelSurface.add(textEl);
                                        var rect = textEl.getBoundingRect();
                                        labelsGeo.addSprite(p, [rect.width * dpr, rect.height * dpr], coords);

                                        this.labelElements.push(textEl);
                                    }
                                }

                                if (axisModel.get('name')) {
                                    var nameTextStyleModel = axisModel.getModel('nameTextStyle');
                                    var p = [0, 0, 0];
                                    var idx = Grid3DAxis_dimIndicesMap[axis.dim];
                                    var otherIdx = Grid3DAxis_dimIndicesMap[Grid3DAxis_otherDim[axis.dim]];
                                    var labelColor = Grid3DAxis_firstNotNull(nameTextStyleModel.get('color'), axisLineColor);
                                    var strokeColor = nameTextStyleModel.get('borderColor');
                                    var lineWidth = nameTextStyleModel.get('borderWidth');
                                    // TODO start and end
                                    p[idx] = p[idx] = (extent[0] + extent[1]) / 2;
                                    p[otherIdx] = axisModel.get('nameGap');

                                    var textEl = new external__echarts__default.a.graphic.Text();
                                    external__echarts__default.a.graphic.setTextStyle(textEl.style, nameTextStyleModel, {
                                        text: axisModel.get('name'),
                                        textFill: labelColor,
                                        textStroke: strokeColor,
                                        lineWidth: lineWidth
                                    });
                                    var coords = axisLabelSurface.add(textEl);
                                    var rect = textEl.getBoundingRect();
                                    labelsGeo.addSprite(p, [rect.width * dpr, rect.height * dpr], coords);

                                    textEl.__idx = this.labelElements.length;
                                    this.nameLabelElement = textEl;
                                }

                                this.labelsMesh.material.set('textureAtlas', axisLabelSurface.getTexture());
                                this.labelsMesh.material.set('uvScale', axisLabelSurface.getCoordsScale());

                                linesGeo.convertToTypedArray();
                                labelsGeo.convertToTypedArray();
                            };

                            Grid3DAxis.prototype.setSpriteAlign = function(textAlign, textVerticalAlign, api) {
                                var dpr = api.getDevicePixelRatio();
                                var labelGeo = this.labelsMesh.geometry;
                                for (var i = 0; i < this.labelElements.length; i++) {
                                    var labelEl = this.labelElements[i];
                                    var rect = labelEl.getBoundingRect();

                                    labelGeo.setSpriteAlign(i, [rect.width * dpr, rect.height * dpr], textAlign, textVerticalAlign);
                                }
                                // name label
                                var nameLabelEl = this.nameLabelElement;
                                if (nameLabelEl) {
                                    var rect = nameLabelEl.getBoundingRect();
                                    labelGeo.setSpriteAlign(nameLabelEl.__idx, [rect.width * dpr, rect.height * dpr], textAlign, textVerticalAlign);
                                    labelGeo.dirty();
                                }

                                this.textAlign = textAlign;
                                this.textVerticalAlign = textVerticalAlign;
                            };

                            /* harmony default export */
                            var grid3D_Grid3DAxis = (Grid3DAxis);
                            // CONCATENATED MODULE: ./src/util/shader/lines3D.glsl.js
                            /* harmony default export */
                            var lines3D_glsl = ("@export ecgl.lines3D.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\nattribute vec3 position: POSITION;\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n\nvoid main()\n{\n gl_Position = worldViewProjection * vec4(position, 1.0);\n v_Color = a_Color;\n}\n\n@end\n\n@export ecgl.lines3D.fragment\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nvarying vec4 v_Color;\n\n@import qtek.util.srgb\n\nvoid main()\n{\n#ifdef SRGB_DECODE\n gl_FragColor = sRGBToLinear(color * v_Color);\n#else\n gl_FragColor = color * v_Color;\n#endif\n}\n@end\n\n\n\n@export ecgl.lines3D.clipNear\n\nvec4 clipNear(vec4 p1, vec4 p2) {\n float n = (p1.w - near) / (p1.w - p2.w);\n return vec4(mix(p1.xy, p2.xy, n), -near, near);\n}\n\n@end\n\n@export ecgl.lines3D.expandLine\n#ifdef VERTEX_ANIMATION\n vec4 prevProj = worldViewProjection * vec4(mix(prevPositionPrev, positionPrev, percent), 1.0);\n vec4 currProj = worldViewProjection * vec4(mix(prevPosition, position, percent), 1.0);\n vec4 nextProj = worldViewProjection * vec4(mix(prevPositionNext, positionNext, percent), 1.0);\n#else\n vec4 prevProj = worldViewProjection * vec4(positionPrev, 1.0);\n vec4 currProj = worldViewProjection * vec4(position, 1.0);\n vec4 nextProj = worldViewProjection * vec4(positionNext, 1.0);\n#endif\n\n if (currProj.w < 0.0) {\n if (nextProj.w > 0.0) {\n currProj = clipNear(currProj, nextProj);\n }\n else if (prevProj.w > 0.0) {\n currProj = clipNear(currProj, prevProj);\n }\n }\n\n vec2 prevScreen = (prevProj.xy / abs(prevProj.w) + 1.0) * 0.5 * viewport.zw;\n vec2 currScreen = (currProj.xy / abs(currProj.w) + 1.0) * 0.5 * viewport.zw;\n vec2 nextScreen = (nextProj.xy / abs(nextProj.w) + 1.0) * 0.5 * viewport.zw;\n\n vec2 dir;\n float len = offset;\n if (position == positionPrev) {\n dir = normalize(nextScreen - currScreen);\n }\n else if (position == positionNext) {\n dir = normalize(currScreen - prevScreen);\n }\n else {\n vec2 dirA = normalize(currScreen - prevScreen);\n vec2 dirB = normalize(nextScreen - currScreen);\n\n vec2 tanget = normalize(dirA + dirB);\n\n float miter = 1.0 / max(dot(tanget, dirA), 0.5);\n len *= miter;\n dir = tanget;\n }\n\n dir = vec2(-dir.y, dir.x) * len;\n currScreen += dir;\n\n currProj.xy = (currScreen / viewport.zw - 0.5) * 2.0 * abs(currProj.w);\n@end\n\n\n@export ecgl.meshLines3D.vertex\n\nattribute vec3 position: POSITION;\nattribute vec3 positionPrev;\nattribute vec3 positionNext;\nattribute float offset;\nattribute vec4 a_Color : COLOR;\n\n#ifdef VERTEX_ANIMATION\nattribute vec3 prevPosition;\nattribute vec3 prevPositionPrev;\nattribute vec3 prevPositionNext;\nuniform float percent : 1.0;\n#endif\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform vec4 viewport : VIEWPORT;\nuniform float near : NEAR;\n\nvarying vec4 v_Color;\n\n@import ecgl.common.wireframe.vertexHeader\n\n@import ecgl.lines3D.clipNear\n\nvoid main()\n{\n @import ecgl.lines3D.expandLine\n\n gl_Position = currProj;\n\n v_Color = a_Color;\n\n @import ecgl.common.wireframe.vertexMain\n}\n@end\n\n\n@export ecgl.meshLines3D.fragment\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nvarying vec4 v_Color;\n\n@import ecgl.common.wireframe.fragmentHeader\n\n@import qtek.util.srgb\n\nvoid main()\n{\n#ifdef SRGB_DECODE\n gl_FragColor = sRGBToLinear(color * v_Color);\n#else\n gl_FragColor = color * v_Color;\n#endif\n\n @import ecgl.common.wireframe.fragmentMain\n}\n\n@end");

                            // CONCATENATED MODULE: ./src/component/grid3D/Grid3DView.js
                            // TODO orthographic camera






                            var Grid3DView_firstNotNull = util_retrieve.firstNotNull;







                            util_graphicGL.Shader.import(lines3D_glsl);

                            ['x', 'y', 'z'].forEach(function(dim) {
                                external__echarts__default.a.extendComponentView({
                                    type: dim + 'Axis3D'
                                });
                            });

                            var Grid3DView_dimIndicesMap = {
                                // Left to right
                                x: 0,
                                // Far to near
                                y: 2,
                                // Bottom to up
                                z: 1
                            };

                            /* harmony default export */
                            var Grid3DView = (external__echarts__default.a.extendComponentView({

                                type: 'grid3D',

                                __ecgl__: true,

                                init: function(ecModel, api) {

                                    var FACES = [
                                        // planeDim0, planeDim1, offsetDim, dir on dim3 axis(gl), plane.
                                        ['y', 'z', 'x', -1, 'left'],
                                        ['y', 'z', 'x', 1, 'right'],
                                        ['x', 'y', 'z', -1, 'bottom'],
                                        ['x', 'y', 'z', 1, 'top'],
                                        ['x', 'z', 'y', -1, 'far'],
                                        ['x', 'z', 'y', 1, 'near']
                                    ];

                                    var DIMS = ['x', 'y', 'z'];

                                    var quadsMaterial = new util_graphicGL.Material({
                                        // transparent: true,
                                        shader: util_graphicGL.createShader('ecgl.color'),
                                        depthMask: false,
                                        transparent: true
                                    });
                                    var linesMaterial = new util_graphicGL.Material({
                                        // transparent: true,
                                        shader: util_graphicGL.createShader('ecgl.meshLines3D'),
                                        depthMask: false,
                                        transparent: true
                                    });
                                    quadsMaterial.shader.define('fragment', 'DOUBLE_SIDED');
                                    quadsMaterial.shader.define('both', 'VERTEX_COLOR');

                                    this.groupGL = new util_graphicGL.Node();

                                    this._control = new util_OrbitControl({
                                        zr: api.getZr()
                                    });
                                    this._control.init();

                                    // Save mesh and other infos for each face.
                                    this._faces = FACES.map(function(faceInfo) {
                                        var face = new grid3D_Grid3DFace(faceInfo, linesMaterial, quadsMaterial);
                                        this.groupGL.add(face.rootNode);
                                        return face;
                                    }, this);

                                    // Save mesh and other infos for each axis.
                                    this._axes = DIMS.map(function(dim) {
                                        var axis = new grid3D_Grid3DAxis(dim, linesMaterial);
                                        this.groupGL.add(axis.rootNode);
                                        return axis;
                                    }, this);

                                    var dpr = api.getDevicePixelRatio();
                                    // Texture surface for label.
                                    this._axisLabelSurface = new util_ZRTextureAtlasSurface({
                                        width: 256,
                                        height: 256,
                                        devicePixelRatio: dpr
                                    });
                                    this._axisLabelSurface.onupdate = function() {
                                        api.getZr().refresh();
                                    };

                                    this._axisPointerLineMesh = new util_graphicGL.Mesh({
                                        geometry: new Lines3D({ useNativeLine: false }),
                                        material: linesMaterial,
                                        castShadow: false,
                                        // PENDING
                                        ignorePicking: true,
                                        renderOrder: 3
                                    });
                                    this.groupGL.add(this._axisPointerLineMesh);

                                    this._axisPointerLabelsSurface = new util_ZRTextureAtlasSurface({
                                        width: 128,
                                        height: 128,
                                        devicePixelRatio: dpr
                                    });
                                    this._axisPointerLabelsMesh = new LabelsMesh({
                                        ignorePicking: true,
                                        renderOrder: 4,
                                        castShadow: false
                                    });
                                    this._axisPointerLabelsMesh.material.set('textureAtlas', this._axisPointerLabelsSurface.getTexture());
                                    this.groupGL.add(this._axisPointerLabelsMesh);

                                    this._lightRoot = new util_graphicGL.Node();
                                    this._sceneHelper = new common_SceneHelper();
                                    this._sceneHelper.initLight(this._lightRoot);
                                },

                                render: function(grid3DModel, ecModel, api) {

                                    this._model = grid3DModel;
                                    this._api = api;

                                    var cartesian = grid3DModel.coordinateSystem;

                                    // Always have light.
                                    cartesian.viewGL.add(this._lightRoot);

                                    if (grid3DModel.get('show')) {
                                        cartesian.viewGL.add(this.groupGL);
                                    } else {
                                        cartesian.viewGL.remove(this.groupGL);
                                    }

                                    // cartesian.viewGL.setCameraType(grid3DModel.get('viewControl.projection'));

                                    var control = this._control;
                                    control.setViewGL(cartesian.viewGL);

                                    var viewControlModel = grid3DModel.getModel('viewControl');
                                    control.setFromViewControlModel(viewControlModel, 0);

                                    this._axisLabelSurface.clear();

                                    var labelIntervalFuncs = ['x', 'y', 'z'].reduce(function(obj, axisDim) {
                                        var axis = cartesian.getAxis(axisDim);
                                        var axisModel = axis.model;
                                        obj[axisDim] = Grid3DView_firstNotNull(
                                            axisModel.get('axisLabel.interval'),
                                            grid3DModel.get('axisLabel.interval')
                                        );
                                        if (axis.scale.type === 'ordinal') {
                                            // TODO consider label length
                                            if (obj[axisDim] == null || obj[axisDim] == 'auto') {
                                                obj[axisDim] = Math.floor(axis.scale.getTicks().length / 8);
                                            }
                                        }
                                        return obj;
                                    }, {});

                                    control.off('update');
                                    if (grid3DModel.get('show')) {
                                        this._faces.forEach(function(face) {
                                            face.update(labelIntervalFuncs, grid3DModel, ecModel, api);
                                        }, this);
                                        this._axes.forEach(function(axis) {
                                            axis.update(grid3DModel, labelIntervalFuncs, this._axisLabelSurface, api);
                                        }, this);
                                    }

                                    control.on('update', this._onCameraChange.bind(this, grid3DModel, api), this);

                                    this._sceneHelper.setScene(cartesian.viewGL.scene);
                                    this._sceneHelper.updateLight(grid3DModel);

                                    // Set post effect
                                    cartesian.viewGL.setPostEffect(grid3DModel.getModel('postEffect'), api);
                                    cartesian.viewGL.setTemporalSuperSampling(grid3DModel.getModel('temporalSuperSampling'));

                                    this._initMouseHandler(grid3DModel);
                                },

                                afterRender: function(grid3DModel, ecModel, api, layerGL) {
                                    // Create ambient cubemap after render because we need to know the renderer.
                                    // TODO
                                    var renderer = layerGL.renderer;

                                    this._sceneHelper.updateAmbientCubemap(renderer, grid3DModel, api);

                                    this._sceneHelper.updateSkybox(renderer, grid3DModel, api);
                                },

                                /**
                                 * showAxisPointer will be triggered by action.
                                 */
                                showAxisPointer: function(grid3dModel, ecModel, api, payload) {
                                    this._doShowAxisPointer();
                                    this._updateAxisPointer(payload.value);
                                },

                                /**
                                 * hideAxisPointer will be triggered by action.
                                 */
                                hideAxisPointer: function(grid3dModel, ecModel, api, payload) {
                                    this._doHideAxisPointer();
                                },

                                _initMouseHandler: function(grid3DModel) {
                                    var cartesian = grid3DModel.coordinateSystem;
                                    var viewGL = cartesian.viewGL;

                                    // TODO xAxis3D.axisPointer.show ?
                                    if (grid3DModel.get('show') && grid3DModel.get('axisPointer.show')) {
                                        viewGL.on('mousemove', this._updateAxisPointerOnMousePosition, this);
                                    } else {
                                        viewGL.off('mousemove', this._updateAxisPointerOnMousePosition);
                                    }
                                },

                                /**
                                 * Try find and show axisPointer on the intersect point
                                 * of mouse ray with grid plane.
                                 */
                                _updateAxisPointerOnMousePosition: function(e) {
                                    // Ignore if mouse is on the element.
                                    if (e.target) {
                                        return;
                                    }
                                    var grid3DModel = this._model;
                                    var cartesian = grid3DModel.coordinateSystem;
                                    var viewGL = cartesian.viewGL;

                                    var ray = viewGL.castRay(e.offsetX, e.offsetY, new util_graphicGL.Ray());

                                    var nearestIntersectPoint;
                                    for (var i = 0; i < this._faces.length; i++) {
                                        var face = this._faces[i];
                                        if (face.rootNode.invisible) {
                                            continue;
                                        }

                                        // Plane is not face the camera. flip it
                                        if (face.plane.normal.dot(viewGL.camera.worldTransform.z) < 0) {
                                            face.plane.normal.negate();
                                        }

                                        var point = ray.intersectPlane(face.plane);
                                        if (!point) {
                                            continue;
                                        }
                                        var axis0 = cartesian.getAxis(face.faceInfo[0]);
                                        var axis1 = cartesian.getAxis(face.faceInfo[1]);
                                        var idx0 = Grid3DView_dimIndicesMap[face.faceInfo[0]];
                                        var idx1 = Grid3DView_dimIndicesMap[face.faceInfo[1]];
                                        if (axis0.contain(point._array[idx0]) && axis1.contain(point._array[idx1])) {
                                            nearestIntersectPoint = point;
                                        }
                                    }

                                    if (nearestIntersectPoint) {
                                        var data = cartesian.pointToData(nearestIntersectPoint._array, [], true);
                                        this._updateAxisPointer(data);

                                        this._doShowAxisPointer();
                                    } else {
                                        this._doHideAxisPointer();
                                    }
                                },

                                _onCameraChange: function(grid3DModel, api) {

                                    if (grid3DModel.get('show')) {
                                        this._updateFaceVisibility();
                                        this._updateAxisLinePosition();
                                    }

                                    var control = this._control;

                                    api.dispatchAction({
                                        type: 'grid3DChangeCamera',
                                        alpha: control.getAlpha(),
                                        beta: control.getBeta(),
                                        distance: control.getDistance(),
                                        center: control.getCenter(),
                                        from: this.uid,
                                        grid3DId: grid3DModel.id
                                    });
                                },

                                /**
                                 * Update visibility of each face when camera view changed, front face will be invisible.
                                 * @private
                                 */
                                _updateFaceVisibility: function() {
                                    var camera = this._control.getCamera();
                                    var viewSpacePos = new util_graphicGL.Vector3();
                                    camera.update();
                                    for (var idx = 0; idx < this._faces.length / 2; idx++) {
                                        var depths = [];
                                        for (var k = 0; k < 2; k++) {
                                            var face = this._faces[idx * 2 + k];
                                            face.rootNode.getWorldPosition(viewSpacePos);
                                            viewSpacePos.transformMat4(camera.viewMatrix);
                                            depths[k] = viewSpacePos.z;
                                        }
                                        // Set the front face invisible
                                        var frontIndex = depths[0] > depths[1] ? 0 : 1;
                                        var frontFace = this._faces[idx * 2 + frontIndex];
                                        var backFace = this._faces[idx * 2 + 1 - frontIndex];
                                        // Update rotation.
                                        frontFace.rootNode.invisible = true;
                                        backFace.rootNode.invisible = false;
                                    }
                                },

                                /**
                                 * Update axis line position when camera view changed.
                                 * @private
                                 */
                                _updateAxisLinePosition: function() {
                                    // Put xAxis, yAxis on x, y visible plane.
                                    // Put zAxis on the left.
                                    // TODO
                                    var cartesian = this._model.coordinateSystem;
                                    var xAxis = cartesian.getAxis('x');
                                    var yAxis = cartesian.getAxis('y');
                                    var zAxis = cartesian.getAxis('z');
                                    var top = zAxis.getExtentMax();
                                    var bottom = zAxis.getExtentMin();
                                    var left = xAxis.getExtentMin();
                                    var right = xAxis.getExtentMax();
                                    var near = yAxis.getExtentMax();
                                    var far = yAxis.getExtentMin();

                                    var xAxisNode = this._axes[0].rootNode;
                                    var yAxisNode = this._axes[1].rootNode;
                                    var zAxisNode = this._axes[2].rootNode;

                                    var faces = this._faces;
                                    // Notice: in cartesian up axis is z, but in webgl up axis is y.
                                    var xAxisZOffset = (faces[4].rootNode.invisible ? far : near);
                                    var xAxisYOffset = (faces[2].rootNode.invisible ? top : bottom);
                                    var yAxisXOffset = (faces[0].rootNode.invisible ? left : right);
                                    var yAxisYOffset = (faces[2].rootNode.invisible ? top : bottom);
                                    var zAxisXOffset = (faces[0].rootNode.invisible ? right : left);
                                    var zAxisZOffset = (faces[4].rootNode.invisible ? far : near);

                                    xAxisNode.rotation.identity();
                                    yAxisNode.rotation.identity();
                                    zAxisNode.rotation.identity();
                                    if (faces[4].rootNode.invisible) {
                                        this._axes[0].flipped = true;
                                        xAxisNode.rotation.rotateX(Math.PI);
                                    }
                                    if (faces[0].rootNode.invisible) {
                                        this._axes[1].flipped = true;
                                        yAxisNode.rotation.rotateZ(Math.PI);
                                    }
                                    if (faces[4].rootNode.invisible) {
                                        this._axes[2].flipped = true;
                                        zAxisNode.rotation.rotateY(Math.PI);
                                    }

                                    xAxisNode.position.set(0, xAxisYOffset, xAxisZOffset);
                                    yAxisNode.position.set(yAxisXOffset, yAxisYOffset, 0); // Actually z
                                    zAxisNode.position.set(zAxisXOffset, 0, zAxisZOffset); // Actually y

                                    xAxisNode.update();
                                    yAxisNode.update();
                                    zAxisNode.update();

                                    this._updateAxisLabelAlign();
                                },

                                /**
                                 * Update label align on axis when axisLine position changed.
                                 * @private
                                 */
                                _updateAxisLabelAlign: function() {
                                    // var cartesian = this._model.coordinateSystem;
                                    var camera = this._control.getCamera();
                                    var coords = [new util_graphicGL.Vector4(), new util_graphicGL.Vector4()];
                                    var center = new util_graphicGL.Vector4();
                                    this.groupGL.getWorldPosition(center);
                                    center.w = 1.0;
                                    center.transformMat4(camera.viewMatrix)
                                        .transformMat4(camera.projectionMatrix);
                                    center.x /= center.w;
                                    center.y /= center.w;
                                    this._axes.forEach(function(axisInfo) {
                                        var lineCoords = axisInfo.axisLineCoords;
                                        var labelGeo = axisInfo.labelsMesh.geometry;
                                        for (var i = 0; i < coords.length; i++) {
                                            coords[i].setArray(lineCoords[i]);
                                            coords[i].w = 1.0;
                                            coords[i].transformMat4(axisInfo.rootNode.worldTransform)
                                                .transformMat4(camera.viewMatrix)
                                                .transformMat4(camera.projectionMatrix);
                                            coords[i].x /= coords[i].w;
                                            coords[i].y /= coords[i].w;
                                        }
                                        var dx = coords[1].x - coords[0].x;
                                        var dy = coords[1].y - coords[0].y;
                                        var cx = (coords[1].x + coords[0].x) / 2;
                                        var cy = (coords[1].y + coords[0].y) / 2;
                                        var textAlign;
                                        var verticalAlign;
                                        if (Math.abs(dy / dx) < 0.5) {
                                            textAlign = 'center';
                                            verticalAlign = cy > center.y ? 'bottom' : 'top';
                                        } else {
                                            verticalAlign = 'middle';
                                            textAlign = cx > center.x ? 'left' : 'right';
                                        }

                                        // axis labels
                                        axisInfo.setSpriteAlign(textAlign, verticalAlign, this._api);
                                    }, this);
                                },

                                _doShowAxisPointer: function() {
                                    if (!this._axisPointerLineMesh.invisible) {
                                        return;
                                    }

                                    this._axisPointerLineMesh.invisible = false;
                                    this._axisPointerLabelsMesh.invisible = false;
                                    this._api.getZr().refresh();
                                },

                                _doHideAxisPointer: function() {
                                    if (this._axisPointerLineMesh.invisible) {
                                        return;
                                    }

                                    this._axisPointerLineMesh.invisible = true;
                                    this._axisPointerLabelsMesh.invisible = true;
                                    this._api.getZr().refresh();
                                },
                                /**
                                 * @private updateAxisPointer.
                                 */
                                _updateAxisPointer: function(data) {
                                    var cartesian = this._model.coordinateSystem;
                                    var point = cartesian.dataToPoint(data);

                                    var axisPointerLineMesh = this._axisPointerLineMesh;
                                    var linesGeo = axisPointerLineMesh.geometry;

                                    var axisPointerParentModel = this._model.getModel('axisPointer');

                                    var dpr = this._api.getDevicePixelRatio();
                                    linesGeo.convertToDynamicArray(true);


                                    function ifShowAxisPointer(axis) {
                                        return util_retrieve.firstNotNull(
                                            axis.model.get('axisPointer.show'),
                                            axisPointerParentModel.get('show')
                                        );
                                    }

                                    function getAxisColorAndLineWidth(axis) {
                                        var axisPointerModel = axis.model.getModel('axisPointer', axisPointerParentModel);
                                        var lineStyleModel = axisPointerModel.getModel('lineStyle');

                                        var color = util_graphicGL.parseColor(lineStyleModel.get('color'));
                                        var lineWidth = Grid3DView_firstNotNull(lineStyleModel.get('width'), 1);
                                        var opacity = Grid3DView_firstNotNull(lineStyleModel.get('opacity'), 1);
                                        color[3] *= opacity;

                                        return {
                                            color: color,
                                            lineWidth: lineWidth
                                        };
                                    }
                                    for (var k = 0; k < this._faces.length; k++) {
                                        var face = this._faces[k];
                                        if (face.rootNode.invisible) {
                                            continue;
                                        }

                                        var faceInfo = face.faceInfo;
                                        var otherCoord = faceInfo[3] < 0 ?
                                            cartesian.getAxis(faceInfo[2]).getExtentMin() :
                                            cartesian.getAxis(faceInfo[2]).getExtentMax();
                                        var otherDimIdx = Grid3DView_dimIndicesMap[faceInfo[2]];

                                        // Line on face.
                                        for (var i = 0; i < 2; i++) {
                                            var dim = faceInfo[i];
                                            var faceOtherDim = faceInfo[1 - i];
                                            var axis = cartesian.getAxis(dim);
                                            var faceOtherAxis = cartesian.getAxis(faceOtherDim);

                                            if (!ifShowAxisPointer(axis)) {
                                                continue;
                                            }

                                            var p0 = [0, 0, 0];
                                            var p1 = [0, 0, 0];
                                            var dimIdx = Grid3DView_dimIndicesMap[dim];
                                            var faceOtherDimIdx = Grid3DView_dimIndicesMap[faceOtherDim];
                                            p0[dimIdx] = p1[dimIdx] = point[dimIdx];

                                            p0[otherDimIdx] = p1[otherDimIdx] = otherCoord;
                                            p0[faceOtherDimIdx] = faceOtherAxis.getExtentMin();
                                            p1[faceOtherDimIdx] = faceOtherAxis.getExtentMax();

                                            var colorAndLineWidth = getAxisColorAndLineWidth(axis);
                                            linesGeo.addLine(p0, p1, colorAndLineWidth.color, colorAndLineWidth.lineWidth * dpr);
                                        }

                                        // Project line.
                                        if (ifShowAxisPointer(cartesian.getAxis(faceInfo[2]))) {
                                            var p0 = point.slice();
                                            var p1 = point.slice();
                                            p1[otherDimIdx] = otherCoord;
                                            var colorAndLineWidth = getAxisColorAndLineWidth(cartesian.getAxis(faceInfo[2]));
                                            linesGeo.addLine(p0, p1, colorAndLineWidth.color, colorAndLineWidth.lineWidth * dpr);
                                        }
                                    }
                                    linesGeo.convertToTypedArray();

                                    this._updateAxisPointerLabelsMesh(data);

                                    this._api.getZr().refresh();
                                },

                                _updateAxisPointerLabelsMesh: function(data) {
                                    var grid3dModel = this._model;
                                    var axisPointerLabelsMesh = this._axisPointerLabelsMesh;
                                    var axisPointerLabelsSurface = this._axisPointerLabelsSurface;
                                    var cartesian = grid3dModel.coordinateSystem;

                                    var axisPointerParentModel = grid3dModel.getModel('axisPointer');

                                    axisPointerLabelsMesh.geometry.convertToDynamicArray(true);
                                    axisPointerLabelsSurface.clear();

                                    var otherDim = {
                                        x: 'y',
                                        y: 'x',
                                        z: 'y'
                                    };
                                    this._axes.forEach(function(axisInfo, idx) {
                                        var axis = cartesian.getAxis(axisInfo.dim);
                                        var axisModel = axis.model;
                                        var axisPointerModel = axisModel.getModel('axisPointer', axisPointerParentModel);
                                        var labelModel = axisPointerModel.getModel('label');
                                        var lineColor = axisPointerModel.get('lineStyle.color');
                                        if (!labelModel.get('show') || !axisPointerModel.get('show')) {
                                            return;
                                        }
                                        var val = data[idx];
                                        var formatter = labelModel.get('formatter');
                                        var text = axis.scale.getLabel(val);
                                        if (formatter != null) {
                                            text = formatter(text, data);
                                        } else {
                                            if (axis.scale.type === 'interval' || axis.scale.type === 'log') {
                                                var precision = external__echarts__default.a.number.getPrecisionSafe(axis.scale.getTicks()[0]);
                                                text = val.toFixed(precision + 2);
                                            }
                                        }

                                        var textStyleModel = labelModel.getModel('textStyle');
                                        var labelColor = textStyleModel.get('color');
                                        var textEl = new external__echarts__default.a.graphic.Text();
                                        external__echarts__default.a.graphic.setTextStyle(textEl.style, textStyleModel, {
                                            text: text,
                                            textFill: labelColor || lineColor,
                                            textAlign: 'left',
                                            textVerticalAlign: 'top'
                                        });
                                        var coords = axisPointerLabelsSurface.add(textEl);
                                        var rect = textEl.getBoundingRect();
                                        var dpr = this._api.getDevicePixelRatio();
                                        var pos = axisInfo.rootNode.position.toArray();
                                        var otherIdx = Grid3DView_dimIndicesMap[otherDim[axisInfo.dim]];
                                        pos[otherIdx] += (axisInfo.flipped ? -1 : 1) * labelModel.get('margin');
                                        pos[Grid3DView_dimIndicesMap[axisInfo.dim]] = axis.dataToCoord(data[idx]);

                                        axisPointerLabelsMesh.geometry.addSprite(
                                            pos, [rect.width * dpr, rect.height * dpr], coords,
                                            axisInfo.textAlign, axisInfo.textVerticalAlign
                                        );
                                    }, this);
                                    axisPointerLabelsSurface.getZr().refreshImmediately();
                                    axisPointerLabelsMesh.material.set('uvScale', axisPointerLabelsSurface.getCoordsScale());
                                    axisPointerLabelsMesh.geometry.convertToTypedArray();
                                },

                                dispose: function() {
                                    this.groupGL.removeAll();
                                    this._control.dispose();
                                }
                            }));
                            // EXTERNAL MODULE: ./node_modules/echarts/lib/coord/cartesian/Cartesian.js
                            var Cartesian = __webpack_require__(15);
                            var Cartesian_default = /*#__PURE__*/ __webpack_require__.n(Cartesian);

                            // CONCATENATED MODULE: ./src/coord/grid3D/Cartesian3D.js



                            function Cartesian3D(name) {

                                Cartesian_default.a.call(this, name);

                                this.size = [0, 0, 0];
                            }

                            Cartesian3D.prototype = {

                                constructor: Cartesian3D,

                                type: 'cartesian3D',

                                dimensions: ['x', 'y', 'z'],

                                model: null,

                                containPoint: function(point) {
                                    return this.getAxis('x').contain(point[0]) &&
                                        this.getAxis('y').contain(point[2]) &&
                                        this.getAxis('z').contain(point[1]);
                                },

                                containData: function(data) {
                                    return this.getAxis('x').containData(data[0]) &&
                                        this.getAxis('y').containData(data[1]) &&
                                        this.getAxis('z').containData(data[2]);
                                },

                                dataToPoint: function(data, out, clamp) {
                                    out = out || [];
                                    out[0] = this.getAxis('x').dataToCoord(data[0], clamp);
                                    out[2] = this.getAxis('y').dataToCoord(data[1], clamp);
                                    out[1] = this.getAxis('z').dataToCoord(data[2], clamp);
                                    return out;
                                },

                                pointToData: function(point, out, clamp) {
                                    out = out || [];
                                    out[0] = this.getAxis('x').coordToData(point[0], clamp);
                                    out[1] = this.getAxis('y').coordToData(point[2], clamp);
                                    out[2] = this.getAxis('z').coordToData(point[1], clamp);
                                    return out;
                                }
                            };

                            external__echarts__default.a.util.inherits(Cartesian3D, Cartesian_default.a);

                            /* harmony default export */
                            var grid3D_Cartesian3D = (Cartesian3D);
                            // CONCATENATED MODULE: ./src/coord/grid3D/Axis3D.js


                            function Axis3D(dim, scale, extent) {

                                external__echarts__default.a.Axis.call(this, dim, scale, extent);
                            }

                            Axis3D.prototype = {
                                constructor: Axis3D,

                                getExtentMin: function() {
                                    var extent = this._extent;
                                    return Math.min(extent[0], extent[1]);
                                },

                                getExtentMax: function() {
                                    var extent = this._extent;
                                    return Math.max(extent[0], extent[1]);
                                }
                            };

                            external__echarts__default.a.util.inherits(Axis3D, external__echarts__default.a.Axis);

                            /* harmony default export */
                            var grid3D_Axis3D = (Axis3D);
                            // EXTERNAL MODULE: ./node_modules/echarts/lib/util/layout.js
                            var util_layout = __webpack_require__(3);
                            var layout_default = /*#__PURE__*/ __webpack_require__.n(util_layout);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/compositor/TexturePool.js




                            var TexturePool = function() {

                                this._pool = {};

                                this._allocatedTextures = [];
                            };

                            TexturePool.prototype = {

                                constructor: TexturePool,

                                get: function(parameters) {
                                    var key = generateKey(parameters);
                                    if (!this._pool.hasOwnProperty(key)) {
                                        this._pool[key] = [];
                                    }
                                    var list = this._pool[key];
                                    if (!list.length) {
                                        var texture = new src_Texture2D(parameters);
                                        this._allocatedTextures.push(texture);
                                        return texture;
                                    }
                                    return list.pop();
                                },

                                put: function(texture) {
                                    var key = generateKey(texture);
                                    if (!this._pool.hasOwnProperty(key)) {
                                        this._pool[key] = [];
                                    }
                                    var list = this._pool[key];
                                    list.push(texture);
                                },

                                clear: function(renderer) {
                                    for (var i = 0; i < this._allocatedTextures.length; i++) {
                                        this._allocatedTextures[i].dispose(renderer);
                                    }
                                    this._pool = {};
                                    this._allocatedTextures = [];
                                }
                            };

                            var defaultParams = {
                                width: 512,
                                height: 512,
                                type: glenum.UNSIGNED_BYTE,
                                format: glenum.RGBA,
                                wrapS: glenum.CLAMP_TO_EDGE,
                                wrapT: glenum.CLAMP_TO_EDGE,
                                minFilter: glenum.LINEAR_MIPMAP_LINEAR,
                                magFilter: glenum.LINEAR,
                                useMipmap: true,
                                anisotropic: 1,
                                flipY: true,
                                unpackAlignment: 4,
                                premultiplyAlpha: false
                            };

                            var defaultParamPropList = Object.keys(defaultParams);

                            function generateKey(parameters) {
                                core_util.defaultsWithPropList(parameters, defaultParams, defaultParamPropList);
                                fallBack(parameters);

                                var key = '';
                                for (var i = 0; i < defaultParamPropList.length; i++) {
                                    var name = defaultParamPropList[i];
                                    var chunk = parameters[name].toString();
                                    key += chunk;
                                }
                                return key;
                            }

                            function fallBack(target) {

                                var IPOT = TexturePool_isPowerOfTwo(target.width, target.height);

                                if (target.format === glenum.DEPTH_COMPONENT) {
                                    target.useMipmap = false;
                                }

                                if (!IPOT || !target.useMipmap) {
                                    if (target.minFilter == glenum.NEAREST_MIPMAP_NEAREST ||
                                        target.minFilter == glenum.NEAREST_MIPMAP_LINEAR) {
                                        target.minFilter = glenum.NEAREST;
                                    } else if (
                                        target.minFilter == glenum.LINEAR_MIPMAP_LINEAR ||
                                        target.minFilter == glenum.LINEAR_MIPMAP_NEAREST
                                    ) {
                                        target.minFilter = glenum.LINEAR;
                                    }
                                }
                                if (!IPOT) {
                                    target.wrapS = glenum.CLAMP_TO_EDGE;
                                    target.wrapT = glenum.CLAMP_TO_EDGE;
                                }
                            }

                            function TexturePool_isPowerOfTwo(width, height) {
                                return (width & (width - 1)) === 0 &&
                                    (height & (height - 1)) === 0;
                            }

                            /* harmony default export */
                            var compositor_TexturePool = (TexturePool);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/shader/source/shadowmap.glsl.js
                            /* harmony default export */
                            var shadowmap_glsl = ("@export qtek.sm.depth.vertex\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nattribute vec3 position : POSITION;\n#ifdef SHADOW_TRANSPARENT\nattribute vec2 texcoord : TEXCOORD_0;\n#endif\n@import qtek.chunk.skinning_header\nvarying vec4 v_ViewPosition;\n#ifdef SHADOW_TRANSPARENT\nvarying vec2 v_Texcoord;\n#endif\nvoid main(){\n    vec3 skinnedPosition = position;\n#ifdef SKINNING\n    @import qtek.chunk.skin_matrix\n    skinnedPosition = (skinMatrixWS * vec4(position, 1.0)).xyz;\n#endif\n    v_ViewPosition = worldViewProjection * vec4(skinnedPosition, 1.0);\n    gl_Position = v_ViewPosition;\n#ifdef SHADOW_TRANSPARENT\n    v_Texcoord = texcoord;\n#endif\n}\n@end\n@export qtek.sm.depth.fragment\nvarying vec4 v_ViewPosition;\n#ifdef SHADOW_TRANSPARENT\nvarying vec2 v_Texcoord;\n#endif\nuniform float bias : 0.001;\nuniform float slopeScale : 1.0;\n#ifdef SHADOW_TRANSPARENT\nuniform sampler2D transparentMap;\n#endif\n@import qtek.util.encode_float\nvoid main(){\n    float depth = v_ViewPosition.z / v_ViewPosition.w;\n#ifdef USE_VSM\n    depth = depth * 0.5 + 0.5;\n    float moment1 = depth;\n    float moment2 = depth * depth;\n    float dx = dFdx(depth);\n    float dy = dFdy(depth);\n    moment2 += 0.25*(dx*dx+dy*dy);\n    gl_FragColor = vec4(moment1, moment2, 0.0, 1.0);\n#else\n    float dx = dFdx(depth);\n    float dy = dFdy(depth);\n    depth += sqrt(dx*dx + dy*dy) * slopeScale + bias;\n#ifdef SHADOW_TRANSPARENT\n    if (texture2D(transparentMap, v_Texcoord).a <= 0.1) {\n        gl_FragColor = encodeFloat(0.9999);\n        return;\n    }\n#endif\n    gl_FragColor = encodeFloat(depth * 0.5 + 0.5);\n#endif\n}\n@end\n@export qtek.sm.debug_depth\nuniform sampler2D depthMap;\nvarying vec2 v_Texcoord;\n@import qtek.util.decode_float\nvoid main() {\n    vec4 tex = texture2D(depthMap, v_Texcoord);\n#ifdef USE_VSM\n    gl_FragColor = vec4(tex.rgb, 1.0);\n#else\n    float depth = decodeFloat(tex);\n    gl_FragColor = vec4(depth, depth, depth, 1.0);\n#endif\n}\n@end\n@export qtek.sm.distance.vertex\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform mat4 world : WORLD;\nattribute vec3 position : POSITION;\n@import qtek.chunk.skinning_header\nvarying vec3 v_WorldPosition;\nvoid main (){\n    vec3 skinnedPosition = position;\n#ifdef SKINNING\n    @import qtek.chunk.skin_matrix\n    skinnedPosition = (skinMatrixWS * vec4(position, 1.0)).xyz;\n#endif\n    gl_Position = worldViewProjection * vec4(skinnedPosition , 1.0);\n    v_WorldPosition = (world * vec4(skinnedPosition, 1.0)).xyz;\n}\n@end\n@export qtek.sm.distance.fragment\nuniform vec3 lightPosition;\nuniform float range : 100;\nvarying vec3 v_WorldPosition;\n@import qtek.util.encode_float\nvoid main(){\n    float dist = distance(lightPosition, v_WorldPosition);\n#ifdef USE_VSM\n    gl_FragColor = vec4(dist, dist * dist, 0.0, 0.0);\n#else\n    dist = dist / range;\n    gl_FragColor = encodeFloat(dist);\n#endif\n}\n@end\n@export qtek.plugin.shadow_map_common\n@import qtek.util.decode_float\nfloat tapShadowMap(sampler2D map, vec2 uv, float z){\n    vec4 tex = texture2D(map, uv);\n    return step(z, decodeFloat(tex) * 2.0 - 1.0);\n}\nfloat pcf(sampler2D map, vec2 uv, float z, float textureSize, vec2 scale) {\n    float shadowContrib = tapShadowMap(map, uv, z);\n    vec2 offset = vec2(1.0 / textureSize) * scale;\n#ifdef PCF_KERNEL_SIZE\n    for (int _idx_ = 0; _idx_ < PCF_KERNEL_SIZE; _idx_++) {{\n        shadowContrib += tapShadowMap(map, uv + offset * pcfKernel[_idx_], z);\n    }}\n    return shadowContrib / float(PCF_KERNEL_SIZE + 1);\n#else\n    shadowContrib += tapShadowMap(map, uv+vec2(offset.x, 0.0), z);\n    shadowContrib += tapShadowMap(map, uv+vec2(offset.x, offset.y), z);\n    shadowContrib += tapShadowMap(map, uv+vec2(-offset.x, offset.y), z);\n    shadowContrib += tapShadowMap(map, uv+vec2(0.0, offset.y), z);\n    shadowContrib += tapShadowMap(map, uv+vec2(-offset.x, 0.0), z);\n    shadowContrib += tapShadowMap(map, uv+vec2(-offset.x, -offset.y), z);\n    shadowContrib += tapShadowMap(map, uv+vec2(offset.x, -offset.y), z);\n    shadowContrib += tapShadowMap(map, uv+vec2(0.0, -offset.y), z);\n    return shadowContrib / 9.0;\n#endif\n}\nfloat pcf(sampler2D map, vec2 uv, float z, float textureSize) {\n    return pcf(map, uv, z, textureSize, vec2(1.0));\n}\nfloat chebyshevUpperBound(vec2 moments, float z){\n    float p = 0.0;\n    z = z * 0.5 + 0.5;\n    if (z <= moments.x) {\n        p = 1.0;\n    }\n    float variance = moments.y - moments.x * moments.x;\n    variance = max(variance, 0.0000001);\n    float mD = moments.x - z;\n    float pMax = variance / (variance + mD * mD);\n    pMax = clamp((pMax-0.4)/(1.0-0.4), 0.0, 1.0);\n    return max(p, pMax);\n}\nfloat computeShadowContrib(\n    sampler2D map, mat4 lightVPM, vec3 position, float textureSize, vec2 scale, vec2 offset\n) {\n    vec4 posInLightSpace = lightVPM * vec4(position, 1.0);\n    posInLightSpace.xyz /= posInLightSpace.w;\n    float z = posInLightSpace.z;\n    if(all(greaterThan(posInLightSpace.xyz, vec3(-0.99, -0.99, -1.0))) &&\n        all(lessThan(posInLightSpace.xyz, vec3(0.99, 0.99, 1.0)))){\n        vec2 uv = (posInLightSpace.xy+1.0) / 2.0;\n        #ifdef USE_VSM\n            vec2 moments = texture2D(map, uv * scale + offset).xy;\n            return chebyshevUpperBound(moments, z);\n        #else\n            return pcf(map, uv * scale + offset, z, textureSize, scale);\n        #endif\n    }\n    return 1.0;\n}\nfloat computeShadowContrib(sampler2D map, mat4 lightVPM, vec3 position, float textureSize) {\n    return computeShadowContrib(map, lightVPM, position, textureSize, vec2(1.0), vec2(0.0));\n}\nfloat computeShadowContribOmni(samplerCube map, vec3 direction, float range)\n{\n    float dist = length(direction);\n    vec4 shadowTex = textureCube(map, direction);\n#ifdef USE_VSM\n    vec2 moments = shadowTex.xy;\n    float variance = moments.y - moments.x * moments.x;\n    float mD = moments.x - dist;\n    float p = variance / (variance + mD * mD);\n    if(moments.x + 0.001 < dist){\n        return clamp(p, 0.0, 1.0);\n    }else{\n        return 1.0;\n    }\n#else\n    return step(dist, (decodeFloat(shadowTex) + 0.0002) * range);\n#endif\n}\n@end\n@export qtek.plugin.compute_shadow_map\n#if defined(SPOT_LIGHT_SHADOWMAP_COUNT) || defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT) || defined(POINT_LIGHT_SHADOWMAP_COUNT)\n#ifdef SPOT_LIGHT_SHADOWMAP_COUNT\nuniform sampler2D spotLightShadowMaps[SPOT_LIGHT_SHADOWMAP_COUNT];\nuniform mat4 spotLightMatrices[SPOT_LIGHT_SHADOWMAP_COUNT];\nuniform float spotLightShadowMapSizes[SPOT_LIGHT_SHADOWMAP_COUNT];\n#endif\n#ifdef DIRECTIONAL_LIGHT_SHADOWMAP_COUNT\n#if defined(SHADOW_CASCADE)\nuniform sampler2D directionalLightShadowMaps[1];\nuniform mat4 directionalLightMatrices[SHADOW_CASCADE];\nuniform float directionalLightShadowMapSizes[1];\nuniform float shadowCascadeClipsNear[SHADOW_CASCADE];\nuniform float shadowCascadeClipsFar[SHADOW_CASCADE];\n#else\nuniform sampler2D directionalLightShadowMaps[DIRECTIONAL_LIGHT_SHADOWMAP_COUNT];\nuniform mat4 directionalLightMatrices[DIRECTIONAL_LIGHT_SHADOWMAP_COUNT];\nuniform float directionalLightShadowMapSizes[DIRECTIONAL_LIGHT_SHADOWMAP_COUNT];\n#endif\n#endif\n#ifdef POINT_LIGHT_SHADOWMAP_COUNT\nuniform samplerCube pointLightShadowMaps[POINT_LIGHT_SHADOWMAP_COUNT];\nuniform float pointLightShadowMapSizes[POINT_LIGHT_SHADOWMAP_COUNT];\n#endif\nuniform bool shadowEnabled : true;\n#ifdef PCF_KERNEL_SIZE\nuniform vec2 pcfKernel[PCF_KERNEL_SIZE];\n#endif\n@import qtek.plugin.shadow_map_common\n#if defined(SPOT_LIGHT_SHADOWMAP_COUNT)\nvoid computeShadowOfSpotLights(vec3 position, inout float shadowContribs[SPOT_LIGHT_COUNT] ) {\n    float shadowContrib;\n    for(int _idx_ = 0; _idx_ < SPOT_LIGHT_SHADOWMAP_COUNT; _idx_++) {{\n        shadowContrib = computeShadowContrib(\n            spotLightShadowMaps[_idx_], spotLightMatrices[_idx_], position,\n            spotLightShadowMapSizes[_idx_]\n        );\n        shadowContribs[_idx_] = shadowContrib;\n    }}\n    for(int _idx_ = SPOT_LIGHT_SHADOWMAP_COUNT; _idx_ < SPOT_LIGHT_COUNT; _idx_++){{\n        shadowContribs[_idx_] = 1.0;\n    }}\n}\n#endif\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n#ifdef SHADOW_CASCADE\nvoid computeShadowOfDirectionalLights(vec3 position, inout float shadowContribs[DIRECTIONAL_LIGHT_COUNT]){\n    float depth = (2.0 * gl_FragCoord.z - gl_DepthRange.near - gl_DepthRange.far)\n                    / (gl_DepthRange.far - gl_DepthRange.near);\n    float shadowContrib;\n    shadowContribs[0] = 1.0;\n    for (int _idx_ = 0; _idx_ < SHADOW_CASCADE; _idx_++) {{\n        if (\n            depth >= shadowCascadeClipsNear[_idx_] &&\n            depth <= shadowCascadeClipsFar[_idx_]\n        ) {\n            shadowContrib = computeShadowContrib(\n                directionalLightShadowMaps[0], directionalLightMatrices[_idx_], position,\n                directionalLightShadowMapSizes[0],\n                vec2(1.0 / float(SHADOW_CASCADE), 1.0),\n                vec2(float(_idx_) / float(SHADOW_CASCADE), 0.0)\n            );\n            shadowContribs[0] = shadowContrib;\n        }\n    }}\n    for(int _idx_ = DIRECTIONAL_LIGHT_SHADOWMAP_COUNT; _idx_ < DIRECTIONAL_LIGHT_COUNT; _idx_++) {{\n        shadowContribs[_idx_] = 1.0;\n    }}\n}\n#else\nvoid computeShadowOfDirectionalLights(vec3 position, inout float shadowContribs[DIRECTIONAL_LIGHT_COUNT]){\n    float shadowContrib;\n    for(int _idx_ = 0; _idx_ < DIRECTIONAL_LIGHT_SHADOWMAP_COUNT; _idx_++) {{\n        shadowContrib = computeShadowContrib(\n            directionalLightShadowMaps[_idx_], directionalLightMatrices[_idx_], position,\n            directionalLightShadowMapSizes[_idx_]\n        );\n        shadowContribs[_idx_] = shadowContrib;\n    }}\n    for(int _idx_ = DIRECTIONAL_LIGHT_SHADOWMAP_COUNT; _idx_ < DIRECTIONAL_LIGHT_COUNT; _idx_++) {{\n        shadowContribs[_idx_] = 1.0;\n    }}\n}\n#endif\n#endif\n#if defined(POINT_LIGHT_SHADOWMAP_COUNT)\nvoid computeShadowOfPointLights(vec3 position, inout float shadowContribs[POINT_LIGHT_COUNT] ){\n    vec3 lightPosition;\n    vec3 direction;\n    for(int _idx_ = 0; _idx_ < POINT_LIGHT_SHADOWMAP_COUNT; _idx_++) {{\n        lightPosition = pointLightPosition[_idx_];\n        direction = position - lightPosition;\n        shadowContribs[_idx_] = computeShadowContribOmni(pointLightShadowMaps[_idx_], direction, pointLightRange[_idx_]);\n    }}\n    for(int _idx_ = POINT_LIGHT_SHADOWMAP_COUNT; _idx_ < POINT_LIGHT_COUNT; _idx_++) {{\n        shadowContribs[_idx_] = 1.0;\n    }}\n}\n#endif\n#endif\n@end");

                            // CONCATENATED MODULE: ./node_modules/qtek/src/prePass/ShadowMap.js


























                            var ShadowMap_mat4 = glmatrix_default.a.mat4;
                            var ShadowMap_vec3 = glmatrix_default.a.vec3;

                            var ShadowMap_targets = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];


                            src_Shader['import'](shadowmap_glsl);

                            /**
                             * Pass rendering shadow map.
                             *
                             * @constructor qtek.prePass.ShadowMap
                             * @extends qtek.core.Base
                             * @example
                             *     var shadowMapPass = new qtek.prePass.ShadowMap({
                             *         softShadow: qtek.prePass.ShadowMap.VSM
                             *     });
                             *     ...
                             *     animation.on('frame', function (frameTime) {
                             *         shadowMapPass.render(renderer, scene, camera);
                             *         renderer.render(scene, camera);
                             *     });
                             */
                            var ShadowMapPass = core_Base.extend(function() {
                                return /** @lends qtek.prePass.ShadowMap# */ {
                                    /**
                                     * Soft shadow technique.
                                     * Can be {@link qtek.prePass.ShadowMap.PCF} or {@link qtek.prePass.ShadowMap.VSM}
                                     * @type {number}
                                     */
                                    softShadow: ShadowMapPass.PCF,

                                    /**
                                     * Soft shadow blur size
                                     * @type {number}
                                     */
                                    shadowBlur: 1.0,

                                    lightFrustumBias: 'auto',

                                    kernelPCF: new Float32Array([
                                        1, 0,
                                        1, 1, -1, 1,
                                        0, 1, -1, 0, -1, -1,
                                        1, -1,
                                        0, -1
                                    ]),

                                    precision: 'mediump',

                                    _lastRenderNotCastShadow: false,

                                    _frameBuffer: new src_FrameBuffer(),

                                    _textures: {},
                                    _shadowMapNumber: {
                                        'POINT_LIGHT': 0,
                                        'DIRECTIONAL_LIGHT': 0,
                                        'SPOT_LIGHT': 0
                                    },

                                    _meshMaterials: {},
                                    _depthMaterials: {},
                                    _depthShaders: {},
                                    _distanceMaterials: {},

                                    _opaqueCasters: [],
                                    _receivers: [],
                                    _lightsCastShadow: [],

                                    _lightCameras: {},

                                    _texturePool: new compositor_TexturePool()
                                };
                            }, function() {
                                // Gaussian filter pass for VSM
                                this._gaussianPassH = new compositor_Pass({
                                    fragment: src_Shader.source('qtek.compositor.gaussian_blur')
                                });
                                this._gaussianPassV = new compositor_Pass({
                                    fragment: src_Shader.source('qtek.compositor.gaussian_blur')
                                });
                                this._gaussianPassH.setUniform('blurSize', this.shadowBlur);
                                this._gaussianPassH.setUniform('blurDir', 0.0);
                                this._gaussianPassV.setUniform('blurSize', this.shadowBlur);
                                this._gaussianPassV.setUniform('blurDir', 1.0);

                                this._outputDepthPass = new compositor_Pass({
                                    fragment: src_Shader.source('qtek.sm.debug_depth')
                                });
                            }, {
                                /**
                                 * Render scene to shadow textures
                                 * @param  {qtek.Renderer} renderer
                                 * @param  {qtek.Scene} scene
                                 * @param  {qtek.Camera} sceneCamera
                                 * @param  {boolean} [notUpdateScene=false]
                                 * @memberOf qtek.prePass.ShadowMap.prototype
                                 */
                                render: function(renderer, scene, sceneCamera, notUpdateScene) {
                                    this.trigger('beforerender', this, renderer, scene, sceneCamera);
                                    this._renderShadowPass(renderer, scene, sceneCamera, notUpdateScene);
                                    this.trigger('afterrender', this, renderer, scene, sceneCamera);
                                },

                                /**
                                 * Debug rendering of shadow textures
                                 * @param  {qtek.Renderer} renderer
                                 * @param  {number} size
                                 * @memberOf qtek.prePass.ShadowMap.prototype
                                 */
                                renderDebug: function(renderer, size) {
                                    renderer.saveClear();
                                    var viewport = renderer.viewport;
                                    var x = 0,
                                        y = 0;
                                    var width = size || viewport.width / 4;
                                    var height = width;
                                    if (this.softShadow === ShadowMapPass.VSM) {
                                        this._outputDepthPass.material.shader.define('fragment', 'USE_VSM');
                                    } else {
                                        this._outputDepthPass.material.shader.undefine('fragment', 'USE_VSM');
                                    }
                                    for (var name in this._textures) {
                                        var texture = this._textures[name];
                                        renderer.setViewport(x, y, width * texture.width / texture.height, height);
                                        this._outputDepthPass.setUniform('depthMap', texture);
                                        this._outputDepthPass.render(renderer);
                                        x += width * texture.width / texture.height;
                                    }
                                    renderer.setViewport(viewport);
                                    renderer.restoreClear();
                                },

                                _bindDepthMaterial: function(casters, bias, slopeScale) {
                                    for (var i = 0; i < casters.length; i++) {
                                        var mesh = casters[i];
                                        var isShadowTransparent = mesh.material.shadowTransparentMap instanceof src_Texture2D;
                                        var transparentMap = mesh.material.shadowTransparentMap;
                                        var nJoints = mesh.joints && mesh.joints.length;
                                        var matHashKey;
                                        var shaderHashKey;
                                        if (isShadowTransparent) {
                                            matHashKey = nJoints + '-' + transparentMap.__GUID__;
                                            shaderHashKey = nJoints + '-t';
                                        } else {
                                            matHashKey = nJoints;
                                            shaderHashKey = nJoints;
                                        }
                                        if (mesh.useSkinMatricesTexture) {
                                            matHashKey += '-s';
                                            shaderHashKey += '-s';
                                        }
                                        // Use custom shadow depth material
                                        var depthMaterial = mesh.shadowDepthMaterial || this._depthMaterials[matHashKey];
                                        var depthShader = mesh.shadowDepthMaterial ? mesh.shadowDepthMaterial.shader : this._depthShaders[shaderHashKey];

                                        if (mesh.material !== depthMaterial) { // Not binded yet
                                            if (!depthShader) {
                                                depthShader = new src_Shader({
                                                    vertex: src_Shader.source('qtek.sm.depth.vertex'),
                                                    fragment: src_Shader.source('qtek.sm.depth.fragment'),
                                                    precision: this.precision
                                                });
                                                if (nJoints > 0) {
                                                    depthShader.define('vertex', 'SKINNING');
                                                    depthShader.define('vertex', 'JOINT_COUNT', nJoints);
                                                }
                                                if (isShadowTransparent) {
                                                    depthShader.define('both', 'SHADOW_TRANSPARENT');
                                                }
                                                if (mesh.useSkinMatricesTexture) {
                                                    depthShader.define('vertex', 'USE_SKIN_MATRICES_TEXTURE');
                                                }
                                                this._depthShaders[shaderHashKey] = depthShader;
                                            }
                                            if (!depthMaterial) {
                                                // Skinned mesh
                                                depthMaterial = new src_Material({
                                                    shader: depthShader
                                                });
                                                this._depthMaterials[matHashKey] = depthMaterial;
                                            }

                                            mesh.material = depthMaterial;

                                            if (this.softShadow === ShadowMapPass.VSM) {
                                                depthShader.define('fragment', 'USE_VSM');
                                            } else {
                                                depthShader.undefine('fragment', 'USE_VSM');
                                            }

                                            depthMaterial.setUniform('bias', bias);
                                            depthMaterial.setUniform('slopeScale', slopeScale);
                                            if (isShadowTransparent) {
                                                depthMaterial.set('shadowTransparentMap', transparentMap);
                                            }
                                        }
                                    }
                                },

                                _bindDistanceMaterial: function(casters, light) {
                                    var lightPosition = light.getWorldPosition()._array;
                                    for (var i = 0; i < casters.length; i++) {
                                        var mesh = casters[i];
                                        var nJoints = mesh.joints && mesh.joints.length;
                                        var distanceMaterial = this._distanceMaterials[nJoints];
                                        if (mesh.material !== distanceMaterial) {
                                            if (!distanceMaterial) {
                                                // Skinned mesh
                                                distanceMaterial = new src_Material({
                                                    shader: new src_Shader({
                                                        vertex: src_Shader.source('qtek.sm.distance.vertex'),
                                                        fragment: src_Shader.source('qtek.sm.distance.fragment'),
                                                        precision: this.precision
                                                    })
                                                });
                                                if (nJoints > 0) {
                                                    distanceMaterial.shader.define('vertex', 'SKINNING');
                                                    distanceMaterial.shader.define('vertex', 'JOINT_COUNT', nJoints);
                                                }
                                                this._distanceMaterials[nJoints] = distanceMaterial;
                                            }
                                            mesh.material = distanceMaterial;

                                            if (this.softShadow === ShadowMapPass.VSM) {
                                                distanceMaterial.shader.define('fragment', 'USE_VSM');
                                            } else {
                                                distanceMaterial.shader.undefine('fragment', 'USE_VSM');
                                            }
                                        }

                                        distanceMaterial.set('lightPosition', lightPosition);
                                        distanceMaterial.set('range', light.range);
                                    }
                                },

                                saveMaterial: function(casters) {
                                    for (var i = 0; i < casters.length; i++) {
                                        var mesh = casters[i];
                                        this._meshMaterials[mesh.__GUID__] = mesh.material;
                                    }
                                },

                                restoreMaterial: function(casters) {
                                    for (var i = 0; i < casters.length; i++) {
                                        var mesh = casters[i];
                                        var material = this._meshMaterials[mesh.__GUID__];
                                        // In case restoreMaterial when no shadowMap is rendered
                                        if (material) {
                                            mesh.material = material;
                                        }
                                    }
                                },

                                _updateCasterAndReceiver: function(renderer, mesh) {
                                    if (mesh.castShadow) {
                                        this._opaqueCasters.push(mesh);
                                    }
                                    if (mesh.receiveShadow) {
                                        this._receivers.push(mesh);
                                        mesh.material.set('shadowEnabled', 1);

                                        mesh.material.set('pcfKernel', this.kernelPCF);
                                    } else {
                                        mesh.material.set('shadowEnabled', 0);
                                    }

                                    if (!mesh.material.shader && mesh.material.updateShader) {
                                        mesh.material.updateShader(renderer);
                                    }
                                    var shader = mesh.material.shader;
                                    if (this.softShadow === ShadowMapPass.VSM) {
                                        shader.define('fragment', 'USE_VSM');
                                        shader.undefine('fragment', 'PCF_KERNEL_SIZE');
                                    } else {
                                        shader.undefine('fragment', 'USE_VSM');
                                        var kernelPCF = this.kernelPCF;
                                        if (kernelPCF && kernelPCF.length) {
                                            shader.define('fragment', 'PCF_KERNEL_SIZE', kernelPCF.length / 2);
                                        } else {
                                            shader.undefine('fragment', 'PCF_KERNEL_SIZE');
                                        }
                                    }
                                },

                                _update: function(renderer, scene) {
                                    for (var i = 0; i < scene.opaqueQueue.length; i++) {
                                        this._updateCasterAndReceiver(renderer, scene.opaqueQueue[i]);
                                    }
                                    for (var i = 0; i < scene.transparentQueue.length; i++) {
                                        // TODO Transparent object receive shadow will be very slow
                                        // in stealth demo, still not find the reason
                                        this._updateCasterAndReceiver(renderer, scene.transparentQueue[i]);
                                    }
                                    for (var i = 0; i < scene.lights.length; i++) {
                                        var light = scene.lights[i];
                                        if (light.castShadow) {
                                            this._lightsCastShadow.push(light);
                                        }
                                    }
                                },

                                _renderShadowPass: function(renderer, scene, sceneCamera, notUpdateScene) {
                                    // reset
                                    for (var name in this._shadowMapNumber) {
                                        this._shadowMapNumber[name] = 0;
                                    }
                                    this._lightsCastShadow.length = 0;
                                    this._opaqueCasters.length = 0;
                                    this._receivers.length = 0;

                                    var _gl = renderer.gl;

                                    if (!notUpdateScene) {
                                        scene.update();
                                    }
                                    if (sceneCamera) {
                                        sceneCamera.update();
                                    }

                                    this._update(renderer, scene);

                                    // Needs to update the receivers again if shadows come from 1 to 0.
                                    if (!this._lightsCastShadow.length && this._lastRenderNotCastShadow) {
                                        return;
                                    }

                                    this._lastRenderNotCastShadow = this._lightsCastShadow === 0;

                                    _gl.enable(_gl.DEPTH_TEST);
                                    _gl.depthMask(true);
                                    _gl.disable(_gl.BLEND);

                                    // Clear with high-z, so the part not rendered will not been shadowed
                                    // TODO
                                    // TODO restore
                                    _gl.clearColor(1.0, 1.0, 1.0, 1.0);

                                    // Shadow uniforms
                                    var spotLightShadowMaps = [];
                                    var spotLightMatrices = [];
                                    var directionalLightShadowMaps = [];
                                    var directionalLightMatrices = [];
                                    var shadowCascadeClips = [];
                                    var pointLightShadowMaps = [];

                                    this.saveMaterial(this._opaqueCasters);

                                    var dirLightHasCascade;
                                    // Create textures for shadow map
                                    for (var i = 0; i < this._lightsCastShadow.length; i++) {
                                        var light = this._lightsCastShadow[i];
                                        if (light instanceof Directional) {

                                            if (dirLightHasCascade) {
                                                console.warn('Only one dire light supported with shadow cascade');
                                                continue;
                                            }
                                            if (light.shadowCascade > 1) {
                                                dirLightHasCascade = light;

                                                if (light.shadowCascade > 4) {
                                                    console.warn('Support at most 4 cascade');
                                                    continue;
                                                }
                                            }

                                            this.renderDirectionalLightShadow(
                                                renderer,
                                                scene,
                                                sceneCamera,
                                                light,
                                                this._opaqueCasters,
                                                shadowCascadeClips,
                                                directionalLightMatrices,
                                                directionalLightShadowMaps
                                            );
                                        } else if (light instanceof Spot) {
                                            this.renderSpotLightShadow(
                                                renderer,
                                                light,
                                                this._opaqueCasters,
                                                spotLightMatrices,
                                                spotLightShadowMaps
                                            );
                                        } else if (light instanceof Point) {
                                            this.renderPointLightShadow(
                                                renderer,
                                                light,
                                                this._opaqueCasters,
                                                pointLightShadowMaps
                                            );
                                        }

                                        this._shadowMapNumber[light.type]++;
                                    }
                                    this.restoreMaterial(this._opaqueCasters);

                                    var shadowCascadeClipsNear = shadowCascadeClips.slice();
                                    var shadowCascadeClipsFar = shadowCascadeClips.slice();
                                    shadowCascadeClipsNear.pop();
                                    shadowCascadeClipsFar.shift();

                                    // Iterate from far to near
                                    shadowCascadeClipsNear.reverse();
                                    shadowCascadeClipsFar.reverse();
                                    // directionalLightShadowMaps.reverse();
                                    directionalLightMatrices.reverse();

                                    function getSize(texture) {
                                        return texture.height;
                                    }
                                    var spotLightShadowMapSizes = spotLightShadowMaps.map(getSize);
                                    var directionalLightShadowMapSizes = directionalLightShadowMaps.map(getSize);

                                    var shadowDefineUpdatedShader = {};

                                    for (var i = 0; i < this._receivers.length; i++) {
                                        var mesh = this._receivers[i];
                                        var material = mesh.material;

                                        var shader = material.shader;

                                        if (!shadowDefineUpdatedShader[shader.__GUID__]) {
                                            var shaderNeedsUpdate = false;
                                            for (var lightType in this._shadowMapNumber) {
                                                var number = this._shadowMapNumber[lightType];
                                                var key = lightType + '_SHADOWMAP_COUNT';

                                                if (shader.fragmentDefines[key] !== number) {
                                                    if (number > 0) {
                                                        shader.fragmentDefines[key] = number;
                                                        shaderNeedsUpdate = true;
                                                    } else if (shader.isDefined('fragment', key)) {
                                                        shader.undefine('fragment', key);
                                                        shaderNeedsUpdate = true;
                                                    }
                                                }
                                            }
                                            if (shaderNeedsUpdate) {
                                                shader.dirty();
                                            }
                                            if (dirLightHasCascade) {
                                                shader.define('fragment', 'SHADOW_CASCADE', dirLightHasCascade.shadowCascade);
                                            } else {
                                                shader.undefine('fragment', 'SHADOW_CASCADE');
                                            }
                                            shadowDefineUpdatedShader[shader.__GUID__] = true;
                                        }

                                        if (spotLightShadowMaps.length > 0) {
                                            material.setUniform('spotLightShadowMaps', spotLightShadowMaps);
                                            material.setUniform('spotLightMatrices', spotLightMatrices);
                                            material.setUniform('spotLightShadowMapSizes', spotLightShadowMapSizes);
                                        }
                                        if (directionalLightShadowMaps.length > 0) {
                                            material.setUniform('directionalLightShadowMaps', directionalLightShadowMaps);
                                            if (dirLightHasCascade) {
                                                material.setUniform('shadowCascadeClipsNear', shadowCascadeClipsNear);
                                                material.setUniform('shadowCascadeClipsFar', shadowCascadeClipsFar);
                                            }
                                            material.setUniform('directionalLightMatrices', directionalLightMatrices);
                                            material.setUniform('directionalLightShadowMapSizes', directionalLightShadowMapSizes);
                                        }
                                        if (pointLightShadowMaps.length > 0) {
                                            material.setUniform('pointLightShadowMaps', pointLightShadowMaps);
                                        }
                                    }
                                },

                                renderDirectionalLightShadow: (function() {

                                    var splitFrustum = new math_Frustum();
                                    var splitProjMatrix = new math_Matrix4();
                                    var cropBBox = new math_BoundingBox();
                                    var cropMatrix = new math_Matrix4();
                                    var lightViewMatrix = new math_Matrix4();
                                    var lightViewProjMatrix = new math_Matrix4();
                                    var lightProjMatrix = new math_Matrix4();

                                    return function(renderer, scene, sceneCamera, light, casters, shadowCascadeClips, directionalLightMatrices, directionalLightShadowMaps) {

                                        var shadowBias = light.shadowBias;
                                        this._bindDepthMaterial(casters, shadowBias, light.shadowSlopeScale);

                                        casters.sort(src_Renderer.opaqueSortFunc);

                                        // First frame
                                        if (!scene.viewBoundingBoxLastFrame.isFinite()) {
                                            var boundingBox = scene.getBoundingBox();
                                            scene.viewBoundingBoxLastFrame
                                                .copy(boundingBox).applyTransform(sceneCamera.viewMatrix);
                                        }
                                        // Considering moving speed since the bounding box is from last frame
                                        // TODO: add a bias
                                        var clippedFar = Math.min(-scene.viewBoundingBoxLastFrame.min.z, sceneCamera.far);
                                        var clippedNear = Math.max(-scene.viewBoundingBoxLastFrame.max.z, sceneCamera.near);

                                        var lightCamera = this._getDirectionalLightCamera(light, scene, sceneCamera);

                                        var lvpMat4Arr = lightViewProjMatrix._array;
                                        lightProjMatrix.copy(lightCamera.projectionMatrix);
                                        ShadowMap_mat4.invert(lightViewMatrix._array, lightCamera.worldTransform._array);
                                        ShadowMap_mat4.multiply(lightViewMatrix._array, lightViewMatrix._array, sceneCamera.worldTransform._array);
                                        ShadowMap_mat4.multiply(lvpMat4Arr, lightProjMatrix._array, lightViewMatrix._array);

                                        var clipPlanes = [];
                                        var isPerspective = sceneCamera instanceof camera_Perspective;

                                        var scaleZ = (sceneCamera.near + sceneCamera.far) / (sceneCamera.near - sceneCamera.far);
                                        var offsetZ = 2 * sceneCamera.near * sceneCamera.far / (sceneCamera.near - sceneCamera.far);
                                        for (var i = 0; i <= light.shadowCascade; i++) {
                                            var clog = clippedNear * Math.pow(clippedFar / clippedNear, i / light.shadowCascade);
                                            var cuni = clippedNear + (clippedFar - clippedNear) * i / light.shadowCascade;
                                            var c = clog * light.cascadeSplitLogFactor + cuni * (1 - light.cascadeSplitLogFactor);
                                            clipPlanes.push(c);
                                            shadowCascadeClips.push(-(-c * scaleZ + offsetZ) / -c);
                                        }
                                        var texture = this._getTexture(light, light.shadowCascade);
                                        directionalLightShadowMaps.push(texture);

                                        var viewport = renderer.viewport;

                                        var _gl = renderer.gl;
                                        this._frameBuffer.attach(texture);
                                        this._frameBuffer.bind(renderer);
                                        _gl.clear(_gl.COLOR_BUFFER_BIT | _gl.DEPTH_BUFFER_BIT);

                                        for (var i = 0; i < light.shadowCascade; i++) {
                                            // Get the splitted frustum
                                            var nearPlane = clipPlanes[i];
                                            var farPlane = clipPlanes[i + 1];
                                            if (isPerspective) {
                                                ShadowMap_mat4.perspective(splitProjMatrix._array, sceneCamera.fov / 180 * Math.PI, sceneCamera.aspect, nearPlane, farPlane);
                                            } else {
                                                ShadowMap_mat4.ortho(
                                                    splitProjMatrix._array,
                                                    sceneCamera.left, sceneCamera.right, sceneCamera.bottom, sceneCamera.top,
                                                    nearPlane, farPlane
                                                );
                                            }
                                            splitFrustum.setFromProjection(splitProjMatrix);
                                            splitFrustum.getTransformedBoundingBox(cropBBox, lightViewMatrix);
                                            cropBBox.applyProjection(lightProjMatrix);
                                            var _min = cropBBox.min._array;
                                            var _max = cropBBox.max._array;
                                            _min[0] = Math.max(_min[0], -1);
                                            _min[1] = Math.max(_min[1], -1);
                                            _max[0] = Math.min(_max[0], 1);
                                            _max[1] = Math.min(_max[1], 1);
                                            cropMatrix.ortho(_min[0], _max[0], _min[1], _max[1], 1, -1);
                                            lightCamera.projectionMatrix.multiplyLeft(cropMatrix);

                                            var shadowSize = light.shadowResolution || 512;

                                            // Reversed, left to right => far to near
                                            renderer.setViewport((light.shadowCascade - i - 1) * shadowSize, 0, shadowSize, shadowSize, 1);

                                            // Set bias seperately for each cascade
                                            // TODO Simply divide 1.5 ?
                                            for (var key in this._depthMaterials) {
                                                this._depthMaterials[key].set('shadowBias', shadowBias);
                                            }

                                            renderer.renderQueue(casters, lightCamera);

                                            // Filter for VSM
                                            if (this.softShadow === ShadowMapPass.VSM) {
                                                this._gaussianFilter(renderer, texture, texture.width);
                                            }

                                            var matrix = new math_Matrix4();
                                            matrix.copy(lightCamera.viewMatrix)
                                                .multiplyLeft(lightCamera.projectionMatrix);

                                            directionalLightMatrices.push(matrix._array);

                                            lightCamera.projectionMatrix.copy(lightProjMatrix);
                                        }

                                        this._frameBuffer.unbind(renderer);

                                        renderer.setViewport(viewport);
                                    };
                                })(),

                                renderSpotLightShadow: function(renderer, light, casters, spotLightMatrices, spotLightShadowMaps) {

                                    this._bindDepthMaterial(casters, light.shadowBias, light.shadowSlopeScale);
                                    casters.sort(src_Renderer.opaqueSortFunc);

                                    var texture = this._getTexture(light);
                                    var camera = this._getSpotLightCamera(light);
                                    var _gl = renderer.gl;

                                    this._frameBuffer.attach(texture);
                                    this._frameBuffer.bind(renderer);

                                    _gl.clear(_gl.COLOR_BUFFER_BIT | _gl.DEPTH_BUFFER_BIT);

                                    renderer.renderQueue(casters, camera);

                                    this._frameBuffer.unbind(renderer);

                                    // Filter for VSM
                                    if (this.softShadow === ShadowMapPass.VSM) {
                                        this._gaussianFilter(renderer, texture, texture.width);
                                    }

                                    var matrix = new math_Matrix4();
                                    matrix.copy(camera.worldTransform)
                                        .invert()
                                        .multiplyLeft(camera.projectionMatrix);

                                    spotLightShadowMaps.push(texture);
                                    spotLightMatrices.push(matrix._array);
                                },

                                renderPointLightShadow: function(renderer, light, casters, pointLightShadowMaps) {
                                    var texture = this._getTexture(light);
                                    var _gl = renderer.gl;
                                    pointLightShadowMaps.push(texture);

                                    this._bindDistanceMaterial(casters, light);
                                    for (var i = 0; i < 6; i++) {
                                        var target = ShadowMap_targets[i];
                                        var camera = this._getPointLightCamera(light, target);

                                        this._frameBuffer.attach(texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);
                                        this._frameBuffer.bind(renderer);
                                        _gl.clear(_gl.COLOR_BUFFER_BIT | _gl.DEPTH_BUFFER_BIT);

                                        renderer.renderQueue(casters, camera);
                                    }
                                    this._frameBuffer.unbind(renderer);
                                },

                                _gaussianFilter: function(renderer, texture, size) {
                                    var parameter = {
                                        width: size,
                                        height: size,
                                        type: src_Texture.FLOAT
                                    };
                                    var _gl = renderer.gl;
                                    var tmpTexture = this._texturePool.get(parameter);

                                    this._frameBuffer.attach(tmpTexture);
                                    this._frameBuffer.bind(renderer);
                                    this._gaussianPassH.setUniform('texture', texture);
                                    this._gaussianPassH.setUniform('textureWidth', size);
                                    this._gaussianPassH.render(renderer);

                                    this._frameBuffer.attach(texture);
                                    this._gaussianPassV.setUniform('texture', tmpTexture);
                                    this._gaussianPassV.setUniform('textureHeight', size);
                                    this._gaussianPassV.render(renderer);
                                    this._frameBuffer.unbind(renderer);

                                    this._texturePool.put(tmpTexture);
                                },

                                _getTexture: function(light, cascade) {
                                    var key = light.__GUID__;
                                    var texture = this._textures[key];
                                    var resolution = light.shadowResolution || 512;
                                    cascade = cascade || 1;
                                    if (!texture) {
                                        if (light instanceof Point) {
                                            texture = new src_TextureCube();
                                        } else {
                                            texture = new src_Texture2D();
                                        }
                                        // At most 4 cascade
                                        // TODO share with height ?
                                        texture.width = resolution * cascade;
                                        texture.height = resolution;
                                        if (this.softShadow === ShadowMapPass.VSM) {
                                            texture.type = src_Texture.FLOAT;
                                            texture.anisotropic = 4;
                                        } else {
                                            texture.minFilter = glenum.NEAREST;
                                            texture.magFilter = glenum.NEAREST;
                                            texture.useMipmap = false;
                                        }
                                        this._textures[key] = texture;
                                    }

                                    return texture;
                                },

                                _getPointLightCamera: function(light, target) {
                                    if (!this._lightCameras.point) {
                                        this._lightCameras.point = {
                                            px: new camera_Perspective(),
                                            nx: new camera_Perspective(),
                                            py: new camera_Perspective(),
                                            ny: new camera_Perspective(),
                                            pz: new camera_Perspective(),
                                            nz: new camera_Perspective()
                                        };
                                    }
                                    var camera = this._lightCameras.point[target];

                                    camera.far = light.range;
                                    camera.fov = 90;
                                    camera.position.set(0, 0, 0);
                                    switch (target) {
                                        case 'px':
                                            camera.lookAt(math_Vector3.POSITIVE_X, math_Vector3.NEGATIVE_Y);
                                            break;
                                        case 'nx':
                                            camera.lookAt(math_Vector3.NEGATIVE_X, math_Vector3.NEGATIVE_Y);
                                            break;
                                        case 'py':
                                            camera.lookAt(math_Vector3.POSITIVE_Y, math_Vector3.POSITIVE_Z);
                                            break;
                                        case 'ny':
                                            camera.lookAt(math_Vector3.NEGATIVE_Y, math_Vector3.NEGATIVE_Z);
                                            break;
                                        case 'pz':
                                            camera.lookAt(math_Vector3.POSITIVE_Z, math_Vector3.NEGATIVE_Y);
                                            break;
                                        case 'nz':
                                            camera.lookAt(math_Vector3.NEGATIVE_Z, math_Vector3.NEGATIVE_Y);
                                            break;
                                    }
                                    light.getWorldPosition(camera.position);
                                    camera.update();

                                    return camera;
                                },

                                _getDirectionalLightCamera: (function() {
                                    var lightViewMatrix = new math_Matrix4();
                                    var sceneViewBoundingBox = new math_BoundingBox();
                                    var lightViewBBox = new math_BoundingBox();
                                    // Camera of directional light will be adjusted
                                    // to contain the view frustum and scene bounding box as tightly as possible
                                    return function(light, scene, sceneCamera) {
                                        if (!this._lightCameras.directional) {
                                            this._lightCameras.directional = new camera_Orthographic();
                                        }
                                        var camera = this._lightCameras.directional;

                                        sceneViewBoundingBox.copy(scene.viewBoundingBoxLastFrame);
                                        sceneViewBoundingBox.intersection(sceneCamera.frustum.boundingBox);
                                        // Move to the center of frustum(in world space)
                                        camera.position
                                            .copy(sceneViewBoundingBox.min)
                                            .add(sceneViewBoundingBox.max)
                                            .scale(0.5)
                                            .transformMat4(sceneCamera.worldTransform);
                                        camera.rotation.copy(light.rotation);
                                        camera.scale.copy(light.scale);
                                        camera.updateWorldTransform();

                                        // Transform to light view space
                                        math_Matrix4.invert(lightViewMatrix, camera.worldTransform);
                                        math_Matrix4.multiply(lightViewMatrix, lightViewMatrix, sceneCamera.worldTransform);

                                        lightViewBBox.copy(sceneViewBoundingBox).applyTransform(lightViewMatrix);

                                        var min = lightViewBBox.min._array;
                                        var max = lightViewBBox.max._array;

                                        // Move camera to adjust the near to 0
                                        camera.position.set((min[0] + max[0]) / 2, (min[1] + max[1]) / 2, max[2])
                                            .transformMat4(camera.worldTransform);
                                        camera.near = 0;
                                        camera.far = -min[2] + max[2];
                                        // Make sure receivers not in the frustum will stil receive the shadow.
                                        if (isNaN(this.lightFrustumBias)) {
                                            camera.far *= 4;
                                        } else {
                                            camera.far += this.lightFrustumBias;
                                        }
                                        camera.left = min[0];
                                        camera.right = max[0];
                                        camera.top = max[1];
                                        camera.bottom = min[1];
                                        camera.update(true);

                                        return camera;
                                    };
                                })(),

                                _getSpotLightCamera: function(light) {
                                    if (!this._lightCameras.spot) {
                                        this._lightCameras.spot = new camera_Perspective();
                                    }
                                    var camera = this._lightCameras.spot;
                                    // Update properties
                                    camera.fov = light.penumbraAngle * 2;
                                    camera.far = light.range;
                                    camera.worldTransform.copy(light.worldTransform);
                                    camera.updateProjectionMatrix();
                                    ShadowMap_mat4.invert(camera.viewMatrix._array, camera.worldTransform._array);

                                    return camera;
                                },

                                /**
                                 * @param  {qtek.Renderer|WebGLRenderingContext} [renderer]
                                 * @memberOf qtek.prePass.ShadowMap.prototype
                                 */
                                // PENDING Renderer or WebGLRenderingContext
                                dispose: function(renderer) {
                                    var _gl = renderer.gl || renderer;

                                    for (var guid in this._depthMaterials) {
                                        var mat = this._depthMaterials[guid];
                                        mat.dispose(_gl);
                                    }
                                    for (var guid in this._distanceMaterials) {
                                        var mat = this._distanceMaterials[guid];
                                        mat.dispose(_gl);
                                    }

                                    if (this._frameBuffer) {
                                        this._frameBuffer.dispose(_gl);
                                    }

                                    for (var name in this._textures) {
                                        this._textures[name].dispose(_gl);
                                    }

                                    this._texturePool.clear(renderer.gl);

                                    this._depthMaterials = {};
                                    this._distanceMaterials = {};
                                    this._textures = {};
                                    this._lightCameras = {};
                                    this._shadowMapNumber = {
                                        'POINT_LIGHT': 0,
                                        'DIRECTIONAL_LIGHT': 0,
                                        'SPOT_LIGHT': 0
                                    };
                                    this._meshMaterials = {};

                                    for (var i = 0; i < this._receivers.length; i++) {
                                        var mesh = this._receivers[i];
                                        // Mesh may be disposed
                                        if (mesh.material && mesh.material.shader) {
                                            var material = mesh.material;
                                            var shader = material.shader;
                                            shader.undefine('fragment', 'POINT_LIGHT_SHADOW_COUNT');
                                            shader.undefine('fragment', 'DIRECTIONAL_LIGHT_SHADOW_COUNT');
                                            shader.undefine('fragment', 'AMBIENT_LIGHT_SHADOW_COUNT');
                                            material.set('shadowEnabled', 0);
                                        }
                                    }

                                    this._opaqueCasters = [];
                                    this._receivers = [];
                                    this._lightsCastShadow = [];
                                }
                            });

                            /**
                             * @name qtek.prePass.ShadowMap.VSM
                             * @type {number}
                             */
                            ShadowMapPass.VSM = 1;

                            /**
                             * @name qtek.prePass.ShadowMap.PCF
                             * @type {number}
                             */
                            ShadowMapPass.PCF = 2;

                            /* harmony default export */
                            var ShadowMap = (ShadowMapPass);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/compositor/Node.js


                            // PENDING
                            // Use topological sort ?

                            /**
                             * Node of graph based post processing.
                             *
                             * @constructor qtek.compositor.Node
                             * @extends qtek.core.Base
                             *
                             */
                            var Node_Node = core_Base.extend(function() {
                                    return /** @lends qtek.compositor.Node# */ {
                                        /**
                                         * @type {string}
                                         */
                                        name: '',

                                        /**
                                         * Input links, will be updated by the graph
                                         * @example:
                                         *     inputName: {
                                         *         node: someNode,
                                         *         pin: 'xxxx'
                                         *     }
                                         * @type {Object}
                                         */
                                        inputLinks: {},

                                        /**
                                         * Output links, will be updated by the graph
                                         * @example:
                                         *     outputName: {
                                         *         node: someNode,
                                         *         pin: 'xxxx'
                                         *     }
                                         * @type {Object}
                                         */
                                        outputLinks: {},

                                        // Save the output texture of previous frame
                                        // Will be used when there exist a circular reference
                                        _prevOutputTextures: {},
                                        _outputTextures: {},

                                        // Example: { name: 2 }
                                        _outputReferences: {},

                                        _rendering: false,
                                        // If rendered in this frame
                                        _rendered: false,

                                        _compositor: null
                                    };
                                },
                                /** @lends qtek.compositor.Node.prototype */
                                {

                                    // TODO Remove parameter function callback
                                    updateParameter: function(outputName, renderer) {
                                        var outputInfo = this.outputs[outputName];
                                        var parameters = outputInfo.parameters;
                                        var parametersCopy = outputInfo._parametersCopy;
                                        if (!parametersCopy) {
                                            parametersCopy = outputInfo._parametersCopy = {};
                                        }
                                        if (parameters) {
                                            for (var key in parameters) {
                                                if (key !== 'width' && key !== 'height') {
                                                    parametersCopy[key] = parameters[key];
                                                }
                                            }
                                        }
                                        var width, height;
                                        if (parameters.width instanceof Function) {
                                            width = parameters.width.call(this, renderer);
                                        } else {
                                            width = parameters.width;
                                        }
                                        if (parameters.height instanceof Function) {
                                            height = parameters.height.call(this, renderer);
                                        } else {
                                            height = parameters.height;
                                        }
                                        if (
                                            parametersCopy.width !== width ||
                                            parametersCopy.height !== height
                                        ) {
                                            if (this._outputTextures[outputName]) {
                                                this._outputTextures[outputName].dispose(renderer.gl);
                                            }
                                        }
                                        parametersCopy.width = width;
                                        parametersCopy.height = height;

                                        return parametersCopy;
                                    },

                                    /**
                                     * Set parameter
                                     * @param {string} name
                                     * @param {} value
                                     */
                                    setParameter: function(name, value) {},
                                    /**
                                     * Get parameter value
                                     * @param  {string} name
                                     * @return {}
                                     */
                                    getParameter: function(name) {},
                                    /**
                                     * Set parameters
                                     * @param {Object} obj
                                     */
                                    setParameters: function(obj) {
                                        for (var name in obj) {
                                            this.setParameter(name, obj[name]);
                                        }
                                    },

                                    render: function() {},

                                    getOutput: function(renderer /*optional*/ , name) {
                                        if (name == null) {
                                            // Return the output texture without rendering
                                            name = renderer;
                                            return this._outputTextures[name];
                                        }
                                        var outputInfo = this.outputs[name];
                                        if (!outputInfo) {
                                            return;
                                        }

                                        // Already been rendered in this frame
                                        if (this._rendered) {
                                            // Force return texture in last frame
                                            if (outputInfo.outputLastFrame) {
                                                return this._prevOutputTextures[name];
                                            } else {
                                                return this._outputTextures[name];
                                            }
                                        } else if (
                                            // TODO
                                            this._rendering // Solve Circular Reference
                                        ) {
                                            if (!this._prevOutputTextures[name]) {
                                                // Create a blank texture at first pass
                                                this._prevOutputTextures[name] = this._compositor.allocateTexture(outputInfo.parameters || {});
                                            }
                                            return this._prevOutputTextures[name];
                                        }

                                        this.render(renderer);

                                        return this._outputTextures[name];
                                    },

                                    removeReference: function(outputName) {
                                        this._outputReferences[outputName]--;
                                        if (this._outputReferences[outputName] === 0) {
                                            var outputInfo = this.outputs[outputName];
                                            if (outputInfo.keepLastFrame) {
                                                if (this._prevOutputTextures[outputName]) {
                                                    this._compositor.releaseTexture(this._prevOutputTextures[outputName]);
                                                }
                                                this._prevOutputTextures[outputName] = this._outputTextures[outputName];
                                            } else {
                                                // Output of this node have alreay been used by all other nodes
                                                // Put the texture back to the pool.
                                                this._compositor.releaseTexture(this._outputTextures[outputName]);
                                            }
                                        }
                                    },

                                    link: function(inputPinName, fromNode, fromPinName) {

                                        // The relationship from output pin to input pin is one-on-multiple
                                        this.inputLinks[inputPinName] = {
                                            node: fromNode,
                                            pin: fromPinName
                                        };
                                        if (!fromNode.outputLinks[fromPinName]) {
                                            fromNode.outputLinks[fromPinName] = [];
                                        }
                                        fromNode.outputLinks[fromPinName].push({
                                            node: this,
                                            pin: inputPinName
                                        });

                                        // Enabled the pin texture in shader
                                        var shader = this.pass.material.shader;
                                        shader.enableTexture(inputPinName);
                                    },

                                    clear: function() {
                                        this.inputLinks = {};
                                        this.outputLinks = {};
                                    },

                                    updateReference: function(outputName) {
                                        if (!this._rendering) {
                                            this._rendering = true;
                                            for (var inputName in this.inputLinks) {
                                                var link = this.inputLinks[inputName];
                                                link.node.updateReference(link.pin);
                                            }
                                            this._rendering = false;
                                        }
                                        if (outputName) {
                                            this._outputReferences[outputName]++;
                                        }
                                    },

                                    beforeFrame: function() {
                                        this._rendered = false;

                                        for (var name in this.outputLinks) {
                                            this._outputReferences[name] = 0;
                                        }
                                    },

                                    afterFrame: function() {
                                        // Put back all the textures to pool
                                        for (var name in this.outputLinks) {
                                            if (this._outputReferences[name] > 0) {
                                                var outputInfo = this.outputs[name];
                                                if (outputInfo.keepLastFrame) {
                                                    if (this._prevOutputTextures[name]) {
                                                        this._compositor.releaseTexture(this._prevOutputTextures[name]);
                                                    }
                                                    this._prevOutputTextures[name] = this._outputTextures[name];
                                                } else {
                                                    this._compositor.releaseTexture(this._outputTextures[name]);
                                                }
                                            }
                                        }
                                    }
                                });

                            /* harmony default export */
                            var compositor_Node = (Node_Node);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/compositor/Graph.js



                            /**
                             * @constructor qtek.compositor.Graph
                             * @extends qtek.core.Base
                             */
                            var Graph = core_Base.extend(function() {
                                    return /** @lends qtek.compositor.Graph# */ {
                                        /**
                                         * @type {Array.<qtek.compositor.Node>}
                                         */
                                        nodes: []
                                    };
                                },
                                /** @lends qtek.compositor.Graph.prototype */
                                {

                                    /**
                                     * Mark to update
                                     */
                                    dirty: function() {
                                        this._dirty = true;
                                    },
                                    /**
                                     * @param {qtek.compositor.Node} node
                                     */
                                    addNode: function(node) {

                                        if (this.nodes.indexOf(node) >= 0) {
                                            return;
                                        }

                                        this.nodes.push(node);

                                        this._dirty = true;
                                    },
                                    /**
                                     * @param  {qtek.compositor.Node|string} node
                                     */
                                    removeNode: function(node) {
                                        if (typeof node === 'string') {
                                            node = this.getNodeByName(node);
                                        }
                                        var idx = this.nodes.indexOf(node);
                                        if (idx >= 0) {
                                            this.nodes.splice(idx, 1);
                                            this._dirty = true;
                                        }
                                    },
                                    /**
                                     * @param {string} name
                                     * @return {qtek.compositor.Node}
                                     */
                                    getNodeByName: function(name) {
                                        for (var i = 0; i < this.nodes.length; i++) {
                                            if (this.nodes[i].name === name) {
                                                return this.nodes[i];
                                            }
                                        }
                                    },
                                    /**
                                     * Update links of graph
                                     */
                                    update: function() {
                                        for (var i = 0; i < this.nodes.length; i++) {
                                            this.nodes[i].clear();
                                        }
                                        // Traverse all the nodes and build the graph
                                        for (var i = 0; i < this.nodes.length; i++) {
                                            var node = this.nodes[i];

                                            if (!node.inputs) {
                                                continue;
                                            }
                                            for (var inputName in node.inputs) {
                                                if (!node.inputs[inputName]) {
                                                    continue;
                                                }
                                                if (node.pass && !node.pass.material.isUniformEnabled(inputName)) {
                                                    console.warn('Pin ' + node.name + '.' + inputName + ' not used.');
                                                    continue;
                                                }
                                                var fromPinInfo = node.inputs[inputName];

                                                var fromPin = this.findPin(fromPinInfo);
                                                if (fromPin) {
                                                    node.link(inputName, fromPin.node, fromPin.pin);
                                                } else {
                                                    if (typeof fromPinInfo === 'string') {
                                                        console.warn('Node ' + fromPinInfo + ' not exist');
                                                    } else {
                                                        console.warn('Pin of ' + fromPinInfo.node + '.' + fromPinInfo.pin + ' not exist');
                                                    }
                                                }
                                            }
                                        }
                                    },

                                    findPin: function(input) {
                                        var node;
                                        // Try to take input as a directly a node
                                        if (typeof input === 'string' || input instanceof compositor_Node) {
                                            input = {
                                                node: input
                                            };
                                        }

                                        if (typeof input.node === 'string') {
                                            for (var i = 0; i < this.nodes.length; i++) {
                                                var tmp = this.nodes[i];
                                                if (tmp.name === input.node) {
                                                    node = tmp;
                                                }
                                            }
                                        } else {
                                            node = input.node;
                                        }
                                        if (node) {
                                            var inputPin = input.pin;
                                            if (!inputPin) {
                                                // Use first pin defaultly
                                                if (node.outputs) {
                                                    inputPin = Object.keys(node.outputs)[0];
                                                }
                                            }
                                            if (node.outputs[inputPin]) {
                                                return {
                                                    node: node,
                                                    pin: inputPin
                                                };
                                            }
                                        }
                                    }
                                });

                            /* harmony default export */
                            var compositor_Graph = (Graph);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/compositor/Compositor.js




                            /**
                             * Compositor provide graph based post processing
                             *
                             * @constructor qtek.compositor.Compositor
                             * @extends qtek.compositor.Graph
                             *
                             */
                            var Compositor = compositor_Graph.extend(function() {
                                    return {
                                        // Output node
                                        _outputs: [],

                                        _texturePool: new compositor_TexturePool(),

                                        _frameBuffer: new src_FrameBuffer({
                                            depthBuffer: false
                                        })
                                    };
                                },
                                /** @lends qtek.compositor.Compositor.prototype */
                                {
                                    addNode: function(node) {
                                        compositor_Graph.prototype.addNode.call(this, node);
                                        node._compositor = this;
                                    },
                                    /**
                                     * @param  {qtek.Renderer} renderer
                                     */
                                    render: function(renderer, frameBuffer) {
                                        if (this._dirty) {
                                            this.update();
                                            this._dirty = false;

                                            this._outputs.length = 0;
                                            for (var i = 0; i < this.nodes.length; i++) {
                                                if (!this.nodes[i].outputs) {
                                                    this._outputs.push(this.nodes[i]);
                                                }
                                            }
                                        }

                                        for (var i = 0; i < this.nodes.length; i++) {
                                            // Update the reference number of each output texture
                                            this.nodes[i].beforeFrame();
                                        }

                                        for (var i = 0; i < this._outputs.length; i++) {
                                            this._outputs[i].updateReference();
                                        }

                                        for (var i = 0; i < this._outputs.length; i++) {
                                            this._outputs[i].render(renderer, frameBuffer);
                                        }

                                        for (var i = 0; i < this.nodes.length; i++) {
                                            // Clear up
                                            this.nodes[i].afterFrame();
                                        }
                                    },

                                    allocateTexture: function(parameters) {
                                        return this._texturePool.get(parameters);
                                    },

                                    releaseTexture: function(parameters) {
                                        this._texturePool.put(parameters);
                                    },

                                    getFrameBuffer: function() {
                                        return this._frameBuffer;
                                    },

                                    /**
                                     * Dispose compositor
                                     * @param {qtek.Renderer} renderer
                                     */
                                    dispose: function(renderer) {
                                        this._texturePool.clear(renderer);
                                    }
                                });

                            /* harmony default export */
                            var compositor_Compositor = (Compositor);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/compositor/SceneNode.js




                            /**
                             * @constructor qtek.compositor.SceneNode
                             * @extends qtek.compositor.Node
                             */
                            var SceneNode = compositor_Node.extend(
                                /** @lends qtek.compositor.SceneNode# */
                                {
                                    name: 'scene',
                                    /**
                                     * @type {qtek.Scene}
                                     */
                                    scene: null,
                                    /**
                                     * @type {qtek.Camera}
                                     */
                                    camera: null,
                                    /**
                                     * @type {boolean}
                                     */
                                    autoUpdateScene: true,
                                    /**
                                     * @type {boolean}
                                     */
                                    preZ: false

                                },
                                function() {
                                    this.frameBuffer = new src_FrameBuffer();
                                }, {
                                    render: function(renderer) {

                                        this._rendering = true;
                                        var _gl = renderer.gl;

                                        this.trigger('beforerender');

                                        var renderInfo;

                                        if (!this.outputs) {

                                            renderInfo = renderer.render(this.scene, this.camera, !this.autoUpdateScene, this.preZ);

                                        } else {

                                            var frameBuffer = this.frameBuffer;
                                            for (var name in this.outputs) {
                                                var parameters = this.updateParameter(name, renderer);
                                                var outputInfo = this.outputs[name];
                                                var texture = this._compositor.allocateTexture(parameters);
                                                this._outputTextures[name] = texture;

                                                var attachment = outputInfo.attachment || _gl.COLOR_ATTACHMENT0;
                                                if (typeof(attachment) == 'string') {
                                                    attachment = _gl[attachment];
                                                }
                                                frameBuffer.attach(texture, attachment);
                                            }
                                            frameBuffer.bind(renderer);

                                            // MRT Support in chrome
                                            // https://www.khronos.org/registry/webgl/sdk/tests/conformance/extensions/ext-draw-buffers.html
                                            var ext = renderer.getGLExtension('EXT_draw_buffers');
                                            if (ext) {
                                                var bufs = [];
                                                for (var attachment in this.outputs) {
                                                    attachment = parseInt(attachment);
                                                    if (attachment >= _gl.COLOR_ATTACHMENT0 && attachment <= _gl.COLOR_ATTACHMENT0 + 8) {
                                                        bufs.push(attachment);
                                                    }
                                                }
                                                ext.drawBuffersEXT(bufs);
                                            }

                                            // Always clear
                                            // PENDING
                                            renderer.saveClear();
                                            renderer.clearBit = glenum.DEPTH_BUFFER_BIT | glenum.COLOR_BUFFER_BIT;
                                            renderInfo = renderer.render(this.scene, this.camera, !this.autoUpdateScene, this.preZ);
                                            renderer.restoreClear();

                                            frameBuffer.unbind(renderer);
                                        }

                                        this.trigger('afterrender', renderInfo);

                                        this._rendering = false;
                                        this._rendered = true;
                                    }
                                });

                            /* harmony default export */
                            var compositor_SceneNode = (SceneNode);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/compositor/TextureNode.js


                            /**
                             * @constructor qtek.compositor.TextureNode
                             * @extends qtek.compositor.Node
                             */
                            var TextureNode = compositor_Node.extend(function() {
                                return /** @lends qtek.compositor.TextureNode# */ {
                                    /**
                                     * @type {qtek.Texture2D}
                                     */
                                    texture: null,

                                    // Texture node must have output without parameters
                                    outputs: {
                                        color: {}
                                    }
                                };
                            }, function() {}, {

                                getOutput: function(renderer, name) {
                                    return this.texture;
                                },

                                // Do nothing
                                beforeFrame: function() {},
                                afterFrame: function() {}
                            });

                            /* harmony default export */
                            var compositor_TextureNode = (TextureNode);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/compositor/FilterNode.js
                            // TODO Shader library



                            // TODO curlnoise demo wrong

                            // PENDING
                            // Use topological sort ?

                            /**
                             * Filter node
                             *
                             * @constructor qtek.compositor.FilterNode
                             * @extends qtek.compositor.Node
                             *
                             * @example
                                var node = new qtek.compositor.Node({
                                    name: 'fxaa',
                                    shader: qtek.Shader.source('qtek.compositor.fxaa'),
                                    inputs: {
                                        texture: {
                                                node: 'scene',
                                                pin: 'color'
                                        }
                                    },
                                    // Multiple outputs is preserved for MRT support in WebGL2.0
                                    outputs: {
                                        color: {
                                            attachment: qtek.FrameBuffer.COLOR_ATTACHMENT0
                                            parameters: {
                                                format: qtek.Texture.RGBA,
                                                width: 512,
                                                height: 512
                                            },
                                            // Node will keep the RTT rendered in last frame
                                            keepLastFrame: true,
                                            // Force the node output the RTT rendered in last frame
                                            outputLastFrame: true
                                        }
                                    }
                                });
                                *
                                */
                            var FilterNode = compositor_Node.extend(function() {
                                    return /** @lends qtek.compositor.Node# */ {
                                        /**
                                         * @type {string}
                                         */
                                        name: '',

                                        /**
                                         * @type {Object}
                                         */
                                        inputs: {},

                                        /**
                                         * @type {Object}
                                         */
                                        outputs: null,

                                        /**
                                         * @type {string}
                                         */
                                        shader: '',

                                        /**
                                         * Input links, will be updated by the graph
                                         * @example:
                                         *     inputName: {
                                         *         node: someNode,
                                         *         pin: 'xxxx'
                                         *     }
                                         * @type {Object}
                                         */
                                        inputLinks: {},

                                        /**
                                         * Output links, will be updated by the graph
                                         * @example:
                                         *     outputName: {
                                         *         node: someNode,
                                         *         pin: 'xxxx'
                                         *     }
                                         * @type {Object}
                                         */
                                        outputLinks: {},

                                        /**
                                         * @type {qtek.compositor.Pass}
                                         */
                                        pass: null,

                                        // Save the output texture of previous frame
                                        // Will be used when there exist a circular reference
                                        _prevOutputTextures: {},
                                        _outputTextures: {},

                                        // Example: { name: 2 }
                                        _outputReferences: {},

                                        _rendering: false,
                                        // If rendered in this frame
                                        _rendered: false,

                                        _compositor: null
                                    };
                                }, function() {

                                    var pass = new compositor_Pass({
                                        fragment: this.shader
                                    });
                                    this.pass = pass;
                                },
                                /** @lends qtek.compositor.Node.prototype */
                                {
                                    /**
                                     * @param  {qtek.Renderer} renderer
                                     */
                                    render: function(renderer, frameBuffer) {
                                        this.trigger('beforerender', renderer);

                                        this._rendering = true;

                                        var _gl = renderer.gl;

                                        for (var inputName in this.inputLinks) {
                                            var link = this.inputLinks[inputName];
                                            var inputTexture = link.node.getOutput(renderer, link.pin);
                                            this.pass.setUniform(inputName, inputTexture);
                                        }
                                        // Output
                                        if (!this.outputs) {
                                            this.pass.outputs = null;

                                            this._compositor.getFrameBuffer().unbind(renderer);

                                            this.pass.render(renderer, frameBuffer);
                                        } else {
                                            this.pass.outputs = {};

                                            var attachedTextures = {};
                                            for (var name in this.outputs) {
                                                var parameters = this.updateParameter(name, renderer);
                                                if (isNaN(parameters.width)) {
                                                    this.updateParameter(name, renderer);
                                                }
                                                var outputInfo = this.outputs[name];
                                                var texture = this._compositor.allocateTexture(parameters);
                                                this._outputTextures[name] = texture;
                                                var attachment = outputInfo.attachment || _gl.COLOR_ATTACHMENT0;
                                                if (typeof(attachment) == 'string') {
                                                    attachment = _gl[attachment];
                                                }
                                                attachedTextures[attachment] = texture;
                                            }
                                            this._compositor.getFrameBuffer().bind(renderer);

                                            for (var attachment in attachedTextures) {
                                                // FIXME attachment changes in different nodes
                                                this._compositor.getFrameBuffer().attach(
                                                    attachedTextures[attachment], attachment
                                                );
                                            }

                                            this.pass.render(renderer);

                                            // Because the data of texture is changed over time,
                                            // Here update the mipmaps of texture each time after rendered;
                                            this._compositor.getFrameBuffer().updateMipmap(renderer.gl);
                                        }

                                        for (var inputName in this.inputLinks) {
                                            var link = this.inputLinks[inputName];
                                            link.node.removeReference(link.pin);
                                        }

                                        this._rendering = false;
                                        this._rendered = true;

                                        this.trigger('afterrender', renderer);
                                    },

                                    // TODO Remove parameter function callback
                                    updateParameter: function(outputName, renderer) {
                                        var outputInfo = this.outputs[outputName];
                                        var parameters = outputInfo.parameters;
                                        var parametersCopy = outputInfo._parametersCopy;
                                        if (!parametersCopy) {
                                            parametersCopy = outputInfo._parametersCopy = {};
                                        }
                                        if (parameters) {
                                            for (var key in parameters) {
                                                if (key !== 'width' && key !== 'height') {
                                                    parametersCopy[key] = parameters[key];
                                                }
                                            }
                                        }
                                        var width, height;
                                        if (parameters.width instanceof Function) {
                                            width = parameters.width.call(this, renderer);
                                        } else {
                                            width = parameters.width;
                                        }
                                        if (parameters.height instanceof Function) {
                                            height = parameters.height.call(this, renderer);
                                        } else {
                                            height = parameters.height;
                                        }
                                        if (
                                            parametersCopy.width !== width ||
                                            parametersCopy.height !== height
                                        ) {
                                            if (this._outputTextures[outputName]) {
                                                this._outputTextures[outputName].dispose(renderer);
                                            }
                                        }
                                        parametersCopy.width = width;
                                        parametersCopy.height = height;

                                        return parametersCopy;
                                    },

                                    /**
                                     * Set parameter
                                     * @param {string} name
                                     * @param {} value
                                     */
                                    setParameter: function(name, value) {
                                        this.pass.setUniform(name, value);
                                    },
                                    /**
                                     * Get parameter value
                                     * @param  {string} name
                                     * @return {}
                                     */
                                    getParameter: function(name) {
                                        return this.pass.getUniform(name);
                                    },
                                    /**
                                     * Set parameters
                                     * @param {Object} obj
                                     */
                                    setParameters: function(obj) {
                                        for (var name in obj) {
                                            this.setParameter(name, obj[name]);
                                        }
                                    },
                                    /**
                                     * Set shader code
                                     * @param {string} shaderStr
                                     */
                                    setShader: function(shaderStr) {
                                        var material = this.pass.material;
                                        material.shader.setFragment(shaderStr);
                                        material.attachShader(material.shader, true);
                                    },
                                    /**
                                     * Proxy of pass.material.shader.define('fragment', xxx);
                                     * @param  {string} symbol
                                     * @param  {number} [val]
                                     */
                                    shaderDefine: function(symbol, val) {
                                        this.pass.material.shader.define('fragment', symbol, val);
                                    },

                                    /**
                                     * Proxy of pass.material.shader.undefine('fragment', xxx)
                                     * @param  {string} symbol
                                     */
                                    shaderUndefine: function(symbol) {
                                        this.pass.material.shader.undefine('fragment', symbol);
                                    },

                                    removeReference: function(outputName) {
                                        this._outputReferences[outputName]--;
                                        if (this._outputReferences[outputName] === 0) {
                                            var outputInfo = this.outputs[outputName];
                                            if (outputInfo.keepLastFrame) {
                                                if (this._prevOutputTextures[outputName]) {
                                                    this._compositor.releaseTexture(this._prevOutputTextures[outputName]);
                                                }
                                                this._prevOutputTextures[outputName] = this._outputTextures[outputName];
                                            } else {
                                                // Output of this node have alreay been used by all other nodes
                                                // Put the texture back to the pool.
                                                this._compositor.releaseTexture(this._outputTextures[outputName]);
                                            }
                                        }
                                    },

                                    link: function(inputPinName, fromNode, fromPinName) {

                                        // The relationship from output pin to input pin is one-on-multiple
                                        this.inputLinks[inputPinName] = {
                                            node: fromNode,
                                            pin: fromPinName
                                        };
                                        if (!fromNode.outputLinks[fromPinName]) {
                                            fromNode.outputLinks[fromPinName] = [];
                                        }
                                        fromNode.outputLinks[fromPinName].push({
                                            node: this,
                                            pin: inputPinName
                                        });

                                        // Enabled the pin texture in shader
                                        var shader = this.pass.material.shader;
                                        shader.enableTexture(inputPinName);
                                    },

                                    clear: function() {
                                        compositor_Node.prototype.clear.call(this);

                                        var shader = this.pass.material.shader;
                                        // Default disable all texture
                                        shader.disableTexturesAll();
                                    },

                                    updateReference: function(outputName) {
                                        if (!this._rendering) {
                                            this._rendering = true;
                                            for (var inputName in this.inputLinks) {
                                                var link = this.inputLinks[inputName];
                                                link.node.updateReference(link.pin);
                                            }
                                            this._rendering = false;
                                        }
                                        if (outputName) {
                                            this._outputReferences[outputName]++;
                                        }
                                    },

                                    beforeFrame: function() {
                                        this._rendered = false;

                                        for (var name in this.outputLinks) {
                                            this._outputReferences[name] = 0;
                                        }
                                    },

                                    afterFrame: function() {
                                        // Put back all the textures to pool
                                        for (var name in this.outputLinks) {
                                            if (this._outputReferences[name] > 0) {
                                                var outputInfo = this.outputs[name];
                                                if (outputInfo.keepLastFrame) {
                                                    if (this._prevOutputTextures[name]) {
                                                        this._compositor.releaseTexture(this._prevOutputTextures[name]);
                                                    }
                                                    this._prevOutputTextures[name] = this._outputTextures[name];
                                                } else {
                                                    this._compositor.releaseTexture(this._outputTextures[name]);
                                                }
                                            }
                                        }
                                    }
                                });

                            /* harmony default export */
                            var compositor_FilterNode = (FilterNode);

                            // CONCATENATED MODULE: ./node_modules/qtek/src/loader/FX.js













                            var shaderSourceReg = /#source\((.*?)\)/;
                            var urlReg = /#url\((.*?)\)/;

                            /**
                             * @constructor qtek.loader.FX
                             * @extends qtek.core.Base
                             */
                            var FXLoader = core_Base.extend(
                                /** @lends qtek.loader.FX# */
                                {
                                    /**
                                     * @type {string}
                                     */
                                    rootPath: '',
                                    /**
                                     * @type {string}
                                     */
                                    textureRootPath: '',
                                    /**
                                     * @type {string}
                                     */
                                    shaderRootPath: '',

                                    /**
                                     * @type {qtek.Scene}
                                     */
                                    scene: null,

                                    /**
                                     * @type {qtek.Camera}
                                     */
                                    camera: null
                                },
                                /** @lends qtek.loader.FX.prototype */
                                {
                                    /**
                                     * @param  {string} url
                                     */
                                    load: function(url) {
                                        var self = this;

                                        if (!this.rootPath) {
                                            this.rootPath = url.slice(0, url.lastIndexOf('/'));
                                        }

                                        request.get({
                                            url: url,
                                            onprogress: function(percent, loaded, total) {
                                                self.trigger('progress', percent, loaded, total);
                                            },
                                            onerror: function(e) {
                                                self.trigger('error', e);
                                            },
                                            responseType: 'text',
                                            onload: function(data) {
                                                self.parse(JSON.parse(data));
                                            }
                                        });
                                    },

                                    /**
                                     * @param {Object} json
                                     * @return {qtek.compositor.Compositor}
                                     */
                                    parse: function(json) {
                                        var self = this;
                                        var compositor = new compositor_Compositor();

                                        var lib = {
                                            textures: {},
                                            shaders: {},
                                            parameters: {}
                                        };
                                        var afterLoad = function(shaderLib, textureLib) {
                                            for (var i = 0; i < json.nodes.length; i++) {
                                                var nodeInfo = json.nodes[i];
                                                var node = self._createNode(nodeInfo, lib);
                                                if (node) {
                                                    compositor.addNode(node);
                                                }
                                            }

                                            self.trigger('success', compositor);
                                        };

                                        for (var name in json.parameters) {
                                            var paramInfo = json.parameters[name];
                                            lib.parameters[name] = this._convertParameter(paramInfo);
                                        }
                                        this._loadShaders(json, function(shaderLib) {
                                            // TODO load texture asynchronous
                                            self._loadTextures(json, lib, function(textureLib) {
                                                lib.textures = textureLib;
                                                lib.shaders = shaderLib;
                                                afterLoad();
                                            });
                                        });

                                        return compositor;
                                    },

                                    _createNode: function(nodeInfo, lib) {
                                        var type = nodeInfo.type || 'filter';
                                        var shaderSource;
                                        var inputs;
                                        var outputs;

                                        if (type === 'filter') {
                                            var shaderExp = nodeInfo.shader.trim();
                                            var res = shaderSourceReg.exec(shaderExp);
                                            if (res) {
                                                shaderSource = src_Shader.source(res[1].trim());
                                            } else if (shaderExp.charAt(0) === '#') {
                                                shaderSource = lib.shaders[shaderExp.substr(1)];
                                            }
                                            if (!shaderSource) {
                                                shaderSource = shaderExp;
                                            }
                                            if (!shaderSource) {
                                                return;
                                            }
                                        }

                                        if (nodeInfo.inputs) {
                                            inputs = {};
                                            for (var name in nodeInfo.inputs) {
                                                if (typeof nodeInfo.inputs[name] === 'string') {
                                                    inputs[name] = nodeInfo.inputs[name];
                                                } else {
                                                    inputs[name] = {
                                                        node: nodeInfo.inputs[name].node,
                                                        pin: nodeInfo.inputs[name].pin
                                                    };
                                                }
                                            }
                                        }
                                        if (nodeInfo.outputs) {
                                            outputs = {};
                                            for (var name in nodeInfo.outputs) {
                                                var outputInfo = nodeInfo.outputs[name];
                                                outputs[name] = {};
                                                if (outputInfo.attachment != null) {
                                                    outputs[name].attachment = outputInfo.attachment;
                                                }
                                                if (outputInfo.keepLastFrame != null) {
                                                    outputs[name].keepLastFrame = outputInfo.keepLastFrame;
                                                }
                                                if (outputInfo.outputLastFrame != null) {
                                                    outputs[name].outputLastFrame = outputInfo.outputLastFrame;
                                                }
                                                if (typeof(outputInfo.parameters) === 'string') {
                                                    var paramExp = outputInfo.parameters;
                                                    if (paramExp.charAt(0) === '#') {
                                                        outputs[name].parameters = lib.parameters[paramExp.substr(1)];
                                                    }
                                                } else if (outputInfo.parameters) {
                                                    outputs[name].parameters = this._convertParameter(outputInfo.parameters);
                                                }
                                            }
                                        }
                                        var node;
                                        if (type === 'scene') {
                                            node = new compositor_SceneNode({
                                                name: nodeInfo.name,
                                                scene: this.scene,
                                                camera: this.camera,
                                                outputs: outputs
                                            });
                                        } else if (type === 'texture') {
                                            node = new compositor_TextureNode({
                                                name: nodeInfo.name,
                                                outputs: outputs
                                            });
                                        }
                                        // Default is filter
                                        else {
                                            node = new compositor_FilterNode({
                                                name: nodeInfo.name,
                                                shader: shaderSource,
                                                inputs: inputs,
                                                outputs: outputs
                                            });
                                        }
                                        if (node) {
                                            if (nodeInfo.parameters) {
                                                for (var name in nodeInfo.parameters) {
                                                    var val = nodeInfo.parameters[name];
                                                    if (typeof(val) === 'string') {
                                                        val = val.trim();
                                                        if (val.charAt(0) === '#') {
                                                            val = lib.textures[val.substr(1)];
                                                        } else {
                                                            node.on(
                                                                'beforerender', createSizeSetHandler(
                                                                    name, tryConvertExpr(val)
                                                                )
                                                            );
                                                        }
                                                    }
                                                    node.setParameter(name, val);
                                                }
                                            }
                                            if (nodeInfo.defines && node.pass) {
                                                for (var name in nodeInfo.defines) {
                                                    var val = nodeInfo.defines[name];
                                                    node.pass.material.shader.define('fragment', name, val);
                                                }
                                            }
                                        }
                                        return node;
                                    },

                                    _convertParameter: function(paramInfo) {
                                        var param = {};
                                        if (!paramInfo) {
                                            return param;
                                        }
                                        ['type', 'minFilter', 'magFilter', 'wrapS', 'wrapT', 'flipY', 'useMipmap']
                                        .forEach(function(name) {
                                            var val = paramInfo[name];
                                            if (val != null) {
                                                // Convert string to enum
                                                if (typeof val === 'string') {
                                                    val = src_Texture[val];
                                                }
                                                param[name] = val;
                                            }
                                        });
                                        ['width', 'height']
                                        .forEach(function(name) {
                                            if (paramInfo[name] != null) {
                                                var val = paramInfo[name];
                                                if (typeof val === 'string') {
                                                    val = val.trim();
                                                    param[name] = createSizeParser(
                                                        name, tryConvertExpr(val)
                                                    );
                                                } else {
                                                    param[name] = val;
                                                }
                                            }
                                        });
                                        if (paramInfo.useMipmap != null) {
                                            param.useMipmap = paramInfo.useMipmap;
                                        }
                                        return param;
                                    },

                                    _loadShaders: function(json, callback) {
                                        if (!json.shaders) {
                                            callback({});
                                            return;
                                        }
                                        var shaders = {};
                                        var loading = 0;
                                        var cbd = false;
                                        var shaderRootPath = this.shaderRootPath || this.rootPath;
                                        core_util.each(json.shaders, function(shaderExp, name) {
                                            var res = urlReg.exec(shaderExp);
                                            if (res) {
                                                var path = res[1];
                                                path = core_util.relative2absolute(path, shaderRootPath);
                                                loading++;
                                                request.get({
                                                    url: path,
                                                    onload: function(shaderSource) {
                                                        shaders[name] = shaderSource;
                                                        src_Shader['import'](shaderSource);
                                                        loading--;
                                                        if (loading === 0) {
                                                            callback(shaders);
                                                            cbd = true;
                                                        }
                                                    }
                                                });
                                            } else {
                                                shaders[name] = shaderExp;
                                                // Try import shader
                                                src_Shader['import'](shaderExp);
                                            }
                                        }, this);
                                        if (loading === 0 && !cbd) {
                                            callback(shaders);
                                        }
                                    },

                                    _loadTextures: function(json, lib, callback) {
                                        if (!json.textures) {
                                            callback({});
                                            return;
                                        }
                                        var textures = {};
                                        var loading = 0;

                                        var cbd = false;
                                        var textureRootPath = this.textureRootPath || this.rootPath;
                                        core_util.each(json.textures, function(textureInfo, name) {
                                            var texture;
                                            var path = textureInfo.path;
                                            var parameters = this._convertParameter(textureInfo.parameters);
                                            if (Array.isArray(path) && path.length === 6) {
                                                path = path.map(function(item) {
                                                    return core_util.relative2absolute(item, textureRootPath);
                                                });
                                                texture = new src_TextureCube(parameters);
                                            } else if (typeof path === 'string') {
                                                path = core_util.relative2absolute(path, textureRootPath);
                                                texture = new src_Texture2D(parameters);
                                            } else {
                                                return;
                                            }

                                            texture.load(path);
                                            loading++;
                                            texture.once('success', function() {
                                                textures[name] = texture;
                                                loading--;
                                                if (loading === 0) {
                                                    callback(textures);
                                                    cbd = true;
                                                }
                                            });
                                        }, this);

                                        if (loading === 0 && !cbd) {
                                            callback(textures);
                                        }
                                    }
                                });

                            function createSizeSetHandler(name, exprFunc) {
                                return function(renderer) {
                                    // PENDING viewport size or window size
                                    var dpr = renderer.getDevicePixelRatio();
                                    // PENDING If multiply dpr ?
                                    var width = renderer.getWidth();
                                    var height = renderer.getHeight();
                                    var result = exprFunc(width, height, dpr);
                                    this.setParameter(name, result);
                                };
                            }

                            function createSizeParser(name, exprFunc) {
                                return function(renderer) {
                                    var dpr = renderer.getDevicePixelRatio();
                                    var width = renderer.getWidth();
                                    var height = renderer.getHeight();
                                    return exprFunc(width, height, dpr);
                                };
                            }

                            function tryConvertExpr(string) {
                                // PENDING
                                var exprRes = /^expr\((.*)\)$/.exec(string);
                                if (exprRes) {
                                    try {
                                        var func = new Function('width', 'height', 'dpr', 'return ' + exprRes[1]);
                                        // Try run t
                                        func(1, 1);

                                        return func;
                                    } catch (e) {
                                        throw new Error('Invalid expression.');
                                    }
                                }
                            }

                            /* harmony default export */
                            var FX = (FXLoader);

                            // CONCATENATED MODULE: ./src/effect/halton.js

                            // Generate halton sequence
                            // https://en.wikipedia.org/wiki/Halton_sequence
                            function halton(index, base) {

                                var result = 0;
                                var f = 1 / base;
                                var i = index;
                                while (i > 0) {
                                    result = result + f * (i % base);
                                    i = Math.floor(i / base);
                                    f = f / base;
                                }
                                return result;
                            }


                            /* harmony default export */
                            var effect_halton = (halton);
                            // CONCATENATED MODULE: ./src/effect/SSAO.glsl.js
                            /* harmony default export */
                            var SSAO_glsl = ("@export ecgl.ssao.estimate\n\nuniform sampler2D depthTex;\n\nuniform sampler2D normalTex;\n\nuniform sampler2D noiseTex;\n\nuniform vec2 depthTexSize;\n\nuniform vec2 noiseTexSize;\n\nuniform mat4 projection;\n\nuniform mat4 projectionInv;\n\nuniform mat4 viewInverseTranspose;\n\nuniform vec3 kernel[KERNEL_SIZE];\n\nuniform float radius : 1;\n\nuniform float power : 1;\n\nuniform float bias: 1e-2;\n\nuniform float intensity: 1.0;\n\nvarying vec2 v_Texcoord;\n\nfloat ssaoEstimator(in vec3 originPos, in mat3 kernelBasis) {\n float occlusion = 0.0;\n\n for (int i = 0; i < KERNEL_SIZE; i++) {\n vec3 samplePos = kernel[i];\n#ifdef NORMALTEX_ENABLED\n samplePos = kernelBasis * samplePos;\n#endif\n samplePos = samplePos * radius + originPos;\n\n vec4 texCoord = projection * vec4(samplePos, 1.0);\n texCoord.xy /= texCoord.w;\n\n vec4 depthTexel = texture2D(depthTex, texCoord.xy * 0.5 + 0.5);\n\n float sampleDepth = depthTexel.r * 2.0 - 1.0;\n if (projection[3][3] == 0.0) {\n sampleDepth = projection[3][2] / (sampleDepth * projection[2][3] - projection[2][2]);\n }\n else {\n sampleDepth = (sampleDepth - projection[3][2]) / projection[2][2];\n }\n \n float rangeCheck = smoothstep(0.0, 1.0, radius / abs(originPos.z - sampleDepth));\n occlusion += rangeCheck * step(samplePos.z, sampleDepth - bias);\n }\n#ifdef NORMALTEX_ENABLED\n occlusion = 1.0 - occlusion / float(KERNEL_SIZE);\n#else\n occlusion = 1.0 - clamp((occlusion / float(KERNEL_SIZE) - 0.6) * 2.5, 0.0, 1.0);\n#endif\n return pow(occlusion, power);\n}\n\nvoid main()\n{\n\n vec4 depthTexel = texture2D(depthTex, v_Texcoord);\n\n#ifdef NORMALTEX_ENABLED\n vec4 tex = texture2D(normalTex, v_Texcoord);\n if (dot(tex.rgb, tex.rgb) == 0.0) {\n gl_FragColor = vec4(1.0);\n return;\n }\n vec3 N = tex.rgb * 2.0 - 1.0;\n N = (viewInverseTranspose * vec4(N, 0.0)).xyz;\n\n vec2 noiseTexCoord = depthTexSize / vec2(noiseTexSize) * v_Texcoord;\n vec3 rvec = texture2D(noiseTex, noiseTexCoord).rgb * 2.0 - 1.0;\n vec3 T = normalize(rvec - N * dot(rvec, N));\n vec3 BT = normalize(cross(N, T));\n mat3 kernelBasis = mat3(T, BT, N);\n#else\n if (depthTexel.r > 0.99999) {\n gl_FragColor = vec4(1.0);\n return;\n }\n mat3 kernelBasis;\n#endif\n\n float z = depthTexel.r * 2.0 - 1.0;\n\n vec4 projectedPos = vec4(v_Texcoord * 2.0 - 1.0, z, 1.0);\n vec4 p4 = projectionInv * projectedPos;\n\n vec3 position = p4.xyz / p4.w;\n\n float ao = ssaoEstimator(position, kernelBasis);\n ao = clamp(1.0 - (1.0 - ao) * intensity, 0.0, 1.0);\n gl_FragColor = vec4(vec3(ao), 1.0);\n}\n\n@end\n\n\n@export ecgl.ssao.blur\n\nuniform sampler2D ssaoTexture;\n\nuniform vec2 textureSize;\n\nvarying vec2 v_Texcoord;\n\nvoid main ()\n{\n\n vec2 texelSize = 1.0 / textureSize;\n\n float ao = 0.0;\n vec2 hlim = vec2(float(-BLUR_SIZE) * 0.5 + 0.5);\n float centerAo = texture2D(ssaoTexture, v_Texcoord).r;\n float weightAll = 0.0;\n float boxWeight = 1.0 / float(BLUR_SIZE) * float(BLUR_SIZE);\n for (int x = 0; x < BLUR_SIZE; x++) {\n for (int y = 0; y < BLUR_SIZE; y++) {\n vec2 coord = (vec2(float(x), float(y)) + hlim) * texelSize + v_Texcoord;\n float sampleAo = texture2D(ssaoTexture, coord).r;\n float closeness = 1.0 - distance(sampleAo, centerAo) / sqrt(3.0);\n float weight = boxWeight * closeness;\n ao += weight * sampleAo;\n weightAll += weight;\n }\n }\n\n gl_FragColor = vec4(vec3(clamp(ao / weightAll, 0.0, 1.0)), 1.0);\n}\n@end");

                            // CONCATENATED MODULE: ./src/effect/SSAOPass.js










                            src_Shader.import(SSAO_glsl);

                            function generateNoiseData(size) {
                                var data = new Uint8Array(size * size * 4);
                                var n = 0;
                                var v3 = new math_Vector3();

                                for (var i = 0; i < size; i++) {
                                    for (var j = 0; j < size; j++) {
                                        v3.set(Math.random() * 2 - 1, Math.random() * 2 - 1, 0).normalize();
                                        data[n++] = (v3.x * 0.5 + 0.5) * 255;
                                        data[n++] = (v3.y * 0.5 + 0.5) * 255;
                                        data[n++] = 0;
                                        data[n++] = 255;
                                    }
                                }
                                return data;
                            }

                            function generateNoiseTexture(size) {
                                return new src_Texture2D({
                                    pixels: generateNoiseData(size),
                                    wrapS: src_Texture.REPEAT,
                                    wrapT: src_Texture.REPEAT,
                                    width: size,
                                    height: size
                                });
                            }

                            function generateKernel(size, offset, hemisphere) {
                                var kernel = new Float32Array(size * 3);
                                offset = offset || 0;
                                for (var i = 0; i < size; i++) {
                                    var phi = effect_halton(i + offset, 2) * (hemisphere ? 1 : 2) * Math.PI;
                                    var theta = effect_halton(i + offset, 3) * Math.PI;
                                    var r = Math.random();
                                    var x = Math.cos(phi) * Math.sin(theta) * r;
                                    var y = Math.cos(theta) * r;
                                    var z = Math.sin(phi) * Math.sin(theta) * r;

                                    kernel[i * 3] = x;
                                    kernel[i * 3 + 1] = y;
                                    kernel[i * 3 + 2] = z;
                                }
                                return kernel;

                                // var kernel = new Float32Array(size * 3);
                                // var v3 = new Vector3();
                                // for (var i = 0; i < size; i++) {
                                //     v3.set(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random())
                                //         .normalize().scale(Math.random());
                                //     kernel[i * 3] = v3.x;
                                //     kernel[i * 3 + 1] = v3.y;
                                //     kernel[i * 3 + 2] = v3.z;
                                // }
                                // return kernel;
                            }

                            function SSAOPass(opt) {
                                opt = opt || {};

                                this._ssaoPass = new compositor_Pass({
                                    fragment: src_Shader.source('ecgl.ssao.estimate')
                                });
                                this._blurPass = new compositor_Pass({
                                    fragment: src_Shader.source('ecgl.ssao.blur')
                                });
                                this._framebuffer = new src_FrameBuffer();

                                this._ssaoTexture = new src_Texture2D();
                                this._targetTexture = new src_Texture2D();

                                this._depthTex = opt.depthTexture;
                                this._normalTex = opt.normalTexture;

                                this.setNoiseSize(4);
                                this.setKernelSize(opt.kernelSize || 12);
                                this.setParameter('blurSize', Math.round(opt.blurSize || 4));
                                if (opt.radius != null) {
                                    this.setParameter('radius', opt.radius);
                                }
                                if (opt.power != null) {
                                    this.setParameter('power', opt.power);
                                }

                                if (!this._normalTex) {
                                    this._ssaoPass.material.shader.disableTexture('normalTex');
                                }
                            }

                            SSAOPass.prototype.setDepthTexture = function(depthTex) {
                                this._depthTex = depthTex;
                            };

                            SSAOPass.prototype.setNormalTexture = function(normalTex) {
                                this._normalTex = normalTex;
                                this._ssaoPass.material.shader[normalTex ? 'enableTexture' : 'disableTexture']('normalTex');
                                // Switch between hemisphere and shere kernel.
                                this.setKernelSize(this._kernelSize);
                            };

                            SSAOPass.prototype.update = function(renderer, camera, frame) {
                                var width = renderer.getWidth();
                                var height = renderer.getHeight();

                                var ssaoPass = this._ssaoPass;
                                var blurPass = this._blurPass;

                                ssaoPass.setUniform('kernel', this._kernels[frame % this._kernels.length]);
                                ssaoPass.setUniform('depthTex', this._depthTex);
                                if (this._normalTex != null) {
                                    ssaoPass.setUniform('normalTex', this._normalTex);
                                }
                                ssaoPass.setUniform('depthTexSize', [this._depthTex.width, this._depthTex.height]);

                                var viewInverseTranspose = new math_Matrix4();
                                math_Matrix4.transpose(viewInverseTranspose, camera.worldTransform);

                                ssaoPass.setUniform('projection', camera.projectionMatrix._array);
                                ssaoPass.setUniform('projectionInv', camera.invProjectionMatrix._array);
                                ssaoPass.setUniform('viewInverseTranspose', viewInverseTranspose._array);

                                var ssaoTexture = this._ssaoTexture;
                                var targetTexture = this._targetTexture;

                                ssaoTexture.width = width;
                                ssaoTexture.height = height;
                                targetTexture.width = width;
                                targetTexture.height = height;

                                this._framebuffer.attach(ssaoTexture);
                                this._framebuffer.bind(renderer);
                                renderer.gl.clearColor(1, 1, 1, 1);
                                renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);
                                ssaoPass.render(renderer);

                                this._framebuffer.attach(targetTexture);
                                blurPass.setUniform('textureSize', [width, height]);
                                blurPass.setUniform('ssaoTexture', this._ssaoTexture);
                                blurPass.render(renderer);

                                this._framebuffer.unbind(renderer);

                                // Restore clear
                                var clearColor = renderer.clearColor;
                                renderer.gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);
                            };

                            SSAOPass.prototype.getTargetTexture = function() {
                                return this._targetTexture;
                            }

                            SSAOPass.prototype.setParameter = function(name, val) {
                                if (name === 'noiseTexSize') {
                                    this.setNoiseSize(val);
                                } else if (name === 'kernelSize') {
                                    this.setKernelSize(val);
                                } else if (name === 'blurSize') {
                                    this._blurPass.material.shader.define('fragment', 'BLUR_SIZE', val);
                                } else if (name === 'intensity') {
                                    this._ssaoPass.material.set('intensity', val);
                                } else {
                                    this._ssaoPass.setUniform(name, val);
                                }
                            };

                            SSAOPass.prototype.setKernelSize = function(size) {
                                this._kernelSize = size;
                                this._ssaoPass.material.shader.define('fragment', 'KERNEL_SIZE', size);
                                this._kernels = this._kernels || [];
                                for (var i = 0; i < 30; i++) {
                                    this._kernels[i] = generateKernel(size, i * size, !!this._normalTex);
                                }
                            };

                            SSAOPass.prototype.setNoiseSize = function(size) {
                                var texture = this._ssaoPass.getUniform('noiseTex');
                                if (!texture) {
                                    texture = generateNoiseTexture(size);
                                    this._ssaoPass.setUniform('noiseTex', generateNoiseTexture(size));
                                } else {
                                    texture.data = generateNoiseData(size);
                                    texture.width = texture.height = size;
                                    texture.dirty();
                                }

                                this._ssaoPass.setUniform('noiseTexSize', [size, size]);
                            };

                            SSAOPass.prototype.dispose = function(renderer) {
                                this._targetTexture.dispose(renderer);
                                this._ssaoTexture.dispose(renderer);
                            };

                            /* harmony default export */
                            var effect_SSAOPass = (SSAOPass);
                            // CONCATENATED MODULE: ./src/effect/SSR.glsl.js
                            /* harmony default export */
                            var SSR_glsl = ("@export ecgl.ssr.main\n\n#define MAX_ITERATION 20;\n\nuniform sampler2D sourceTexture;\nuniform sampler2D gBufferTexture1;\nuniform sampler2D gBufferTexture2;\n\nuniform mat4 projection;\nuniform mat4 projectionInv;\nuniform mat4 viewInverseTranspose;\n\nuniform float maxRayDistance: 50;\n\nuniform float pixelStride: 16;\nuniform float pixelStrideZCutoff: 50; \nuniform float screenEdgeFadeStart: 0.9; \nuniform float eyeFadeStart : 0.2; uniform float eyeFadeEnd: 0.8; \nuniform float minGlossiness: 0.2; uniform float zThicknessThreshold: 10;\n\nuniform float nearZ;\nuniform vec2 viewportSize : VIEWPORT_SIZE;\n\nuniform float jitterOffset: 0;\n\nvarying vec2 v_Texcoord;\n\n#ifdef DEPTH_DECODE\n@import qtek.util.decode_float\n#endif\n\nfloat fetchDepth(sampler2D depthTexture, vec2 uv)\n{\n vec4 depthTexel = texture2D(depthTexture, uv);\n return depthTexel.r * 2.0 - 1.0;\n}\n\nfloat linearDepth(float depth)\n{\n if (projection[3][3] == 0.0) {\n return projection[3][2] / (depth * projection[2][3] - projection[2][2]);\n }\n else {\n return (depth - projection[3][2]) / projection[2][2];\n }\n}\n\nbool rayIntersectDepth(float rayZNear, float rayZFar, vec2 hitPixel)\n{\n if (rayZFar > rayZNear)\n {\n float t = rayZFar; rayZFar = rayZNear; rayZNear = t;\n }\n float cameraZ = linearDepth(fetchDepth(gBufferTexture2, hitPixel));\n return rayZFar <= cameraZ && rayZNear >= cameraZ - zThicknessThreshold;\n}\n\n\nbool traceScreenSpaceRay(\n vec3 rayOrigin, vec3 rayDir, float jitter,\n out vec2 hitPixel, out vec3 hitPoint, out float iterationCount\n)\n{\n float rayLength = ((rayOrigin.z + rayDir.z * maxRayDistance) > -nearZ)\n ? (-nearZ - rayOrigin.z) / rayDir.z : maxRayDistance;\n\n vec3 rayEnd = rayOrigin + rayDir * rayLength;\n\n vec4 H0 = projection * vec4(rayOrigin, 1.0);\n vec4 H1 = projection * vec4(rayEnd, 1.0);\n\n float k0 = 1.0 / H0.w, k1 = 1.0 / H1.w;\n\n vec3 Q0 = rayOrigin * k0, Q1 = rayEnd * k1;\n\n vec2 P0 = (H0.xy * k0 * 0.5 + 0.5) * viewportSize;\n vec2 P1 = (H1.xy * k1 * 0.5 + 0.5) * viewportSize;\n\n P1 += dot(P1 - P0, P1 - P0) < 0.0001 ? 0.01 : 0.0;\n vec2 delta = P1 - P0;\n\n bool permute = false;\n if (abs(delta.x) < abs(delta.y)) {\n permute = true;\n delta = delta.yx;\n P0 = P0.yx;\n P1 = P1.yx;\n }\n float stepDir = sign(delta.x);\n float invdx = stepDir / delta.x;\n\n vec3 dQ = (Q1 - Q0) * invdx;\n float dk = (k1 - k0) * invdx;\n\n vec2 dP = vec2(stepDir, delta.y * invdx);\n\n float strideScaler = 1.0 - min(1.0, -rayOrigin.z / pixelStrideZCutoff);\n float pixStride = 1.0 + strideScaler * pixelStride;\n\n dP *= pixStride; dQ *= pixStride; dk *= pixStride;\n\n vec4 pqk = vec4(P0, Q0.z, k0);\n vec4 dPQK = vec4(dP, dQ.z, dk);\n\n pqk += dPQK * jitter;\n float rayZFar = (dPQK.z * 0.5 + pqk.z) / (dPQK.w * 0.5 + pqk.w);\n float rayZNear;\n\n bool intersect = false;\n\n vec2 texelSize = 1.0 / viewportSize;\n\n iterationCount = 0.0;\n\n for (int i = 0; i < MAX_ITERATION; i++)\n {\n pqk += dPQK;\n\n rayZNear = rayZFar;\n rayZFar = (dPQK.z * 0.5 + pqk.z) / (dPQK.w * 0.5 + pqk.w);\n\n hitPixel = permute ? pqk.yx : pqk.xy;\n hitPixel *= texelSize;\n\n intersect = rayIntersectDepth(rayZNear, rayZFar, hitPixel);\n\n iterationCount += 1.0;\n\n if (intersect) {\n break;\n }\n }\n\n\n Q0.xy += dQ.xy * iterationCount;\n Q0.z = pqk.z;\n hitPoint = Q0 / pqk.w;\n\n return intersect;\n}\n\nfloat calculateAlpha(\n float iterationCount, float reflectivity,\n vec2 hitPixel, vec3 hitPoint, float dist, vec3 rayDir\n)\n{\n float alpha = clamp(reflectivity, 0.0, 1.0);\n alpha *= 1.0 - (iterationCount / float(MAX_ITERATION));\n vec2 hitPixelNDC = hitPixel * 2.0 - 1.0;\n float maxDimension = min(1.0, max(abs(hitPixelNDC.x), abs(hitPixelNDC.y)));\n alpha *= 1.0 - max(0.0, maxDimension - screenEdgeFadeStart) / (1.0 - screenEdgeFadeStart);\n\n float _eyeFadeStart = eyeFadeStart;\n float _eyeFadeEnd = eyeFadeEnd;\n if (_eyeFadeStart > _eyeFadeEnd) {\n float tmp = _eyeFadeEnd;\n _eyeFadeEnd = _eyeFadeStart;\n _eyeFadeStart = tmp;\n }\n\n float eyeDir = clamp(rayDir.z, _eyeFadeStart, _eyeFadeEnd);\n alpha *= 1.0 - (eyeDir - _eyeFadeStart) / (_eyeFadeEnd - _eyeFadeStart);\n\n alpha *= 1.0 - clamp(dist / maxRayDistance, 0.0, 1.0);\n\n return alpha;\n}\n\n@import qtek.util.rand\n\n@import qtek.util.rgbm\n\nvoid main()\n{\n vec4 normalAndGloss = texture2D(gBufferTexture1, v_Texcoord);\n\n if (dot(normalAndGloss.rgb, vec3(1.0)) == 0.0) {\n discard;\n }\n\n float g = normalAndGloss.a;\n if (g <= minGlossiness) {\n discard;\n }\n\n float reflectivity = (g - minGlossiness) / (1.0 - minGlossiness);\n\n vec3 N = normalAndGloss.rgb * 2.0 - 1.0;\n N = normalize((viewInverseTranspose * vec4(N, 0.0)).xyz);\n\n vec4 projectedPos = vec4(v_Texcoord * 2.0 - 1.0, fetchDepth(gBufferTexture2, v_Texcoord), 1.0);\n vec4 pos = projectionInv * projectedPos;\n vec3 rayOrigin = pos.xyz / pos.w;\n\n vec3 rayDir = normalize(reflect(normalize(rayOrigin), N));\n vec2 hitPixel;\n vec3 hitPoint;\n float iterationCount;\n\n vec2 uv2 = v_Texcoord * viewportSize;\n float jitter = rand(fract(v_Texcoord + jitterOffset));\n\n bool intersect = traceScreenSpaceRay(rayOrigin, rayDir, jitter, hitPixel, hitPoint, iterationCount);\n\n float dist = distance(rayOrigin, hitPoint);\n\n float alpha = calculateAlpha(iterationCount, reflectivity, hitPixel, hitPoint, dist, rayDir) * float(intersect);\n\n vec3 hitNormal = texture2D(gBufferTexture1, hitPixel).rgb * 2.0 - 1.0;\n hitNormal = normalize((viewInverseTranspose * vec4(hitNormal, 0.0)).xyz);\n\n if (dot(hitNormal, rayDir) >= 0.0) {\n discard;\n }\n\n \n if (!intersect) {\n discard;\n }\n vec4 color = decodeHDR(texture2D(sourceTexture, hitPixel));\n gl_FragColor = encodeHDR(vec4(color.rgb * alpha, color.a));\n}\n@end\n\n@export ecgl.ssr.blur\n\nuniform sampler2D texture;\nuniform sampler2D gBufferTexture1;\n\nvarying vec2 v_Texcoord;\n\nuniform vec2 textureSize;\nuniform float blurSize : 4.0;\n\n#ifdef BLEND\nuniform sampler2D sourceTexture;\n#endif\n\n@import qtek.util.rgbm\n\n\nvoid main()\n{\n @import qtek.compositor.kernel.gaussian_13\n\n vec4 centerNTexel = texture2D(gBufferTexture1, v_Texcoord);\n float g = centerNTexel.a;\n float maxBlurSize = clamp(1.0 - g + 0.1, 0.0, 1.0) * blurSize;\n#ifdef VERTICAL\n vec2 off = vec2(0.0, maxBlurSize / textureSize.y);\n#else\n vec2 off = vec2(maxBlurSize / textureSize.x, 0.0);\n#endif\n\n vec2 coord = v_Texcoord;\n\n vec4 sum = vec4(0.0);\n float weightAll = 0.0;\n\n vec3 cN = centerNTexel.rgb * 2.0 - 1.0;\n for (int i = 0; i < 13; i++) {\n vec2 coord = clamp((float(i) - 6.0) * off + v_Texcoord, vec2(0.0), vec2(1.0));\n float w = gaussianKernel[i] * clamp(dot(cN, texture2D(gBufferTexture1, coord).rgb * 2.0 - 1.0), 0.0, 1.0);\n weightAll += w;\n sum += decodeHDR(texture2D(texture, coord)) * w;\n }\n\n#ifdef BLEND\n gl_FragColor = encodeHDR(\n sum / weightAll + decodeHDR(texture2D(sourceTexture, v_Texcoord))\n );\n#else\n gl_FragColor = encodeHDR(sum / weightAll);\n#endif\n}\n\n@end");

                            // CONCATENATED MODULE: ./src/effect/SSRPass.js










                            src_Shader.import(SSR_glsl);

                            function SSRPass(opt) {
                                opt = opt || {};

                                this._ssrPass = new compositor_Pass({
                                    fragment: src_Shader.source('ecgl.ssr.main'),
                                    clearColor: [0, 0, 0, 0]
                                });
                                this._blurPass1 = new compositor_Pass({
                                    fragment: src_Shader.source('ecgl.ssr.blur'),
                                    clearColor: [0, 0, 0, 0]
                                });
                                this._blurPass2 = new compositor_Pass({
                                    fragment: src_Shader.source('ecgl.ssr.blur'),
                                    clearColor: [0, 0, 0, 0]
                                });

                                this._ssrPass.setUniform('gBufferTexture1', opt.normalTexture);
                                this._ssrPass.setUniform('gBufferTexture2', opt.depthTexture);

                                this._blurPass1.setUniform('gBufferTexture1', opt.normalTexture);
                                this._blurPass2.setUniform('gBufferTexture1', opt.normalTexture);

                                this._blurPass2.material.shader.define('fragment', 'VERTICAL');
                                this._blurPass2.material.shader.define('fragment', 'BLEND');

                                this._texture1 = new src_Texture2D({
                                    type: src_Texture.HALF_FLOAT
                                });
                                this._texture2 = new src_Texture2D({
                                    type: src_Texture.HALF_FLOAT
                                });

                                this._frameBuffer = new src_FrameBuffer();
                            }

                            SSRPass.prototype.update = function(renderer, camera, sourceTexture, frame) {
                                var width = renderer.getWidth();
                                var height = renderer.getHeight();
                                var texture1 = this._texture1;
                                var texture2 = this._texture2;
                                texture1.width = texture2.width = width;
                                texture1.height = texture2.height = height;
                                var frameBuffer = this._frameBuffer;

                                var ssrPass = this._ssrPass;
                                var blurPass1 = this._blurPass1;
                                var blurPass2 = this._blurPass2;

                                var viewInverseTranspose = new math_Matrix4();
                                math_Matrix4.transpose(viewInverseTranspose, camera.worldTransform);

                                ssrPass.setUniform('sourceTexture', sourceTexture);
                                ssrPass.setUniform('projection', camera.projectionMatrix._array);
                                ssrPass.setUniform('projectionInv', camera.invProjectionMatrix._array);
                                ssrPass.setUniform('viewInverseTranspose', viewInverseTranspose._array);
                                ssrPass.setUniform('nearZ', camera.near);
                                ssrPass.setUniform('jitterOffset', frame / 30);

                                var textureSize = [width, height];

                                blurPass1.setUniform('textureSize', textureSize);
                                blurPass2.setUniform('textureSize', textureSize);
                                blurPass2.setUniform('sourceTexture', sourceTexture);

                                frameBuffer.attach(texture2);
                                frameBuffer.bind(renderer);
                                ssrPass.render(renderer);

                                frameBuffer.attach(texture1);
                                blurPass1.setUniform('texture', texture2);
                                blurPass1.render(renderer);

                                frameBuffer.attach(texture2);
                                blurPass2.setUniform('texture', texture1);
                                blurPass2.render(renderer);
                                frameBuffer.unbind(renderer);
                            };

                            SSRPass.prototype.getTargetTexture = function() {
                                return this._texture2;
                            };

                            SSRPass.prototype.setParameter = function(name, val) {
                                if (name === 'maxIteration') {
                                    this._ssrPass.material.shader.define('fragment', 'MAX_ITERATION', val);
                                } else {
                                    this._ssrPass.setUniform(name, val);
                                }
                            };

                            SSRPass.prototype.dispose = function(renderer) {
                                this._texture1.dispose(renderer);
                                this._texture2.dispose(renderer);
                                this._frameBuffer.dispose(renderer);
                            };

                            /* harmony default export */
                            var effect_SSRPass = (SSRPass);
                            // CONCATENATED MODULE: ./src/effect/poissonKernel.js
                            // Based on https://bl.ocks.org/mbostock/19168c663618b707158

                            /* harmony default export */
                            var poissonKernel = ([
                                0.0, 0.0, -0.321585265978, -0.154972575841,
                                0.458126042375, 0.188473391593,
                                0.842080129861, 0.527766490688,
                                0.147304551086, -0.659453822776, -0.331943915203, -0.940619700594,
                                0.0479226680259, 0.54812163202,
                                0.701581552186, -0.709825561388, -0.295436780218, 0.940589268233, -0.901489676764, 0.237713156085,
                                0.973570876096, -0.109899459384, -0.866792314779, -0.451805525005,
                                0.330975007087, 0.800048655954, -0.344275183665, 0.381779221166, -0.386139432542, -0.437418421534, -0.576478634965, -0.0148463392551,
                                0.385798197415, -0.262426961053, -0.666302061145, 0.682427250835, -0.628010632582, -0.732836215494,
                                0.10163141741, -0.987658134403,
                                0.711995289051, -0.320024291314,
                                0.0296005138058, 0.950296523438,
                                0.0130612307608, -0.351024443122, -0.879596633704, -0.10478487883,
                                0.435712737232, 0.504254490347,
                                0.779203817497, 0.206477676721,
                                0.388264289969, -0.896736162545, -0.153106280781, -0.629203242522, -0.245517550697, 0.657969239148,
                                0.126830499058, 0.26862328493, -0.634888119007, -0.302301223431,
                                0.617074219636, 0.779817204925
                            ]);
                            // CONCATENATED MODULE: ./src/util/shader/normal.glsl.js
                            /* harmony default export */
                            var normal_glsl = ("@export ecgl.normal.vertex\n\n@import ecgl.common.transformUniforms\n\n@import ecgl.common.uv.header\n\n@import ecgl.common.attributes\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\n@import ecgl.common.normalMap.vertexHeader\n\n@import ecgl.common.vertexAnimation.header\n\nvoid main()\n{\n\n @import ecgl.common.vertexAnimation.main\n\n @import ecgl.common.uv.main\n\n v_Normal = normalize((worldInverseTranspose * vec4(normal, 0.0)).xyz);\n v_WorldPosition = (world * vec4(pos, 1.0)).xyz;\n\n @import ecgl.common.normalMap.vertexMain\n\n gl_Position = worldViewProjection * vec4(pos, 1.0);\n\n}\n\n\n@end\n\n\n@export ecgl.normal.fragment\n\n#define ROUGHNESS_CHANEL 0\n\nuniform bool useBumpMap;\nuniform bool useRoughnessMap;\nuniform bool doubleSide;\nuniform float roughness;\n\n@import ecgl.common.uv.fragmentHeader\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nuniform mat4 viewInverse : VIEWINVERSE;\n\n@import ecgl.common.normalMap.fragmentHeader\n@import ecgl.common.bumpMap.header\n\nuniform sampler2D roughnessMap;\n\nvoid main()\n{\n vec3 N = v_Normal;\n \n bool flipNormal = false;\n if (doubleSide) {\n vec3 eyePos = viewInverse[3].xyz;\n vec3 V = normalize(eyePos - v_WorldPosition);\n\n if (dot(N, V) < 0.0) {\n flipNormal = true;\n }\n }\n\n @import ecgl.common.normalMap.fragmentMain\n\n if (useBumpMap) {\n N = bumpNormal(v_WorldPosition, v_Normal, N);\n }\n\n float g = 1.0 - roughness;\n\n if (useRoughnessMap) {\n float g2 = 1.0 - texture2D(roughnessMap, v_DetailTexcoord)[ROUGHNESS_CHANEL];\n g = clamp(g2 + (g - 0.5) * 2.0, 0.0, 1.0);\n }\n\n if (flipNormal) {\n N = -N;\n }\n\n gl_FragColor.rgb = (N.xyz + 1.0) * 0.5;\n gl_FragColor.a = g;\n}\n@end");

                            // CONCATENATED MODULE: ./src/effect/NormalPass.js
                            // NormalPass will generate normal and depth data.

                            // TODO Animation









                            src_Shader.import(normal_glsl);

                            function attachTextureToSlot(renderer, shader, symbol, texture, slot) {
                                var gl = renderer.gl
                                shader.setUniform(gl, '1i', symbol, slot);

                                gl.activeTexture(gl.TEXTURE0 + slot);
                                // Maybe texture is not loaded yet;
                                if (texture.isRenderable()) {
                                    texture.bind(renderer);
                                } else {
                                    // Bind texture to null
                                    texture.unbind(renderer);
                                }
                            }

                            // TODO Use globalShader insteadof globalMaterial?
                            function getBeforeRenderHook(renderer, defaultNormalMap, defaultBumpMap, defaultRoughnessMap, normalMaterial) {

                                var previousNormalMap;
                                var previousBumpMap;
                                var previousRoughnessMap;
                                var previousRenderable;
                                var gl = renderer.gl;

                                return function(renderable, prevMaterial, prevShader) {
                                    // Material not change
                                    if (previousRenderable && previousRenderable.material === renderable.material) {
                                        return;
                                    }

                                    var material = renderable.material;

                                    var roughness = material.get('roughness');
                                    if (roughness == null) {
                                        roughness = 1;
                                    }

                                    var normalMap = material.get('normalMap') || defaultNormalMap;
                                    var roughnessMap = material.get('roughnessMap');
                                    var bumpMap = material.get('bumpMap');
                                    var uvRepeat = material.get('uvRepeat');
                                    var uvOffset = material.get('uvOffset');
                                    var detailUvRepeat = material.get('detailUvRepeat');
                                    var detailUvOffset = material.get('detailUvOffset');

                                    var useBumpMap = !!bumpMap && material.shader.isTextureEnabled('bumpMap');
                                    var useRoughnessMap = !!roughnessMap && material.shader.isTextureEnabled('roughnessMap');
                                    var doubleSide = material.shader.isDefined('fragment', 'DOUBLE_SIDED');

                                    bumpMap = bumpMap || defaultBumpMap;
                                    roughnessMap = roughnessMap || defaultRoughnessMap;

                                    if (prevMaterial !== normalMaterial) {
                                        normalMaterial.set('normalMap', normalMap);
                                        normalMaterial.set('bumpMap', bumpMap);
                                        normalMaterial.set('roughnessMap', roughnessMap);
                                        normalMaterial.set('useBumpMap', useBumpMap);
                                        normalMaterial.set('useRoughnessMap', useRoughnessMap);
                                        normalMaterial.set('doubleSide', doubleSide);
                                        uvRepeat != null && normalMaterial.set('uvRepeat', uvRepeat);
                                        uvOffset != null && normalMaterial.set('uvOffset', uvOffset);
                                        detailUvRepeat != null && normalMaterial.set('detailUvRepeat', detailUvRepeat);
                                        detailUvOffset != null && normalMaterial.set('detailUvOffset', detailUvOffset);

                                        normalMaterial.set('roughness', roughness);
                                    } else {
                                        normalMaterial.shader.setUniform(gl, '1f', 'roughness', roughness);

                                        if (previousNormalMap !== normalMap) {
                                            attachTextureToSlot(renderer, normalMaterial.shader, 'normalMap', normalMap, 0);
                                        }
                                        if (previousBumpMap !== bumpMap && bumpMap) {
                                            attachTextureToSlot(renderer, normalMaterial.shader, 'bumpMap', bumpMap, 1);
                                        }
                                        if (previousRoughnessMap !== roughnessMap && roughnessMap) {
                                            attachTextureToSlot(renderer, normalMaterial.shader, 'roughnessMap', roughnessMap, 2);
                                        }
                                        if (uvRepeat != null) {
                                            normalMaterial.shader.setUniform(gl, '2f', 'uvRepeat', uvRepeat);
                                        }
                                        if (uvOffset != null) {
                                            normalMaterial.shader.setUniform(gl, '2f', 'uvOffset', uvOffset);
                                        }
                                        if (detailUvRepeat != null) {
                                            normalMaterial.shader.setUniform(gl, '2f', 'detailUvRepeat', detailUvRepeat);
                                        }
                                        if (detailUvOffset != null) {
                                            normalMaterial.shader.setUniform(gl, '2f', 'detailUvOffset', detailUvOffset);
                                        }
                                        normalMaterial.shader.setUniform(gl, '1i', 'useBumpMap', +useBumpMap);
                                        normalMaterial.shader.setUniform(gl, '1i', 'useRoughnessMap', +useRoughnessMap);
                                        normalMaterial.shader.setUniform(gl, '1i', 'doubleSide', +doubleSide);
                                    }

                                    previousNormalMap = normalMap;
                                    previousBumpMap = bumpMap;
                                    previousRoughnessMap = roughnessMap;

                                    previousRenderable = renderable;
                                };
                            }

                            function NormalPass(opt) {
                                opt = opt || {};

                                this._depthTex = new src_Texture2D({
                                    format: src_Texture.DEPTH_COMPONENT,
                                    type: src_Texture.UNSIGNED_INT
                                });
                                this._normalTex = new src_Texture2D({
                                    type: src_Texture.HALF_FLOAT
                                });

                                this._framebuffer = new src_FrameBuffer();
                                this._framebuffer.attach(this._normalTex);
                                this._framebuffer.attach(this._depthTex, src_FrameBuffer.DEPTH_ATTACHMENT);

                                this._normalMaterial = new src_Material({
                                    shader: new src_Shader({
                                        vertex: src_Shader.source('ecgl.normal.vertex'),
                                        fragment: src_Shader.source('ecgl.normal.fragment')
                                    })
                                });
                                this._normalMaterial.shader.enableTexture(['normalMap', 'bumpMap', 'roughnessMap']);

                                this._defaultNormalMap = util_texture.createBlank('#000');
                                this._defaultBumpMap = util_texture.createBlank('#000');
                                this._defaultRoughessMap = util_texture.createBlank('#000');


                                this._debugPass = new compositor_Pass({
                                    fragment: src_Shader.source('qtek.compositor.output')
                                });
                                this._debugPass.setUniform('texture', this._normalTex);
                                this._debugPass.material.shader.undefine('fragment', 'OUTPUT_ALPHA');
                            }

                            NormalPass.prototype.getDepthTexture = function() {
                                return this._depthTex;
                            };

                            NormalPass.prototype.getNormalTexture = function() {
                                return this._normalTex;
                            };

                            NormalPass.prototype.update = function(renderer, scene, camera) {

                                var width = renderer.getWidth();
                                var height = renderer.getHeight();

                                var depthTexture = this._depthTex;
                                var normalTexture = this._normalTex;

                                depthTexture.width = width;
                                depthTexture.height = height;
                                normalTexture.width = width;
                                normalTexture.height = height;

                                var opaqueQueue = scene.opaqueQueue;

                                var oldIfRenderObject = renderer.ifRenderObject;
                                var oldBeforeRenderObject = renderer.beforeRenderObject;
                                renderer.ifRenderObject = function(object) {
                                    return object.renderNormal;
                                };

                                renderer.beforeRenderObject = getBeforeRenderHook(
                                    renderer, this._defaultNormalMap, this._defaultBumpMap, this._defaultRoughessMap, this._normalMaterial
                                );
                                this._framebuffer.bind(renderer);
                                renderer.gl.clearColor(0, 0, 0, 0);
                                renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT | renderer.gl.DEPTH_BUFFER_BIT);
                                renderer.gl.disable(renderer.gl.BLEND);
                                renderer.renderQueue(opaqueQueue, camera, this._normalMaterial);
                                this._framebuffer.unbind(renderer);

                                renderer.ifRenderObject = oldIfRenderObject;
                                renderer.beforeRenderObject = oldBeforeRenderObject;
                            };

                            NormalPass.prototype.renderDebug = function(renderer) {
                                this._debugPass.render(renderer);
                            };

                            NormalPass.prototype.dispose = function(renderer) {
                                this._depthTex.dispose(renderer);
                                this._normalTex.dispose(renderer);
                            }

                            /* harmony default export */
                            var effect_NormalPass = (NormalPass);
                            // CONCATENATED MODULE: ./src/effect/EdgePass.js








                            function EdgePass(opt) {
                                opt = opt || {};

                                this._edgePass = new compositor_Pass({
                                    fragment: src_Shader.source('ecgl.edge')
                                });

                                this._edgePass.setUniform('normalTexture', opt.normalTexture);
                                this._edgePass.setUniform('depthTexture', opt.depthTexture);

                                this._targetTexture = new src_Texture2D({
                                    type: src_Texture.HALF_FLOAT
                                });

                                this._frameBuffer = new src_FrameBuffer();
                                this._frameBuffer.attach(this._targetTexture);
                            }

                            EdgePass.prototype.update = function(renderer, camera, sourceTexture, frame) {
                                var width = renderer.getWidth();
                                var height = renderer.getHeight();
                                var texture = this._targetTexture;
                                texture.width = width;
                                texture.height = height;
                                var frameBuffer = this._frameBuffer;

                                frameBuffer.bind(renderer);
                                this._edgePass.setUniform('projectionInv', camera.invProjectionMatrix._array);
                                this._edgePass.setUniform('textureSize', [width, height]);
                                this._edgePass.setUniform('texture', sourceTexture);
                                this._edgePass.render(renderer);

                                frameBuffer.unbind(renderer);
                            };

                            EdgePass.prototype.getTargetTexture = function() {
                                return this._targetTexture;
                            };

                            EdgePass.prototype.setParameter = function(name, val) {
                                this._edgePass.setUniform(name, val);
                            };

                            EdgePass.prototype.dispose = function(renderer) {
                                this._targetTexture.dispose(renderer);
                                this._frameBuffer.dispose(renderer);
                            };

                            /* harmony default export */
                            var effect_EdgePass = (EdgePass);
                            // CONCATENATED MODULE: ./src/effect/composite.js
                            /* harmony default export */
                            var composite = ({
                                'type': 'compositor',
                                'nodes': [{
                                        'name': 'source',
                                        'type': 'texture',
                                        'outputs': {
                                            'color': {}
                                        }
                                    },
                                    {
                                        'name': 'source_half',
                                        'shader': '#source(qtek.compositor.downsample)',
                                        'inputs': {
                                            'texture': 'source'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0 / 2)',
                                                    'height': 'expr(height * 1.0 / 2)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'textureSize': 'expr( [width * 1.0, height * 1.0] )'
                                        }
                                    },


                                    {
                                        'name': 'bright',
                                        'shader': '#source(qtek.compositor.bright)',
                                        'inputs': {
                                            'texture': 'source_half'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0 / 2)',
                                                    'height': 'expr(height * 1.0 / 2)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'threshold': 2,
                                            'scale': 4,
                                            'textureSize': 'expr([width * 1.0 / 2, height / 2])'
                                        }
                                    },

                                    {
                                        'name': 'bright_downsample_4',
                                        'shader': '#source(qtek.compositor.downsample)',
                                        'inputs': {
                                            'texture': 'bright'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0 / 4)',
                                                    'height': 'expr(height * 1.0 / 4)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'textureSize': 'expr( [width * 1.0 / 2, height / 2] )'
                                        }
                                    },
                                    {
                                        'name': 'bright_downsample_8',
                                        'shader': '#source(qtek.compositor.downsample)',
                                        'inputs': {
                                            'texture': 'bright_downsample_4'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0 / 8)',
                                                    'height': 'expr(height * 1.0 / 8)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'textureSize': 'expr( [width * 1.0 / 4, height / 4] )'
                                        }
                                    },
                                    {
                                        'name': 'bright_downsample_16',
                                        'shader': '#source(qtek.compositor.downsample)',
                                        'inputs': {
                                            'texture': 'bright_downsample_8'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0 / 16)',
                                                    'height': 'expr(height * 1.0 / 16)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'textureSize': 'expr( [width * 1.0 / 8, height / 8] )'
                                        }
                                    },
                                    {
                                        'name': 'bright_downsample_32',
                                        'shader': '#source(qtek.compositor.downsample)',
                                        'inputs': {
                                            'texture': 'bright_downsample_16'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0 / 32)',
                                                    'height': 'expr(height * 1.0 / 32)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'textureSize': 'expr( [width * 1.0 / 16, height / 16] )'
                                        }
                                    },


                                    {
                                        'name': 'bright_upsample_16_blur_h',
                                        'shader': '#source(qtek.compositor.gaussian_blur)',
                                        'inputs': {
                                            'texture': 'bright_downsample_32'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0 / 16)',
                                                    'height': 'expr(height * 1.0 / 16)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'blurSize': 1,
                                            'blurDir': 0.0,
                                            'textureSize': 'expr( [width * 1.0 / 32, height / 32] )'
                                        }
                                    },
                                    {
                                        'name': 'bright_upsample_16_blur_v',
                                        'shader': '#source(qtek.compositor.gaussian_blur)',
                                        'inputs': {
                                            'texture': 'bright_upsample_16_blur_h'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0 / 16)',
                                                    'height': 'expr(height * 1.0 / 16)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'blurSize': 1,
                                            'blurDir': 1.0,
                                            'textureSize': 'expr( [width * 1.0 / 32, height * 1.0 / 32] )'
                                        }
                                    },



                                    {
                                        'name': 'bright_upsample_8_blur_h',
                                        'shader': '#source(qtek.compositor.gaussian_blur)',
                                        'inputs': {
                                            'texture': 'bright_downsample_16'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0 / 8)',
                                                    'height': 'expr(height * 1.0 / 8)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'blurSize': 1,
                                            'blurDir': 0.0,
                                            'textureSize': 'expr( [width * 1.0 / 16, height * 1.0 / 16] )'
                                        }
                                    },
                                    {
                                        'name': 'bright_upsample_8_blur_v',
                                        'shader': '#source(qtek.compositor.gaussian_blur)',
                                        'inputs': {
                                            'texture': 'bright_upsample_8_blur_h'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0 / 8)',
                                                    'height': 'expr(height * 1.0 / 8)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'blurSize': 1,
                                            'blurDir': 1.0,
                                            'textureSize': 'expr( [width * 1.0 / 16, height * 1.0 / 16] )'
                                        }
                                    },
                                    {
                                        'name': 'bright_upsample_8_blend',
                                        'shader': '#source(qtek.compositor.blend)',
                                        'inputs': {
                                            'texture1': 'bright_upsample_8_blur_v',
                                            'texture2': 'bright_upsample_16_blur_v'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0 / 8)',
                                                    'height': 'expr(height * 1.0 / 8)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'weight1': 0.3,
                                            'weight2': 0.7
                                        }
                                    },


                                    {
                                        'name': 'bright_upsample_4_blur_h',
                                        'shader': '#source(qtek.compositor.gaussian_blur)',
                                        'inputs': {
                                            'texture': 'bright_downsample_8'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0 / 4)',
                                                    'height': 'expr(height * 1.0 / 4)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'blurSize': 1,
                                            'blurDir': 0.0,
                                            'textureSize': 'expr( [width * 1.0 / 8, height * 1.0 / 8] )'
                                        }
                                    },
                                    {
                                        'name': 'bright_upsample_4_blur_v',
                                        'shader': '#source(qtek.compositor.gaussian_blur)',
                                        'inputs': {
                                            'texture': 'bright_upsample_4_blur_h'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0 / 4)',
                                                    'height': 'expr(height * 1.0 / 4)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'blurSize': 1,
                                            'blurDir': 1.0,
                                            'textureSize': 'expr( [width * 1.0 / 8, height * 1.0 / 8] )'
                                        }
                                    },
                                    {
                                        'name': 'bright_upsample_4_blend',
                                        'shader': '#source(qtek.compositor.blend)',
                                        'inputs': {
                                            'texture1': 'bright_upsample_4_blur_v',
                                            'texture2': 'bright_upsample_8_blend'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0 / 4)',
                                                    'height': 'expr(height * 1.0 / 4)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'weight1': 0.3,
                                            'weight2': 0.7
                                        }
                                    },





                                    {
                                        'name': 'bright_upsample_2_blur_h',
                                        'shader': '#source(qtek.compositor.gaussian_blur)',
                                        'inputs': {
                                            'texture': 'bright_downsample_4'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0 / 2)',
                                                    'height': 'expr(height * 1.0 / 2)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'blurSize': 1,
                                            'blurDir': 0.0,
                                            'textureSize': 'expr( [width * 1.0 / 4, height * 1.0 / 4] )'
                                        }
                                    },
                                    {
                                        'name': 'bright_upsample_2_blur_v',
                                        'shader': '#source(qtek.compositor.gaussian_blur)',
                                        'inputs': {
                                            'texture': 'bright_upsample_2_blur_h'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0 / 2)',
                                                    'height': 'expr(height * 1.0 / 2)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'blurSize': 1,
                                            'blurDir': 1.0,
                                            'textureSize': 'expr( [width * 1.0 / 4, height * 1.0 / 4] )'
                                        }
                                    },
                                    {
                                        'name': 'bright_upsample_2_blend',
                                        'shader': '#source(qtek.compositor.blend)',
                                        'inputs': {
                                            'texture1': 'bright_upsample_2_blur_v',
                                            'texture2': 'bright_upsample_4_blend'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0 / 2)',
                                                    'height': 'expr(height * 1.0 / 2)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'weight1': 0.3,
                                            'weight2': 0.7
                                        }
                                    },



                                    {
                                        'name': 'bright_upsample_full_blur_h',
                                        'shader': '#source(qtek.compositor.gaussian_blur)',
                                        'inputs': {
                                            'texture': 'bright'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0)',
                                                    'height': 'expr(height * 1.0)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'blurSize': 1,
                                            'blurDir': 0.0,
                                            'textureSize': 'expr( [width * 1.0 / 2, height * 1.0 / 2] )'
                                        }
                                    },
                                    {
                                        'name': 'bright_upsample_full_blur_v',
                                        'shader': '#source(qtek.compositor.gaussian_blur)',
                                        'inputs': {
                                            'texture': 'bright_upsample_full_blur_h'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0)',
                                                    'height': 'expr(height * 1.0)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'blurSize': 1,
                                            'blurDir': 1.0,
                                            'textureSize': 'expr( [width * 1.0 / 2, height * 1.0 / 2] )'
                                        }
                                    },
                                    {
                                        'name': 'bloom_composite',
                                        'shader': '#source(qtek.compositor.blend)',
                                        'inputs': {
                                            'texture1': 'bright_upsample_full_blur_v',
                                            'texture2': 'bright_upsample_2_blend'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0)',
                                                    'height': 'expr(height * 1.0)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'weight1': 0.3,
                                            'weight2': 0.7
                                        }
                                    },


                                    {
                                        'name': 'coc',
                                        'shader': '#source(ecgl.dof.coc)',
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'minFilter': 'NEAREST',
                                                    'magFilter': 'NEAREST',
                                                    'width': 'expr(width * 1.0)',
                                                    'height': 'expr(height * 1.0)'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'focalDist': 50,
                                            'focalRange': 30
                                        }
                                    },

                                    {
                                        'name': 'dof_far_blur',
                                        'shader': '#source(ecgl.dof.diskBlur)',
                                        'inputs': {
                                            'texture': 'source',
                                            'coc': 'coc'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0)',
                                                    'height': 'expr(height * 1.0)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'textureSize': 'expr( [width * 1.0, height * 1.0] )'
                                        }
                                    },
                                    {
                                        'name': 'dof_near_blur',
                                        'shader': '#source(ecgl.dof.diskBlur)',
                                        'inputs': {
                                            'texture': 'source',
                                            'coc': 'coc'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0)',
                                                    'height': 'expr(height * 1.0)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'textureSize': 'expr( [width * 1.0, height * 1.0] )'
                                        },
                                        'defines': {
                                            'BLUR_NEARFIELD': null
                                        }
                                    },


                                    {
                                        'name': 'dof_coc_blur',
                                        'shader': '#source(ecgl.dof.diskBlur)',
                                        'inputs': {
                                            'texture': 'coc'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'minFilter': 'NEAREST',
                                                    'magFilter': 'NEAREST',
                                                    'width': 'expr(width * 1.0)',
                                                    'height': 'expr(height * 1.0)'
                                                }
                                            }
                                        },
                                        'parameters': {
                                            'textureSize': 'expr( [width * 1.0, height * 1.0] )'
                                        },
                                        'defines': {
                                            'BLUR_COC': null
                                        }
                                    },

                                    {
                                        'name': 'dof_composite',
                                        'shader': '#source(ecgl.dof.composite)',
                                        'inputs': {
                                            'original': 'source',
                                            'blurred': 'dof_far_blur',
                                            'nearfield': 'dof_near_blur',
                                            'coc': 'coc',
                                            'nearcoc': 'dof_coc_blur'
                                        },
                                        'outputs': {
                                            'color': {
                                                'parameters': {
                                                    'width': 'expr(width * 1.0)',
                                                    'height': 'expr(height * 1.0)',
                                                    'type': 'HALF_FLOAT'
                                                }
                                            }
                                        }
                                    },
                                    {
                                        'name': 'composite',
                                        'shader': '#source(qtek.compositor.hdr.composite)',
                                        'inputs': {
                                            'texture': 'source',
                                            'bloom': 'bloom_composite'
                                        },
                                        'defines': {
                                            // Images are all premultiplied alpha before composite because of blending.
                                            // 'PREMULTIPLY_ALPHA': null,
                                            // 'DEBUG': 2
                                        }
                                    },
                                    {
                                        'name': 'FXAA',
                                        'shader': '#source(qtek.compositor.fxaa)',
                                        'inputs': {
                                            'texture': 'composite'
                                        }
                                    }
                                ]
                            });
                            // CONCATENATED MODULE: ./node_modules/qtek/src/shader/source/compositor/blur.glsl.js
                            /* harmony default export */
                            var blur_glsl = ("@export qtek.compositor.kernel.gaussian_9\nfloat gaussianKernel[9];\ngaussianKernel[0] = 0.07;\ngaussianKernel[1] = 0.09;\ngaussianKernel[2] = 0.12;\ngaussianKernel[3] = 0.14;\ngaussianKernel[4] = 0.16;\ngaussianKernel[5] = 0.14;\ngaussianKernel[6] = 0.12;\ngaussianKernel[7] = 0.09;\ngaussianKernel[8] = 0.07;\n@end\n@export qtek.compositor.kernel.gaussian_13\nfloat gaussianKernel[13];\ngaussianKernel[0] = 0.02;\ngaussianKernel[1] = 0.03;\ngaussianKernel[2] = 0.06;\ngaussianKernel[3] = 0.08;\ngaussianKernel[4] = 0.11;\ngaussianKernel[5] = 0.13;\ngaussianKernel[6] = 0.14;\ngaussianKernel[7] = 0.13;\ngaussianKernel[8] = 0.11;\ngaussianKernel[9] = 0.08;\ngaussianKernel[10] = 0.06;\ngaussianKernel[11] = 0.03;\ngaussianKernel[12] = 0.02;\n@end\n@export qtek.compositor.gaussian_blur\n#define SHADER_NAME gaussian_blur\nuniform sampler2D texture;varying vec2 v_Texcoord;\nuniform float blurSize : 2.0;\nuniform vec2 textureSize : [512.0, 512.0];\nuniform float blurDir : 0.0;\n@import qtek.util.rgbm\n@import qtek.util.clamp_sample\nvoid main (void)\n{\n    @import qtek.compositor.kernel.gaussian_9\n    vec2 off = blurSize / textureSize;\n    off *= vec2(1.0 - blurDir, blurDir);\n    vec4 sum = vec4(0.0);\n    float weightAll = 0.0;\n    for (int i = 0; i < 9; i++) {\n        float w = gaussianKernel[i];\n        vec4 texel = decodeHDR(clampSample(texture, v_Texcoord + float(i - 4) * off));\n        sum += texel * w;\n        weightAll += w;\n    }\n    gl_FragColor = encodeHDR(sum / max(weightAll, 0.01));\n}\n@end\n");

                            // CONCATENATED MODULE: ./node_modules/qtek/src/shader/source/compositor/lut.glsl.js
                            /* harmony default export */
                            var lut_glsl = ("\n@export qtek.compositor.lut\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\nuniform sampler2D lookup;\nvoid main()\n{\n    vec4 tex = texture2D(texture, v_Texcoord);\n    float blueColor = tex.b * 63.0;\n    vec2 quad1;\n    quad1.y = floor(floor(blueColor) / 8.0);\n    quad1.x = floor(blueColor) - (quad1.y * 8.0);\n    vec2 quad2;\n    quad2.y = floor(ceil(blueColor) / 8.0);\n    quad2.x = ceil(blueColor) - (quad2.y * 8.0);\n    vec2 texPos1;\n    texPos1.x = (quad1.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * tex.r);\n    texPos1.y = (quad1.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * tex.g);\n    vec2 texPos2;\n    texPos2.x = (quad2.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * tex.r);\n    texPos2.y = (quad2.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * tex.g);\n    vec4 newColor1 = texture2D(lookup, texPos1);\n    vec4 newColor2 = texture2D(lookup, texPos2);\n    vec4 newColor = mix(newColor1, newColor2, fract(blueColor));\n    gl_FragColor = vec4(newColor.rgb, tex.w);\n}\n@end");

                            // CONCATENATED MODULE: ./node_modules/qtek/src/shader/source/compositor/output.glsl.js
                            /* harmony default export */
                            var output_glsl = ("@export qtek.compositor.output\n#define OUTPUT_ALPHA\nvarying vec2 v_Texcoord;\nuniform sampler2D texture;\n@import qtek.util.rgbm\nvoid main()\n{\n    vec4 tex = decodeHDR(texture2D(texture, v_Texcoord));\n    gl_FragColor.rgb = tex.rgb;\n#ifdef OUTPUT_ALPHA\n    gl_FragColor.a = tex.a;\n#else\n    gl_FragColor.a = 1.0;\n#endif\n    gl_FragColor = encodeHDR(gl_FragColor);\n#ifdef PREMULTIPLY_ALPHA\n    gl_FragColor.rgb *= gl_FragColor.a;\n#endif\n}\n@end");

                            // CONCATENATED MODULE: ./node_modules/qtek/src/shader/source/compositor/bright.glsl.js
                            /* harmony default export */
                            var bright_glsl = ("@export qtek.compositor.bright\nuniform sampler2D texture;\nuniform float threshold : 1;\nuniform float scale : 1.0;\nuniform vec2 textureSize: [512, 512];\nvarying vec2 v_Texcoord;\nconst vec3 lumWeight = vec3(0.2125, 0.7154, 0.0721);\n@import qtek.util.rgbm\nvec4 median(vec4 a, vec4 b, vec4 c)\n{\n    return a + b + c - min(min(a, b), c) - max(max(a, b), c);\n}\nvoid main()\n{\n    vec4 texel = decodeHDR(texture2D(texture, v_Texcoord));\n#ifdef ANTI_FLICKER\n    vec3 d = 1.0 / textureSize.xyx * vec3(1.0, 1.0, 0.0);\n    vec4 s1 = decodeHDR(texture2D(texture, v_Texcoord - d.xz));\n    vec4 s2 = decodeHDR(texture2D(texture, v_Texcoord + d.xz));\n    vec4 s3 = decodeHDR(texture2D(texture, v_Texcoord - d.zy));\n    vec4 s4 = decodeHDR(texture2D(texture, v_Texcoord + d.zy));\n    texel = median(median(texel, s1, s2), s3, s4);\n#endif\n    float lum = dot(texel.rgb , lumWeight);\n    vec4 color;\n    if (lum > threshold && texel.a > 0.0)\n    {\n        color = vec4(texel.rgb * scale, texel.a * scale);\n    }\n    else\n    {\n        color = vec4(0.0);\n    }\n    gl_FragColor = encodeHDR(color);\n}\n@end\n");

                            // CONCATENATED MODULE: ./node_modules/qtek/src/shader/source/compositor/downsample.glsl.js
                            /* harmony default export */
                            var downsample_glsl = ("@export qtek.compositor.downsample\nuniform sampler2D texture;\nuniform vec2 textureSize : [512, 512];\nvarying vec2 v_Texcoord;\n@import qtek.util.rgbm\nfloat brightness(vec3 c)\n{\n    return max(max(c.r, c.g), c.b);\n}\n@import qtek.util.clamp_sample\nvoid main()\n{\n    vec4 d = vec4(-1.0, -1.0, 1.0, 1.0) / textureSize.xyxy;\n#ifdef ANTI_FLICKER\n    vec3 s1 = decodeHDR(clampSample(texture, v_Texcoord + d.xy)).rgb;\n    vec3 s2 = decodeHDR(clampSample(texture, v_Texcoord + d.zy)).rgb;\n    vec3 s3 = decodeHDR(clampSample(texture, v_Texcoord + d.xw)).rgb;\n    vec3 s4 = decodeHDR(clampSample(texture, v_Texcoord + d.zw)).rgb;\n    float s1w = 1.0 / (brightness(s1) + 1.0);\n    float s2w = 1.0 / (brightness(s2) + 1.0);\n    float s3w = 1.0 / (brightness(s3) + 1.0);\n    float s4w = 1.0 / (brightness(s4) + 1.0);\n    float oneDivideSum = 1.0 / (s1w + s2w + s3w + s4w);\n    vec4 color = vec4(\n        (s1 * s1w + s2 * s2w + s3 * s3w + s4 * s4w) * oneDivideSum,\n        1.0\n    );\n#else\n    vec4 color = decodeHDR(clampSample(texture, v_Texcoord + d.xy));\n    color += decodeHDR(clampSample(texture, v_Texcoord + d.zy));\n    color += decodeHDR(clampSample(texture, v_Texcoord + d.xw));\n    color += decodeHDR(clampSample(texture, v_Texcoord + d.zw));\n    color *= 0.25;\n#endif\n    gl_FragColor = encodeHDR(color);\n}\n@end");

                            // CONCATENATED MODULE: ./node_modules/qtek/src/shader/source/compositor/upsample.glsl.js
                            /* harmony default export */
                            var upsample_glsl = ("\n@export qtek.compositor.upsample\n#define HIGH_QUALITY\nuniform sampler2D texture;\nuniform vec2 textureSize : [512, 512];\nuniform float sampleScale: 0.5;\nvarying vec2 v_Texcoord;\n@import qtek.util.rgbm\n@import qtek.util.clamp_sample\nvoid main()\n{\n#ifdef HIGH_QUALITY\n    vec4 d = vec4(1.0, 1.0, -1.0, 0.0) / textureSize.xyxy * sampleScale;\n    vec4 s;\n    s  = decodeHDR(clampSample(texture, v_Texcoord - d.xy));\n    s += decodeHDR(clampSample(texture, v_Texcoord - d.wy)) * 2.0;\n    s += decodeHDR(clampSample(texture, v_Texcoord - d.zy));\n    s += decodeHDR(clampSample(texture, v_Texcoord + d.zw)) * 2.0;\n    s += decodeHDR(clampSample(texture, v_Texcoord       )) * 4.0;\n    s += decodeHDR(clampSample(texture, v_Texcoord + d.xw)) * 2.0;\n    s += decodeHDR(clampSample(texture, v_Texcoord + d.zy));\n    s += decodeHDR(clampSample(texture, v_Texcoord + d.wy)) * 2.0;\n    s += decodeHDR(clampSample(texture, v_Texcoord + d.xy));\n    gl_FragColor = encodeHDR(s / 16.0);\n#else\n    vec4 d = vec4(-1.0, -1.0, +1.0, +1.0) / textureSize.xyxy;\n    vec4 s;\n    s  = decodeHDR(clampSample(texture, v_Texcoord + d.xy));\n    s += decodeHDR(clampSample(texture, v_Texcoord + d.zy));\n    s += decodeHDR(clampSample(texture, v_Texcoord + d.xw));\n    s += decodeHDR(clampSample(texture, v_Texcoord + d.zw));\n    gl_FragColor = encodeHDR(s / 4.0);\n#endif\n}\n@end");

                            // CONCATENATED MODULE: ./node_modules/qtek/src/shader/source/compositor/hdr.glsl.js
                            /* harmony default export */
                            var hdr_glsl = ("@export qtek.compositor.hdr.composite\nuniform sampler2D texture;\n#ifdef BLOOM_ENABLED\nuniform sampler2D bloom;\n#endif\n#ifdef LENSFLARE_ENABLED\nuniform sampler2D lensflare;\nuniform sampler2D lensdirt;\n#endif\n#ifdef LUM_ENABLED\nuniform sampler2D lum;\n#endif\n#ifdef LUT_ENABLED\nuniform sampler2D lut;\n#endif\n#ifdef COLOR_CORRECTION\nuniform float brightness : 0.0;\nuniform float contrast : 1.0;\nuniform float saturation : 1.0;\n#endif\n#ifdef VIGNETTE\nuniform float vignetteDarkness: 1.0;\nuniform float vignetteOffset: 1.0;\n#endif\nuniform float exposure : 1.0;\nuniform float bloomIntensity : 0.25;\nuniform float lensflareIntensity : 1;\nvarying vec2 v_Texcoord;\n@import qtek.util.srgb\nvec3 ACESToneMapping(vec3 color)\n{\n    const float A = 2.51;\n    const float B = 0.03;\n    const float C = 2.43;\n    const float D = 0.59;\n    const float E = 0.14;\n    return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nfloat eyeAdaption(float fLum)\n{\n    return mix(0.2, fLum, 0.5);\n}\n#ifdef LUT_ENABLED\nvec3 lutTransform(vec3 color) {\n    float blueColor = color.b * 63.0;\n    vec2 quad1;\n    quad1.y = floor(floor(blueColor) / 8.0);\n    quad1.x = floor(blueColor) - (quad1.y * 8.0);\n    vec2 quad2;\n    quad2.y = floor(ceil(blueColor) / 8.0);\n    quad2.x = ceil(blueColor) - (quad2.y * 8.0);\n    vec2 texPos1;\n    texPos1.x = (quad1.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.r);\n    texPos1.y = (quad1.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.g);\n    vec2 texPos2;\n    texPos2.x = (quad2.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.r);\n    texPos2.y = (quad2.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.g);\n    vec4 newColor1 = texture2D(lut, texPos1);\n    vec4 newColor2 = texture2D(lut, texPos2);\n    vec4 newColor = mix(newColor1, newColor2, fract(blueColor));\n    return newColor.rgb;\n}\n#endif\n@import qtek.util.rgbm\nvoid main()\n{\n    vec4 texel = vec4(0.0);\n    vec4 originalTexel = vec4(0.0);\n#ifdef TEXTURE_ENABLED\n    texel = decodeHDR(texture2D(texture, v_Texcoord));\n    originalTexel = texel;\n#endif\n#ifdef BLOOM_ENABLED\n    vec4 bloomTexel = decodeHDR(texture2D(bloom, v_Texcoord));\n    texel.rgb += bloomTexel.rgb * bloomIntensity;\n    texel.a += bloomTexel.a * bloomIntensity;\n#endif\n#ifdef LENSFLARE_ENABLED\n    texel += decodeHDR(texture2D(lensflare, v_Texcoord)) * texture2D(lensdirt, v_Texcoord) * lensflareIntensity;\n#endif\n    texel.a = min(texel.a, 1.0);\n#ifdef LUM_ENABLED\n    float fLum = texture2D(lum, vec2(0.5, 0.5)).r;\n    float adaptedLumDest = 3.0 / (max(0.1, 1.0 + 10.0*eyeAdaption(fLum)));\n    float exposureBias = adaptedLumDest * exposure;\n#else\n    float exposureBias = exposure;\n#endif\n    texel.rgb *= exposureBias;\n    texel.rgb = ACESToneMapping(texel.rgb);\n    texel = linearTosRGB(texel);\n#ifdef LUT_ENABLED\n    texel.rgb = lutTransform(clamp(texel.rgb,vec3(0.0),vec3(1.0)));\n#endif\n#ifdef COLOR_CORRECTION\n    texel.rgb = clamp(texel.rgb + vec3(brightness), 0.0, 1.0);\n    texel.rgb = clamp((texel.rgb - vec3(0.5))*contrast+vec3(0.5), 0.0, 1.0);\n    float lum = dot(texel.rgb, vec3(0.2125, 0.7154, 0.0721));\n    texel.rgb = mix(vec3(lum), texel.rgb, saturation);\n#endif\n#ifdef VIGNETTE\n    vec2 uv = (v_Texcoord - vec2(0.5)) * vec2(vignetteOffset);\n    texel.rgb = mix(texel.rgb, vec3(1.0 - vignetteDarkness), dot(uv, uv));\n#endif\n    gl_FragColor = encodeHDR(texel);\n#ifdef DEBUG\n    #if DEBUG == 1\n    gl_FragColor = encodeHDR(decodeHDR(texture2D(texture, v_Texcoord)));\n    #elif DEBUG == 2\n    gl_FragColor = encodeHDR(decodeHDR(texture2D(bloom, v_Texcoord)) * bloomIntensity);\n    #elif DEBUG == 3\n    gl_FragColor = encodeHDR(decodeHDR(texture2D(lensflare, v_Texcoord) * lensflareIntensity));\n    #endif\n#endif\n    if (originalTexel.a <= 0.01) {\n        gl_FragColor.a = dot(gl_FragColor.rgb, vec3(0.2125, 0.7154, 0.0721));\n    }\n#ifdef PREMULTIPLY_ALPHA\n    gl_FragColor.rgb *= gl_FragColor.a;\n#endif\n}\n@end");

                            // CONCATENATED MODULE: ./node_modules/qtek/src/shader/source/compositor/blend.glsl.js
                            /* harmony default export */
                            var blend_glsl = ("@export qtek.compositor.blend\n#ifdef TEXTURE1_ENABLED\nuniform sampler2D texture1;\nuniform float weight1 : 1.0;\n#endif\n#ifdef TEXTURE2_ENABLED\nuniform sampler2D texture2;\nuniform float weight2 : 1.0;\n#endif\n#ifdef TEXTURE3_ENABLED\nuniform sampler2D texture3;\nuniform float weight3 : 1.0;\n#endif\n#ifdef TEXTURE4_ENABLED\nuniform sampler2D texture4;\nuniform float weight4 : 1.0;\n#endif\n#ifdef TEXTURE5_ENABLED\nuniform sampler2D texture5;\nuniform float weight5 : 1.0;\n#endif\n#ifdef TEXTURE6_ENABLED\nuniform sampler2D texture6;\nuniform float weight6 : 1.0;\n#endif\nvarying vec2 v_Texcoord;\n@import qtek.util.rgbm\nvoid main()\n{\n    vec4 tex = vec4(0.0);\n#ifdef TEXTURE1_ENABLED\n    tex += decodeHDR(texture2D(texture1, v_Texcoord)) * weight1;\n#endif\n#ifdef TEXTURE2_ENABLED\n    tex += decodeHDR(texture2D(texture2, v_Texcoord)) * weight2;\n#endif\n#ifdef TEXTURE3_ENABLED\n    tex += decodeHDR(texture2D(texture3, v_Texcoord)) * weight3;\n#endif\n#ifdef TEXTURE4_ENABLED\n    tex += decodeHDR(texture2D(texture4, v_Texcoord)) * weight4;\n#endif\n#ifdef TEXTURE5_ENABLED\n    tex += decodeHDR(texture2D(texture5, v_Texcoord)) * weight5;\n#endif\n#ifdef TEXTURE6_ENABLED\n    tex += decodeHDR(texture2D(texture6, v_Texcoord)) * weight6;\n#endif\n    gl_FragColor = encodeHDR(tex);\n}\n@end");

                            // CONCATENATED MODULE: ./node_modules/qtek/src/shader/source/compositor/fxaa.glsl.js
                            /* harmony default export */
                            var fxaa_glsl = ("@export qtek.compositor.fxaa\nuniform sampler2D texture;\nuniform vec4 viewport : VIEWPORT;\nvarying vec2 v_Texcoord;\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n@import qtek.util.rgbm\nvoid main()\n{\n    vec2 resolution = 1.0 / viewport.zw;\n    vec3 rgbNW =  decodeHDR( texture2D( texture, ( gl_FragCoord.xy + vec2( -1.0, -1.0 ) ) * resolution ) ).xyz;\n    vec3 rgbNE = decodeHDR( texture2D( texture, ( gl_FragCoord.xy + vec2( 1.0, -1.0 ) ) * resolution ) ).xyz;\n    vec3 rgbSW = decodeHDR( texture2D( texture, ( gl_FragCoord.xy + vec2( -1.0, 1.0 ) ) * resolution ) ).xyz;\n    vec3 rgbSE = decodeHDR( texture2D( texture, ( gl_FragCoord.xy + vec2( 1.0, 1.0 ) ) * resolution ) ).xyz;\n    vec4 rgbaM  = decodeHDR( texture2D( texture,  gl_FragCoord.xy  * resolution ) );\n    vec3 rgbM  = rgbaM.xyz;\n    float opacity  = rgbaM.w;\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * resolution;\n    vec3 rgbA = decodeHDR( texture2D( texture, gl_FragCoord.xy  * resolution + dir * ( 1.0 / 3.0 - 0.5 ) ) ).xyz;\n    rgbA += decodeHDR( texture2D( texture, gl_FragCoord.xy  * resolution + dir * ( 2.0 / 3.0 - 0.5 ) ) ).xyz;\n    rgbA *= 0.5;\n    vec3 rgbB = decodeHDR( texture2D( texture, gl_FragCoord.xy  * resolution + dir * -0.5 ) ).xyz;\n    rgbB += decodeHDR( texture2D( texture, gl_FragCoord.xy  * resolution + dir * 0.5 ) ).xyz;\n    rgbB *= 0.25;\n    rgbB += rgbA * 0.5;\n    float lumaB = dot( rgbB, luma );\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) )\n    {\n        gl_FragColor = vec4( rgbA, opacity );\n    }\n    else {\n        gl_FragColor = vec4( rgbB, opacity );\n    }\n}\n@end");

                            // CONCATENATED MODULE: ./src/effect/DOF.glsl.js
                            /* harmony default export */
                            var DOF_glsl = ("@export ecgl.dof.coc\n\nuniform sampler2D depth;\n\nuniform float zNear: 0.1;\nuniform float zFar: 2000;\n\nuniform float focalDistance: 3;\nuniform float focalRange: 1;\nuniform float focalLength: 30;\nuniform float fstop: 2.8;\n\nvarying vec2 v_Texcoord;\n\n@import qtek.util.encode_float\n\nvoid main()\n{\n float z = texture2D(depth, v_Texcoord).r * 2.0 - 1.0;\n\n float dist = 2.0 * zNear * zFar / (zFar + zNear - z * (zFar - zNear));\n\n float aperture = focalLength / fstop;\n\n float coc;\n\n float uppper = focalDistance + focalRange;\n float lower = focalDistance - focalRange;\n if (dist <= uppper && dist >= lower) {\n coc = 0.5;\n }\n else {\n float focalAdjusted = dist > uppper ? uppper : lower;\n\n coc = abs(aperture * (focalLength * (dist - focalAdjusted)) / (dist * (focalAdjusted - focalLength)));\n coc = clamp(coc, 0.0, 2.0) / 2.00001;\n\n if (dist < lower) {\n coc = -coc;\n }\n coc = coc * 0.5 + 0.5;\n }\n\n gl_FragColor = encodeFloat(coc);\n}\n@end\n\n\n@export ecgl.dof.composite\n\n#define DEBUG 0\n\nuniform sampler2D original;\nuniform sampler2D blurred;\nuniform sampler2D nearfield;\nuniform sampler2D coc;\nuniform sampler2D nearcoc;\nvarying vec2 v_Texcoord;\n\n@import qtek.util.rgbm\n@import qtek.util.float\n\nvoid main()\n{\n vec4 blurredColor = decodeHDR(texture2D(blurred, v_Texcoord));\n vec4 originalColor = decodeHDR(texture2D(original, v_Texcoord));\n\n float fCoc = decodeFloat(texture2D(coc, v_Texcoord));\n\n fCoc = abs(fCoc * 2.0 - 1.0);\n\n float weight = smoothstep(0.0, 1.0, fCoc);\n \n#ifdef NEARFIELD_ENABLED\n vec4 nearfieldColor = decodeHDR(texture2D(nearfield, v_Texcoord));\n float fNearCoc = decodeFloat(texture2D(nearcoc, v_Texcoord));\n fNearCoc = abs(fNearCoc * 2.0 - 1.0);\n\n gl_FragColor = encodeHDR(\n mix(\n nearfieldColor, mix(originalColor, blurredColor, weight),\n pow(1.0 - fNearCoc, 4.0)\n )\n );\n#else\n gl_FragColor = encodeHDR(mix(originalColor, blurredColor, weight));\n#endif\n\n}\n\n@end\n\n\n\n@export ecgl.dof.diskBlur\n\n#define POISSON_KERNEL_SIZE 16;\n\nuniform sampler2D texture;\nuniform sampler2D coc;\nvarying vec2 v_Texcoord;\n\nuniform float blurRadius : 10.0;\nuniform vec2 textureSize : [512.0, 512.0];\n\nuniform vec2 poissonKernel[POISSON_KERNEL_SIZE];\n\nuniform float percent;\n\nfloat nrand(const in vec2 n) {\n return fract(sin(dot(n.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n@import qtek.util.rgbm\n@import qtek.util.float\n\n\nvoid main()\n{\n vec2 offset = blurRadius / textureSize;\n\n float rnd = 6.28318 * nrand(v_Texcoord + 0.07 * percent );\n float cosa = cos(rnd);\n float sina = sin(rnd);\n vec4 basis = vec4(cosa, -sina, sina, cosa);\n\n#if !defined(BLUR_NEARFIELD) && !defined(BLUR_COC)\n offset *= abs(decodeFloat(texture2D(coc, v_Texcoord)) * 2.0 - 1.0);\n#endif\n\n#ifdef BLUR_COC\n float cocSum = 0.0;\n#else\n vec4 color = vec4(0.0);\n#endif\n\n\n float weightSum = 0.0;\n\n for (int i = 0; i < POISSON_KERNEL_SIZE; i++) {\n vec2 ofs = poissonKernel[i];\n\n ofs = vec2(dot(ofs, basis.xy), dot(ofs, basis.zw));\n\n vec2 uv = v_Texcoord + ofs * offset;\n vec4 texel = texture2D(texture, uv);\n\n float w = 1.0;\n#ifdef BLUR_COC\n float fCoc = decodeFloat(texel) * 2.0 - 1.0;\n cocSum += clamp(fCoc, -1.0, 0.0) * w;\n#else\n texel = decodeHDR(texel);\n #if !defined(BLUR_NEARFIELD)\n float fCoc = decodeFloat(texture2D(coc, uv)) * 2.0 - 1.0;\n w *= abs(fCoc);\n #endif\n color += texel * w;\n#endif\n\n weightSum += w;\n }\n\n#ifdef BLUR_COC\n gl_FragColor = encodeFloat(clamp(cocSum / weightSum, -1.0, 0.0) * 0.5 + 0.5);\n#else\n color /= weightSum;\n gl_FragColor = encodeHDR(color);\n#endif\n}\n\n@end");

                            // CONCATENATED MODULE: ./src/effect/edge.glsl.js
                            /* harmony default export */
                            var edge_glsl = ("@export ecgl.edge\n\nuniform sampler2D texture;\n\nuniform sampler2D normalTexture;\nuniform sampler2D depthTexture;\n\nuniform mat4 projectionInv;\n\nuniform vec2 textureSize;\n\nuniform vec4 edgeColor: [0,0,0,0.8];\n\nvarying vec2 v_Texcoord;\n\nvec3 packColor(vec2 coord) {\n float z = texture2D(depthTexture, coord).r * 2.0 - 1.0;\n vec4 p = vec4(v_Texcoord * 2.0 - 1.0, z, 1.0);\n vec4 p4 = projectionInv * p;\n\n return vec3(\n texture2D(normalTexture, coord).rg,\n -p4.z / p4.w / 5.0\n );\n}\n\nvoid main() {\n vec2 cc = v_Texcoord;\n vec3 center = packColor(cc);\n\n float size = clamp(1.0 - (center.z - 10.0) / 100.0, 0.0, 1.0) * 0.5;\n float dx = size / textureSize.x;\n float dy = size / textureSize.y;\n\n vec2 coord;\n vec3 topLeft = packColor(cc+vec2(-dx, -dy));\n vec3 top = packColor(cc+vec2(0.0, -dy));\n vec3 topRight = packColor(cc+vec2(dx, -dy));\n vec3 left = packColor(cc+vec2(-dx, 0.0));\n vec3 right = packColor(cc+vec2(dx, 0.0));\n vec3 bottomLeft = packColor(cc+vec2(-dx, dy));\n vec3 bottom = packColor(cc+vec2(0.0, dy));\n vec3 bottomRight = packColor(cc+vec2(dx, dy));\n\n vec3 v = -topLeft-2.0*top-topRight+bottomLeft+2.0*bottom+bottomRight;\n vec3 h = -bottomLeft-2.0*left-topLeft+bottomRight+2.0*right+topRight;\n\n float edge = sqrt(dot(h, h) + dot(v, v));\n\n edge = smoothstep(0.8, 1.0, edge);\n\n gl_FragColor = mix(texture2D(texture, v_Texcoord), vec4(edgeColor.rgb, 1.0), edgeColor.a * edge);\n}\n@end");

                            // CONCATENATED MODULE: ./src/effect/EffectCompositor.js




























                            src_Shader['import'](blur_glsl);
                            src_Shader['import'](lut_glsl);
                            src_Shader['import'](output_glsl);
                            src_Shader['import'](bright_glsl);
                            src_Shader['import'](downsample_glsl);
                            src_Shader['import'](upsample_glsl);
                            src_Shader['import'](hdr_glsl);
                            src_Shader['import'](blend_glsl);
                            src_Shader['import'](fxaa_glsl);
                            src_Shader['import'](DOF_glsl);
                            src_Shader['import'](edge_glsl);


                            var commonOutputs = {
                                color: {
                                    parameters: {
                                        width: function(renderer) {
                                            return renderer.getWidth();
                                        },
                                        height: function(renderer) {
                                            return renderer.getHeight();
                                        }
                                    }
                                }
                            }

                            var FINAL_NODES_CHAIN = ['composite', 'FXAA'];

                            function EffectCompositor() {
                                this._sourceTexture = new src_Texture2D({
                                    type: src_Texture.HALF_FLOAT
                                });
                                this._depthTexture = new src_Texture2D({
                                    format: src_Texture.DEPTH_COMPONENT,
                                    type: src_Texture.UNSIGNED_INT
                                });

                                this._framebuffer = new src_FrameBuffer();
                                this._framebuffer.attach(this._sourceTexture);
                                this._framebuffer.attach(this._depthTexture, src_FrameBuffer.DEPTH_ATTACHMENT);

                                this._normalPass = new effect_NormalPass();

                                var loader = new FX();
                                this._compositor = loader.parse(composite);

                                var sourceNode = this._compositor.getNodeByName('source');
                                sourceNode.texture = this._sourceTexture;
                                var cocNode = this._compositor.getNodeByName('coc');

                                this._sourceNode = sourceNode;
                                this._cocNode = cocNode;
                                this._compositeNode = this._compositor.getNodeByName('composite');
                                this._fxaaNode = this._compositor.getNodeByName('FXAA');

                                this._dofBlurNodes = ['dof_far_blur', 'dof_near_blur', 'dof_coc_blur'].map(function(name) {
                                    return this._compositor.getNodeByName(name);
                                }, this);

                                this._dofBlurKernel = 0;
                                this._dofBlurKernelSize = new Float32Array(0);

                                this._finalNodesChain = FINAL_NODES_CHAIN.map(function(name) {
                                    return this._compositor.getNodeByName(name);
                                }, this);

                                var gBufferObj = {
                                    normalTexture: this._normalPass.getNormalTexture(),
                                    depthTexture: this._normalPass.getDepthTexture()
                                };
                                this._ssaoPass = new effect_SSAOPass(gBufferObj);
                                this._ssrPass = new effect_SSRPass(gBufferObj)
                                this._edgePass = new effect_EdgePass(gBufferObj);
                            }

                            EffectCompositor.prototype.resize = function(width, height, dpr) {
                                dpr = dpr || 1;
                                var width = width * dpr;
                                var height = height * dpr;
                                var sourceTexture = this._sourceTexture;
                                var depthTexture = this._depthTexture;

                                sourceTexture.width = width;
                                sourceTexture.height = height;
                                depthTexture.width = width;
                                depthTexture.height = height;
                            };

                            EffectCompositor.prototype._ifRenderNormalPass = function() {
                                return this._enableSSAO || this._enableEdge || this._enableSSR;
                            };

                            EffectCompositor.prototype._getPrevNode = function(node) {
                                var idx = FINAL_NODES_CHAIN.indexOf(node.name) - 1;
                                var prevNode = this._finalNodesChain[idx];
                                while (prevNode && !this._compositor.getNodeByName(prevNode.name)) {
                                    idx -= 1;
                                    prevNode = this._finalNodesChain[idx];
                                }
                                return prevNode;
                            };
                            EffectCompositor.prototype._getNextNode = function(node) {
                                var idx = FINAL_NODES_CHAIN.indexOf(node.name) + 1;
                                var nextNode = this._finalNodesChain[idx];
                                while (nextNode && !this._compositor.getNodeByName(nextNode.name)) {
                                    idx += 1;
                                    nextNode = this._finalNodesChain[idx];
                                }
                                return nextNode;
                            };
                            EffectCompositor.prototype._addChainNode = function(node) {
                                var prevNode = this._getPrevNode(node);
                                var nextNode = this._getNextNode(node);
                                if (!prevNode) {
                                    return;
                                }

                                prevNode.outputs = commonOutputs;
                                node.inputs.texture = prevNode.name;
                                if (nextNode) {
                                    node.outputs = commonOutputs;
                                    nextNode.inputs.texture = node.name;
                                } else {
                                    node.outputs = null;
                                }
                                this._compositor.addNode(node);
                            };
                            EffectCompositor.prototype._removeChainNode = function(node) {
                                var prevNode = this._getPrevNode(node);
                                var nextNode = this._getNextNode(node);
                                if (!prevNode) {
                                    return;
                                }

                                if (nextNode) {
                                    prevNode.outputs = commonOutputs;
                                    nextNode.inputs.texture = prevNode.name;
                                } else {
                                    prevNode.outputs = null;
                                }
                                this._compositor.removeNode(node);
                            };
                            /**
                             * Update normal
                             */
                            EffectCompositor.prototype.updateNormal = function(renderer, scene, camera, frame) {
                                if (this._ifRenderNormalPass()) {
                                    this._normalPass.update(renderer, scene, camera);
                                }
                            };

                            /**
                             * Render SSAO after render the scene, before compositing
                             */
                            EffectCompositor.prototype.updateSSAO = function(renderer, scene, camera, frame) {
                                this._ssaoPass.update(renderer, camera, frame);
                            };

                            /**
                             * Enable SSAO effect
                             */
                            EffectCompositor.prototype.enableSSAO = function() {
                                this._enableSSAO = true;
                            };

                            /**
                             * Disable SSAO effect
                             */
                            EffectCompositor.prototype.disableSSAO = function() {
                                this._enableSSAO = false;
                            };

                            /**
                             * Enable SSR effect
                             */
                            EffectCompositor.prototype.enableSSR = function() {
                                this._enableSSR = true;
                            };
                            /**
                             * Disable SSR effect
                             */
                            EffectCompositor.prototype.disableSSR = function() {
                                this._enableSSR = false;
                            };

                            /**
                             * Render SSAO after render the scene, before compositing
                             */
                            EffectCompositor.prototype.getSSAOTexture = function(renderer, scene, camera, frame) {
                                return this._ssaoPass.getTargetTexture();
                            };

                            /**
                             * @return {qtek.FrameBuffer}
                             */
                            EffectCompositor.prototype.getSourceFrameBuffer = function() {
                                return this._framebuffer;
                            };

                            /**
                             * @return {qtek.Texture2D}
                             */
                            EffectCompositor.prototype.getSourceTexture = function() {
                                return this._sourceTexture;
                            };

                            /**
                             * Disable fxaa effect
                             */
                            EffectCompositor.prototype.disableFXAA = function() {
                                this._removeChainNode(this._fxaaNode);
                            };

                            /**
                             * Enable fxaa effect
                             */
                            EffectCompositor.prototype.enableFXAA = function() {
                                this._addChainNode(this._fxaaNode);
                            };

                            /**
                             * Enable bloom effect
                             */
                            EffectCompositor.prototype.enableBloom = function() {
                                this._compositeNode.inputs.bloom = 'bloom_composite';
                                this._compositor.dirty();
                            };

                            /**
                             * Disable bloom effect
                             */
                            EffectCompositor.prototype.disableBloom = function() {
                                this._compositeNode.inputs.bloom = null;
                                this._compositor.dirty();
                            };

                            /**
                             * Enable depth of field effect
                             */
                            EffectCompositor.prototype.enableDOF = function() {
                                this._compositeNode.inputs.texture = 'dof_composite';
                                this._compositor.dirty();
                            };
                            /**
                             * Disable depth of field effect
                             */
                            EffectCompositor.prototype.disableDOF = function() {
                                this._compositeNode.inputs.texture = 'source';
                                this._compositor.dirty();
                            };

                            /**
                             * Enable color correction
                             */
                            EffectCompositor.prototype.enableColorCorrection = function() {
                                this._compositeNode.shaderDefine('COLOR_CORRECTION');
                                this._enableColorCorrection = true;
                            };
                            /**
                             * Disable color correction
                             */
                            EffectCompositor.prototype.disableColorCorrection = function() {
                                this._compositeNode.shaderUndefine('COLOR_CORRECTION');
                                this._enableColorCorrection = false;
                            };

                            /**
                             * Enable edge detection
                             */
                            EffectCompositor.prototype.enableEdge = function() {
                                this._enableEdge = true;
                            };

                            /**
                             * Disable edge detection
                             */
                            EffectCompositor.prototype.disableEdge = function() {
                                this._enableEdge = false;
                            };

                            /**
                             * Set bloom intensity
                             * @param {number} value
                             */
                            EffectCompositor.prototype.setBloomIntensity = function(value) {
                                this._compositeNode.setParameter('bloomIntensity', value);
                            };

                            EffectCompositor.prototype.setSSAOParameter = function(name, value) {
                                switch (name) {
                                    case 'quality':
                                        // PENDING
                                        var kernelSize = ({
                                            low: 6,
                                            medium: 12,
                                            high: 32,
                                            ultra: 62
                                        })[value] || 12;
                                        this._ssaoPass.setParameter('kernelSize', kernelSize);
                                        break;
                                    case 'radius':
                                        this._ssaoPass.setParameter(name, value);
                                        this._ssaoPass.setParameter('bias', value / 200);
                                        break;
                                    case 'intensity':
                                        this._ssaoPass.setParameter(name, value);
                                        break;
                                    default:
                                        if (true) {
                                            console.warn('Unkown SSAO parameter ' + name);
                                        }
                                }
                            };

                            EffectCompositor.prototype.setDOFParameter = function(name, value) {
                                switch (name) {
                                    case 'focalDistance':
                                    case 'focalRange':
                                    case 'fstop':
                                        this._cocNode.setParameter(name, value);
                                        break;
                                    case 'blurRadius':
                                        for (var i = 0; i < this._dofBlurNodes.length; i++) {
                                            this._dofBlurNodes[i].setParameter('blurRadius', value);
                                        }
                                        break;
                                    case 'quality':
                                        var kernelSize = ({
                                            low: 4,
                                            medium: 8,
                                            high: 16,
                                            ultra: 32
                                        })[value] || 8;
                                        this._dofBlurKernelSize = kernelSize;
                                        for (var i = 0; i < this._dofBlurNodes.length; i++) {
                                            this._dofBlurNodes[i].shaderDefine('POISSON_KERNEL_SIZE', kernelSize);
                                        }
                                        this._dofBlurKernel = new Float32Array(kernelSize * 2);
                                        break;
                                    default:
                                        if (true) {
                                            console.warn('Unkown DOF parameter ' + name);
                                        }
                                }
                            };

                            EffectCompositor.prototype.setSSRParameter = function(name, value) {
                                switch (name) {
                                    case 'quality':
                                        // PENDING
                                        var maxIteration = ({
                                            low: 10,
                                            medium: 20,
                                            high: 40,
                                            ultra: 80
                                        })[value] || 20;
                                        var pixelStride = ({
                                            low: 32,
                                            medium: 16,
                                            high: 8,
                                            ultra: 4
                                        })[value] || 16;
                                        this._ssrPass.setParameter('maxIteration', maxIteration);
                                        this._ssrPass.setParameter('pixelStride', pixelStride);
                                        break;
                                    case 'maxRoughness':
                                        this._ssrPass.setParameter('minGlossiness', Math.max(Math.min(1.0 - value, 1.0), 0.0));
                                        break;
                                    default:
                                        if (true) {
                                            console.warn('Unkown SSR parameter ' + name);
                                        }
                                }
                            };
                            /**
                             * Set color of edge
                             */
                            EffectCompositor.prototype.setEdgeColor = function(value) {
                                var color = util_graphicGL.parseColor(value);
                                this._edgePass.setParameter('edgeColor', color);
                            };

                            EffectCompositor.prototype.setExposure = function(value) {
                                this._compositeNode.setParameter('exposure', Math.pow(2, value));
                            };

                            EffectCompositor.prototype.setColorLookupTexture = function(image, api) {
                                this._compositeNode.pass.material.setTextureImage('lut', this._enableColorCorrection ? image : 'none', api, {
                                    minFilter: util_graphicGL.Texture.NEAREST,
                                    magFilter: util_graphicGL.Texture.NEAREST,
                                    flipY: false
                                });
                            };
                            EffectCompositor.prototype.setColorCorrection = function(type, value) {
                                this._compositeNode.setParameter(type, value);
                            };

                            EffectCompositor.prototype.composite = function(renderer, camera, framebuffer, frame) {

                                var sourceTexture = this._sourceTexture;
                                var targetTexture = sourceTexture;
                                if (this._enableEdge) {
                                    this._edgePass.update(renderer, camera, sourceTexture, frame);
                                    sourceTexture = targetTexture = this._edgePass.getTargetTexture();
                                }
                                if (this._enableSSR) {
                                    this._ssrPass.update(renderer, camera, sourceTexture, frame);
                                    targetTexture = this._ssrPass.getTargetTexture();
                                }
                                this._sourceNode.texture = targetTexture;

                                this._cocNode.setParameter('depth', this._depthTexture);

                                var blurKernel = this._dofBlurKernel;
                                var blurKernelSize = this._dofBlurKernelSize;
                                var frameAll = Math.floor(poissonKernel.length / 2 / blurKernelSize);
                                var kernelOffset = frame % frameAll;

                                for (var i = 0; i < blurKernelSize * 2; i++) {
                                    blurKernel[i] = poissonKernel[i + kernelOffset * blurKernelSize * 2];
                                }

                                for (var i = 0; i < this._dofBlurNodes.length; i++) {
                                    this._dofBlurNodes[i].setParameter('percent', frame / 30.0);
                                    this._dofBlurNodes[i].setParameter('poissonKernel', blurKernel);
                                }

                                this._cocNode.setParameter('zNear', camera.near);
                                this._cocNode.setParameter('zFar', camera.far);

                                this._compositor.render(renderer, framebuffer);
                            };

                            EffectCompositor.prototype.dispose = function(renderer) {
                                this._sourceTexture.dispose(renderer);
                                this._depthTexture.dispose(renderer);
                                this._framebuffer.dispose(renderer);
                                this._compositor.dispose(renderer);

                                this._normalPass.dispose(renderer);
                                this._ssaoPass.dispose(renderer);
                            };

                            /* harmony default export */
                            var effect_EffectCompositor = (EffectCompositor);
                            // CONCATENATED MODULE: ./src/effect/TemporalSuperSampling.js
                            // Temporal Super Sample for static Scene








                            function TemporalSuperSampling(frames) {
                                var haltonSequence = [];

                                for (var i = 0; i < 30; i++) {
                                    haltonSequence.push([effect_halton(i, 2), effect_halton(i, 3)]);
                                }

                                this._haltonSequence = haltonSequence;

                                this._frame = 0;

                                this._sourceTex = new src_Texture2D();
                                this._sourceFb = new src_FrameBuffer();
                                this._sourceFb.attach(this._sourceTex);

                                // Frame texture before temporal supersampling
                                this._prevFrameTex = new src_Texture2D();
                                this._outputTex = new src_Texture2D();

                                var blendPass = this._blendPass = new compositor_Pass({
                                    fragment: src_Shader.source('qtek.compositor.blend')
                                });
                                blendPass.material.shader.disableTexturesAll();
                                blendPass.material.shader.enableTexture(['texture1', 'texture2']);

                                this._blendFb = new src_FrameBuffer({
                                    depthBuffer: false
                                });

                                this._outputPass = new compositor_Pass({
                                    fragment: src_Shader.source('qtek.compositor.output'),
                                    // TODO, alpha is premultiplied?
                                    blendWithPrevious: true
                                });
                                this._outputPass.material.shader.define('fragment', 'OUTPUT_ALPHA');
                                this._outputPass.material.blend = function(_gl) {
                                    // FIXME.
                                    // Output is premultiplied alpha when BLEND is enabled ?
                                    // http://stackoverflow.com/questions/2171085/opengl-blending-with-previous-contents-of-framebuffer
                                    _gl.blendEquationSeparate(_gl.FUNC_ADD, _gl.FUNC_ADD);
                                    _gl.blendFuncSeparate(_gl.ONE, _gl.ONE_MINUS_SRC_ALPHA, _gl.ONE, _gl.ONE_MINUS_SRC_ALPHA);
                                }
                            }

                            TemporalSuperSampling.prototype = {

                                constructor: TemporalSuperSampling,

                                /**
                                 * Jitter camera projectionMatrix
                                 * @parma {qtek.Renderer} renderer
                                 * @param {qtek.Camera} camera
                                 */
                                jitterProjection: function(renderer, camera) {
                                    var viewport = renderer.viewport;
                                    var dpr = viewport.devicePixelRatio || renderer.getDevicePixelRatio();
                                    var width = viewport.width * dpr;
                                    var height = viewport.height * dpr;

                                    var offset = this._haltonSequence[this._frame % this._haltonSequence.length];

                                    var translationMat = new math_Matrix4();
                                    translationMat._array[12] = (offset[0] * 2.0 - 1.0) / width;
                                    translationMat._array[13] = (offset[1] * 2.0 - 1.0) / height;

                                    math_Matrix4.mul(camera.projectionMatrix, translationMat, camera.projectionMatrix);

                                    math_Matrix4.invert(camera.invProjectionMatrix, camera.projectionMatrix);
                                },

                                /**
                                 * Reset accumulating frame
                                 */
                                resetFrame: function() {
                                    this._frame = 0;
                                },

                                /**
                                 * Return current frame
                                 */
                                getFrame: function() {
                                    return this._frame;
                                },

                                /**
                                 * Get source framebuffer for usage
                                 */
                                getSourceFrameBuffer: function() {
                                    return this._sourceFb;
                                },

                                getOutputTexture: function() {
                                    return this._outputTex;
                                },

                                resize: function(width, height) {
                                    this._prevFrameTex.width = width;
                                    this._prevFrameTex.height = height;

                                    this._outputTex.width = width;
                                    this._outputTex.height = height;

                                    this._sourceTex.width = width;
                                    this._sourceTex.height = height;

                                    this._prevFrameTex.dirty();
                                    this._outputTex.dirty();
                                    this._sourceTex.dirty();
                                },

                                isFinished: function() {
                                    return this._frame >= this._haltonSequence.length;
                                },

                                render: function(renderer, sourceTex, notOutput) {
                                    var blendPass = this._blendPass;
                                    if (this._frame === 0) {
                                        // Direct output
                                        blendPass.setUniform('weight1', 0);
                                        blendPass.setUniform('weight2', 1);
                                    } else {
                                        blendPass.setUniform('weight1', 0.9);
                                        blendPass.setUniform('weight2', 0.1);
                                    }
                                    blendPass.setUniform('texture1', this._prevFrameTex);
                                    blendPass.setUniform('texture2', sourceTex || this._sourceTex);

                                    this._blendFb.attach(this._outputTex);
                                    this._blendFb.bind(renderer);
                                    blendPass.render(renderer);
                                    this._blendFb.unbind(renderer);

                                    if (!notOutput) {
                                        this._outputPass.setUniform('texture', this._outputTex);
                                        this._outputPass.render(renderer);
                                    }

                                    // Swap texture
                                    var tmp = this._prevFrameTex;
                                    this._prevFrameTex = this._outputTex;
                                    this._outputTex = tmp;

                                    this._frame++;
                                },

                                dispose: function(renderer) {
                                    this._sourceFb.dispose(renderer);
                                    this._blendFb.dispose(renderer);
                                    this._prevFrameTex.dispose(renderer);
                                    this._outputTex.dispose(renderer);
                                    this._sourceTex.dispose(renderer);
                                    this._outputPass.dispose(renderer);
                                    this._blendPass.dispose(renderer);
                                }
                            };

                            /* harmony default export */
                            var effect_TemporalSuperSampling = (TemporalSuperSampling);
                            // CONCATENATED MODULE: ./src/core/ViewGL.js
                            /*
                             * @module echarts-gl/core/ViewGL
                             * @author Yi Shen(http://github.com/pissang)
                             */

















                            /**
                             * @constructor
                             * @alias module:echarts-gl/core/ViewGL
                             * @param {string} [projection='perspective']
                             */
                            function ViewGL(projection) {

                                projection = projection || 'perspective';

                                /**
                                 * @type {module:echarts-gl/core/LayerGL}
                                 */
                                this.layer = null;
                                /**
                                 * @type {qtek.Scene}
                                 */
                                this.scene = new src_Scene();

                                /**
                                 * @type {qtek.Node}
                                 */
                                this.rootNode = this.scene;

                                this.viewport = {
                                    x: 0,
                                    y: 0,
                                    width: 0,
                                    height: 0
                                };

                                this.setProjection(projection);

                                this._compositor = new effect_EffectCompositor();

                                this._temporalSS = new effect_TemporalSuperSampling();

                                this._shadowMapPass = new ShadowMap();

                                var pcfKernels = [];
                                var off = 0;
                                for (var i = 0; i < 30; i++) {
                                    var pcfKernel = [];
                                    for (var k = 0; k < 6; k++) {
                                        pcfKernel.push(effect_halton(off, 2) * 4.0 - 2.0);
                                        pcfKernel.push(effect_halton(off, 3) * 4.0 - 2.0);
                                        off++;
                                    }
                                    pcfKernels.push(pcfKernel);
                                }
                                this._pcfKernels = pcfKernels;

                                this.scene.on('beforerender', function(renderer, scene, camera) {
                                    if (this.needsTemporalSS()) {
                                        this._temporalSS.jitterProjection(renderer, camera);
                                    }
                                }, this);
                            }

                            /**
                             * Set camera type of group
                             * @param {string} cameraType 'perspective' | 'orthographic'
                             */
                            ViewGL.prototype.setProjection = function(projection) {
                                var oldCamera = this.camera;
                                oldCamera && oldCamera.update();
                                if (projection === 'perspective') {
                                    if (!(this.camera instanceof camera_Perspective)) {
                                        this.camera = new camera_Perspective();
                                        if (oldCamera) {
                                            this.camera.setLocalTransform(oldCamera.localTransform);
                                        }
                                    }
                                } else {
                                    if (!(this.camera instanceof camera_Orthographic)) {
                                        this.camera = new camera_Orthographic();
                                        if (oldCamera) {
                                            this.camera.setLocalTransform(oldCamera.localTransform);
                                        }
                                    }
                                }
                                // PENDING
                                this.camera.near = 0.1;
                                this.camera.far = 2000;
                            };

                            /**
                             * Set viewport of group
                             * @param {number} x Viewport left bottom x
                             * @param {number} y Viewport left bottom y
                             * @param {number} width Viewport height
                             * @param {number} height Viewport height
                             * @param {number} [dpr=1]
                             */
                            ViewGL.prototype.setViewport = function(x, y, width, height, dpr) {
                                if (this.camera instanceof camera_Perspective) {
                                    this.camera.aspect = width / height;
                                }
                                dpr = dpr || 1;

                                this.viewport.x = x;
                                this.viewport.y = y;
                                this.viewport.width = width;
                                this.viewport.height = height;
                                this.viewport.devicePixelRatio = dpr;

                                // Source and output of compositor use high dpr texture.
                                // But the intermediate texture of bloom, dof effects use fixed 1.0 dpr
                                this._compositor.resize(width * dpr, height * dpr);
                                this._temporalSS.resize(width * dpr, height * dpr);
                            };

                            /**
                             * If contain screen point x, y
                             * @param {number} x offsetX
                             * @param {number} y offsetY
                             * @return {boolean}
                             */
                            ViewGL.prototype.containPoint = function(x, y) {
                                var viewport = this.viewport;
                                var height = this.layer.renderer.getHeight();
                                // Flip y;
                                y = height - y;
                                return x >= viewport.x && y >= viewport.y &&
                                    x <= viewport.x + viewport.width && y <= viewport.y + viewport.height;
                            };

                            /**
                             * Cast a ray
                             * @param {number} x offsetX
                             * @param {number} y offsetY
                             * @param {qtek.math.Ray} out
                             * @return {qtek.math.Ray}
                             */
                            var ViewGL_ndc = new math_Vector2();
                            ViewGL.prototype.castRay = function(x, y, out) {
                                var renderer = this.layer.renderer;

                                var oldViewport = renderer.viewport;
                                renderer.viewport = this.viewport;
                                renderer.screenToNDC(x, y, ViewGL_ndc);
                                this.camera.castRay(ViewGL_ndc, out);
                                renderer.viewport = oldViewport;

                                return out;
                            };

                            /**
                             * Prepare and update scene before render
                             */
                            ViewGL.prototype.prepareRender = function() {
                                this.scene.update();
                                this.camera.update();

                                this._needsSortProgressively = false;
                                // If has any transparent mesh needs sort triangles progressively.
                                for (var i = 0; i < this.scene.transparentQueue.length; i++) {
                                    var renderable = this.scene.transparentQueue[i];
                                    var geometry = renderable.geometry;
                                    if (geometry.needsSortVerticesProgressively && geometry.needsSortVerticesProgressively()) {
                                        this._needsSortProgressively = true;
                                    }
                                    if (geometry.needsSortTrianglesProgressively && geometry.needsSortTrianglesProgressively()) {
                                        this._needsSortProgressively = true;
                                    }
                                }

                                this._frame = 0;
                                this._temporalSS.resetFrame();
                            };

                            ViewGL.prototype.render = function(renderer, accumulating) {
                                this._doRender(renderer, accumulating, this._frame);
                                this._frame++;
                            };

                            ViewGL.prototype.needsAccumulate = function() {
                                return this.needsTemporalSS() || this._needsSortProgressively;
                            };

                            ViewGL.prototype.needsTemporalSS = function() {
                                var enableTemporalSS = this._enableTemporalSS;
                                if (enableTemporalSS == 'auto') {
                                    enableTemporalSS = this._enablePostEffect;
                                }
                                return enableTemporalSS;
                            };

                            ViewGL.prototype.hasDOF = function() {
                                return this._enableDOF;
                            };

                            ViewGL.prototype.isAccumulateFinished = function() {
                                return this.needsTemporalSS() ? this._temporalSS.isFinished() :
                                    (this._frame > 30);
                            };

                            ViewGL.prototype._doRender = function(renderer, accumulating, accumFrame) {

                                var scene = this.scene;
                                var camera = this.camera;

                                accumFrame = accumFrame || 0;

                                this._updateTransparent(renderer, scene, camera, accumFrame);

                                if (!accumulating) {
                                    this._shadowMapPass.kernelPCF = this._pcfKernels[0];
                                    // Not render shadowmap pass in accumulating frame.
                                    this._shadowMapPass.render(renderer, scene, camera, true);
                                }

                                this._updateShadowPCFKernel(accumFrame);

                                // Shadowmap will set clearColor.
                                renderer.gl.clearColor(0.0, 0.0, 0.0, 0.0);

                                if (this._enablePostEffect) {
                                    // normal render also needs to be jittered when have edge pass.
                                    if (this.needsTemporalSS()) {
                                        this._temporalSS.jitterProjection(renderer, camera);
                                    }
                                    this._compositor.updateNormal(renderer, scene, camera, this._temporalSS.getFrame());
                                }

                                // Always update SSAO to make sure have correct ssaoMap status
                                this._updateSSAO(renderer, scene, camera, this._temporalSS.getFrame());

                                if (this._enablePostEffect) {

                                    var frameBuffer = this._compositor.getSourceFrameBuffer();
                                    frameBuffer.bind(renderer);
                                    renderer.gl.clear(renderer.gl.DEPTH_BUFFER_BIT | renderer.gl.COLOR_BUFFER_BIT);
                                    renderer.render(scene, camera, true, true);
                                    frameBuffer.unbind(renderer);

                                    if (this.needsTemporalSS() && accumulating) {
                                        this._compositor.composite(renderer, camera, this._temporalSS.getSourceFrameBuffer(), this._temporalSS.getFrame());
                                        renderer.setViewport(this.viewport);
                                        this._temporalSS.render(renderer);
                                    } else {
                                        renderer.setViewport(this.viewport);
                                        this._compositor.composite(renderer, camera, null, 0);
                                    }
                                } else {
                                    if (this.needsTemporalSS() && accumulating) {
                                        var frameBuffer = this._temporalSS.getSourceFrameBuffer();
                                        frameBuffer.bind(renderer);
                                        renderer.saveClear();
                                        renderer.clearBit = renderer.gl.DEPTH_BUFFER_BIT | renderer.gl.COLOR_BUFFER_BIT;
                                        renderer.render(scene, camera, true);
                                        renderer.restoreClear();
                                        frameBuffer.unbind(renderer);

                                        renderer.setViewport(this.viewport);
                                        this._temporalSS.render(renderer);
                                    } else {
                                        renderer.setViewport(this.viewport);
                                        renderer.render(scene, camera, true, true);
                                    }
                                }

                                // this._shadowMapPass.renderDebug(renderer);
                                // this._compositor._normalPass.renderDebug(renderer);
                            };

                            ViewGL.prototype._updateTransparent = function(renderer, scene, camera, frame) {

                                var v3 = new math_Vector3();
                                var invWorldTransform = new math_Matrix4();
                                var cameraWorldPosition = camera.getWorldPosition();

                                // Sort transparent object.
                                for (var i = 0; i < scene.transparentQueue.length; i++) {
                                    var renderable = scene.transparentQueue[i];
                                    var geometry = renderable.geometry;
                                    math_Matrix4.invert(invWorldTransform, renderable.worldTransform);
                                    math_Vector3.transformMat4(v3, cameraWorldPosition, invWorldTransform);
                                    if (geometry.needsSortTriangles && geometry.needsSortTriangles()) {
                                        geometry.doSortTriangles(v3, frame);
                                    }
                                    if (geometry.needsSortVertices && geometry.needsSortVertices()) {
                                        geometry.doSortVertices(v3, frame);
                                    }
                                }
                            };

                            ViewGL.prototype._updateSSAO = function(renderer, scene, camera, frame) {
                                var ifEnableSSAO = this._enableSSAO && this._enablePostEffect;
                                if (ifEnableSSAO) {
                                    this._compositor.updateSSAO(renderer, scene, camera, this._temporalSS.getFrame());
                                }

                                for (var i = 0; i < scene.opaqueQueue.length; i++) {
                                    var renderable = scene.opaqueQueue[i];
                                    // PENDING
                                    if (renderable.renderNormal) {
                                        renderable.material.shader[ifEnableSSAO ? 'enableTexture' : 'disableTexture']('ssaoMap');
                                    }
                                    if (ifEnableSSAO) {
                                        renderable.material.set('ssaoMap', this._compositor.getSSAOTexture());
                                    }
                                }
                            };

                            ViewGL.prototype._updateShadowPCFKernel = function(frame) {
                                var pcfKernel = this._pcfKernels[frame % this._pcfKernels.length];
                                var opaqueQueue = this.scene.opaqueQueue;
                                for (var i = 0; i < opaqueQueue.length; i++) {
                                    if (opaqueQueue[i].receiveShadow) {
                                        opaqueQueue[i].material.set('pcfKernel', pcfKernel);
                                        opaqueQueue[i].material.shader.define('fragment', 'PCF_KERNEL_SIZE', pcfKernel.length / 2);
                                    }
                                }
                            };

                            ViewGL.prototype.dispose = function(renderer) {
                                this._compositor.dispose(renderer.gl);
                                this._temporalSS.dispose(renderer.gl);
                                this._shadowMapPass.dispose(renderer);
                            };
                            /**
                             * @param {module:echarts/Model} Post effect model
                             */
                            ViewGL.prototype.setPostEffect = function(postEffectModel, api) {
                                var compositor = this._compositor;
                                this._enablePostEffect = postEffectModel.get('enable');
                                var bloomModel = postEffectModel.getModel('bloom');
                                var edgeModel = postEffectModel.getModel('edge');
                                var dofModel = postEffectModel.getModel('DOF', postEffectModel.getModel('depthOfField'));
                                var ssaoModel = postEffectModel.getModel('SSAO', postEffectModel.getModel('screenSpaceAmbientOcclusion'));
                                var ssrModel = postEffectModel.getModel('SSR', postEffectModel.getModel('screenSpaceReflection'));
                                var fxaaModel = postEffectModel.getModel('FXAA');
                                var colorCorrModel = postEffectModel.getModel('colorCorrection');
                                bloomModel.get('enable') ? compositor.enableBloom() : compositor.disableBloom();
                                dofModel.get('enable') ? compositor.enableDOF() : compositor.disableDOF();
                                ssrModel.get('enable') ? compositor.enableSSR() : compositor.disableSSR();
                                colorCorrModel.get('enable') ? compositor.enableColorCorrection() : compositor.disableColorCorrection();
                                edgeModel.get('enable') ? compositor.enableEdge() : compositor.disableEdge();
                                fxaaModel.get('enable') ? compositor.enableFXAA() : compositor.disableFXAA();

                                this._enableDOF = dofModel.get('enable');
                                this._enableSSAO = ssaoModel.get('enable');

                                this._enableSSAO ? compositor.enableSSAO() : compositor.disableSSAO();

                                compositor.setBloomIntensity(bloomModel.get('intensity'));
                                compositor.setEdgeColor(edgeModel.get('color'));
                                compositor.setColorLookupTexture(colorCorrModel.get('lookupTexture'), api);
                                compositor.setExposure(colorCorrModel.get('exposure'));

                                ['radius', 'quality', 'intensity'].forEach(function(name) {
                                    compositor.setSSAOParameter(name, ssaoModel.get(name));
                                });
                                ['quality', 'maxRoughness'].forEach(function(name) {
                                    compositor.setSSRParameter(name, ssrModel.get(name));
                                });
                                ['quality', 'focalDistance', 'focalRange', 'blurRadius', 'fstop'].forEach(function(name) {
                                    compositor.setDOFParameter(name, dofModel.get(name));
                                });
                                ['brightness', 'contrast', 'saturation'].forEach(function(name) {
                                    compositor.setColorCorrection(name, colorCorrModel.get(name));
                                });

                            };

                            ViewGL.prototype.setDOFFocusOnPoint = function(depth) {
                                if (this._enablePostEffect) {

                                    if (depth > this.camera.far || depth < this.camera.near) {
                                        return;
                                    }

                                    this._compositor.setDOFParameter('focalDistance', depth);
                                    return true;
                                }
                            };

                            ViewGL.prototype.setTemporalSuperSampling = function(temporalSuperSamplingModel) {
                                this._enableTemporalSS = temporalSuperSamplingModel.get('enable');
                            };

                            ViewGL.prototype.isLinearSpace = function() {
                                return this._enablePostEffect;
                            };

                            ViewGL.prototype.setRootNode = function(rootNode) {
                                if (this.rootNode === rootNode) {
                                    return;
                                }
                                var children = this.rootNode.children();
                                for (var i = 0; i < children.length; i++) {
                                    rootNode.add(children[i]);
                                }
                                if (rootNode !== this.scene) {
                                    this.scene.add(rootNode);
                                }

                                this.rootNode = rootNode;
                            };
                            // Proxies
                            ViewGL.prototype.add = function(node3D) {
                                this.rootNode.add(node3D);
                            };
                            ViewGL.prototype.remove = function(node3D) {
                                this.rootNode.remove(node3D);
                            };
                            ViewGL.prototype.removeAll = function(node3D) {
                                this.rootNode.removeAll(node3D);
                            };

                            external__echarts__default.a.util.extend(ViewGL.prototype, mixin_notifier);

                            /* harmony default export */
                            var core_ViewGL = (ViewGL);
                            // CONCATENATED MODULE: ./src/coord/grid3DCreator.js







                            function resizeCartesian3D(grid3DModel, api) {
                                // Use left/top/width/height
                                var boxLayoutOption = grid3DModel.getBoxLayoutParams();

                                var viewport = layout_default.a.getLayoutRect(boxLayoutOption, {
                                    width: api.getWidth(),
                                    height: api.getHeight()
                                });

                                // Flip Y
                                viewport.y = api.getHeight() - viewport.y - viewport.height;

                                this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, api.getDevicePixelRatio());

                                var boxWidth = grid3DModel.get('boxWidth');
                                var boxHeight = grid3DModel.get('boxHeight');
                                var boxDepth = grid3DModel.get('boxDepth');

                                if (true) {
                                    ['x', 'y', 'z'].forEach(function(dim) {
                                        if (!this.getAxis(dim)) {
                                            throw new Error('Grid' + grid3DModel.id + ' don\'t have ' + dim + 'Axis');
                                        }
                                    }, this);
                                }
                                this.getAxis('x').setExtent(-boxWidth / 2, boxWidth / 2);
                                // From near to far
                                this.getAxis('y').setExtent(boxDepth / 2, -boxDepth / 2);
                                this.getAxis('z').setExtent(-boxHeight / 2, boxHeight / 2);

                                this.size = [boxWidth, boxHeight, boxDepth];
                            }

                            function updateCartesian3D(ecModel, api) {
                                var dataExtents = {};

                                function unionDataExtents(dim, extent) {
                                    dataExtents[dim] = dataExtents[dim] || [Infinity, -Infinity];
                                    dataExtents[dim][0] = Math.min(extent[0], dataExtents[dim][0]);
                                    dataExtents[dim][1] = Math.max(extent[1], dataExtents[dim][1]);
                                }
                                // Get data extents for scale.
                                ecModel.eachSeries(function(seriesModel) {
                                    if (seriesModel.coordinateSystem !== this) {
                                        return;
                                    }
                                    var data = seriesModel.getData();
                                    ['x', 'y', 'z'].forEach(function(dim) {
                                        unionDataExtents(
                                            dim, data.getDataExtent(seriesModel.coordDimToDataDim(dim)[0], true)
                                        );
                                    });
                                }, this);

                                ['xAxis3D', 'yAxis3D', 'zAxis3D'].forEach(function(axisType) {
                                    ecModel.eachComponent(axisType, function(axisModel) {
                                        var dim = axisType.charAt(0);
                                        var grid3DModel = axisModel.getReferringComponents('grid3D')[0];

                                        var cartesian3D = grid3DModel.coordinateSystem;
                                        if (cartesian3D !== this) {
                                            return;
                                        }

                                        var axis = cartesian3D.getAxis(dim);
                                        if (axis) {
                                            if (true) {
                                                console.warn('Can\'t have two %s in one grid3D', axisType);
                                            }
                                            return;
                                        }
                                        var scale = external__echarts__default.a.helper.createScale(
                                            dataExtents[dim] || [Infinity, -Infinity], axisModel
                                        );
                                        axis = new grid3D_Axis3D(dim, scale);
                                        axis.type = axisModel.get('type');
                                        var isCategory = axis.type === 'category';
                                        axis.onBand = isCategory && axisModel.get('boundaryGap');
                                        axis.inverse = axisModel.get('inverse');

                                        axisModel.axis = axis;
                                        axis.model = axisModel;

                                        cartesian3D.addAxis(axis);
                                    }, this);
                                }, this);

                                this.resize(this.model, api);
                            }

                            var grid3DCreator = {

                                dimensions: grid3D_Cartesian3D.prototype.dimensions,

                                create: function(ecModel, api) {

                                    var cartesian3DList = [];

                                    ecModel.eachComponent('grid3D', function(grid3DModel) {
                                        // FIXME
                                        grid3DModel.__viewGL = grid3DModel.__viewGL || new core_ViewGL();

                                        var cartesian3D = new grid3D_Cartesian3D();
                                        cartesian3D.model = grid3DModel;
                                        cartesian3D.viewGL = grid3DModel.__viewGL;

                                        grid3DModel.coordinateSystem = cartesian3D;
                                        cartesian3DList.push(cartesian3D);

                                        // Inject resize and update
                                        cartesian3D.resize = resizeCartesian3D;

                                        cartesian3D.update = updateCartesian3D;
                                    });

                                    var axesTypes = ['xAxis3D', 'yAxis3D', 'zAxis3D'];

                                    function findAxesModels(seriesModel, ecModel) {
                                        return axesTypes.map(function(axisType) {
                                            var axisModel = seriesModel.getReferringComponents(axisType)[0];
                                            if (axisModel == null) {
                                                axisModel = ecModel.getComponent(axisType);
                                            }
                                            if (true) {
                                                if (!axisModel) {
                                                    throw new Error(axisType + ' "' + util_retrieve.firstNotNull(
                                                        seriesModel.get(axisType + 'Index'),
                                                        seriesModel.get(axisType + 'Id'),
                                                        0
                                                    ) + '" not found');
                                                }
                                            }
                                            return axisModel;
                                        });
                                    }

                                    ecModel.eachSeries(function(seriesModel) {
                                        if (seriesModel.get('coordinateSystem') !== 'cartesian3D') {
                                            return;
                                        }
                                        var firstGridModel = seriesModel.getReferringComponents('grid3D')[0];

                                        if (firstGridModel == null) {
                                            var axesModels = findAxesModels(seriesModel, ecModel);
                                            var firstGridModel = axesModels[0].getCoordSysModel();
                                            axesModels.forEach(function(axisModel) {
                                                var grid3DModel = axisModel.getCoordSysModel();
                                                if (true) {
                                                    if (!grid3DModel) {
                                                        throw new Error(
                                                            'grid3D "' + util_retrieve.firstNotNull(
                                                                axisModel.get('gridIndex'),
                                                                axisModel.get('gridId'),
                                                                0
                                                            ) + '" not found'
                                                        );
                                                    }
                                                    if (grid3DModel !== firstGridModel) {
                                                        throw new Error('xAxis3D, yAxis3D, zAxis3D must use the same grid');
                                                    }
                                                }
                                            });
                                        }

                                        var coordSys = firstGridModel.coordinateSystem;
                                        seriesModel.coordinateSystem = coordSys;
                                    });

                                    return cartesian3DList;
                                }
                            };

                            external__echarts__default.a.registerCoordinateSystem('grid3D', grid3DCreator);

                            /* harmony default export */
                            var coord_grid3DCreator = (grid3DCreator);
                            // CONCATENATED MODULE: ./src/component/grid3D.js







                            external__echarts__default.a.registerAction({
                                type: 'grid3DChangeCamera',
                                event: 'grid3dcamerachanged',
                                update: 'series:updateCamera'
                            }, function(payload, ecModel) {
                                ecModel.eachComponent({
                                    mainType: 'grid3D',
                                    query: payload
                                }, function(componentModel) {
                                    componentModel.setView(payload);
                                });
                            });

                            external__echarts__default.a.registerAction({
                                type: 'grid3DShowAxisPointer',
                                event: 'grid3dshowaxispointer',
                                update: 'grid3D:showAxisPointer'
                            }, function(payload, ecModel) {});

                            external__echarts__default.a.registerAction({
                                type: 'grid3DHideAxisPointer',
                                event: 'grid3dhideaxispointer',
                                update: 'grid3D:hideAxisPointer'
                            }, function(payload, ecModel) {});
                            // CONCATENATED MODULE: ./src/component/common/componentShadingMixin.js
                            /* harmony default export */
                            var componentShadingMixin = ({
                                defaultOption: {
                                    shading: null,

                                    realisticMaterial: {
                                        textureTiling: 1,
                                        textureOffset: 0,

                                        detailTexture: null
                                    },

                                    lambertMaterial: {
                                        textureTiling: 1,
                                        textureOffset: 0,

                                        detailTexture: null
                                    },

                                    colorMaterial: {
                                        textureTiling: 1,
                                        textureOffset: 0,

                                        detailTexture: null
                                    },

                                    hatchingMaterial: {
                                        textureTiling: 1,
                                        textureOffset: 0,

                                        paperColor: '#fff'
                                    }
                                }
                            });
                            // CONCATENATED MODULE: ./src/coord/geo3D/geo3DModelMixin.js


                            /* harmony default export */
                            var geo3DModelMixin = ({

                                getFilledRegions: function(regions, mapData) {
                                    var regionsArr = (regions || []).slice();

                                    var geoJson;
                                    if (typeof mapData === 'string') {
                                        mapData = external__echarts__default.a.getMap(mapData);
                                        geoJson = mapData && mapData.geoJson;
                                    } else {
                                        if (mapData && mapData.features) {
                                            geoJson = mapData;
                                        }
                                    }
                                    if (!geoJson) {
                                        if (true) {
                                            console.error('Map ' + mapData + ' not exists. You can download map file on http://echarts.baidu.com/download-map.html');
                                            if (!geoJson.features) {
                                                console.error('Invalid GeoJSON for map3D');
                                            }
                                        }
                                        return [];
                                    }

                                    var dataNameMap = {};
                                    var features = geoJson.features;
                                    for (var i = 0; i < regionsArr.length; i++) {
                                        dataNameMap[regionsArr[i].name] = regionsArr[i];
                                    }

                                    for (var i = 0; i < features.length; i++) {
                                        var name = features[i].properties.name;
                                        if (!dataNameMap[name]) {
                                            regionsArr.push({
                                                name: name
                                            });
                                        }
                                    }

                                    return regionsArr;
                                },

                                defaultOption: {
                                    show: true,

                                    zlevel: -10,

                                    // geoJson used by geo3D
                                    map: '',

                                    // Layout used for viewport
                                    left: 0,
                                    top: 0,
                                    width: '100%',
                                    height: '100%',

                                    boxWidth: 100,
                                    boxHeight: 10,
                                    boxDepth: 'auto',

                                    regionHeight: 3,

                                    environment: 'auto',

                                    groundPlane: {
                                        show: false,
                                        color: '#aaa'
                                    },

                                    // If enable instancing if it's too much
                                    instancing: false,

                                    shading: 'lambert',

                                    light: {
                                        main: {
                                            alpha: 40,
                                            beta: 30
                                        }
                                    },

                                    viewControl: {
                                        alpha: 40,
                                        beta: 0,
                                        distance: 100,
                                        orthographicSize: 60,

                                        minAlpha: 5,
                                        minBeta: -80,
                                        maxBeta: 80
                                    },

                                    label: {
                                        show: false,
                                        // Distance in 3d space.
                                        distance: 2,

                                        textStyle: {
                                            fontSize: 20,
                                            color: '#000',
                                            backgroundColor: 'rgba(255,255,255,0.7)',
                                            padding: 3,
                                            borderRadius: 4
                                        }
                                    },

                                    // TODO
                                    // altitude: {
                                    //     min: 'auto',
                                    //     max: 'auto',

                                    //     height: []
                                    // },


                                    // labelLine

                                    // light
                                    // postEffect
                                    // temporalSuperSampling

                                    itemStyle: {
                                        areaColor: '#fff',
                                        borderWidth: 0,
                                        borderColor: '#333'
                                    },

                                    emphasis: {
                                        itemStyle: {
                                            // areaColor: '#f94b59'
                                            areaColor: '#639fc0'
                                        },
                                        label: {
                                            show: true
                                        }
                                    }
                                }
                            });
                            // CONCATENATED MODULE: ./src/component/geo3D/Geo3DModel.js







                            var Geo3DModel = external__echarts__default.a.extendComponentModel({

                                type: 'geo3D',

                                layoutMode: 'box',

                                coordinateSystem: null,

                                optionUpdated: function() {
                                    var option = this.option;

                                    option.regions = this.getFilledRegions(option.regions, option.map);

                                    var dimensions = external__echarts__default.a.helper.completeDimensions(['value'], option.data, {
                                        encodeDef: this.get('encode'),
                                        dimsDef: this.get('dimensions')
                                    });
                                    var list = new external__echarts__default.a.List(dimensions, this);
                                    list.initData(option.regions);

                                    var regionModelMap = {};
                                    list.each(function(idx) {
                                        var name = list.getName(idx);
                                        var itemModel = list.getItemModel(idx);
                                        regionModelMap[name] = itemModel;
                                    });

                                    this._regionModelMap = regionModelMap;

                                    this._data = list;
                                },

                                getData: function() {
                                    return this._data;
                                },

                                getRegionModel: function(name) {
                                    return this._regionModelMap[name] || new external__echarts__default.a.Model(null, this);
                                },

                                /**
                                 * Format label
                                 * @param {string} name Region name
                                 * @param {string} [status='normal'] 'normal' or 'emphasis'
                                 * @return {string}
                                 */
                                getFormattedLabel: function(dataIndex, status) {
                                    var name = this._data.getName(dataIndex);
                                    var regionModel = this.getRegionModel(name);
                                    var formatter = regionModel.get(status === 'normal' ? ['label', 'formatter'] : ['emphasis', 'label', 'formatter']);
                                    if (formatter == null) {
                                        formatter = regionModel.get(['label', 'formatter']);
                                    }
                                    var params = {
                                        name: name
                                    };
                                    if (typeof formatter === 'function') {
                                        params.status = status;
                                        return formatter(params);
                                    } else if (typeof formatter === 'string') {
                                        var serName = params.seriesName;
                                        return formatter.replace('{a}', serName != null ? serName : '');
                                    } else {
                                        return name;
                                    }
                                },

                                defaultOption: {

                                    // itemStyle: {},
                                    // height,
                                    // label: {}
                                    // realisticMaterial
                                    regions: []
                                }
                            });

                            external__echarts__default.a.util.merge(Geo3DModel.prototype, geo3DModelMixin);

                            external__echarts__default.a.util.merge(Geo3DModel.prototype, componentViewControlMixin);
                            external__echarts__default.a.util.merge(Geo3DModel.prototype, componentPostEffectMixin);
                            external__echarts__default.a.util.merge(Geo3DModel.prototype, componentLightMixin);
                            external__echarts__default.a.util.merge(Geo3DModel.prototype, componentShadingMixin);

                            /* harmony default export */
                            var geo3D_Geo3DModel = (Geo3DModel);
                            // CONCATENATED MODULE: ./src/util/earcut.js
                            // https://github.com/mapbox/earcut/blob/master/src/earcut.js

                            /* harmony default export */
                            var earcut = (earcut_earcut);

                            function earcut_earcut(data, holeIndices, dim) {

                                dim = dim || 2;

                                var hasHoles = holeIndices && holeIndices.length,
                                    outerLen = hasHoles ? holeIndices[0] * dim : data.length,
                                    outerNode = linkedList(data, 0, outerLen, dim, true),
                                    triangles = [];

                                if (!outerNode) return triangles;

                                var minX, minY, maxX, maxY, x, y, size;

                                if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);

                                // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
                                if (data.length > 80 * dim) {
                                    minX = maxX = data[0];
                                    minY = maxY = data[1];

                                    for (var i = dim; i < outerLen; i += dim) {
                                        x = data[i];
                                        y = data[i + 1];
                                        if (x < minX) minX = x;
                                        if (y < minY) minY = y;
                                        if (x > maxX) maxX = x;
                                        if (y > maxY) maxY = y;
                                    }

                                    // minX, minY and size are later used to transform coords into integers for z-order calculation
                                    size = Math.max(maxX - minX, maxY - minY);
                                }

                                earcutLinked(outerNode, triangles, dim, minX, minY, size);

                                return triangles;
                            }

                            // create a circular doubly linked list from polygon points in the specified winding order
                            function linkedList(data, start, end, dim, clockwise) {
                                var i, last;

                                if (clockwise === (signedArea(data, start, end, dim) > 0)) {
                                    for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
                                } else {
                                    for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
                                }

                                if (last && equals(last, last.next)) {
                                    removeNode(last);
                                    last = last.next;
                                }

                                return last;
                            }

                            // eliminate colinear or duplicate points
                            function filterPoints(start, end) {
                                if (!start) return start;
                                if (!end) end = start;

                                var p = start,
                                    again;
                                do {
                                    again = false;

                                    if (!p.steiner && (equals(p, p.next) || earcut_area(p.prev, p, p.next) === 0)) {
                                        removeNode(p);
                                        p = end = p.prev;
                                        if (p === p.next) return null;
                                        again = true;

                                    } else {
                                        p = p.next;
                                    }
                                } while (again || p !== end);

                                return end;
                            }

                            // main ear slicing loop which triangulates a polygon (given as a linked list)
                            function earcutLinked(ear, triangles, dim, minX, minY, size, pass) {
                                if (!ear) return;

                                // interlink polygon nodes in z-order
                                if (!pass && size) indexCurve(ear, minX, minY, size);

                                var stop = ear,
                                    prev, next;

                                // iterate through ears, slicing them one by one
                                while (ear.prev !== ear.next) {
                                    prev = ear.prev;
                                    next = ear.next;

                                    if (size ? isEarHashed(ear, minX, minY, size) : isEar(ear)) {
                                        // cut off the triangle
                                        triangles.push(prev.i / dim);
                                        triangles.push(ear.i / dim);
                                        triangles.push(next.i / dim);

                                        removeNode(ear);

                                        // skipping the next vertice leads to less sliver triangles
                                        ear = next.next;
                                        stop = next.next;

                                        continue;
                                    }

                                    ear = next;

                                    // if we looped through the whole remaining polygon and can't find any more ears
                                    if (ear === stop) {
                                        // try filtering points and slicing again
                                        if (!pass) {
                                            earcutLinked(filterPoints(ear), triangles, dim, minX, minY, size, 1);

                                            // if this didn't work, try curing all small self-intersections locally
                                        } else if (pass === 1) {
                                            ear = cureLocalIntersections(ear, triangles, dim);
                                            earcutLinked(ear, triangles, dim, minX, minY, size, 2);

                                            // as a last resort, try splitting the remaining polygon into two
                                        } else if (pass === 2) {
                                            splitEarcut(ear, triangles, dim, minX, minY, size);
                                        }

                                        break;
                                    }
                                }
                            }

                            // check whether a polygon node forms a valid ear with adjacent nodes
                            function isEar(ear) {
                                var a = ear.prev,
                                    b = ear,
                                    c = ear.next;

                                if (earcut_area(a, b, c) >= 0) return false; // reflex, can't be an ear

                                // now make sure we don't have other points inside the potential ear
                                var p = ear.next.next;

                                while (p !== ear.prev) {
                                    if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
                                        earcut_area(p.prev, p, p.next) >= 0) return false;
                                    p = p.next;
                                }

                                return true;
                            }

                            function isEarHashed(ear, minX, minY, size) {
                                var a = ear.prev,
                                    b = ear,
                                    c = ear.next;

                                if (earcut_area(a, b, c) >= 0) return false; // reflex, can't be an ear

                                // triangle bbox; min & max are calculated like this for speed
                                var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),
                                    minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),
                                    maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),
                                    maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);

                                // z-order range for the current triangle bbox;
                                var minZ = zOrder(minTX, minTY, minX, minY, size),
                                    maxZ = zOrder(maxTX, maxTY, minX, minY, size);

                                // first look for points inside the triangle in increasing z-order
                                var p = ear.nextZ;

                                while (p && p.z <= maxZ) {
                                    if (p !== ear.prev && p !== ear.next &&
                                        pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
                                        earcut_area(p.prev, p, p.next) >= 0) return false;
                                    p = p.nextZ;
                                }

                                // then look for points in decreasing z-order
                                p = ear.prevZ;

                                while (p && p.z >= minZ) {
                                    if (p !== ear.prev && p !== ear.next &&
                                        pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
                                        earcut_area(p.prev, p, p.next) >= 0) return false;
                                    p = p.prevZ;
                                }

                                return true;
                            }

                            // go through all polygon nodes and cure small local self-intersections
                            function cureLocalIntersections(start, triangles, dim) {
                                var p = start;
                                do {
                                    var a = p.prev,
                                        b = p.next.next;

                                    if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {

                                        triangles.push(a.i / dim);
                                        triangles.push(p.i / dim);
                                        triangles.push(b.i / dim);

                                        // remove two nodes involved
                                        removeNode(p);
                                        removeNode(p.next);

                                        p = start = b;
                                    }
                                    p = p.next;
                                } while (p !== start);

                                return p;
                            }

                            // try splitting polygon into two and triangulate them independently
                            function splitEarcut(start, triangles, dim, minX, minY, size) {
                                // look for a valid diagonal that divides the polygon into two
                                var a = start;
                                do {
                                    var b = a.next.next;
                                    while (b !== a.prev) {
                                        if (a.i !== b.i && isValidDiagonal(a, b)) {
                                            // split the polygon in two by the diagonal
                                            var c = splitPolygon(a, b);

                                            // filter colinear points around the cuts
                                            a = filterPoints(a, a.next);
                                            c = filterPoints(c, c.next);

                                            // run earcut on each half
                                            earcutLinked(a, triangles, dim, minX, minY, size);
                                            earcutLinked(c, triangles, dim, minX, minY, size);
                                            return;
                                        }
                                        b = b.next;
                                    }
                                    a = a.next;
                                } while (a !== start);
                            }

                            // link every hole into the outer loop, producing a single-ring polygon without holes
                            function eliminateHoles(data, holeIndices, outerNode, dim) {
                                var queue = [],
                                    i, len, start, end, list;

                                for (i = 0, len = holeIndices.length; i < len; i++) {
                                    start = holeIndices[i] * dim;
                                    end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
                                    list = linkedList(data, start, end, dim, false);
                                    if (list === list.next) list.steiner = true;
                                    queue.push(getLeftmost(list));
                                }

                                queue.sort(compareX);

                                // process holes from left to right
                                for (i = 0; i < queue.length; i++) {
                                    eliminateHole(queue[i], outerNode);
                                    outerNode = filterPoints(outerNode, outerNode.next);
                                }

                                return outerNode;
                            }

                            function compareX(a, b) {
                                return a.x - b.x;
                            }

                            // find a bridge between vertices that connects hole with an outer ring and and link it
                            function eliminateHole(hole, outerNode) {
                                outerNode = findHoleBridge(hole, outerNode);
                                if (outerNode) {
                                    var b = splitPolygon(outerNode, hole);
                                    filterPoints(b, b.next);
                                }
                            }

                            // David Eberly's algorithm for finding a bridge between hole and outer polygon
                            function findHoleBridge(hole, outerNode) {
                                var p = outerNode,
                                    hx = hole.x,
                                    hy = hole.y,
                                    qx = -Infinity,
                                    m;

                                // find a segment intersected by a ray from the hole's leftmost point to the left;
                                // segment's endpoint with lesser x will be potential connection point
                                do {
                                    if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
                                        var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
                                        if (x <= hx && x > qx) {
                                            qx = x;
                                            if (x === hx) {
                                                if (hy === p.y) return p;
                                                if (hy === p.next.y) return p.next;
                                            }
                                            m = p.x < p.next.x ? p : p.next;
                                        }
                                    }
                                    p = p.next;
                                } while (p !== outerNode);

                                if (!m) return null;

                                if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint

                                // look for points inside the triangle of hole point, segment intersection and endpoint;
                                // if there are no points found, we have a valid connection;
                                // otherwise choose the point of the minimum angle with the ray as connection point

                                var stop = m,
                                    mx = m.x,
                                    my = m.y,
                                    tanMin = Infinity,
                                    tan;

                                p = m.next;

                                while (p !== stop) {
                                    if (hx >= p.x && p.x >= mx && hx !== p.x &&
                                        pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {

                                        tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

                                        if ((tan < tanMin || (tan === tanMin && p.x > m.x)) && locallyInside(p, hole)) {
                                            m = p;
                                            tanMin = tan;
                                        }
                                    }

                                    p = p.next;
                                }

                                return m;
                            }

                            // interlink polygon nodes in z-order
                            function indexCurve(start, minX, minY, size) {
                                var p = start;
                                do {
                                    if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, size);
                                    p.prevZ = p.prev;
                                    p.nextZ = p.next;
                                    p = p.next;
                                } while (p !== start);

                                p.prevZ.nextZ = null;
                                p.prevZ = null;

                                sortLinked(p);
                            }

                            // Simon Tatham's linked list merge sort algorithm
                            // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
                            function sortLinked(list) {
                                var i, p, q, e, tail, numMerges, pSize, qSize,
                                    inSize = 1;

                                do {
                                    p = list;
                                    list = null;
                                    tail = null;
                                    numMerges = 0;

                                    while (p) {
                                        numMerges++;
                                        q = p;
                                        pSize = 0;
                                        for (i = 0; i < inSize; i++) {
                                            pSize++;
                                            q = q.nextZ;
                                            if (!q) break;
                                        }
                                        qSize = inSize;

                                        while (pSize > 0 || (qSize > 0 && q)) {

                                            if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                                                e = p;
                                                p = p.nextZ;
                                                pSize--;
                                            } else {
                                                e = q;
                                                q = q.nextZ;
                                                qSize--;
                                            }

                                            if (tail) tail.nextZ = e;
                                            else list = e;

                                            e.prevZ = tail;
                                            tail = e;
                                        }

                                        p = q;
                                    }

                                    tail.nextZ = null;
                                    inSize *= 2;

                                } while (numMerges > 1);

                                return list;
                            }

                            // z-order of a point given coords and size of the data bounding box
                            function zOrder(x, y, minX, minY, size) {
                                // coords are transformed into non-negative 15-bit integer range
                                x = 32767 * (x - minX) / size;
                                y = 32767 * (y - minY) / size;

                                x = (x | (x << 8)) & 0x00FF00FF;
                                x = (x | (x << 4)) & 0x0F0F0F0F;
                                x = (x | (x << 2)) & 0x33333333;
                                x = (x | (x << 1)) & 0x55555555;

                                y = (y | (y << 8)) & 0x00FF00FF;
                                y = (y | (y << 4)) & 0x0F0F0F0F;
                                y = (y | (y << 2)) & 0x33333333;
                                y = (y | (y << 1)) & 0x55555555;

                                return x | (y << 1);
                            }

                            // find the leftmost node of a polygon ring
                            function getLeftmost(start) {
                                var p = start,
                                    leftmost = start;
                                do {
                                    if (p.x < leftmost.x) leftmost = p;
                                    p = p.next;
                                } while (p !== start);

                                return leftmost;
                            }

                            // check if a point lies within a convex triangle
                            function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
                                return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&
                                    (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&
                                    (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
                            }

                            // check if a diagonal between two polygon nodes is valid (lies in polygon interior)
                            function isValidDiagonal(a, b) {
                                return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) &&
                                    locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);
                            }

                            // signed area of a triangle
                            function earcut_area(p, q, r) {
                                return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
                            }

                            // check if two points are equal
                            function equals(p1, p2) {
                                return p1.x === p2.x && p1.y === p2.y;
                            }

                            // check if two segments intersect
                            function intersects(p1, q1, p2, q2) {
                                if ((equals(p1, q1) && equals(p2, q2)) ||
                                    (equals(p1, q2) && equals(p2, q1))) return true;
                                return earcut_area(p1, q1, p2) > 0 !== earcut_area(p1, q1, q2) > 0 &&
                                    earcut_area(p2, q2, p1) > 0 !== earcut_area(p2, q2, q1) > 0;
                            }

                            // check if a polygon diagonal intersects any polygon segments
                            function intersectsPolygon(a, b) {
                                var p = a;
                                do {
                                    if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
                                        intersects(p, p.next, a, b)) return true;
                                    p = p.next;
                                } while (p !== a);

                                return false;
                            }

                            // check if a polygon diagonal is locally inside the polygon
                            function locallyInside(a, b) {
                                return earcut_area(a.prev, a, a.next) < 0 ?
                                    earcut_area(a, b, a.next) >= 0 && earcut_area(a, a.prev, b) >= 0 :
                                    earcut_area(a, b, a.prev) < 0 || earcut_area(a, a.next, b) < 0;
                            }

                            // check if the middle point of a polygon diagonal is inside the polygon
                            function middleInside(a, b) {
                                var p = a,
                                    inside = false,
                                    px = (a.x + b.x) / 2,
                                    py = (a.y + b.y) / 2;
                                do {
                                    if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&
                                        (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))
                                        inside = !inside;
                                    p = p.next;
                                } while (p !== a);

                                return inside;
                            }

                            // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
                            // if one belongs to the outer ring and another to a hole, it merges it into a single ring
                            function splitPolygon(a, b) {
                                var a2 = new earcut_Node(a.i, a.x, a.y),
                                    b2 = new earcut_Node(b.i, b.x, b.y),
                                    an = a.next,
                                    bp = b.prev;

                                a.next = b;
                                b.prev = a;

                                a2.next = an;
                                an.prev = a2;

                                b2.next = a2;
                                a2.prev = b2;

                                bp.next = b2;
                                b2.prev = bp;

                                return b2;
                            }

                            // create a node and optionally link it with previous one (in a circular doubly linked list)
                            function insertNode(i, x, y, last) {
                                var p = new earcut_Node(i, x, y);

                                if (!last) {
                                    p.prev = p;
                                    p.next = p;

                                } else {
                                    p.next = last.next;
                                    p.prev = last;
                                    last.next.prev = p;
                                    last.next = p;
                                }
                                return p;
                            }

                            function removeNode(p) {
                                p.next.prev = p.prev;
                                p.prev.next = p.next;

                                if (p.prevZ) p.prevZ.nextZ = p.nextZ;
                                if (p.nextZ) p.nextZ.prevZ = p.prevZ;
                            }

                            function earcut_Node(i, x, y) {
                                // vertice index in coordinates array
                                this.i = i;

                                // vertex coordinates
                                this.x = x;
                                this.y = y;

                                // previous and next vertice nodes in a polygon ring
                                this.prev = null;
                                this.next = null;

                                // z-order curve value
                                this.z = null;

                                // previous and next nodes in z-order
                                this.prevZ = null;
                                this.nextZ = null;

                                // indicates whether this is a steiner point
                                this.steiner = false;
                            }

                            // return a percentage difference between the polygon area and its triangulation area;
                            // used to verify correctness of triangulation
                            earcut_earcut.deviation = function(data, holeIndices, dim, triangles) {
                                var hasHoles = holeIndices && holeIndices.length;
                                var outerLen = hasHoles ? holeIndices[0] * dim : data.length;

                                var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
                                if (hasHoles) {
                                    for (var i = 0, len = holeIndices.length; i < len; i++) {
                                        var start = holeIndices[i] * dim;
                                        var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
                                        polygonArea -= Math.abs(signedArea(data, start, end, dim));
                                    }
                                }

                                var trianglesArea = 0;
                                for (i = 0; i < triangles.length; i += 3) {
                                    var a = triangles[i] * dim;
                                    var b = triangles[i + 1] * dim;
                                    var c = triangles[i + 2] * dim;
                                    trianglesArea += Math.abs(
                                        (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -
                                        (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
                                }

                                return polygonArea === 0 && trianglesArea === 0 ? 0 :
                                    Math.abs((trianglesArea - polygonArea) / polygonArea);
                            };

                            function signedArea(data, start, end, dim) {
                                var sum = 0;
                                for (var i = start, j = end - dim; i < end; i += dim) {
                                    sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
                                    j = i;
                                }
                                return sum;
                            }
                            // CONCATENATED MODULE: ./src/util/ProgressiveQuickSort.js

                            function swap(arr, a, b) {
                                var tmp = arr[a];
                                arr[a] = arr[b];
                                arr[b] = tmp;
                            }

                            function partition(arr, pivot, left, right, compare) {
                                var storeIndex = left;
                                var pivotValue = arr[pivot];

                                // put the pivot on the right
                                swap(arr, pivot, right);

                                // go through the rest
                                for (var v = left; v < right; v++) {
                                    if (compare(arr[v], pivotValue) < 0) {
                                        swap(arr, v, storeIndex);
                                        storeIndex++;
                                    }
                                }

                                // finally put the pivot in the correct place
                                swap(arr, right, storeIndex);

                                return storeIndex;
                            }

                            function quickSort(array, compare, left, right) {
                                if (left < right) {
                                    var pivot = Math.floor((left + right) / 2);
                                    var newPivot = partition(array, pivot, left, right, compare);
                                    quickSort(array, compare, left, newPivot - 1);
                                    quickSort(array, compare, newPivot + 1, right);
                                }
                            }


                            // TODO Test.
                            function ProgressiveQuickSort() {

                                // this._pivotList = new LinkedList();
                                this._parts = [];
                            }

                            ProgressiveQuickSort.prototype.step = function(arr, compare, frame) {

                                var len = arr.length;
                                if (frame === 0) {
                                    this._parts = [];
                                    this._sorted = false;

                                    // Pick a start pivot;
                                    var pivot = Math.floor(len / 2);
                                    this._parts.push({
                                        pivot: pivot,
                                        left: 0,
                                        right: len - 1
                                    });

                                    this._currentSortPartIdx = 0;
                                }

                                if (this._sorted) {
                                    return;
                                }

                                var parts = this._parts;
                                if (parts.length === 0) {
                                    this._sorted = true;
                                    // Already finished.
                                    return true;
                                } else if (parts.length < 512) {
                                    // Sort large parts in about 10 frames.
                                    for (var i = 0; i < parts.length; i++) {
                                        // Partition and Modify the pivot index.
                                        parts[i].pivot = partition(
                                            arr, parts[i].pivot, parts[i].left, parts[i].right, compare
                                        );
                                    }

                                    var subdividedParts = [];
                                    for (var i = 0; i < parts.length; i++) {
                                        // Subdivide left
                                        var left = parts[i].left;
                                        var right = parts[i].pivot - 1;
                                        if (right > left) {
                                            subdividedParts.push({
                                                pivot: Math.floor((right + left) / 2),
                                                left: left,
                                                right: right
                                            });
                                        }
                                        // Subdivide right
                                        var left = parts[i].pivot + 1;
                                        var right = parts[i].right;
                                        if (right > left) {
                                            subdividedParts.push({
                                                pivot: Math.floor((right + left) / 2),
                                                left: left,
                                                right: right
                                            });
                                        }
                                    }
                                    parts = this._parts = subdividedParts;
                                } else {
                                    // console.time('sort');
                                    // Finally quick sort each parts in 10 frames.
                                    for (var i = 0; i < Math.floor(parts.length / 10); i++) {
                                        // Sort near parts first.
                                        var idx = parts.length - 1 - this._currentSortPartIdx;
                                        quickSort(arr, compare, parts[idx].left, parts[idx].right);
                                        this._currentSortPartIdx++;

                                        // Finish sort
                                        if (this._currentSortPartIdx === parts.length) {
                                            this._sorted = true;
                                            return true;
                                        }
                                    }
                                    // console.timeEnd('sort');

                                }

                                return false;
                            };

                            ProgressiveQuickSort.sort = quickSort;

                            /* harmony default export */
                            var util_ProgressiveQuickSort = (ProgressiveQuickSort);
                            // CONCATENATED MODULE: ./src/util/geometry/trianglesSortMixin.js


                            var trianglesSortMixin_vec3 = glmatrix_default.a.vec3;

                            var trianglesSortMixin_p0 = trianglesSortMixin_vec3.create();
                            var trianglesSortMixin_p1 = trianglesSortMixin_vec3.create();
                            var trianglesSortMixin_p2 = trianglesSortMixin_vec3.create();
                            // var cp = vec3.create();

                            /* harmony default export */
                            var trianglesSortMixin = ({

                                needsSortTriangles: function() {
                                    return this.indices && this.sortTriangles;
                                },

                                needsSortTrianglesProgressively: function() {
                                    return this.needsSortTriangles() && this.triangleCount >= 2e4;
                                },

                                doSortTriangles: function(cameraPos, frame) {
                                    var indices = this.indices;
                                    // Do progressive quick sort.
                                    if (frame === 0) {
                                        var posAttr = this.attributes.position;
                                        var cameraPos = cameraPos._array;

                                        if (!this._triangleZList || this._triangleZList.length !== this.triangleCount) {
                                            this._triangleZList = new Float32Array(this.triangleCount);
                                            this._sortedTriangleIndices = new Uint32Array(this.triangleCount);

                                            this._indicesTmp = new indices.constructor(indices.length);
                                            this._triangleZListTmp = new Float32Array(this.triangleCount);
                                        }

                                        var cursor = 0;
                                        var firstZ;
                                        for (var i = 0; i < indices.length;) {
                                            posAttr.get(indices[i++], trianglesSortMixin_p0);
                                            posAttr.get(indices[i++], trianglesSortMixin_p1);
                                            posAttr.get(indices[i++], trianglesSortMixin_p2);

                                            // FIXME If use center ?
                                            // cp[0] = (p0[0] + p1[0] + p2[0]) / 3;
                                            // cp[1] = (p0[1] + p1[1] + p2[1]) / 3;
                                            // cp[2] = (p0[2] + p1[2] + p2[2]) / 3;
                                            // Camera position is in object space

                                            // Use max of three points, PENDING
                                            var z0 = trianglesSortMixin_vec3.sqrDist(trianglesSortMixin_p0, cameraPos);
                                            var z1 = trianglesSortMixin_vec3.sqrDist(trianglesSortMixin_p1, cameraPos);
                                            var z2 = trianglesSortMixin_vec3.sqrDist(trianglesSortMixin_p2, cameraPos);
                                            var zMax = Math.min(z0, z1);
                                            zMax = Math.min(zMax, z2);
                                            if (i === 3) {
                                                firstZ = zMax;
                                                zMax = 0;
                                            } else {
                                                // Only store the difference to avoid the precision issue.
                                                zMax = zMax - firstZ;
                                            }
                                            this._triangleZList[cursor++] = zMax;
                                        }
                                    }


                                    var sortedTriangleIndices = this._sortedTriangleIndices;
                                    for (var i = 0; i < sortedTriangleIndices.length; i++) {
                                        sortedTriangleIndices[i] = i;
                                    }

                                    if (this.triangleCount < 2e4) {
                                        // Use simple timsort for simple geometries.
                                        if (frame === 0) {
                                            // Use native sort temporary.
                                            this._simpleSort(true);
                                        }
                                    } else {
                                        for (var i = 0; i < 3; i++) {
                                            this._progressiveQuickSort(frame * 3 + i);
                                        }
                                    }

                                    var targetIndices = this._indicesTmp;
                                    var targetTriangleZList = this._triangleZListTmp;
                                    var faceZList = this._triangleZList;
                                    for (var i = 0; i < this.triangleCount; i++) {
                                        var fromIdx3 = sortedTriangleIndices[i] * 3;
                                        var toIdx3 = i * 3;
                                        targetIndices[toIdx3++] = indices[fromIdx3++];
                                        targetIndices[toIdx3++] = indices[fromIdx3++];
                                        targetIndices[toIdx3] = indices[fromIdx3];

                                        targetTriangleZList[i] = faceZList[sortedTriangleIndices[i]];
                                    }

                                    // Swap indices.
                                    var tmp = this._indicesTmp;
                                    this._indicesTmp = this.indices;
                                    this.indices = tmp;
                                    var tmp = this._triangleZListTmp;
                                    this._triangleZListTmp = this._triangleZList;
                                    this._triangleZList = tmp;

                                    this.dirtyIndices();
                                },

                                _simpleSort: function(useNativeQuickSort) {
                                    var faceZList = this._triangleZList;
                                    var sortedTriangleIndices = this._sortedTriangleIndices;

                                    function compare(a, b) {
                                        // Sort from far to near. which is descending order
                                        return faceZList[b] - faceZList[a];
                                    }
                                    if (useNativeQuickSort) {
                                        Array.prototype.sort.call(sortedTriangleIndices, compare);
                                    } else {
                                        util_ProgressiveQuickSort.sort(sortedTriangleIndices, compare, 0, sortedTriangleIndices.length - 1);
                                    }
                                },

                                _progressiveQuickSort: function(frame) {
                                    var faceZList = this._triangleZList;
                                    var sortedTriangleIndices = this._sortedTriangleIndices;

                                    this._quickSort = this._quickSort || new util_ProgressiveQuickSort();

                                    this._quickSort.step(sortedTriangleIndices, function(a, b) {
                                        return faceZList[b] - faceZList[a];
                                    }, frame);
                                }
                            });
                            // CONCATENATED MODULE: ./src/component/common/LabelsBuilder.js





                            var LABEL_NORMAL_SHOW_BIT = 1;
                            var LABEL_EMPHASIS_SHOW_BIT = 2;

                            function LabelsBuilder(width, height, api) {

                                this._labelsMesh = new LabelsMesh();

                                this._labelTextureSurface = new util_ZRTextureAtlasSurface({
                                    width: 512,
                                    height: 512,
                                    devicePixelRatio: api.getDevicePixelRatio(),
                                    onupdate: function() {
                                        api.getZr().refresh();
                                    }
                                });
                                this._api = api;

                                this._labelsMesh.material.set('textureAtlas', this._labelTextureSurface.getTexture());
                            }

                            LabelsBuilder.prototype.getLabelPosition = function(dataIndex, positionDesc, distance) {
                                return [0, 0, 0];
                            };

                            LabelsBuilder.prototype.getLabelDistance = function(dataIndex, positionDesc, distance) {
                                return 0;
                            };

                            LabelsBuilder.prototype.getMesh = function() {
                                return this._labelsMesh;
                            };

                            LabelsBuilder.prototype.updateData = function(data) {

                                if (!this._labelsVisibilitiesBits || this._labelsVisibilitiesBits.length !== data.count()) {
                                    this._labelsVisibilitiesBits = new Uint8Array(data.count());
                                }
                                var normalLabelVisibilityQuery = ['label', 'show'];
                                var emphasisLabelVisibilityQuery = ['emphasis', 'label', 'show'];

                                data.each(function(idx) {
                                    var itemModel = data.getItemModel(idx);
                                    var normalVisibility = itemModel.get(normalLabelVisibilityQuery);
                                    var emphasisVisibility = itemModel.get(emphasisLabelVisibilityQuery);
                                    if (emphasisVisibility == null) {
                                        emphasisVisibility = normalVisibility;
                                    }
                                    var bit = (normalVisibility ? LABEL_NORMAL_SHOW_BIT : 0) |
                                        (emphasisVisibility ? LABEL_EMPHASIS_SHOW_BIT : 0);
                                    this._labelsVisibilitiesBits[idx] = bit;
                                }, false, this);

                                this._data = data;
                            };

                            LabelsBuilder.prototype.updateLabels = function(highlightDataIndices) {

                                if (!this._data) {
                                    return;
                                }

                                highlightDataIndices = highlightDataIndices || [];

                                var hasHighlightData = highlightDataIndices.length > 0;
                                var highlightDataIndicesMap = {};
                                for (var i = 0; i < highlightDataIndices.length; i++) {
                                    highlightDataIndicesMap[highlightDataIndices[i]] = true;
                                }

                                this._labelsMesh.geometry.convertToDynamicArray(true);
                                this._labelTextureSurface.clear();

                                var normalLabelQuery = ['label'];
                                var emphasisLabelQuery = ['emphasis', 'label'];
                                var seriesModel = this._data.hostModel;
                                var data = this._data;

                                var seriesLabelModel = seriesModel.getModel(normalLabelQuery);
                                var seriesLabelEmphasisModel = seriesModel.getModel(emphasisLabelQuery, seriesLabelModel);

                                var textAlignMap = {
                                    left: 'right',
                                    right: 'left',
                                    top: 'center',
                                    bottom: 'center'
                                };
                                var textVerticalAlignMap = {
                                    left: 'middle',
                                    right: 'middle',
                                    top: 'bottom',
                                    bottom: 'top'
                                };

                                data.each(function(dataIndex) {
                                    var isEmphasis = false;
                                    if (hasHighlightData && highlightDataIndicesMap[dataIndex]) {
                                        isEmphasis = true;
                                    }
                                    var ifShow = this._labelsVisibilitiesBits[dataIndex] &
                                        (isEmphasis ? LABEL_EMPHASIS_SHOW_BIT : LABEL_NORMAL_SHOW_BIT);
                                    if (!ifShow) {
                                        return;
                                    }

                                    var itemModel = data.getItemModel(dataIndex);
                                    var labelModel = itemModel.getModel(
                                        isEmphasis ? emphasisLabelQuery : normalLabelQuery,
                                        isEmphasis ? seriesLabelEmphasisModel : seriesLabelModel
                                    );
                                    var distance = labelModel.get('distance') || 0;
                                    var position = labelModel.get('position');
                                    var textStyleModel = labelModel.getModel('textStyle');

                                    var dpr = this._api.getDevicePixelRatio();
                                    var text = seriesModel.getFormattedLabel(dataIndex, isEmphasis ? 'emphasis' : 'normal');
                                    if (text == null || text === '') {
                                        return;
                                    }

                                    // TODO Background.
                                    var textEl = new external__echarts__default.a.graphic.Text();
                                    external__echarts__default.a.graphic.setTextStyle(textEl.style, textStyleModel, {
                                        text: text,
                                        textFill: textStyleModel.get('color') || data.getItemVisual(dataIndex, 'color') || '#000',
                                        textAlign: 'left',
                                        textVerticalAlign: 'top',
                                        opacity: util_retrieve.firstNotNull(textStyleModel.get('opacity'), data.getItemVisual(dataIndex, 'opacity'), 1)
                                    });
                                    var rect = textEl.getBoundingRect();
                                    var lineHeight = 1.2;
                                    rect.height *= lineHeight;

                                    var coords = this._labelTextureSurface.add(textEl);

                                    var textAlign = textAlignMap[position] || 'center';
                                    var textVerticalAlign = textVerticalAlignMap[position] || 'bottom';

                                    this._labelsMesh.geometry.addSprite(
                                        this.getLabelPosition(dataIndex, position, distance), [rect.width * dpr, rect.height * dpr], coords,
                                        textAlign, textVerticalAlign,
                                        this.getLabelDistance(dataIndex, position, distance) * dpr
                                    );
                                }, false, this);

                                this._labelsMesh.material.set('uvScale', this._labelTextureSurface.getCoordsScale());

                                // var canvas = this._labelTextureSurface.getTexture().image;
                                // document.body.appendChild(canvas);
                                // canvas.style.cssText = 'position:absolute;z-index: 1000';

                                // Update image.
                                this._labelTextureSurface.getZr().refreshImmediately();
                                this._labelsMesh.geometry.convertToTypedArray();
                                this._labelsMesh.geometry.dirty();
                            };

                            /* harmony default export */
                            var common_LabelsBuilder = (LabelsBuilder);
                            // CONCATENATED MODULE: ./src/component/common/Geo3DBuilder.js


                            // import Triangulation from '../../util/Triangulation';








                            var Geo3DBuilder_vec3 = glmatrix_default.a.vec3;

                            util_graphicGL.Shader.import(lines3D_glsl);

                            function Geo3DBuilder(api) {

                                this.rootNode = new util_graphicGL.Node();

                                this._currentMap = '';

                                // Cache triangulation result
                                this._triangulationResults = {};

                                // this._triangulator = new Triangulation();

                                this._shadersMap = util_graphicGL.COMMON_SHADERS.reduce(function(obj, shaderName) {
                                    obj[shaderName] = util_graphicGL.createShader('ecgl.' + shaderName);
                                    obj[shaderName].define('fragment', 'DOUBLE_SIDED');
                                    // obj[shaderName].define('both', 'WIREFRAME_TRIANGLE');
                                    return obj;
                                }, {});

                                this._linesShader = util_graphicGL.createShader('ecgl.meshLines3D');

                                var groundMaterials = {};
                                util_graphicGL.COMMON_SHADERS.forEach(function(shading) {
                                    groundMaterials[shading] = new util_graphicGL.Material({
                                        shader: util_graphicGL.createShader('ecgl.' + shading)
                                    });
                                });
                                this._groundMaterials = groundMaterials;

                                this._groundMesh = new util_graphicGL.Mesh({
                                    geometry: new util_graphicGL.PlaneGeometry({ dynamic: true }),
                                    castShadow: false,
                                    renderNormal: true,
                                    $ignorePicking: true
                                });
                                this._groundMesh.rotation.rotateX(-Math.PI / 2);

                                this._labelsBuilder = new common_LabelsBuilder(1024, 1024, api);

                                // Give a large render order.
                                this._labelsBuilder.getMesh().renderOrder = 100;
                                this._labelsBuilder.getMesh().material.depthTest = false;

                                this._api = api;
                            }

                            Geo3DBuilder.prototype = {

                                constructor: Geo3DBuilder,

                                // Which dimension to extrude. Y or Z
                                extrudeY: true,

                                update: function(componentModel, geo3D, ecModel, api) {
                                    var enableInstancing = componentModel.get('instancing');

                                    this._triangulation(geo3D);
                                    if (
                                        geo3D.map !== this._currentMap ||
                                        (enableInstancing && !this._polygonMesh) ||
                                        (!enableInstancing && !this._polygonMeshesMap)
                                    ) {
                                        this._currentMap = geo3D.map;

                                        // Reset meshes
                                        this._initMeshes(componentModel, geo3D);

                                        this.rootNode.add(this._labelsBuilder.getMesh());
                                    }

                                    var shader = this._getShader(componentModel.get('shading'));

                                    var data = componentModel.getData();

                                    if (enableInstancing) {
                                        this._prepareInstancingMesh(componentModel, geo3D, shader, api);
                                    }

                                    this.rootNode.updateWorldTransform();

                                    this._updateRegionMesh(componentModel, geo3D, shader, api, enableInstancing);

                                    this._updateGroundPlane(componentModel, geo3D, api);

                                    this._labelsBuilder.updateData(data);
                                    this._labelsBuilder.getLabelPosition = function(dataIndex, positionDesc, distance) {
                                        var name = data.getName(dataIndex);
                                        var region = geo3D.getRegion(name);
                                        var center = region.center;

                                        var height = distance;
                                        return geo3D.dataToPoint([center[0], center[1], height]);
                                    };

                                    this._data = data;

                                    this._labelsBuilder.updateLabels();

                                    this._updateDebugWireframe(componentModel, geo3D);

                                    // Reset some state.
                                    this._lastHoverDataIndex = 0;
                                },

                                _prepareInstancingMesh: function(componentModel, geo3D, shader, api) {
                                    var polygonVertexCount = 0;
                                    var polygonTriangleCount = 0;
                                    // TODO Lines
                                    geo3D.regions.forEach(function(region) {
                                        var info = this._getRegionPolygonGeoInfo(region);
                                        polygonVertexCount += info.vertexCount;
                                        polygonTriangleCount += info.triangleCount;
                                    }, this);

                                    var polygonMesh = this._polygonMesh;
                                    var polygonGeo = polygonMesh.geometry;
                                    ['position', 'normal', 'texcoord0', 'color'].forEach(function(attrName) {
                                        polygonGeo.attributes[attrName].init(polygonVertexCount);
                                    });

                                    polygonGeo.indices = polygonVertexCount > 0xffff ? new Uint32Array(polygonTriangleCount * 3) : new Uint16Array(polygonTriangleCount * 3);

                                    if (polygonMesh.material.shader !== shader) {
                                        polygonMesh.material.attachShader(shader, true);
                                    }

                                    // Indexing data index from vertex index.
                                    this._dataIndexOfVertex = new Uint32Array(polygonVertexCount);
                                    // Indexing vertex index range from data index
                                    this._vertexRangeOfDataIndex = new Uint32Array(geo3D.regions.length * 2);
                                },

                                _updateRegionMesh: function(componentModel, geo3D, shader, api, instancing) {

                                    var data = componentModel.getData();

                                    var vertexOffset = 0;
                                    var triangleOffset = 0;

                                    if (instancing) {
                                        // Materials configurations.
                                        util_graphicGL.setMaterialFromModel(shader.__shading, this._polygonMesh.material, componentModel, api);
                                    }
                                    var hasTranparentRegion = false;

                                    var nameIndicesMap = {};
                                    data.each(function(idx) {
                                        nameIndicesMap[data.getName(idx)] = idx;
                                    });

                                    geo3D.regions.forEach(function(region) {
                                        var dataIndex = nameIndicesMap[region.name];
                                        if (dataIndex == null) {
                                            dataIndex = -1;
                                        }

                                        var polygonMesh = instancing ? this._polygonMesh : this._polygonMeshesMap[region.name];
                                        var linesMesh = instancing ? this._linesMesh : this._linesMeshesMap[region.name];
                                        if (polygonMesh.material.shader !== shader) {
                                            polygonMesh.material.attachShader(shader, true);
                                        }
                                        // Get bunch of visual properties.
                                        var regionModel = componentModel.getRegionModel(region.name);
                                        var itemStyleModel = regionModel.getModel('itemStyle');
                                        var color = itemStyleModel.get('areaColor');
                                        var opacity = util_retrieve.firstNotNull(itemStyleModel.get('opacity'), 1.0);

                                        // Use visual color if it is encoded by visualMap component
                                        var visualColor = data.getItemVisual(dataIndex, 'color', true);
                                        if (visualColor != null && data.hasValue(dataIndex)) {
                                            color = visualColor;
                                        }
                                        // Set color, opacity to visual for label usage.
                                        data.setItemVisual(dataIndex, 'color', color);
                                        data.setItemVisual(dataIndex, 'opacity', opacity);

                                        color = util_graphicGL.parseColor(color);
                                        var borderColor = util_graphicGL.parseColor(itemStyleModel.get('borderColor'));

                                        color[3] *= opacity;
                                        borderColor[3] *= opacity;

                                        var isTransparent = color[3] < 0.99;
                                        if (!instancing) {
                                            // Materials configurations.
                                            util_graphicGL.setMaterialFromModel(shader.__shading, polygonMesh.material, regionModel, api);
                                            polygonMesh.material.set({ color: color });
                                            polygonMesh.material.transparent = isTransparent;
                                            polygonMesh.material.depthMask = !isTransparent;
                                        } else {
                                            polygonMesh.material.set('color', [1, 1, 1, 1]);
                                        }
                                        hasTranparentRegion = hasTranparentRegion || isTransparent;

                                        var regionHeight = util_retrieve.firstNotNull(regionModel.get('height', true), componentModel.get('regionHeight'));

                                        if (instancing) {
                                            var newOffsets = this._updatePolygonGeometry(
                                                componentModel, polygonMesh.geometry, region, regionHeight,
                                                vertexOffset, triangleOffset, color
                                            );

                                            for (var i = vertexOffset; i < newOffsets.vertexOffset; i++) {
                                                this._dataIndexOfVertex[i] = dataIndex;
                                            }
                                            this._vertexRangeOfDataIndex[dataIndex * 2] = vertexOffset;
                                            this._vertexRangeOfDataIndex[dataIndex * 2 + 1] = newOffsets.vertexOffset;

                                            vertexOffset = newOffsets.vertexOffset;
                                            triangleOffset = newOffsets.triangleOffset;
                                        } else {
                                            this._updatePolygonGeometry(
                                                componentModel, polygonMesh.geometry, region, regionHeight
                                            );
                                        }

                                        // Update lines.
                                        // TODO INSTANCING LINES
                                        var lineWidth = itemStyleModel.get('borderWidth');
                                        var hasLine = lineWidth > 0;
                                        if (!instancing) {
                                            if (hasLine) {
                                                lineWidth *= api.getDevicePixelRatio();
                                                this._updateLinesGeometry(
                                                    linesMesh.geometry, region, regionHeight, lineWidth, geo3D.transform
                                                );
                                            }
                                            linesMesh.invisible = !hasLine;
                                            linesMesh.material.set({
                                                color: borderColor
                                            });
                                        }

                                        if (!instancing) {
                                            // Move regions to center so they can be sorted right when material is transparent.
                                            this._moveRegionToCenter(polygonMesh, linesMesh, hasLine);
                                            // Bind events.
                                            if (componentModel.type === 'geo3D') {
                                                polygonMesh.eventData = {
                                                    name: region.name
                                                };
                                            } else {
                                                polygonMesh.dataIndex = dataIndex;
                                                polygonMesh.seriesIndex = componentModel.seriesIndex;
                                            }
                                            polygonMesh.on('mouseover', this._onmouseover, this);
                                            polygonMesh.on('mouseout', this._onmouseout, this);

                                            // Update tangents
                                            if (polygonMesh.material.get('normalMap')) {
                                                polygonMesh.geometry.generateTangents();
                                            }
                                        }
                                    }, this);

                                    if (instancing) {
                                        var polygonMesh = this._polygonMesh;
                                        polygonMesh.material.transparent = hasTranparentRegion;
                                        polygonMesh.material.depthMask = !hasTranparentRegion;
                                        polygonMesh.geometry.updateBoundingBox();

                                        // Update tangents
                                        if (polygonMesh.material.get('normalMap')) {
                                            polygonMesh.geometry.generateTangents();
                                        }

                                        polygonMesh.seriesIndex = componentModel.seriesIndex;

                                        polygonMesh.on('mousemove', this._onmousemove, this);
                                        polygonMesh.on('mouseout', this._onmouseout, this);
                                    }
                                },

                                _updateDebugWireframe: function(componentModel, geo3D) {
                                    var debugWireframeModel = componentModel.getModel('debug.wireframe');

                                    // TODO Unshow
                                    if (debugWireframeModel.get('show')) {
                                        var color = util_graphicGL.parseColor(
                                            debugWireframeModel.get('lineStyle.color') || 'rgba(0,0,0,0.5)'
                                        );
                                        var width = util_retrieve.firstNotNull(
                                            debugWireframeModel.get('lineStyle.width'), 1
                                        );

                                        var setWireframe = function(mesh) {
                                            mesh.geometry.generateBarycentric();
                                            mesh.material.shader.define('both', 'WIREFRAME_TRIANGLE');
                                            mesh.material.set('wireframeLineColor', color);
                                            mesh.material.set('wireframeLineWidth', width);
                                        }
                                        if (this._polygonMeshesMap) {
                                            geo3D.regions.forEach(function(region) {
                                                setWireframe(this._polygonMeshesMap[region.name]);
                                            }, this);
                                        } else {
                                            setWireframe(this._polygonMesh);
                                        }
                                    }
                                },

                                _onmousemove: function(e) {
                                    var dataIndex = this._dataIndexOfVertex[e.triangle[0]];
                                    if (dataIndex == null) {
                                        dataIndex = -1;
                                    }
                                    if (dataIndex !== this._lastHoverDataIndex) {
                                        this.downplay(this._lastHoverDataIndex);
                                        this.highlight(dataIndex);

                                    }
                                    this._lastHoverDataIndex = dataIndex;
                                    this._polygonMesh.dataIndex = dataIndex;
                                },

                                _onmouseover: function(e) {
                                    if (e.target) {
                                        var dataIndex = e.target.eventData ?
                                            this._data.indexOfName(e.target.eventData.name) :
                                            e.target.dataIndex;
                                        if (dataIndex != null) {
                                            this.highlight(dataIndex);
                                            this._labelsBuilder.updateLabels([dataIndex]);
                                        }
                                    }
                                },

                                _onmouseout: function(e) {
                                    if (e.target) {
                                        // Instancing
                                        if (this._polygonMesh) {
                                            this.downplay(this._lastHoverDataIndex);
                                            this._lastHoverDataIndex = -1;
                                            this._polygonMesh.dataIndex = -1;
                                        } else {
                                            var dataIndex = e.target.eventData ?
                                                this._data.indexOfName(e.target.eventData.name) :
                                                e.target.dataIndex;
                                            if (dataIndex != null) {
                                                this.downplay(dataIndex);
                                                // TODO Merge with onmouseover
                                                if (!e.relatedTarget) {
                                                    this._labelsBuilder.updateLabels();
                                                }
                                            }
                                        }
                                    }
                                },

                                _updateGroundPlane: function(componentModel, geo3D, api) {
                                    var groundModel = componentModel.getModel('groundPlane', componentModel);
                                    this._groundMesh.invisible = !groundModel.get('show', true);
                                    if (this._groundMesh.invisible) {
                                        return;
                                    }

                                    var shading = componentModel.get('shading');
                                    var material = this._groundMaterials[shading];
                                    if (!material) {
                                        if (true) {
                                            console.warn('Unkown shading ' + shading);
                                        }
                                        material = this._groundMaterials.lambert;
                                    }

                                    util_graphicGL.setMaterialFromModel(shading, material, groundModel, api);
                                    if (material.get('normalMap')) {
                                        this._groundMesh.geometry.generateTangents();
                                    }

                                    this._groundMesh.material = material;
                                    this._groundMesh.material.set('color', util_graphicGL.parseColor(groundModel.get('color')));

                                    this._groundMesh.scale.set(geo3D.size[0], geo3D.size[2], 1);
                                },

                                _initMeshes: function(componentModel, geo3D) {
                                    this.rootNode.removeAll();

                                    var shader = this._getShader(componentModel.get('shading'));

                                    function createPolygonMesh() {
                                        var mesh = new util_graphicGL.Mesh({
                                            material: new util_graphicGL.Material({
                                                shader: shader
                                            }),
                                            culling: false,
                                            geometry: new util_graphicGL.Geometry({
                                                sortTriangles: true,
                                                dynamic: true
                                            }),
                                            // Render normal in normal pass
                                            renderNormal: true
                                        });
                                        external__echarts__default.a.util.extend(mesh.geometry, trianglesSortMixin);
                                        return mesh;
                                    }

                                    function createLinesMesh(shader) {
                                        return new util_graphicGL.Mesh({
                                            material: new util_graphicGL.Material({
                                                shader: shader
                                            }),
                                            castShadow: false,
                                            $ignorePicking: true,
                                            geometry: new Lines3D({
                                                useNativeLine: false
                                            })
                                        });
                                    }

                                    if (!componentModel.get('instancing')) {
                                        var polygonMeshesMap = {};
                                        var linesMeshesMap = {};
                                        geo3D.regions.forEach(function(region) {
                                            polygonMeshesMap[region.name] = createPolygonMesh();
                                            linesMeshesMap[region.name] = createLinesMesh(this._linesShader);

                                            this.rootNode.add(polygonMeshesMap[region.name]);
                                            this.rootNode.add(linesMeshesMap[region.name]);
                                        }, this);
                                        this._polygonMeshesMap = polygonMeshesMap;
                                        this._linesMeshesMap = linesMeshesMap;
                                    } else {
                                        var polygonMesh = createPolygonMesh();
                                        var linesMesh = createLinesMesh(this._linesShader);
                                        this.rootNode.add(polygonMesh);
                                        this.rootNode.add(linesMesh);

                                        polygonMesh.material.shader.define('both', 'VERTEX_COLOR');

                                        this._polygonMesh = polygonMesh;
                                        this._linesMesh = linesMesh;

                                        this._polygonMeshesMap = null;
                                        this._linesMeshesMap = null;
                                    }

                                    this.rootNode.add(this._groundMesh);
                                },

                                _getShader: function(shading) {
                                    var shader = this._shadersMap[shading];
                                    if (!shader) {
                                        if (true) {
                                            console.warn('Unkown shading ' + shading);
                                        }
                                        // Default use lambert shader.
                                        shader = this._shadersMap.lambert;
                                    }
                                    shader.__shading = shading;
                                    return shader;
                                },

                                _triangulation: function(geo3D) {
                                    this._triangulationResults = {};
                                    // var triangulator = this._triangulator;

                                    var minAll = [Infinity, Infinity, Infinity];
                                    var maxAll = [-Infinity, -Infinity, -Infinity];
                                    geo3D.regions.forEach(function(region) {
                                        var polygons = [];
                                        for (var i = 0; i < region.geometries.length; i++) {
                                            var exterior = region.geometries[i].exterior;
                                            var interiors = region.geometries[i].interiors;
                                            var points = [];
                                            var holes = [];
                                            if (exterior.length < 3) {
                                                continue;
                                            }
                                            var offset = 0;
                                            for (var j = 0; j < exterior.length; j++) {
                                                var p = exterior[j];
                                                points[offset++] = p[0];
                                                points[offset++] = p[1];
                                            }

                                            for (var j = 0; j < interiors.length; j++) {
                                                if (interiors[j].length.length < 3) {
                                                    continue;
                                                }
                                                var startIdx = points.length / 2;
                                                for (var k = 0; k < interiors[j].length; k++) {
                                                    var p = interiors[j][k];
                                                    points.push(p[0]);
                                                    points.push(p[1]);
                                                }

                                                holes.push(startIdx);
                                            }
                                            // triangulator.triangulate(points, holes);
                                            // points = triangulator.points;
                                            var triangles = earcut(points, holes);

                                            var points3 = new Float64Array(points.length / 2 * 3);
                                            var pos = [];
                                            var min = [Infinity, Infinity, Infinity];
                                            var max = [-Infinity, -Infinity, -Infinity];
                                            var off3 = 0;
                                            for (var j = 0; j < points.length;) {
                                                Geo3DBuilder_vec3.set(pos, points[j++], 0, points[j++]);
                                                Geo3DBuilder_vec3.transformMat4(pos, pos, geo3D.transform);
                                                Geo3DBuilder_vec3.min(min, min, pos);
                                                Geo3DBuilder_vec3.max(max, max, pos);
                                                points3[off3++] = pos[0];
                                                points3[off3++] = pos[1];
                                                points3[off3++] = pos[2];
                                            }
                                            Geo3DBuilder_vec3.min(minAll, minAll, min);
                                            Geo3DBuilder_vec3.max(maxAll, maxAll, max);
                                            polygons.push({
                                                points: points3,
                                                indices: triangles
                                            });
                                        }
                                        this._triangulationResults[region.name] = polygons;
                                    }, this);

                                    this._geoBoundingBox = [minAll, maxAll];
                                },

                                /**
                                 * Get region vertex and triangle count
                                 */
                                _getRegionPolygonGeoInfo: function(region) {

                                    var polygons = this._triangulationResults[region.name];

                                    var sideVertexCount = 0;
                                    var sideTriangleCount = 0;

                                    for (var i = 0; i < polygons.length; i++) {
                                        sideVertexCount += polygons[i].points.length / 3;
                                        sideTriangleCount += polygons[i].indices.length / 3;
                                    }

                                    var vertexCount = sideVertexCount * 2 + sideVertexCount * 4;
                                    var triangleCount = sideTriangleCount * 2 + sideVertexCount * 2;

                                    return {
                                        vertexCount: vertexCount,
                                        triangleCount: triangleCount
                                    };
                                },

                                _updatePolygonGeometry: function(
                                    componentModel, geometry, region, regionHeight,
                                    vertexOffset, triangleOffset, color
                                ) {
                                    // FIXME
                                    var projectUVOnGround = componentModel.get('projectUVOnGround');

                                    var positionAttr = geometry.attributes.position;
                                    var normalAttr = geometry.attributes.normal;
                                    var texcoordAttr = geometry.attributes.texcoord0;
                                    var colorAttr = geometry.attributes.color;
                                    var polygons = this._triangulationResults[region.name];

                                    var hasColor = colorAttr.value && color;

                                    var indices = geometry.indices;
                                    var instancing = vertexOffset != null;

                                    var extrudeCoordIndex = this.extrudeY ? 1 : 2;
                                    var sideCoordIndex = this.extrudeY ? 2 : 1;

                                    if (!instancing) {
                                        var geoInfo = this._getRegionPolygonGeoInfo(region);
                                        vertexOffset = triangleOffset = 0;

                                        positionAttr.init(geoInfo.vertexCount);
                                        normalAttr.init(geoInfo.vertexCount);
                                        texcoordAttr.init(geoInfo.vertexCount);
                                        indices = geometry.indices = geoInfo.vertexCount > 0xffff ?
                                            new Uint32Array(geoInfo.triangleCount * 3) :
                                            new Uint16Array(geoInfo.triangleCount * 3);
                                    }

                                    var scale = [
                                        this.rootNode.worldTransform.x.len(),
                                        this.rootNode.worldTransform.y.len(),
                                        this.rootNode.worldTransform.z.len()
                                    ];

                                    var min = Geo3DBuilder_vec3.mul([], this._geoBoundingBox[0], scale);
                                    var max = Geo3DBuilder_vec3.mul([], this._geoBoundingBox[1], scale);
                                    var maxDimSize = Math.max(max[0] - min[0], max[2] - min[2]);

                                    function addVertices(polygon, y, insideOffset) {
                                        var points = polygon.points;

                                        var pointsLen = points.length;
                                        var currentPosition = [];
                                        var uv = [];

                                        for (var k = 0; k < pointsLen; k += 3) {
                                            currentPosition[0] = points[k];
                                            currentPosition[extrudeCoordIndex] = y;
                                            currentPosition[sideCoordIndex] = points[k + 2];

                                            uv[0] = (points[k] * scale[0] - min[0]) / maxDimSize;
                                            uv[1] = (points[k + 2] * scale[sideCoordIndex] - min[2]) / maxDimSize;

                                            positionAttr.set(vertexOffset, currentPosition);
                                            if (hasColor) {
                                                colorAttr.set(vertexOffset, color);
                                            }
                                            texcoordAttr.set(vertexOffset++, uv);
                                        }
                                    }

                                    function buildTopBottom(polygon, y, insideOffset) {

                                        var startVertexOffset = vertexOffset;

                                        addVertices(polygon, y, insideOffset);

                                        for (var k = 0; k < polygon.indices.length; k++) {
                                            indices[triangleOffset * 3 + k] = polygon.indices[k] + startVertexOffset;
                                        }
                                        triangleOffset += polygon.indices.length / 3;
                                    }

                                    var normalTop = this.extrudeY ? [0, 1, 0] : [0, 0, 1];
                                    var normalBottom = Geo3DBuilder_vec3.negate([], normalTop);
                                    for (var p = 0; p < polygons.length; p++) {
                                        var startVertexOffset = vertexOffset;
                                        var polygon = polygons[p];
                                        // BOTTOM
                                        buildTopBottom(polygon, 0, 0);
                                        // TOP
                                        buildTopBottom(polygon, regionHeight, 0);

                                        var ringVertexCount = polygon.points.length / 3;
                                        for (var v = 0; v < ringVertexCount; v++) {
                                            normalAttr.set(startVertexOffset + v, normalBottom);
                                            normalAttr.set(startVertexOffset + v + ringVertexCount, normalTop);
                                        }

                                        var quadToTriangle = [0, 3, 1, 1, 3, 2];

                                        var quadPos = [
                                            [],
                                            [],
                                            [],
                                            []
                                        ];
                                        var a = [];
                                        var b = [];
                                        var normal = [];
                                        var uv = [];
                                        var len = 0;
                                        for (var v = 0; v < ringVertexCount; v++) {
                                            var next = (v + 1) % ringVertexCount;

                                            var dx = (polygon.points[next * 3] - polygon.points[v * 3]) * scale[0];
                                            var dy = (polygon.points[next * 3 + 2] - polygon.points[v * 3 + 2]) * scale[sideCoordIndex];
                                            var sideLen = Math.sqrt(dx * dx + dy * dy);

                                            // 0----1
                                            // 3----2
                                            for (var k = 0; k < 4; k++) {
                                                var isCurrent = (k === 0 || k === 3);
                                                var idx3 = (isCurrent ? v : next) * 3;
                                                quadPos[k][0] = polygon.points[idx3];
                                                quadPos[k][extrudeCoordIndex] = k > 1 ? regionHeight : 0;
                                                quadPos[k][sideCoordIndex] = polygon.points[idx3 + 2];

                                                positionAttr.set(vertexOffset + k, quadPos[k]);

                                                if (projectUVOnGround) {
                                                    uv[0] = (polygon.points[idx3] * scale[0] - min[0]) / maxDimSize;
                                                    uv[1] = (polygon.points[idx3 + 2] * scale[sideCoordIndex] - min[sideCoordIndex]) / maxDimSize;
                                                } else {
                                                    uv[0] = (isCurrent ? len : (len + sideLen)) / maxDimSize;
                                                    uv[1] = (quadPos[k][extrudeCoordIndex] * scale[extrudeCoordIndex] - min[extrudeCoordIndex]) / maxDimSize;
                                                }
                                                texcoordAttr.set(vertexOffset + k, uv);
                                            }
                                            Geo3DBuilder_vec3.sub(a, quadPos[1], quadPos[0]);
                                            Geo3DBuilder_vec3.sub(b, quadPos[3], quadPos[0]);
                                            Geo3DBuilder_vec3.cross(normal, a, b);
                                            Geo3DBuilder_vec3.normalize(normal, normal);

                                            for (var k = 0; k < 4; k++) {
                                                normalAttr.set(vertexOffset + k, normal);
                                                if (hasColor) {
                                                    colorAttr.set(vertexOffset + k, color);
                                                }
                                            }

                                            for (var k = 0; k < 6; k++) {
                                                indices[triangleOffset * 3 + k] = quadToTriangle[k] + vertexOffset;
                                            }

                                            vertexOffset += 4;
                                            triangleOffset += 2;

                                            len += sideLen;
                                        }
                                    }

                                    if (!instancing) {
                                        geometry.updateBoundingBox();
                                    }

                                    geometry.dirty();

                                    return {
                                        vertexOffset: vertexOffset,
                                        triangleOffset: triangleOffset
                                    };
                                },

                                _getRegionLinesGeoInfo: function(region, geometry) {
                                    var vertexCount = 0;
                                    var triangleCount = 0;
                                    region.geometries.forEach(function(geo) {
                                        var exterior = geo.exterior;
                                        var interiors = geo.interiors;
                                        vertexCount += geometry.getPolylineVertexCount(exterior);
                                        triangleCount += geometry.getPolylineTriangleCount(exterior);
                                        for (var i = 0; i < interiors.length; i++) {
                                            vertexCount += geometry.getPolylineVertexCount(interiors[i]);
                                            triangleCount += geometry.getPolylineTriangleCount(interiors[i]);
                                        }
                                    }, this);

                                    return {
                                        vertexCount: vertexCount,
                                        triangleCount: triangleCount
                                    };

                                },

                                _updateLinesGeometry: function(
                                    geometry, region, regionHeight, lineWidth, transform
                                ) {

                                    var geoInfo = this._getRegionLinesGeoInfo(region, geometry);

                                    geometry.resetOffset();
                                    geometry.setVertexCount(geoInfo.vertexCount);
                                    geometry.setTriangleCount(geoInfo.triangleCount);

                                    function convertToPoints3(polygon) {
                                        var points = new Float64Array(polygon.length * 3);
                                        var offset = 0;
                                        var pos = [];
                                        for (var i = 0; i < polygon.length; i++) {
                                            pos[0] = polygon[i][0];
                                            // Add a offset to avoid z-fighting
                                            pos[1] = regionHeight + 0.1;
                                            pos[2] = polygon[i][1];
                                            Geo3DBuilder_vec3.transformMat4(pos, pos, transform);

                                            points[offset++] = pos[0];
                                            points[offset++] = pos[1];
                                            points[offset++] = pos[2];
                                        }
                                        return points;
                                    }

                                    var whiteColor = [1, 1, 1, 1];
                                    region.geometries.forEach(function(geo) {
                                        var exterior = geo.exterior;
                                        var interiors = geo.interiors;

                                        geometry.addPolyline(convertToPoints3(exterior), whiteColor, lineWidth);

                                        for (var i = 0; i < interiors.length; i++) {
                                            geometry.addPolyline(convertToPoints3(interiors[i]), whiteColor, lineWidth);
                                        }
                                    });

                                    geometry.updateBoundingBox();
                                },

                                _moveRegionToCenter: function(polygonMesh, linesMesh, hasLine) {
                                    var polygonGeo = polygonMesh.geometry;
                                    var linesGeo = linesMesh.geometry;

                                    var bbox = polygonMesh.geometry.boundingBox;
                                    var cp = bbox.min.clone().add(bbox.max).scale(0.5);
                                    var offset = cp._array;

                                    bbox.min.sub(cp);
                                    bbox.max.sub(cp);

                                    var polygonPosArr = polygonGeo.attributes.position.value;
                                    for (var i = 0; i < polygonPosArr.length;) {
                                        polygonPosArr[i++] -= offset[0];
                                        polygonPosArr[i++] -= offset[1];
                                        polygonPosArr[i++] -= offset[2];
                                    }
                                    polygonMesh.position.copy(cp);

                                    if (hasLine) {
                                        linesGeo.boundingBox.min.sub(cp);
                                        linesGeo.boundingBox.max.sub(cp);

                                        var linesPosArr = linesGeo.attributes.position.value;
                                        for (var i = 0; i < linesPosArr.length;) {
                                            linesPosArr[i++] -= offset[0];
                                            linesPosArr[i++] -= offset[1];
                                            linesPosArr[i++] -= offset[2];
                                        }
                                        linesMesh.position.copy(cp);
                                    }
                                },

                                highlight: function(dataIndex) {
                                    var data = this._data;
                                    if (!data) {
                                        return;
                                    }

                                    var itemModel = data.getItemModel(dataIndex);
                                    var emphasisItemStyleModel = itemModel.getModel('emphasis.itemStyle');
                                    var emphasisColor = emphasisItemStyleModel.get('areaColor');
                                    var emphasisOpacity = util_retrieve.firstNotNull(
                                        emphasisItemStyleModel.get('opacity'),
                                        data.getItemVisual(dataIndex, 'opacity'),
                                        1
                                    );
                                    if (emphasisColor == null) {
                                        var color = data.getItemVisual(dataIndex, 'color');
                                        emphasisColor = external__echarts__default.a.color.lift(color, -0.4);
                                    }
                                    if (emphasisOpacity == null) {
                                        emphasisOpacity = data.getItemVisual(dataIndex, 'opacity');
                                    }
                                    var colorArr = util_graphicGL.parseColor(emphasisColor);
                                    colorArr[3] *= emphasisOpacity;

                                    this._setColorOfDataIndex(data, dataIndex, colorArr);
                                },

                                downplay: function(dataIndex) {

                                    var data = this._data;
                                    if (!data) {
                                        return;
                                    }

                                    var color = data.getItemVisual(dataIndex, 'color');
                                    var opacity = util_retrieve.firstNotNull(data.getItemVisual(dataIndex, 'opacity'), 1);

                                    var colorArr = util_graphicGL.parseColor(color);
                                    colorArr[3] *= opacity;

                                    this._setColorOfDataIndex(data, dataIndex, colorArr);
                                },

                                _setColorOfDataIndex: function(data, dataIndex, colorArr) {
                                    // Instancing
                                    if (this._polygonMesh) {
                                        for (var i = this._vertexRangeOfDataIndex[dataIndex * 2]; i < this._vertexRangeOfDataIndex[dataIndex * 2 + 1]; i++) {
                                            this._polygonMesh.geometry.attributes.color.set(i, colorArr);
                                            this._polygonMesh.geometry.dirty();
                                        }
                                    } else {
                                        var polygonMesh = this._polygonMeshesMap[data.getName(dataIndex)];
                                        if (polygonMesh) {
                                            var material = polygonMesh.material;
                                            material.set('color', colorArr);
                                        }
                                    }
                                    this._api.getZr().refresh();
                                }
                            };

                            /* harmony default export */
                            var common_Geo3DBuilder = (Geo3DBuilder);
                            // CONCATENATED MODULE: ./src/component/geo3D/Geo3DView.js







                            /* harmony default export */
                            var Geo3DView = (external__echarts__default.a.extendComponentView({

                                type: 'geo3D',

                                __ecgl__: true,

                                init: function(ecModel, api) {

                                    this._geo3DBuilder = new common_Geo3DBuilder(api);
                                    this.groupGL = new util_graphicGL.Node();

                                    this._lightRoot = new util_graphicGL.Node();
                                    this._sceneHelper = new common_SceneHelper(this._lightRoot);
                                    this._sceneHelper.initLight(this._lightRoot);

                                    this._control = new util_OrbitControl({
                                        zr: api.getZr()
                                    });
                                    this._control.init();
                                },

                                render: function(geo3DModel, ecModel, api) {
                                    this.groupGL.add(this._geo3DBuilder.rootNode);

                                    var geo3D = geo3DModel.coordinateSystem;

                                    if (!geo3D || !geo3D.viewGL) {
                                        return;
                                    }

                                    // Always have light.
                                    geo3D.viewGL.add(this._lightRoot);

                                    if (geo3DModel.get('show')) {
                                        geo3D.viewGL.add(this.groupGL);
                                    } else {
                                        geo3D.viewGL.remove(this.groupGL);
                                    }

                                    var control = this._control;
                                    control.setViewGL(geo3D.viewGL);

                                    var viewControlModel = geo3DModel.getModel('viewControl');
                                    control.setFromViewControlModel(viewControlModel, 0);

                                    this._sceneHelper.setScene(geo3D.viewGL.scene);
                                    this._sceneHelper.updateLight(geo3DModel);

                                    // Set post effect
                                    geo3D.viewGL.setPostEffect(geo3DModel.getModel('postEffect'), api);
                                    geo3D.viewGL.setTemporalSuperSampling(geo3DModel.getModel('temporalSuperSampling'));

                                    // Must update after geo3D.viewGL.setPostEffect
                                    this._geo3DBuilder.update(geo3DModel, geo3D, ecModel, api);
                                    var srgbDefineMethod = geo3D.viewGL.isLinearSpace() ? 'define' : 'undefine';
                                    this._geo3DBuilder.rootNode.traverse(function(mesh) {
                                        if (mesh.material) {
                                            mesh.material.shader[srgbDefineMethod]('fragment', 'SRGB_DECODE');
                                        }
                                    });

                                    control.off('update');
                                    control.on('update', function() {
                                        api.dispatchAction({
                                            type: 'geo3DChangeCamera',
                                            alpha: control.getAlpha(),
                                            beta: control.getBeta(),
                                            distance: control.getDistance(),
                                            center: control.getCenter(),
                                            from: this.uid,
                                            geo3DId: geo3DModel.id
                                        });
                                    });
                                },

                                afterRender: function(geo3DModel, ecModel, api, layerGL) {
                                    var renderer = layerGL.renderer;
                                    this._sceneHelper.updateAmbientCubemap(renderer, geo3DModel, api);

                                    this._sceneHelper.updateSkybox(renderer, geo3DModel, api);
                                },

                                dispose: function() {
                                    this._control.dispose();
                                }
                            }));
                            // EXTERNAL MODULE: ./node_modules/echarts/lib/coord/geo/fix/textCoord.js
                            var textCoord = __webpack_require__(22);
                            var textCoord_default = /*#__PURE__*/ __webpack_require__.n(textCoord);

                            // EXTERNAL MODULE: ./node_modules/echarts/lib/coord/geo/fix/geoCoord.js
                            var geoCoord = __webpack_require__(23);
                            var geoCoord_default = /*#__PURE__*/ __webpack_require__.n(geoCoord);

                            // CONCATENATED MODULE: ./src/coord/geo3D/Geo3D.js


                            var Geo3D_vec3 = glmatrix_default.a.vec3;
                            var Geo3D_mat4 = glmatrix_default.a.mat4;



                            // Geo fix functions
                            var geoFixFuncs = [textCoord_default.a, geoCoord_default.a];

                            function Geo3D(name, map, geoJson, specialAreas, nameMap) {

                                this.name = name;

                                this.map = map;

                                this.regionHeight = 0;

                                this.regions = [];

                                this._nameCoordMap = {};

                                this.loadGeoJson(geoJson, specialAreas, nameMap);

                                this.transform = Geo3D_mat4.identity(new Float64Array(16));

                                this.invTransform = Geo3D_mat4.identity(new Float64Array(16));

                                // Which dimension to extrude. Y or Z
                                this.extrudeY = true;

                                this.altitudeAxis;
                            }

                            Geo3D.prototype = {

                                constructor: Geo3D,

                                type: 'geo3D',

                                dimensions: ['lng', 'lat', 'alt'],

                                containPoint: function() {},

                                loadGeoJson: function(geoJson, specialAreas, nameMap) {
                                    var parseGeoJSON = external__echarts__default.a.parseGeoJSON || external__echarts__default.a.parseGeoJson;
                                    try {
                                        this.regions = geoJson ? parseGeoJSON(geoJson) : [];
                                    } catch (e) {
                                        throw 'Invalid geoJson format\n' + e;
                                    }
                                    specialAreas = specialAreas || {};
                                    nameMap = nameMap || {};
                                    var regions = this.regions;
                                    var regionsMap = {};
                                    for (var i = 0; i < regions.length; i++) {
                                        var regionName = regions[i].name;
                                        // Try use the alias in nameMap
                                        regionName = nameMap[regionName] || regionName;
                                        regions[i].name = regionName;

                                        regionsMap[regionName] = regions[i];
                                        // Add geoJson
                                        this.addGeoCoord(regionName, regions[i].center);

                                        // Some area like Alaska in USA map needs to be tansformed
                                        // to look better
                                        var specialArea = specialAreas[regionName];
                                        if (specialArea) {
                                            regions[i].transformTo(
                                                specialArea.left, specialArea.top, specialArea.width, specialArea.height
                                            );
                                        }
                                    }

                                    this._regionsMap = regionsMap;

                                    this._geoRect = null;

                                    geoFixFuncs.forEach(function(fixFunc) {
                                        fixFunc(this);
                                    }, this);
                                },

                                getGeoBoundingRect: function() {
                                    if (this._geoRect) {
                                        return this._geoRect;
                                    }
                                    var rect;

                                    var regions = this.regions;
                                    for (var i = 0; i < regions.length; i++) {
                                        var regionRect = regions[i].getBoundingRect();
                                        rect = rect || regionRect.clone();
                                        rect.union(regionRect);
                                    }
                                    // FIXME Always return new ?
                                    return (this._geoRect = rect || new external__echarts__default.a.graphic.BoundingRect(0, 0, 0, 0));
                                },

                                /**
                                 * Add geoCoord for indexing by name
                                 * @param {string} name
                                 * @param {Array.<number>} geoCoord
                                 */
                                addGeoCoord: function(name, geoCoord) {
                                    this._nameCoordMap[name] = geoCoord;
                                },

                                /**
                                 * @param {string} name
                                 * @return {module:echarts/coord/geo/Region}
                                 */
                                getRegion: function(name) {
                                    return this._regionsMap[name];
                                },

                                getRegionByCoord: function(coord) {
                                    var regions = this.regions;
                                    for (var i = 0; i < regions.length; i++) {
                                        if (regions[i].contain(coord)) {
                                            return regions[i];
                                        }
                                    }
                                },

                                setSize: function(width, height, depth) {
                                    this.size = [width, height, depth];

                                    var rect = this.getGeoBoundingRect();

                                    var scaleX = width / rect.width;
                                    var scaleZ = -depth / rect.height;
                                    var translateX = -width / 2 - rect.x * scaleX;
                                    var translateZ = depth / 2 - rect.y * scaleZ;

                                    var position = this.extrudeY ? [translateX, 0, translateZ] : [translateX, translateZ, 0];
                                    var scale = this.extrudeY ? [scaleX, 1, scaleZ] : [scaleX, scaleZ, 1];

                                    var m = this.transform;
                                    Geo3D_mat4.identity(m);
                                    Geo3D_mat4.translate(m, m, position);
                                    Geo3D_mat4.scale(m, m, scale);

                                    Geo3D_mat4.invert(this.invTransform, m);
                                },

                                dataToPoint: function(data, out) {
                                    out = out || [];

                                    var extrudeCoordIndex = this.extrudeY ? 1 : 2;
                                    var sideCoordIndex = this.extrudeY ? 2 : 1;

                                    var altitudeVal = data[2];
                                    // PENDING.
                                    if (isNaN(altitudeVal)) {
                                        altitudeVal = 0;
                                    }
                                    // lng
                                    out[0] = data[0];
                                    // lat
                                    out[sideCoordIndex] = data[1];

                                    if (this.altitudeAxis) {
                                        out[extrudeCoordIndex] = this.altitudeAxis.dataToCoord(altitudeVal);
                                    } else {
                                        out[extrudeCoordIndex] = 0;
                                    }
                                    // PENDING different region height.
                                    out[extrudeCoordIndex] += this.regionHeight;

                                    Geo3D_vec3.transformMat4(out, out, this.transform);

                                    return out;
                                },

                                pointToData: function(point, out) {
                                    // TODO
                                }
                            };

                            /* harmony default export */
                            var geo3D_Geo3D = (Geo3D);
                            // CONCATENATED MODULE: ./src/coord/geo3DCreator.js






                            function resizeGeo3D(geo3DModel, api) {
                                // Use left/top/width/height
                                var boxLayoutOption = geo3DModel.getBoxLayoutParams();

                                var viewport = layout_default.a.getLayoutRect(boxLayoutOption, {
                                    width: api.getWidth(),
                                    height: api.getHeight()
                                });

                                // Flip Y
                                viewport.y = api.getHeight() - viewport.y - viewport.height;

                                this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, api.getDevicePixelRatio());

                                var geoRect = this.getGeoBoundingRect();
                                var aspect = geoRect.width / geoRect.height * (geo3DModel.get('aspectScale') || 0.75);

                                var width = geo3DModel.get('boxWidth');
                                var depth = geo3DModel.get('boxDepth');
                                var height = geo3DModel.get('boxHeight');
                                if (height == null) {
                                    height = 5;
                                }
                                if (isNaN(width) && isNaN(depth)) {
                                    // Default to have 100 width
                                    width = 100;
                                }
                                if (isNaN(depth)) {
                                    depth = width / aspect;
                                } else if (isNaN(width)) {
                                    width = depth / aspect;
                                }

                                this.setSize(width, height, depth);

                                this.regionHeight = geo3DModel.get('regionHeight');

                                if (this.altitudeAxis) {
                                    this.altitudeAxis.setExtent(0, Math.max(height - this.regionHeight, 0));
                                }
                            }

                            function updateGeo3D(ecModel, api) {

                                var altitudeDataExtent = [Infinity, -Infinity]

                                ecModel.eachSeries(function(seriesModel) {
                                    if (seriesModel.coordinateSystem !== this) {
                                        return;
                                    }
                                    if (seriesModel.type === 'series.map3D') {
                                        return;
                                    }
                                    // Get altitude data extent.
                                    var data = seriesModel.getData();
                                    var altDim = seriesModel.coordDimToDataDim('alt')[0];
                                    if (altDim) {
                                        // TODO altitiude is in coords of lines.
                                        var dataExtent = data.getDataExtent(altDim, true);
                                        altitudeDataExtent[0] = Math.min(
                                            altitudeDataExtent[0], dataExtent[0]
                                        );
                                        altitudeDataExtent[1] = Math.max(
                                            altitudeDataExtent[1], dataExtent[1]
                                        );
                                    }
                                }, this);
                                // Create altitude axis
                                if (altitudeDataExtent && isFinite(altitudeDataExtent[1] - altitudeDataExtent[0])) {
                                    var scale = external__echarts__default.a.helper.createScale(
                                        altitudeDataExtent, {
                                            type: 'value',
                                            // PENDING
                                            min: 'dataMin',
                                            max: 'dataMax'
                                        }
                                    );
                                    this.altitudeAxis = new external__echarts__default.a.Axis('altitude', scale);
                                    // Resize again
                                    this.resize(this.model, api);
                                }
                            }


                            if (true) {
                                var mapNotExistsError = function(name) {
                                    console.error('Map ' + name + ' not exists. You can download map file on http://echarts.baidu.com/download-map.html');
                                };
                            }


                            var idStart = 0;

                            var geo3DCreator = {

                                dimensions: geo3D_Geo3D.prototype.dimensions,

                                create: function(ecModel, api) {

                                    var geo3DList = [];

                                    if (!external__echarts__default.a.getMap) {
                                        throw new Error('geo3D component depends on geo component');
                                    }

                                    function createGeo3D(componentModel, idx) {

                                        var geo3D = geo3DCreator.createGeo3D(componentModel);

                                        // FIXME
                                        componentModel.__viewGL = componentModel.__viewGL || new core_ViewGL();

                                        geo3D.viewGL = componentModel.__viewGL;

                                        componentModel.coordinateSystem = geo3D;
                                        geo3D.model = componentModel;

                                        geo3DList.push(geo3D);

                                        // Inject resize
                                        geo3D.resize = resizeGeo3D;
                                        geo3D.resize(componentModel, api);

                                        geo3D.update = updateGeo3D;
                                    }

                                    ecModel.eachComponent('geo3D', function(geo3DModel, idx) {
                                        createGeo3D(geo3DModel, idx);
                                    });

                                    ecModel.eachSeriesByType('map3D', function(map3DModel, idx) {
                                        var coordSys = map3DModel.get('coordinateSystem');
                                        if (coordSys == null) {
                                            coordSys = 'geo3D';
                                        }
                                        if (coordSys === 'geo3D') {
                                            createGeo3D(map3DModel, idx);
                                        }
                                    });

                                    ecModel.eachSeries(function(seriesModel) {
                                        if (seriesModel.get('coordinateSystem') === 'geo3D') {
                                            if (seriesModel.type === 'series.map3D') {
                                                return;
                                            }
                                            var geo3DModel = seriesModel.getReferringComponents('geo3D')[0];
                                            if (!geo3DModel) {
                                                geo3DModel = ecModel.getComponent('geo3D');
                                            }

                                            if (!geo3DModel) {
                                                throw new Error('geo "' + util_retrieve.firstNotNull(
                                                    seriesModel.get('geo3DIndex'),
                                                    seriesModel.get('geo3DId'),
                                                    0
                                                ) + '" not found');
                                            }

                                            seriesModel.coordinateSystem = geo3DModel.coordinateSystem;
                                        }
                                    });

                                    return geo3DList;
                                },

                                createGeo3D: function(componentModel) {

                                    var mapData = componentModel.get('map');
                                    var name;
                                    if (typeof mapData === 'string') {
                                        name = mapData;
                                        mapData = external__echarts__default.a.getMap(mapData);
                                    } else {
                                        if (mapData && mapData.features) {
                                            mapData = {
                                                geoJson: mapData
                                            };
                                        }
                                    }
                                    if (true) {
                                        if (!mapData) {
                                            mapNotExistsError(mapData);
                                        }
                                        if (!mapData.geoJson.features) {
                                            throw new Error('Invalid GeoJSON for map3D');
                                        }
                                    }
                                    if (name == null) {
                                        name = 'GEO_ANONYMOUS_' + idStart++;
                                    }

                                    return new geo3D_Geo3D(
                                        name + idStart++, name,
                                        mapData && mapData.geoJson, mapData && mapData.specialAreas,
                                        componentModel.get('nameMap')
                                    );
                                }
                            };

                            external__echarts__default.a.registerCoordinateSystem('geo3D', geo3DCreator);

                            /* harmony default export */
                            var coord_geo3DCreator = (geo3DCreator);
                            // CONCATENATED MODULE: ./src/component/geo3D.js







                            external__echarts__default.a.registerAction({
                                type: 'geo3DChangeCamera',
                                event: 'geo3dcamerachanged',
                                update: 'series:updateCamera'
                            }, function(payload, ecModel) {
                                ecModel.eachComponent({
                                    mainType: 'geo3D',
                                    query: payload
                                }, function(componentModel) {
                                    componentModel.setView(payload);
                                });
                            });
                            // CONCATENATED MODULE: ./src/component/globe/GlobeModel.js







                            function defaultId(option, idx) {
                                option.id = option.id || option.name || (idx + '');
                            }
                            var GlobeModel = external__echarts__default.a.extendComponentModel({

                                        type: 'globe',

                                        layoutMode: 'box',

                                        coordinateSystem: null,

                                        init: function() {
                                            GlobeModel.superApply(this, 'init', arguments);

                                            external__echarts__default.a.util.each(this.option.layers, function(layerOption, idx) {
                                                external__echarts__default.a.util.merge(layerOption, this.defaultLayerOption);
                                                defaultId(layerOption, idx);
                                            }, this);
                                        },

                                        mergeOption: function(option) {
                                            // TODO test
                                            var oldLayers = this.option.layers;
                                            this.option.layers = null;
                                            GlobeModel.superApply(this, 'mergeOption', arguments);

                                            function createLayerMap(layers) {
                                                return external__echarts__default.a.util.reduce(layers, function(obj, layerOption, idx) {
                                                    defaultId(layerOption, idx);
                                                    obj[layerOption.id] = layerOption;
                                                    return obj;
                                                }, {});
                                            }
                                            if (oldLayers && oldLayers.length) {
                                                var newLayerMap = createLayerMap(option.layers);
                                                var oldLayerMap = createLayerMap(oldLayers);
                                                for (var id in newLayerMap) {
                                                    if (oldLayerMap[id]) {
                                                        external__echarts__default.a.util.merge(oldLayerMap[id], newLayerMap[id], true);
                                                    } else {
                                                        oldLayers.push(option.layers[id]);
                                                    }
                                                }
                                                // Copy back
                                                this.option.layers = oldLayers;
                                            }
                                            // else overwrite

                                            // Set default
                                            external__echarts__default.a.util.each(this.option.layers, function(layerOption) {
                                                external__echarts__default.a.util.merge(layerOption, this.defaultLayerOption);
                                            }, this);
                                        },

                                        optionUpdated: function() {
                                            this.updateDisplacementHash();
                                        },

                                        defaultLayerOption: {
                                            show: true,
                                            type: 'overlay'
                                        },

                                        defaultOption: {

                                            show: true,

                                            zlevel: -10,

                                            // Layout used for viewport
                                            left: 0,
                                            top: 0,
                                            width: '100%',
                                            height: '100%',

                                            environment: 'auto',

                                            baseColor: '#fff',

                                            // Base albedo texture
                                            baseTexture: '',

                                            // Height texture for bump mapping and vertex displacement
                                            heightTexture: '',

                                            // Texture for vertex displacement, default use heightTexture
                                            displacementTexture: '',
                                            // Scale of vertex displacement, available only if displacementTexture is set.
                                            displacementScale: 0,

                                            // Detail of displacement. 'low', 'medium', 'high', 'ultra'
                                            displacementQuality: 'medium',

                                            // Globe radius
                                            globeRadius: 100,

                                            // Globe outer radius. Which is max of altitude.
                                            globeOuterRadius: 150,

                                            // Shading of globe
                                            shading: